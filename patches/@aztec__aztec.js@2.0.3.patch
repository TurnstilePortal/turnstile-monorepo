diff --git a/dest/contract/batch_call.d.ts b/dest/contract/batch_call.d.ts
index d48cbe1aeca0085d4681e3aae0f7d2b2b8c7297b..7a82e454e0007bf7d83f54659499a843e937adb3 100644
--- a/dest/contract/batch_call.d.ts
+++ b/dest/contract/batch_call.d.ts
@@ -5,8 +5,8 @@ import { BaseContractInteraction } from './base_contract_interaction.js';
 import type { RequestMethodOptions, SendMethodOptions, SimulateMethodOptions } from './interaction_options.js';
 /** A batch of function calls to be sent as a single transaction through a wallet. */
 export declare class BatchCall extends BaseContractInteraction {
-    protected calls: BaseContractInteraction[];
-    constructor(wallet: Wallet, calls: BaseContractInteraction[]);
+    protected calls: (BaseContractInteraction | ExecutionPayload)[];
+    constructor(wallet: Wallet, calls: (BaseContractInteraction | ExecutionPayload)[]);
     /**
      * Create a transaction execution request that represents this batch, encoded and authenticated by the
      * user's wallet, ready to be simulated.
@@ -35,6 +35,7 @@ export declare class BatchCall extends BaseContractInteraction {
      * @returns The result of the transaction as returned by the contract function.
      */
     simulate(options: SimulateMethodOptions): Promise<any>;
-    private getRequests;
+    protected getExecutionPayloads(): Promise<ExecutionPayload[]>;
+
 }
 //# sourceMappingURL=batch_call.d.ts.map
\ No newline at end of file
diff --git a/dest/contract/batch_call.js b/dest/contract/batch_call.js
index b8745e5570d60c77ffa3f33173025f7adaeaad1f..763b6b8029141a90f9159cf19e2f8c59329900b0 100644
--- a/dest/contract/batch_call.js
+++ b/dest/contract/batch_call.js
@@ -36,9 +36,11 @@ import { BaseContractInteraction } from './base_contract_interaction.js';
    * @param options - An optional object containing additional configuration for the request generation.
    * @returns An execution payload wrapped in promise.
    */ async request(options = {}) {
-        const requests = await this.getRequests();
-        const combinedPayload = mergeExecutionPayloads(requests);
-        return new ExecutionPayload(combinedPayload.calls, combinedPayload.authWitnesses.concat(options.authWitnesses ?? []), combinedPayload.capsules.concat(options.capsules ?? []), combinedPayload.extraHashedArgs);
+        const executionPayloads = await this.getExecutionPayloads();
+        const feeExecutionPayload = options.fee?.paymentMethod ? await options.fee.paymentMethod.getExecutionPayload() : undefined;
+        const finalExecutionPayload = feeExecutionPayload ?
+            mergeExecutionPayloads([feeExecutionPayload, ...executionPayloads]) : mergeExecutionPayloads(...executionPayloads);
+        return finalExecutionPayload;
     }
     /**
    * Simulate a transaction and get its return values
@@ -49,7 +51,7 @@ import { BaseContractInteraction } from './base_contract_interaction.js';
    * @param options - An optional object containing additional configuration for the transaction.
    * @returns The result of the transaction as returned by the contract function.
    */ async simulate(options) {
-        const { indexedExecutionPayloads, utility } = (await this.getRequests()).reduce((acc, current, index)=>{
+        const { indexedExecutionPayloads, utility } = (await this.getExecutionPayloads()).reduce((acc, current, index)=>{
             const call = current.calls[0];
             if (call.type === FunctionType.UTILITY) {
                 acc.utility.push([
@@ -101,7 +103,16 @@ import { BaseContractInteraction } from './base_contract_interaction.js';
         });
         return results;
     }
-    async getRequests() {
-        return await Promise.all(this.calls.map((c)=>c.request()));
+    async getExecutionPayloads() {
+        return await Promise.all(
+            this.calls.map(i => {
+                if ('request' in i) {
+                    return i.request();
+                } else {
+                    return i;
+                }
+            })
+        )
     }
+
 }
diff --git a/dest/contract/interaction_options.d.ts b/dest/contract/interaction_options.d.ts
index 38f4040606c68d9de022183bdff589cc8429be52..fe2b73822b91e449229c7547ae5ff81fb6fdd626 100644
--- a/dest/contract/interaction_options.d.ts
+++ b/dest/contract/interaction_options.d.ts
@@ -12,6 +12,7 @@ export type RequestMethodOptions = {
     authWitnesses?: AuthWitness[];
     /** Extra capsules to use during execution */
     capsules?: Capsule[];
+    fee?: UserFeeOptions;
 };
 /**
  * Represents options for calling a (constrained) function in a contract.
diff --git a/src/contract/batch_call.ts b/src/contract/batch_call.ts
index 091f53dfe9e2e87407cc5dc53227223392bf48b6..ef73f6271b4e2f8d856b5c7a0edf8c427535834d 100644
--- a/src/contract/batch_call.ts
+++ b/src/contract/batch_call.ts
@@ -10,7 +10,7 @@ import type { RequestMethodOptions, SendMethodOptions, SimulateMethodOptions } f
 export class BatchCall extends BaseContractInteraction {
   constructor(
     wallet: Wallet,
-    protected calls: BaseContractInteraction[],
+    protected interactions: (BaseContractInteraction | ExecutionPayload)[],
   ) {
     super(wallet);
   }
@@ -44,14 +44,15 @@ export class BatchCall extends BaseContractInteraction {
    * @returns An execution payload wrapped in promise.
    */
   public async request(options: RequestMethodOptions = {}): Promise<ExecutionPayload> {
-    const requests = await this.getRequests();
-    const combinedPayload = mergeExecutionPayloads(requests);
-    return new ExecutionPayload(
-      combinedPayload.calls,
-      combinedPayload.authWitnesses.concat(options.authWitnesses ?? []),
-      combinedPayload.capsules.concat(options.capsules ?? []),
-      combinedPayload.extraHashedArgs,
-    );
+    const executionPayloads = await this.getExecutionPayloads();
+    const feeExecutionPayload = options.fee.paymentMethod ?
+      await options.fee.paymentMethod.getExecutionPayload()
+      : undefined;
+
+      const finalExecutionPayload= feeExecutionPayload
+      ? mergeExecutionPayloads([feeExecutionPayload, ...executionPayloads])
+      : mergeExecutionPayloads([...executionPayloads]);
+      return finalExecutionPayload
   }
 
   /**
@@ -64,7 +65,7 @@ export class BatchCall extends BaseContractInteraction {
    * @returns The result of the transaction as returned by the contract function.
    */
   public async simulate(options: SimulateMethodOptions): Promise<any> {
-    const { indexedExecutionPayloads, utility } = (await this.getRequests()).reduce<{
+    const { indexedExecutionPayloads, utility } = (await this.getExecutionPayloads()).reduce<{
       /** Keep track of the number of private calls to retrieve the return values */
       privateIndex: 0;
       /** Keep track of the number of public calls to retrieve the return values */
@@ -138,7 +139,14 @@ export class BatchCall extends BaseContractInteraction {
     return results;
   }
 
-  private async getRequests() {
-    return await Promise.all(this.calls.map(c => c.request()));
+  protected async getExecutionPayloads() {
+    return await Promise.all(
+      this.interactions.map(i => {
+         if ('request' in i) {
+          return i.request();
+        }
+          return i;
+      }),
+    );
   }
 }
diff --git a/src/contract/interaction_options.ts b/src/contract/interaction_options.ts
index 65f51a793b0bbff95ea7fafefcf0339f5801ddf0..3273bcfae8568f862153515e231e75fcc93ee84a 100644
--- a/src/contract/interaction_options.ts
+++ b/src/contract/interaction_options.ts
@@ -3,6 +3,7 @@ import type { Fr } from '@aztec/foundation/fields';
 import type { AuthWitness } from '@aztec/stdlib/auth-witness';
 import type { AztecAddress } from '@aztec/stdlib/aztec-address';
 import type { Capsule } from '@aztec/stdlib/tx';
+import type { FeePaymentMethod } from '../fee/fee_payment_method.js';
 
 /**
  * Represents the options to configure a request from a contract interaction.
@@ -13,6 +14,8 @@ export type RequestMethodOptions = {
   authWitnesses?: AuthWitness[];
   /** Extra capsules to use during execution */
   capsules?: Capsule[];
+    /** Fee payment method to embed in the interaction request */
+  fee?: FeePaymentMethodOption;
 };
 
 /**
