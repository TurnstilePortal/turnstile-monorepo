{
  "transpiled": true,
  "noir_version": "1.0.0-beta.3+0000000000000000000000000000000000000000",
  "name": "Portal",
  "functions": [
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          }
        },
        "parameters": [
          {
            "name": "l1_portal",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "token_contract_class",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "shield_gateway_beacon",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "_log_claim",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JwACBAEoAAABBIBIJwAABAMnAgUEBCcCBgQAHxgABgAFgEQdAIBGgEYGLgiARAABLgiARQACLgiARgADLgiARwAEJQAAAF4lAAAAXygCAAEEgEgnAgIEADsNAAEAAiYlAAACZh4CAAYAHgIABwAzOAAGAAcACCcCBgEBJAIACAAAAIglAAACjx4CAAYBHgIABwAKOAYHCCQCAAgAAACkJQAAAqEcDAMGACkCAAMAIxDODy0IAQcnAggEBgAQAQgBJwMHBAEAKAcCCC0MCAktDgEJACgJAgktDgIJACgJAgktDgYJACgJAgktDgQJACgJAgktDgMJJwIBAAAtCAECJwIDBAYAEAEDAScDAgQBACgCAgMtDAMELQ4BBAAoBAIELQ4BBAAoBAIELQ4BBAAoBAIELQ4BBAAoBAIELQ4BBC0IAQEAAAECAS0OAgEnAgIEBScCAwQBJwIEBAAtDAQFIwAAAWQMOAUCBCQCAAQAAAHuIwAAAXYtDQEDJwIFBAUGKAUCAScCBwQDADgFBwYtCAEEABABBgEnAwQEAQAoBAIGLQ4FBgAoBgIGLQ4FBicCBwQDADgEBwYAKAMCBy4EAAeAAy4EAAaABC4EAAWABSUAAAKzACgEAgYtDQYFJwIHBAIAOAYHAzcNAAMABSYnAgYEBQw4BQYIJAIACAAAAgUlAAAC+QAoBwIGADgGBQgtDQgELQ0BBicCCQQFDDgFCQokAgAKAAACLiUAAAL5LgQABoADKACABAQABiUAAAMLLgiABQAIACgIAgkAOAkFCi0OBAotDggBADgFAwQtDAQFIwAAAWQoAIAEBHgADQAAAIAEgAMkAIADAAACjioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFnqE7fY/72mw8AQECJgEAgAOABYAHLgCAA4AILgCABIAJCwCACIAHgAokAIAKAAAC+C4BgAiABi4CgAaACQEAgAgAAoAIAQCACQACgAkjAAACxyYqAQABBeidCf6hES0OPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAMmIwAAAzEuAIADgAUjAAADmC4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAOELgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAANTKAGABQQAAQMAgAYAAoAGIwAAA5gmLgAYyhjK",
      "debug_symbols": "7ZzbTuMwEIbfpde58Nhje8yrrBAqEFClqkWlrLRCvPvG3TpJHW+DICLx4QbhalL/83lSjyeO31eP9f3b891m97R/Xd38el9t9w/r42a/a1rvH9Xq/rDZbjfPd/2PV8z+AcZOF7y+rHe2/XpcH46rG+BKYLWqd4/2f61M8yVPm21tW/KjGtozzp05Q96z5gFrVCjP1qgkttaaAsaEZM7GJJnsG99WjX45jX7jOgEA84P6YSL+klr+NMYfpNbOWglxXb+R2jlrFNBAP02t/6S5p9/2wsVP9CLgR3pRwV5AUHsLATI20gsSuF6QuBqJQSlVG4Ma/DHEsN+NCtUp6vXxH0UT3hX4GUacLhTZ6yR88TrztesUhq4jLsE5J6DjJk2AhDbt0DDddQAhWxLUQusAA6mALTfOVoAYsQUy2A41GdkFHzf/glaZxToqldMgjbqwtcI1RSqceKzCdaTCTazETaTEOYuUOGcqUuHhdDMG4TJW4ZHOnJxjrMIjnfK5ELEKj3UCwlgnIFzuBKS4WwYqpBFbIqfBAFxfMQrN3PcKzbsVjRB4IhJe+mVNZLlT5kxE1HKzn7mIlBjxiOgSIz6REiM+keXm9DMRoeWmrnMRWe4qZCYiC66vzUVkueumeYgIVrJ4n0hZ6XlEFlzDnItIydB8IiVD84jwkqH5REqG5hGR+c011O5xEX3BjojG7IgYxhwRAwEiyd01nPWJWB/TW80GfMxgHE0G42jSH0dc8D6R6XxMrhYw9BEyGEfIYBx5clWagI/J5cJDH0VylZSAj8nVRoY+YgbjiBmMY3p7WAI+ZjA/qvTXHagSWXdo1vo49iacVu6dJUNsAEQnMujTAUnkTp8MyIJf6ZkJSImQSyAG8yvAi/aRBPXeHD+Xm9Hk9yDvOhHJSox4RNIrK32bSH4bi0aI8BIjPpESIx4Rkd/mM6L2YS8RDInkt7Ho+uNvmV6p7dtESox4RGR+W63GiOS31WqEyIJPjpmJiM5v9h0jkt92vBEiqVTQJiSSXxY/QiTD14zGiJTfkUsiipUsvk/ko2n+Xh826/ttfT4y9Olt99A7QfT456X2DhN9Oewf6se3Q22PFe1OFLVkAXUFihrSNhMGISpAcWtP67RNDhVwZZtwaja23DQaGh1/AQ==",
      "brillig_names": [
        "_log_claim"
      ]
    },
    {
      "name": "claim_shielded",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_notes",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "storage_read",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "claim_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_notes",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "_claim_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_claim_public"
      ]
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "15261044312996284873": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 33
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "log_plaintext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "7Z3brvS4da3fpa99IZKTp7xKsBE4iRM0YNiB7Wxgw/C77/qXlqT6XdJSLTYlnr5cGN1pqYoc45M056AW6++//Ocf/v1///vffv3Tf/35r7/8y7/+/Zc//vk/fv+3X//8p8e//f0fv/vl3//y6x//+Ot//9vz//uX6cf/+Onj+L/+z+//9ONf//q33//lb7/8i9KTnn73yx/+9J8f/xzV4zP+69c//uHHv7l//O7l+DDZz6ODNuuxYdo51OrlUGun7WMl/uP//O4Xr7KMxrplND58PRox8fNQceFlNDrHaOJkPo+Oyn89GrfK6H581D+NxmQZjahlNFZORhOWD/bTq1OyPxrtzDoaN8nJaMyklhmbydptPHbv4BhWsyaR54N/DMjWNiBX24B8bQMKtQ0o3j6gxw1o+WwRNZ2MXsewfLJR2zjcj8GHqeXBq5YHrysfvHFxHXzwT4Pf+WC1TlS08v80UTPKRO9/utntOW4n438LjrblwbuWB+8rH3y26yOMMtFYYKLOrxON0z+VKHGqbUCqtgHpEgNy24D8Pw/I1DYgqW1AtrYBlXgKuTUYUdPLgAo8WZTR64Cc+ecBhdoGFEsMSK0D8v88IDUVuFVvzzKrnfr6YCVeloE8prKN40eI9PfXbCrsZVOP2+/HXNVAc9UDzdUMNFcZaK52oLm6gebqB5prGGiucZy5qoHqJjVQ3aQGqpvUQHWTkoHmOlDdpAaqm3RfzxxZDnZWvc61r3uTW0Ih9/wGzzLX2u9Ndv1kZY38NNeP8dd+vzkbf+33kLPx195PnY2/+h5pfR/tMX57cq0r59eVn8c/h23px82zrb5LyjlbU/0zK+tsq++Uss62+l4p62yvrkg+vkTu+BJ7x5dkeqi67UuCevmSPE8+ictbG8aacAKVXwDU01b2ae93jg3TUiMGE0+OjWFZ6o3x52M/JhpGmWgcZKIyjTJRNcpE9SgTNaNMVEaZqB1lom6UiY5SGckolZHkqYysrC8de62/nqh3apmpd8Z8fXC215mVnUaZaaY/4ZD1cCM+/nOTlOmF/2M5P74k3PEl8YYvidMdX6Lu+BJ9x5eYO75E7vgSe8eXuDu+5I4rPt5xxccbrng9TXd8ibrjS/QdX2Lu+BK540vsHV/i7vgSf8eXhDu+5I4rXt1xxas7rnh1xxWv7rji1R1XvLrjild3XPHqjite3XHFqzuueH3HFa/vuOL1HVe8vuOK13dc8fqOK17fccXrO654fccVr++44s0dV7y544o3d1zx5o4r3txxxZs7rnhzxxVv7rjizR1XvLnjipc7rni544qXO654ueOKlzuueLnjipc7rni544qXO654ueOKt3dc8faOK97eccXbO654e8cVb++44u0dV7y944q3d1zx9o4r3uW54r2sr5X6cLLc75e/3fHb8q34eTSqqtHoqkZjqhqNVDUaW9VoXFWj8VWNJlQ1mljTaHxV92Jf1b3YV3Uv9lXdi31V92Jf1b3YV3Uv9lXdi31V92Jf1b04VHUvDlXdizPtCP7lW5b6jlc5daZds0++xN3xJf6OLwl3fEm84UsyvZR68iXqji/Rd3zJHVd8vOOKj3dc8fGOKz7eccXHO674eMMVb6bpji9Rd3yJvuNLzB1fInd8ib3jS9wdX+Lv+JJwx5fcccWrO654dccVr+644tUdV7y644pXd1zx6o4rXt1xxas7rnh1xxWv77ji9R1XvL7jitd3XPH6jite33HF6zuueH3HFa/vuOL1HVe8ueOKN3dc8eaOK97cccWbO654c8cVb+644s0dV7y544o3d1zxcscVL3dc8XLHFS93XPFyxxUvd1zxcscVL3dc8XLHFS93XPH2jive3nHF2zuueHvHFW/vuOLtHVe8veOKt3dc8bajnZvcuhn8NOmfDv6YaUebWn49U9fRrpYnM+1oW8uTmXa0r+XJTDva2PJkpnmeh9dtsfbVL5gbZ5sevWt69P7+0Xu1HOy9xJMLKt8P7hgXBpprHGeufhpormqgueqB5moGmqsMNFc70FzdQHMdqG7yA9VNfqC6KQxUN4WB6qYwUN0UBqqbQl/P169+MNaEvu7DX/1grIm134e//sFPE2u/t56Nv/b75dn4a78Hno1far/WM/7wpInVd4RZZ1v9MyvrbKvvCrPOtvq+MOtsq6pIHiOSqaq64WNEVVUCHyMq8WwP6+YFUZ0crB5rectAvNuG/+Mfdx6kdn2QPlqFrw8O60M32Keac95EQSaDLru6CLrs6mLRZVcXhy67unh02dUlDKvL+gpTCPYnXV6P1VNchqzVtCVhsidGWI+NWp198KMhWT74cU9bjzaPtvTDnog9FdujJuyp2R6FPTXb020vpH+y52Ou3fY3O3OVgeZaeR+ip2mZq56e1oV25/roHpaDH5WHe5lr5b1F1rnW3i/EdQlPT8afzFUt92ExZzdtFaIsRz/+2W6xo456lqb2lqGgNLWX6+Wk0bWXygWlqb1MLShN7SViQWlqrygLSiNIcyRN7bl5QWlqj84LSkM1fCgN1fChNFTDR9IYquFDaaiGD6WhGj6Uhmr4UBpBmiNpqIYPpaEaPpSGavhQGqrhQ2moho+kEarhQ2mohg+loRo+lIZq+FAaQZojaaiGD6WhGj6Uhmr4UBqq4UNpqIaPpLFUw4fSUA0fSkM1fCgN1fChNII0R9JQDR9KQzV8KA3V8KE0VMOH0lANH0njqIYPpaEaPpSGavhQGqrhQ2kEaY6koRo+lIZq+FAaquFDaaiGD6WhGj6SxlMNH0pDNXwoDdXwoTRUw4fSCNIcSUM1fCgN1fChNFTDh9JQDR9KQzV8JE2gGj6Uhmr4UBqq4UNpqIYPpRGkOZKGavhQGqrhQ2mohg+loRo+lIZq+EiaSDV8KA3V8KE0VMOH0lANH0ojQ0jzMdUxqtuPqY5RrX5Mtavq0yyjeFTVr1Ptqpr8eqqVV4daqWmZqnrZTNxOlVdwZ8OvvMo6G37lldDZ8CuvVrQyy49Ja/00jt9erZi4fLAStR39+TMTdhKE2Rem9t8uKCZM7T90UEyYyqumcsJUXmOVE6b6iqyQMLX/dFg5YaqvIrMI8zHV6ivOfFMdozr9mKr0NNWv+m1b/a9fZZxqidLnWz8u75ef/FP26cev9n9c3slysLNPBMdpnmvoaq5++QE39+PT/nmusa+5qnWu7mWuRX6DqdRc1UBz1QPN1Qw0Vxlornagubqu5rou3zgXXufaV9309Vz7qpu+nmtfddOXczV91U1fz7WvuunrufZVN309177qpq/nKgPNta+66eu5DlQ3mYHqpky//zG5JegxU1DPw//4EnXHl+g7vsTc8SVyx5fYO77E3fEl/o4vCXd8SbzhS+wdV7y944q3d1zx9o4r3t5xxds7rnh7xxVv77ji7R1XvL3jind3XPHujive3XHFuzuueHfHFe/uuOLdHVe8u+OKd3dc8e6OK97fccX7O654f8cV7++44v0dV7y/44r3d1zx/o4r3t9xxfs7rvhwxxUf7rjiwx1XfLjjig93XPHhjis+3HHFhzuu+HDHFR/uuOLjHVd8vOOKj3dc8fGOKz7eccXHO674eMcVH++44uMdV3ymv36d4pLVG2XO/nbXr+/XTtsagPZ7L/6HaVkwCCaeHBvD8oZ1jD8f+5ioy/R3sg1MVI0yUd3PRN26LjZN+nWmZpiZyjAztcPM1A0zUz/MTPPUJkqWw42I/3qmj8xjOfhx6zdnsthFQ+Xd02sJZudg7ad1M5HnFx7cPNU4zFQz/X1pE1NV40xVjzNVM85UZZyp2nGm6saZqh9nquNUS2qcakmPUy3pcaolPU61pMepljL9VWwTUx2nWtLjVEt6nGpJt1stfQy/3Qrox/BNu1XNx/DbrVQ+ht9u9fEx/HYrio/hS9vDb/fJ/zH8dp/mH8Nv9wn9Mfy2n7qm7aeutP3UlbafutL2U1fafupm+qvhYsNv+6krbT91pe2nrrT91JW2n7q27aeubfupa9t+6tq2n7qZ/nK/2PDbfuratp+6tu2nrm37qWvbfuq6tp+6ru2nrmv7qevafupm2j2j2PDbfuq6tp+6ru2nrmv7qevafur6tp+6vu2nrm/7qevbfupm2sGm2PDbfur6tp+6vu2nrm/7qevbfuqGtp+6oe2nbmj7qRvafupm2kWq2PDbfuqGtp+6oe2nbmj7qRvafurGtp+6se2nbmz7qRvbfupm2smt2PDbfurGtp+6se2nbmz7qRubfur6qemnrp+afur6qemnrp+afur6qemnrp+afur6qemnrp+afur6hveC+xh+20/dhvds+xh+20/dhvdW+xh+20/dhvdA+xh+20/dhvcq+xh+20/dhvcU+xh+20/dhvf++hh+20/dhvfo+hh+20/dhvfS+hh+20/dhve8+hh+20/dtvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1P5tvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1P5tvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1P5tvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1P5tvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1P5tvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1P5tvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1P5tvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1P5tvem8m3vTeXb3pvKt703lW97byrf9t5Uvu29qXzbe1OFtvemCm3vTRXa3psqtL03VZiafuqGtvemCm3vTRXa3psqtL03VWh7b6rQ9t5Uoe29qULbe1OFtvemCm3vTRXa3psqtL03VWh7b6pQ/d5UcZqWgUTzOvzqn7rercOP0/PwXw9+lP+fx4anmWrvd46NYfncGH8+9ocs9e95VUaW6quEMrJUX32UkaX6qqaMLIIse7JUX4WVkaX66q6MLNVXjWVkqT4DKiMLVe6eLPXvMVdGFqrcXVmocndlocrdlUWQZU8WqtxdWahyd2UZtsp1y7FqmvSrLsOWuSe6DFvnfq1L/ds6FtJl2Er3RJdhS90TXdqtdT+GL20Pv93a8WP47dZ4H8Nvtxb7GH67JdPH8NutbH4Mv/4dLr8efrt1wsfw232cfwy/7adu/Ttcfj38yp+6Wvn4ebD4aL+uBUUv7zKJhG3IIe598PbmkFHqpMh0WttlyA85flLjQ8XKH/6VqOiNWobsrX9VsfIapBEVKy+FGlGx8oqsDRVr34S1ERUrr08bUbHyMrkRFSuv1htRUVAxg4r0LjlUpHfJoSK9Sw4V6V1yqEjvkkHF2reybkRFepccKtK75FCR3iWHioKKGVSkd8mhIr1LDhXpXXKoSO+SQ0V6lwwq1v6DAI2oSO+SQ0V6lxwq0rvkUFFQMYOK9C45VKR3yaEivUsOFeldcqhI75JBxdp/VqURFeldcqhI75JDRXqXHCoKKmZQkd4lh4r0LjlUpHfJoSK9Sw4V6V1+u4qx9h+nakRFepccKtK75FCR3iWHioKKGVSkd8mhIr1LDhXpXXKoSO+SQ0V6lwwq1v4Tf42oSO+SQ0V6lxwq0rvkUFFQMYOK9C45VKR3yaEivUsOFeldcqhI75JBxdp/0LQRFeldcqhI75JDRXqXHCoKKmZQkd4lh4r0LjlUpHfJoSK9Sw4V6V0yqFj7z9Q2oiK9Sw4V6V1yqEjvkkNFQcUMKtK75FCR3iWHivQuOVSkd8mhIr1LBhVr/+XhRlSkd8mhIr1LDhXpXXKoKKiYQUV6lxwq0rvkUJHeJYeK9C45VKR3yaBi7T9a3oiK9C45VKR3yaEivUsOFQUVM6hI75JDRXqXHCrSu+RQkd4lh4r0LhlUdPQuOVSkd8mhIr1LDhXpXXKoKKiYQUV6lxwq0rvkUJHeJYeK9C45VKR3yaCip3fJoSK9Sw4V6V1yqEjvkkNFQcUMKtK75FCR3iWHivQuOVSkd8mhIr1LBhUDvUsOFeldcqhI75JDRXqXHCoKKmZQkd4lh4r0LjlUpHfJoSK9Sw4V6V0yqBjpXXKoSO+SQ0V6lxwq0rvkUFFQMYOK9C45VKR3yaEivUsOFeldcqhI7/LbVVTTRPOSRUa6lywy0r5kkZH+JYuMgow5ZKSDySIjLUwWGelhsshIE5NFRrqYHDIqupgsMtLFZJGRLiaLjHQxWWQUZMwhI11MFhnpYrLISBeTRUa6mCwy0sXkkFHTxWSRkS4mi4x0MVlkpIvJIqMgYw4Z6WKyyEgXk0VGupgsMtLFZJGRLiaHjIYuJouMdDFZZKSLySIjXUwWGQUZc8hIF5NFRrqYLDLSxWSRkS4mi4x0MTlkFLqYLDLSxWSRkS4mi4x0MVlkFGTMISNdTBYZ6WKyyEgXk0VGupgsMtLF5JDR0sVkkZEuJouMdDFZZKSLySKjIGMOGelisshIF5NFRrqYLDLSxWSRkS4mh4yOLiaLjHQxWWSki3lHxuiWg/2k7Ikazq+aB7cdG6dPyel4bpdckPxuyemkbpecrusdyVXQm+TuRI3HQN0yjmC2geiod45WTvlFamc2pY0xnxbR0VVvEd1i9RbRib5hkferHD5of6aG0asYz8+hPS2cXdy0fno6WKbdMcf1k6cp/HT0h5uehrgnN+nLe3KTeKAnN0keenJTcLMjN8lLenKTKKYnN0ltenKTgKcnN8mCOnIzkAX15CZZUE9ukgX15CZZUE9uCm525CZZUE9ukgX15CZZUE9ukgX15CZZUEduRrKgntwkC+rJTbKgntwkC+rJTcHNjtwkC+rJTbKgntwkC+rJTbKgntwkC+rHTTWRBfXkJllQT26SBfXkJllQT24KbnbkJllQT26SBfXkJllQT26SBfXkJllQR24qsqCe3CQL6slNsqCe3CQL6slNwc2O3CQL6slNsqCe3CQL6slNsqCe3CQL6shNTRbUk5tkQT25SRbUk5tkQT25KbjZkZtkQT25SRbUk5tkQT25SRbUk5tkQR25aciCenKTLKgnN8mCenKTLKgnNwU3O3KTLKgnN8mCenKTLKgnN8mCenKTLKgjN4UsqCc3yYJ6cpMsqCc3yYJ6clNwsyM3yYJ6cpMsqCc3yYJ6cpMsqCc3yYI6ctOSBfXkJllQT26SBfXkJllQT24KbnbkJllQT26SBfXkJllQT26SBfXkJllQR246sqCe3CQL6slNsqCe3CQL6slNwc2O3CQL6slNsqCe3CQL6slNsqCe3CQL6shNTxbUk5tkQT25SRbUk5tkQT25KbjZkZtkQT25SRbUk5tkQT25SRbUk5tkQR25GciCenKTLKgnN8mCenKTLKgnNwU3O3KTLKgnN8mCenKTLKgnN8mCenKTLKgjNyNZUE9ukgX15CZZUE9ukgX15KbgZkdukgX15CZZUE9ukgX15CZZUE9ukgX146aeyIJ6cpMsqCc3yYJ6cpMsqCc3BTc7cpMsqCc3yYJ6cpMsqCc3yYJ6cpMsqCM3FVlQT26SBfXkJllQT26SBfXkpuBmR26SBfXkJllQT26SBfXkJllQT26SBXXkpiYL6slNsqCe3CQL6slNsqCe3BTc7MhNsqCe3CQL6slNsqA33HQqLJ8cJplO1FCT2dSb5IeN6/F+73jRdjlcvNuOVrKrtd8GHrajHzbtHT0ZtR5tN2fMtPfZQbllJEFPcftsH/bk9pNZvXmapbELXERTwHUZXCRlwHUVXIbgDrgug4scEbgug4tYE7gug4uUFbgug0uAC7iugosMGrgug4tIHLgug4uEHrgug4uEHrgug4uEHriugktI6IHrMrhI6IHrMrhI6FuDS6a4au31CVxi1KqJ8Wr7bPfpPyH62P4L/g/tP1H02P6TFo/tP4Hu2P6TuY7tP7Ho0P5bksux/SdcHNt/8r+x/Sf/G9t/wf/8/od11eXx0Tqe+B+2OQYVN/V+LOnMJhHSNWASSVoDJhF3NWASmVQDJhEc1W+SI91pwCQimAZMIid5MWkWhgDhQBhBmH1h6GYPhKGDPBCGru1AGDqlA2HoTvaF8XQEB8JQhR8IQ+V7IAyV74EwgjD7wlD5HghD5XsgDJXvgTBUvgfCUPnuCxOofA+EofI9EIbK90AYKt8DYQRh9oWh8j0Qhsr3QBgq3wNhqHwPhKHy3RcmUvkeCEPleyAMle+BMFS+B8IIwuwLQ+V7IAyV74EwVL4HwlD5HghD5bsrjJmofA+EofI9EIbK90AYKt8DYQRh9oWh8j0Qhsr3QBgq3wNhqHwPhKHy3RdGUfkeCEPleyAMle+BMFS+B8IIwuwLQ+V7IAyV74EwVL4HwlD5HghD5bsvjKbyPRCGyvdAGCrfA2GofA+EEYTZF4bK90AYKt8DYah8D4Sh8j0Qhsp3XxhD5XsgDJXvgTBUvgfCUPkeCCMIsy8Mle+BMFS+B8JQ+R4IQ+V7IAyV774wQuV7IAyV74EwVL4HwlD5HggjCLMvDJXvgTBUvgfCUPkeCEPleyAMle++MPx+65EwVL4HwlD5HghD5XsgjCDMvjBUvgfCUPkeCEPleyAMle+BMFS++8Lw23ZHwlD5HghD5XsgDJXvgTCCMPvCUPkeCEPleyAMle+BMFS+B8JQ+e4Lw2+4HQlD5XsgDJXvgTBUvgfCCMLsC0PleyAMle+BMFS+B8JQ+R4IQ+W7Lwy/4XYkDJXvgTBUvgfCUPnuC9PXT3xMqzBK/STMPNd2a7Z5/O2WVvP4262A5vG3W6j8GL80/PsA8/jbfezP42/36TyPv91nxTx+aXz87YYx8/jbfv5Kwxu2z+Nv+/krDW9//jH+hncpn8ff+PO34T2/5/E3/vxteAftefyNP38b3o96Hn/jz9+Gd3eex9/487fhvZLn8Tf+/G145+F5/I0/fxvex3cef+PP34Z3xZ3H3/jzt+E9ZufxN/78bXjH1nn8jT9/G97/dB5/48/fhncTncff+PO34b055/E3/vxteKfLefyNP38b3jdyHn/jz9+Gd2Gcx9/487fhPQ3n8Tf+/G14h8B5/I0/fxveb28ef+PP34Z3r5vH3/jzt+G94ObxN/78bXhntXn8jT9/G96nbB5/48/fhnf9msff+PO34T205vE3/vxteEeqefyNP38b3t9pHn/jz9/ad0uS4Ne/n4qTeR1/5c9fCdvff8WnPwDb/VuxMMnnscHE9VDt/c6xMbjPY2P8+dhZl8qf68V0qbxeKKVL7TsaFdOl8vqmmC6V103FdKm8Hiumi6DLri6V14/FdKm+Li2kC/Xuvi7Uu/u6UO/u6lL7PkbFdBm23nXLsWqa9I4wwxa8Z8IMW/GeCSMIsy/MsDXvmTDDFr1nwlRV9c5DqqrgnIdUVa33MaRYVZk1D6mqCmceUlW1xTykqp7q85Cqep7OQ6rqSTYPqapnyDyk+u7edW37Nw+puru3rWtzvnlI1d29bV1b6M1Dqu7ubafq7t62rr3r5iFVd/e2de0wNw+puru3rWsfuI8h1bW12zyk+u7edW3ANg+pvrt3XdukzUOq7+5d12Zm85Dqu3vXteXYPKT67t51bQw2D6m+u3dd23fNQ6rv7l3XJlvzkOq7e9e1FdY8pPru3nVtWDUPqb67d13bSs1Dqu/uXdfmT/OQ6rt717VF0zyk+u7edW2kNA+pvrt3XdsdzUOq7+5d16ZE85Dqu3vXtXXQPKT67t51bfAzD6m+u3dd2/DMQ6rv7l3XZjnzkOq7e9e1pc08pPru3nVtPDMPqb67d13bw8xDqu/uXdcmLvOQ6rt717XVyjyk+u7edW2IMg+pvrt3XduWzEOq7+5d1+Yi85Dqu3vXtQXIPKT67t51bagxD6m+u3dd20jMQ6rv7l3X5gnzkO6/e7vJLD8D79TZwfn+xNEW2Iqg2FTtOFN1HU316z+HsgU2ASg31zDQXOM4cy3wB/jl5qoGmquuaa7zkKqqbeYhSX1DKvBQeawfLEOKWr4+WLa/PX7602MV4jz8An9DmXX4pu3hS9vDt5UPXy/Hivw8/J1jVQzLwVpto3CfU3XjTLX2O1rGqYZxphpHmaor8Pe3xaaqxplq7ZVKxqnWXtVknKqMM9VhqiU3DVMtuWmYaslNw1RLbhqnWlLjVEtqnGpJjVMtqXGqpQL7CRSb6jjVkhqnWlLjVEtqnGpJVV8trTG2hJOpfvHBH3PV1ZdLGedafb2Uca7VF0zfmKtd121ckPj1B6ug1efBeprs9tFu+lSm+vqqmDIyhDLzXKuvxzLOtfqC7Giu8/Db/XHfnbl+uQTt6tox5OK5tvujwd+fa7s/MPz9ubb7Y8Tfn6sMNNd2f+T4+3Ot/Dc4vjfXfK1xXZvZVKRL5T88V0yXrmq3fLrUtbdQRbp0VRNm1KWr+jGjLl3Vmt/o+U/+AMPVteFUTcJ0VcXmFKavkjejMH3VvBmF6avozShMX1VvPmHq2pStJmH6qnszCtNX4ZtRGCrfA2EEYfaFofI9EIbK90AYKt8DYah8D4Sh8t0Xpq4NLWsShsr3QBgq3wNhqHwPhBGE2ReGyvdAGCrfA2GofA+EofI9EIbKd1+YujYDrkkYKt8DYah8D4Sh8j0QRhBmXxgq3wNhRq18tZXlg7WN4esPVtEu222rGNSTjOFTxlHr5MwyjlpVZ5Zx1Bo8r4xh1Io9s4yj1veZZRy1G8gs46i9Q2YZBRlzyDhqX5JZRrqYd2QMcRmynszPMr4eHbYxBxX9juj0PAVEp0MqIDr91P2iR7qvAqLTqxUQnc6ugOj0gReI7uwiup7ijuiC6PeLTo9ZQHQ60gKi05EWEJ2OtIDodKS3i+4nOtICotORFhCdjrSA6HSkBUQXRM8uulab6FafHO2jLEf7GM3J0WZdCRQ9bcfKrnRxefdRa6WfD56tpy8e1nq682GtJyMY1nqSimGtJy8Z1XpFajOs9WRHw1pPgjWs9eRow1ovWD+q9aR5w1pPmjes9aR5w1pPmjes9aR5o1qvSfOGtZ40b1jrSfOGtZ40b1jrBetHtZ40b1jrSfOGtZ40b1jrSfOGtZ40b1TrDWnesNaT5g1rvWB9r9Zrs1kv9tV6KvxurX8syy6D9sa8Wk+FP6z1VPijWi9U+MNaT4U/rPWs1w9rPev1w1ovWD+q9azXD2s96/XDWj9smhenaRmyUtPXH+zt5Fd7zHSixo99yRbxvNt2rHuItAfKenDw5uRYbfRysBb5rRvoexk2z8N8L8Mmepj/mBXmj2v+sKke5ns7bK6H+d4Om+xhvreC+dnNd1pW8707MdRMk1oGMgV3s/3D5nvY/8P+YTM+7P9hPzlf6Sf/qoaaplP3tx+90Nr43+w+Qd/I7pP0Dey+I+ob2X2yvpHdJ+wb2X3SvpHdF9wv3PArH5aBaO1vtp+4b2j7iftGtt/z6H/DfufNksi6R0L6kxqzjDxDs8jIsyiLjNzTs8jIUkgWGVlTyCIj4XwOGQMpdxYZiYuzyEjumkVGupgsMgoy5pCRLiaLjHQxWWSki8kiI11MFhnpYnLIGOlisshIF5NFRrqYLDLSxWSRUZAxh4x0MVlkpIvJIiNdTBYZ6WKyyEgX846MKiyf7Kf4KmOY6GKyyEgXk0VGupgsMtLFZJFRkDGHjHQxWWSki8kiI11MFhnpYrLISBfzzqv/fpXDB+3P1DB6FcM+HbunhVt357V+ejpYpt0xx/WTpyn8dPSHm4onXTtumikuYhitzo7263W8DfjhzWw7T+YhbaeSGNJ2Kp8hbadSG9F2TT4+pO3k+UPazvrDkLazXjKk7YLtI9pOSjek7aR0Q9pOSjek7aR0Q9pOSjei7YaUbkjbSemGtJ2UbkjbSemGtF2wfUTbaeDyb4r8rQ3x7bSoYWX66djZIFqtug0SmqLKDaJ9qdwgGo3KDaIlqNwgwaC6DWIxvHKDWLau3CAWmCs3iCShtEFu+S0mG8PJsaLtIp3oID8lSB92Wmq+wnaG9eDgzcmx2my/lWWeYr7l16+CFezsyU7qya7spPrsyk5q1a7spLLtyk5W1Hqy07H+1pWdrNZ1ZSdre03ZqVc7RdRPdu588vYD3UFPccd8MqSBzRfMH9d88qmBzSfNGth8sq+BzScpG9h8crVxzfekcAObT2Y3sPkkfAObT8LXr/labeZbfXK0j2LXOUZzcrRZ/9pV9KaHll0L4/Jao9ZKPx88IyggCIJlESTtBMHCCJK5gmBhBEl+QbAwguTPIFgYQVJwECyLYCCLB8HCCLIiAIKFEWRdAgQLI8jqCAgWRlBAEATLIsjqCAgWRpDVERAsjCCrIyBYGEFWR0CwMIKsjoBgWQQjqyMgWBhBVkdAsDCCrI6AYGEEWR0BwcIICgiCYFkEWR0BwcIIsjoCgoURZHUEBAsjyOoICBZGkNURECyK4MMHEATBsgiSC4LgxQhqsyEo9hVBOmIQvBhBrxYLtTfmFUE6YhAsjCAdMQgWRpCOGATLIqjoiEGwMIK8LwiChRHkfUEQLIwguSAIFkZQQBAEyyLI+4IgWBhBVkcKIxi1+jw4Wnty7GMYy1qXVdMzsNOnnaw0dGUnqX1XdpKA92SnJk0uXb6taqhpcmd+KrX5ad2On0SzfflJztmXn4SGffkp+NmVn8RZfflJNtSXn4RDfflJOtSXn8RDLfmptx/U1tpsQqf9/PZjKrg/sPtkTyO7T1I1svvkWiO7L7g/sPtkZiO7T8I2svvkcSO7T3o3svtkfQO7L2R9HbvfxtZcQuIIg6UZJPeEwdIMkr7CYGkGBQZhsDCDJNEwWJpB8nAYLM0gqTwMlmaQtQEYLM0gKxQwWJhByzoJDJZmkHUSGCzNIOskMFiaQdZJYLA0gwKDMFiYQdZJYLA0g6yTwGBpBlkngcHSDLJOAoOlGWSdBAYLM+hYJ4HB0gyyTgKDpRlknQQGSzPIOgkMlmZQYBAGCzPIOgkMlmaQdRIYLM0g6yQwWJhBTz4Ig1czqM3GoNhXBumLYfBqBk9+7dgLDMJgYQbpi2GwNIP0xTBYmkH6YhgszSDvD8JgaQZ5fxAGCzMYyAdhsDSDvD8Ig6UZ5P1BGCzNIPlgfgadlpVBf4pVnNaVrGjNydEyTYt4Mskz358/6xwprgobaqZJLQOZwqn9ZrurGP/zXWU2lEqlM0N57HdmKO8adGaoYGhfhlLldmYoS8qdGcr6bGeGstjZmaGsHDZmqF4NFVE/GboTV379I7J6msiVhrafFGpo+8mshrafhGto+wX7R7af9Gxo+8nahrafZG5o+8nxhraf1G9k+xWpX8/2t7CfzANCskcgLA4hCSgQFoeQHBYIi0MoQAiEpSEkkwbC4hCSjANhcQjJ54GwOISsEgBhcQhZqwDC0hBqVkyAsDiErJgAYXEIWTEBwuIQsmIChMUhFCAEwtIQsmIChMUhZMUECItDyIoJEBaHkBUTICwOISsmQFgaQsOKCRAWh5AVEyAsDiErJkBYHEJWTICwOIQChEBYGkJWTICwOISsmABhcQhZMQHC0hAKOSEQXg6hNhuEYl8hpDsGwssh/PJHOx8QChACYWkI6Y6BsDiEdMdAWBxCumMgLA4h7xMCYXEIeZ8QCEtDaMkJgbA4hLxPCITFIeR9QiAsDiErJqUhVFNYB2L9ydEPEVbvgzyN5PHPs6GCoX0ZSpLfmaGk4p0ZSsJc3FC/Gqr1maFWqeWzrbJux1DS2s4MJfnsy1BHitiZoSRynRlKutWZoSRFnRkqGNqXoSRFnRlKUtSUoXr7wW6tzXZ04s97O3Kloe0nhRrafjKrke33JFxD208eNrT9pGdD20/WNrT9gv0j20+ON7T9pH5D20/q17P9bezm5ckegbA4hCSgQFgawkAOC4TFISQNBsLiEJJJA2FxCEnGgbA4hAKEQFgaQlYJgLA4hKxVAGFxCFkxAcLiELJiAoTFIWTFBAhLQxhZMQHC4hCyYgKExSFkxQQIi0PIigkQFodQgBAIS0PIigkQFoeQFRMgLA4hKyZAWBxCVkyAsDiErJgAYWEI1cSKCRAWh5AVEyAsDiErJkBYHEJWTICwOIQChEBYGkJyQiC8HEJtNgjFvkCo6I6B8HIIv/6dZKXojoGwOIR0x0BYHEK6YyAsDqEAIRCWhpD3CYGwOIS8TwiExSEkJwTC4hDyPiEQFoeQ9wmBsDSEmpzwDQidCssnh0lOIZzMpt4kT4ul6gdkr8cbsyCuTFDb0WrPUVmXwCRseijrPw0lc+vMUMHQvgwlC+rMUHKVzgwlo+jMUPr9xgy1a4tj3Z6h9M59GWp4c681Q/0ybuvjjqG8BdeZoSRFrRm6vrHvJrNjKElRZ4YKhjZrqFI7hpIUdWYoSVFjhjqvFvXCtGMoSVFnhpIUtWZoWFbOXZQdQ0mK+jJUSIoaM9RPiyBehR1DSYo6M5SkqF1DtdsxlKSoM0MFQ/sylKSoNUOj3YayYyhJUWeGkhQ1ZmhYb7lht8olKerMUJKi1gw1y2cH0a+GWpKizgwlKWrXULuz2mJJijozlKSoMUOjWg6Oe8GCFQzty1CSotYMNcsbC1F23imyJEWdGUpS1Jqh69+2RLd3yyUp6sxQkqJ2DfU74bwjKerMUJKixgxVk53WD3c70YIjK+rOUtKi8paKXtatH2vU7sRSo/w28LAdrX/Y+3r05Jc/hzFT2EQx0+5ne7X66J/CxR9Hz7gIuIDL+7iQdIHLN3AhRwOXb+BCSgcu38CFDBBcvoELCSO4vI+LJ78El2/gQjoKLt/AheQVXL6BC6kuuHwDFwEXcHkfF1JdcPkGLqS64PINXEh1weUbuJDqgss3cCHVBZf3cQmkuuDyDVxIdcHlG7iQ6oLLN3Ah1QWXb+Ai4AIu7+NCqgsu38CFVBdcvoELqS64fAMXUl1w+QYupLrg8j4ukVQXXL6BC6kuuHwDF1LdznFZNw8zP/ZR+BqXoNy6Kb2eth911j7sye0ns3rzNEvzAG2GiwwYuC6DS4ALuK6Ci3wZuC6DizQauC6Di+wauC6CS09kUcCVDNf6g2ePf3Q7cNEtAlcqXGFaNpqUx+E7cAlwAdc7cM240P+ByzdwoaMDl2/gQo8GLhsuWm24WH1S6fgoy9E+RnNytFm3vZenqkjLrulxWVjU+kk+LZ/Q8pYT0DYHLe9aAW1r0CpSNqBtDlreOwPa5qDl7TegbQ5a1kmAtjloBWiBtjVoWQUC2uagZS0KaJuDlhUxoG0OWlbEgLY5aFkRA9rWoNWsiAFtc9CyIga0zUHLihjQNgctK2JA2xy0ArRA2xq0rIgBbXPQsiIGtM1By4oY0DYHLStiQNsctKyIAW1r0BpWxIC2OWhZEQPa5qBlRQxom4OWFTGgbQ5aAVqgbQ1aclqgrQ7ax710hVbsC7RCegC01UHr1WK69sa8Qkt6ALTNQUt6ALTNQUt6ALTNQStAC7StQcv7tEDbHLS8Twu0zUFLTgu0zUHL+7RA2xy0vE8LtK1Ba1kRaw3ax8iXgRslP0E7W8p6UXeWsprSnaWsNXRnqWBpb5aSU3dnKSlud5aScXZnKQlgd5aSjzVnqfKrpT78ZOlO4rXpF1T0P2VYHwA4sqbBASCZGhwAcqzBASD1GhwAAYCxASBRGxwA8rfOAXDbiw9T3AGAtG5wAMj2BgeAJHBsADxJ4OAAkAQODgBJ4OAAkAQODoAAwNgAkAQODgBJ4OAAkAT2DUAbW5l68kgwrABDUlEwLI9hIJsFwwowJCEGwwowJKcGwwowJC0HwwowFDAEw/IYsnIAhhVgyPoFGFaAIasoYFgBhqyigGEFGLKKAoblMYysooBhBRiyigKGFWDIKgoYVoAhqyhgWAGGAoZgWB5DVlHAsAIMWUUBwwowZBUFDCvAkFUUMKwAQ1ZRwLA4hmZiFQUMK8CQVRQwrABDVlHAsAIMWUUBwwowFDAEw/IYkhuC4Q0YarNhKPYFQ0WnDIY3YOjVYqP2xrxiSKcMhhVgSKcMhhVgSKcMhhVgKGAIhuUx5H1DMKwAQ943BMMKMCQ3BMMKMOR9QzCsAEPeNwTD8hhqVlFaw1D0iqF4dYKhFln9l7A5o3YHHu2iiYr+yXT/CQtrHcDyNiysSADL27CwbgAsb8MiwAIs78JCBg8sb8NCUg4sb8NCng0sb8NC6twcLFPcYNEnsIhRqybmCa0HLLP/xL1D+2/IWcf2n+h0bP9JQ8f2n4BzbP8F/4f2nxhybP9JFsf2n7BwbP/J/8b2n/xvaP+F/K9v/2Xz//F/z/7vfLR36zpUUOYVFsJCYHkbFpJFYHkbFmJIYHkbFgEWYHkXFgJOYHkbFtJQYHkbFqJTYHkbFnJWYHkbFkJZYHkXFkuCCyzrR4fNxmD9KywkuMDyNiwkuMCyweL0CsvzQBZYSHCB5W1YBFiAZYUlquWj42RfYSHBBZa3YSHBBZZdWPZaZxJcYHkbFhJcYHkbFhLcpmFxJ7A8vn/dVmP6+bXaHWe2Hy60WskLLI4EF1hWZ7S4FRb32jo7Elxg2WCJKyzGvCa4jgQXWN6GhQQXWFZnjF8Otj8Ne4FFgAVYFmfEhwUWO+3ULCS4wLLB4twGy85jiAQXWFZnnF9yFuvVSSjjnVnI8i68hjKOuBeyriGLbBiyriGLIBmyLiHLkzpD1jVkEVFD1jVkkWdDViJZcfkrGu/V6z5InvAbsq4hSyALspLI8uuovTfxlSxidci6hiwyeMh6g6wZFmJ1YHkbFpJyYHkbFsJvYHkXlkCeDSxvw0JEDSxvw0LqDCxvw0KQDCxvwyLAAizvwkLcCyyrM0GtsASrvz74bFk9EPdC1jVkkQ1D1jVkESRD1jVkkTpD1iVkRSJqyLqGLPJsyEok6+vXFyPhN2RdQxZJOWSlkXXy+mIUyIKsS8gig4es1ZmTDbUisTqwXFM6EatD1jVkEatD1jVkEatD1hVkyUSsDlnXkEWsDllXBAkyEatD1jVkEatD1jVkCWRB1uLM1z9qIxNJObC8cRuaYSEpB5a3YSH8BpZ3YVFkQ8DyNizEPcDyNiwkOMDyNiwUuMDyNiwUuMDyNiy8sAEs78Ki6YaA5W1Y6IaA5W1Y6IaAZZumXl6Md8r5V1hYogaWbZqTbLCEV1gEWIDlXVhYdQaWt2EhlAOWdZoPtRdntHWvsBDKAcs2zWg3WHYKXEI5YHkbFv4wCljehcWQ4ALL27CQ4FYAyxSOYJlNIjltwCQSywZMEkzKb5KTuD2QJnNmklqfdkrpTWszye4k/TrJ7Vmn4+5zdO3Pjeifjp3NJ/kb2HySvIHNJ5kb2HyStoHNJzkb13whCRvYfJKtgc0nMRvYfJK4gc0XzB/XfBK+1sxX2yTlxHwfZd18KsZtHNqHPRft8oK56G2OWnZtWTcq0vppkUEvWJEdgtUFWJFKgtUFWJF3gtUFWJGkglV+rCwZLVhdgBXpL1hdgBW5MlhdgBWJNVhdgJWAFVjlx4qUHawuwIqUHawuwIqUHawuwIqUHawuwIqUHazyY+VI2cHqAqxI2cHqAqxI2cHqAqxI2cHqAqwErMAqP1ak7GB1AVak7GB1AVak7GB1AVak7GB1AVak7GCVHytPyg5WF2BFyg5WF2BFyg5WF2BFbgVWCVhps2El9hUrOkGwSsDKq2XI2hvzihWdIFjlxyrQCYLVBVjRCYLVBVjRCYLVBVjxvhVYXYCVgBVY5ceK3AqsLsCK963A6gKseN8KrC7AipT9Aqz8urTx+OdgT7AydvkNS1FPCO7+crA3YeXk6XPt3jjstGBinf7p2Nl6kvBRrY+k1cNaT6I8rPWkvsNaTzI7rPWC9aNaT8I5rPWkkMNaT1LYr/UurDrHk2Mf49zCzbCJp635BIXsD1DeAoWk8GZQfshuJ1K6IrKTkBWRnXSqiOwkQ0VkF2QvITuJSBHZSSOKyE4SUER2+uoLZA/Tqp6adDzpq8M2x6Dipt6PF6pmk+hp6zdJ0QE3YBL9cgUmueX90aCfAr/NJLrrBkyiF2/AJMGk+k2iz2/AJFKBBkwiQ2jAJBKHBkwicajfJE3i0IBJJA4NmETiUN4krTaTrP7JpNejS+0gazW5B6i8iYqACqi8hwoZEKi8iQpJFKi8iQp5GKi8iQqpHKi8iQrZIKi8h4ohoQSVN1EhJwWVN1EhrQWVN1EhrQWVN1ERUAGV91AhrQWVN1EhrQWVN1EhrQWVN1EhrQWVN1EhrQWV91AR0lpQeRMV0lpQeRMV0lpQeRMV0lpQeRMVARVQeQ8V0lpQeRMV0lpQeRMV0lpQeRMV0lpQeRMV0lpQeQ8VS64CKp+KaLOhIvYVFTogUPlU5Ovf2LaWDghU3kSFDghU3kSFDghU3kSFDghU3kPF8b4KqLyJCu+rgMqbqJCrgMqbqPC+Cqi8iYqACqi8hwod0AsqH8J46v0DYahuH6M38vUHq7D9GF54+mhxnypS+OVQkZooh4qCihlUZN0zh4osCeZQkdWyHCqykJRDRTqMDCoG2pEcKtK75FCR3iWHivQuOVQUVMygIr1LDhXpXXKoSO+SQ0V6lxwq0rtkUDHSu+RQkd4lh4qj9i5Gm2WF2eizD9Zm/Q1Lbfw2v/U3LOOozUtmGQUZc8g4avuSWcZR+5fMMo7awGSWcdQOJrOMo7YwWWV006g9TGYZR21ivimjXmUUUT/J+Hp02MYcVNwTnZ6ngOh0SAVEF0TPL7rbXmSf4o7odF8FRKdXKyA6nV0B0ekDC4hO13i/6Ioes4DodKQFRKcjLSA6HWkB0QXR7xedjjS/6E1sVOsUffGw1tOdD2s9GcGw1pNUjGq9Ji8Z1npSm2GtJzsa1noSrGGtF6wf1XrSvGGtJ80b1nrSvGGtJ80b1nrSvFGtN6R5w1pPmjes9aR5w1pPmjes9YL1o1pPmjes9aR5w1pPmjes9aR5w1pPmjeq9UKaN6z1pHnDWk+aN6z19PXdWq/NZr3YV+up8Lu1/uufD3ZChT+q9ZYKf1jrqfCHtZ4Kf1jrWa8f1nrB+lGtp68f1nrW64e1nvX6Ya0fNs0zZjnYmKi+/mCr1JKJWmXd9tEyfco4bDKWVUY3bMqUV8ZhE5u8Mg6bfuSVcdgkIa+Mgow5ZBy2w80r47DdYl4Zh+28viOj3raA1tr4s87r7HejHD1PAdHpkO4X3dNPXSD6yX70nu6rgOj0agVEp7MrILog+v2i0zUWEJ0es4DodKQFRKcjLSA6Hen9ogc60gKi05HmF72NP9QL9MXDWk93Pqz1gvWjWk9SMaz15CXDWk9qM6z1ZEfDWk+CNar1kRxtWOtJ84a1njRvWOtJ84a1XrB+VOtJ84a1njRvWOtJ84a1njRvWOtJ8wa13k+kecNaT5o3rPWkecNaT5o3rPWC9aNaT5o3rPWkecNaT5o3rPWkeaNar+jru7X+619I80qwvlfrv95O2ysq/GGtp8If1noq/GGtp8If1nrW60e1XrNeP6z19PXDWs96/bDWs14/rPUyqvUyxXXIVp4/eBZm2K73TJhhe8IzYUbtmET59WD1dPPa/+Djgz9UNKM2H3lVHLWO/5aKLthlqcsFvz3+3aeIo1bEWUUctbbMKqIg4hsixmkpol3U/kXEUVcvs4o46jpgVhFH7S2yijhqH5JVRHqW3y6i0LJkEJGOJYOIdCwZRKRjySCiIOJvF5GOJYOIdCwZRKRjySAiHUsGEelYfruIlo4lg4h0LBlEpGPJICIdSwYRBRF/u4h0LBlEpGPJICIdSwYR6VgyiEjH8ttFdHQsGUSkY8kgIh1LBhHpWDKIKIj420WkY8kgIh1LBhHpWDKISMeSQUQ6lt8uoqdjeUtEWV98j/ZVRDqWDCLSsWQQkY4lg4iCiL9dRDqWDCKOUWx/zDWws0e32zuYaTlWPwx6Pni2np09hrV+1Gct1gf26R3WevbpHdZ69ukd1nr26R3Wevbp7feXOKJerZ/si/WRfXqHtZ59eoe1njRvWOtJ84a1XrB+VOtJ84a1njRvWOtJ84a1njRvUOvDRKQzrPXDlnnaLIobffbB2ujVehHViPVfZ/hhGrbMw/phyzysH7bMw/phF22Ht14NW+Fj/bCLtlg/7KJt/9af9PVq2EVbrBesH9V60rxhrSfNG9Z60rxhrSfNG9Z60rxRrdekecNaT5o3rPVEOsNaP2qZp+M0LUNWavr6g50KyyeHSaYTNdQUplU9Nen4dLyvGJWTzF+PWhaCyndRMaOWkaDybVRGLTtB5duojLroDCrfRmXUjgZUvo2KgAqovIfKqIvgoPLdXMWMumgOKt9GZdRFdlD5NiqktaDyJiqktaDyHipCWgsqb6JCWgsqb6JCWgsqb6JCWgsqb6IioAIq76FCBAcq76FiKWsvQMXJMmg1+cmcoPL4+vVwpTetzbTnqKhtkk8LNVFuxepkvchSAoPVBVhRLoPVBVgJWIFVfqx4aQKsLsCK7g6sLsCKlzHA6gKseHEDrC7IrXjJA6zyY+V4IQSsLsCKlB2sLsCKlB2sLsCKlB2sLsBKwAqs8mNFyg5WF2BFyg5WF2BFyg5WF2BFHApW+bHyAlb5sTKbetMDgzOsZN18U4l329Fqz1HzkGQZuPHbNB827RzdyO4jnhIfDCvAkJYADCvAkBYCDCvAkBd7wLACDOl8wbA8hoEXh8CwAgx50QgMb8DwJDcMvJgEhhVgyItMYFgBhgKGYFgeQ1ZRwLACDFlFAcMKMGQVBQwrwJBVFDCsAENWUcCwPIaRVRQwrABD4mswrABDWpTWMFR+G3hwJxiayaj1aLs5s/8HA42sQEcaGqBtDlraH6BtDNqHc0ALtK1BywtqQNsctOQBQNsctLz8BrTNQStAC7Rt5bRx4sU6oG0OWl7DA9rmoGVFDGibg5YVMaBtDlpWxIC2NWgVK2JA2xy0rIgBbXPQsiIGtM1By4oY0DYHLYsLQNsctEReQLtBq9wG7RRPMPxhyObNNhJjp0+4iKaAKxWuoGTRO6j4CpcmQgKuZLi0WeEyegcuoh7gugwuIhngugwuohPgugwuAS7gugou8jPgugwuXqIFrsvg4mVX4EqGa/IrXE9p/gYXCT1wXQYXCT1wXQWXIaEHrsvgIqEHrsvgIqEHrsvgIqEHrsvgEuACrqvgIqEHrsvgIqEHrsvgIqEHrsvgIqEHrqvgErrFN+DydpXRP3LnM7icXt4tV/4ZFjH7sIRlIFr7k6P1Zr/Wxp/Y38hmjyJACISlIaT7BMLiENKlAmFxCOlmgbA4hHS9QFgcQt5fA8LSEFrecwPCyyE82cjF8j4cEBaHkPfmgLA4hKyYAGFxCAUIgbA0hKyYAGFxCFkxAcLiELJiAoTFIWTFBAiLQ8iKCRCWhtARVgNhcQhpTEpDOE3ri/VTODtam/UVfy2iGoHwZO3Y0ZgAYXEIaUyAsDiENCZAWBpCz6tcQFgcQrpjICwOIa9yAWFxCHmVCwhL54RegBAIS0PIq1xAWBxCVkyAsDiErJgAYXEIWTEBwuIQsmIChKUhDKyYAGFxCFkxAcLiELJiAoTFIRQgBMLSENKY5IfQT+sG597FE6xC2DZPn04Z7HFTrkhfAoOlGaQtgcHSDNKVwGBpBnmNCwZLMygwCIOFGeQlLhgszSDvcMFg4Xww8goXDJZmkDe4YLA0g6yTwGBRBh+LlayTwGBpBlkngcHSDLJOAoOlGWSdBAZLMygwCIOFGWSdBAZLM0hGDYOFGVT0JKUZXA8O3pwh2N8OXA8EaUlAsDCCAoIgWBZBGhIQLIwg722BYGEEaYlBsDCCvLUFgoUR5KUtECybC2re2QLBwgjyyhYIFkaQ1REQLIwgqyMgWBhBAUEQLIsgqyMgWBhBVkdAsDCCrI6AYGEEWR0BwbIIGqJpECyM4LDtiJXlg7WN4esPfnzEMmQ9mU7WZs2wbQDWD1t+Y/2wZS/WD/syzvDWy7CdBtYP+/IJ1g/70kf/1p/09TLsyxZYL1g/qvWkecNaT5o3rPWkecNaT5o3rPWkeaNab0nzhrWeNG9Y64l0hrU+T3M3rZN9fKQ9sV7F8Hmw1U59fbASL8tArHp6kSqqnaOdLAc7q56OnT4n67uarF+G4YLdmWzoa7JqnazbmWwcaLJuGmmyaqTJ6pEma0aarIw0WdvVZN1SQTkXdibbVwV1Mtm+KqiTyfZVQZ1Mtq8K6uvJ+r4qqJPJ9lVBnUy2rwrqZLJ9VVAnk5WRJjtSBeVHqqD8QBWU2t8VR/xk1jhXbdGosctpNu20XY4k6PW0YPZO82mnhbTTYtJp+3/QK2H9A9bHJ0w7p6m003TaaSbtNEk7zaad5tJO82mnhbTTYtJpkkbJ/nudj3vFetd4+iUn+TzHJpzjEs7xCeeEhHPi98/ZXy0/OUclnKMTzjEJ5yRwYPc5cMtf4dunB856jks4xyecs89BXBeJnp4i6znx++fsB/In56iEc3TCOSbhHEk4xyac4xLO8QnnJHDgEjjwCRzs14Paq3Vh2hvzetZ+NOW2ItKF1+vBx5SzwpR0lko6a7999365Bann9f/1LJN0liSdZZPOckln+aSzQtJZMeWsOCWdpZLOSmIjJrERk9iISWzEJDZiEhtxn42oljbuofLOWTHhLD3t+yUPmZbTRNun91ei3utHrY5rPypPndHjrjh/zb7Bzpr1POfk6QWJRxEznyipJ9rUE13qiT71xJB6Ykw8UU2pJ6rUE3XqiankqFRyVCo5KpUclUqOSiVHpZKjU8nRqeToVHJ0Kjk6lRydSo5OJUenkqNTydGp5JhUckwqOSaVHJNKjkklx6SSY1LJMankmFRyTCo5kkqOpJIjqeRIKjmSSo6kkiOp5EgqOXJU1xq1lqjqqd/cToyJJx78pcwbJ6rUE3XqiSb1REk90aae6FJP9KknppJjU8lxqeS4VHJcKjkulRyXSo5LJcelkuNSyXGp5LhUcnwqOT6VnP3XaYKXZUE5+DjtnGbSTpO002zaaS7tNJ92Wkg7LSadtp/ZhqAXv0N43sF4PU2lnabTTjNpp0naaTbtNJd2mk87LaSdFpNOi2mUxDRKYholMY2SmEZJTKMkplES0yiJaZTEJErMNKWdptJO02mnmbTTJO00m3aaSzvNp50W0k5Lo0SlUaLSKFFplOwnvlFNywptfGQQP5228+qdd8vbNCY8vyDnPr9DbvgOe8N3uBu+w9/wHeGG74jXf8d+PJ75O9QN36Fv+I4c13nYtjMI1r9+h9zwHbvs+vUrnl+DVZ/3uP0U/etz9gN0b5bBeYmv56j9c5Y1Ye/M6zm73vuwpHs++tdzTMI5+4/19UW2IDsa7D/T119mCda9nnPQQi4ahL2x+a/PiTv+HMSb0/qSkJqeXr/+XIA3B9nmyVkHwaZaYVDKqtezVNJZOuksk3TWfiT1CJfXs8KOGvvpkKy/MvT4x53vCklnxZSzDuLEs7P2/bLra+jK2un1LJ10lkk6S5LOsklnuaSzfNJZIemsmHLWQWB4dlYSGwd/eWfXG5uyUb+eZZLOkqSzbNJZLuksn3RWSDorppx18IKm2V7qMub1vnHwgubZWSbpLEk6yyad5ZLO8klnhaSzYspZBy9onp2VxEZMYuPgBU0jfj3Lvd5tDl7QPDvLJp3lks7ySWeFpLNiwlkypVQOsp/rnZ6lk84ySWftd0DrOwReXl6ol/1AKcpalVv7eo5JOEcSzrEJ57iE2l8O3hY8OysknZXSncjBS4JnZ6mks3TSWSbpLEk6yyadlcSGTmJDJ7Ghk9gwSWwcZBJf3i32M4n4HP28npNw5e9nBSffExLOid8/Z//VuZNz1Pc1kIQ7syTcmSXBH0m4M++/HHdyjk84Z58Du3AdvX49J37/nP286OQclXCOTjjHJJwjCeeccbB3TgIHNoGD/Szq5Jz4/XP2c6iTcxLuBy7hfuAS7gcu4X7gEu4HLoEDl8CBS+DAJXDgEzjYT2YePcty0T1yvadUfG8r58djfn2XbTJPrwj7z69w13+Fv/4rwvVfES//iv230/J+hbr+K/T1X7F733qEpstZj3QyPn/FfJbsn7UuZe2ftX8NeuW/PMslneWTzgrfPesfj3/7v7//y6+///c//uGvj3N+/Mf//dN//O3XP//p81//9v/+Z/kv//6XX//4x1//+9/+5y9//o8//Of//uUP//bHP//Hj//2y/T5P/9qphh+Z5SKP8bz+PfHTc3qxz+r+T+G6XeP/7E//h8/8HuswMnvHv/jHuN4jOX/Aw==",
      "brillig_names": [
        "process_log"
      ]
    },
    {
      "name": "is_registered_l2",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "is_registered_l2"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "16541607464495309456": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 16
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "get_l1_portal",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_l1_portal"
      ]
    },
    {
      "name": "withdraw_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          }
        },
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "withdrawNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "burnNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "withdraw_public"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==",
      "debug_symbols": "ZY5bCoMwEEX3Mt/5MLEKdStSJOoogZBIHoUSsvdORGioP5e5w+FyEqw4x31SZrMehjGBtosMyhpqKTOYndJa7VP9hqYEb0/eH9KU6oN0AQbePoVggGY9776jjU1ppCb6zG484Rf94PzH9k1+Zapv6ZScNV42WzRLJRc+B/55Hs4uuEaHxbiSpRx5x0RDszT9BQ==",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "is_registered_l1",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "is_registered_l1"
      ]
    },
    {
      "name": "get_l2_token",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_l2_token"
      ]
    },
    {
      "name": "register_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18159344801564042747": {
            "error_kind": "string",
            "string": "Token already registered"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "8998099065237381256": {
            "error_kind": "string",
            "string": "Expected address did not match supplized token address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "aztec_token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "name_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "decimals",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_notes",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "storage_read",
        "debug_log_oracle_wrapper",
        "storage_read",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_register_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_register_public"
      ]
    },
    {
      "name": "get_l1_token",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "H4sIAAAAAAAA/+19a4wcV3Ze9cz0kNMzPdPUSiK5klZa7epBipSq392rV1OkJIov8f2SKLGfsmJZXItUshsjwTjrbH4kWGAXNpLAQQIYRoBNFvkRwAGMOICRIIb9w0D+BA6C/DAQBMivBfJCEgdJ3EX26f7661PVVdPnzrSkuQA53XXu/c65555z7rm3blWnvAclNfgXlCW4xkWuNQZ//dlK3hDLTylyRnZCa7C58eDvyuD7AtAXDTu+oshihV/zK/UVb7LPhvIXVwaYLvUjmA7w/T0DnI82R/jcl6BkvXHnwDZ7B3T5XIA2QfkFwJb2LvXWH/eaY73lv+aF60ps7vimNyw2fEsdwT6x6aRfBcF/M7ns+Wnggv1WcuypRbDfdqOXkuCfdINfFPx3AD/lAP+UG/yh3Zx2o5+e4J8Z4M9gOxN2KthnQfYZ8P0w/HNudDPEf9eN/MM5+rwb+Yf4Fwb4LmS/aI89jAmXQC92PlUYjutlJ/iVoW6uuMEfxpyrbvCH+r/mBr8s+Nfd4FcE/4Yb/Krg33SDP8yt33OD3xb8993gD3OpW27wu4L/gRv84Zz4oRP86jD+3HaDP8wZmm7wh/Gn5QZ/GH/abvCH8aHjBn/ov103+C3B77nB76x6D9abJwcJz1r/3/oA+6PuvTc+udP+xXOf/1Kr+9mgwlAKXBVq17EEqA+NUI/f+fTeZ832vWOdzmfdu3cZIWrTiFEzgPoLzY8/fafDaOmtoV3tfnb34zufMtpyTDRZO++B+nbjVvZlL2EvyYe8cV/ILtfMN7U9L7YG5J8hWa1z3xTxE3lYP7LPILrLKLLmFBqPYUbhk1H45BQa51mzYN02xLpuiPWBIZZlH983xLppiHXLEOuGIdYlQyzLPlraV8sQy9K3LXV/1RDL0u6bhlhXDLEs7attiDWvc0dngOU273iwRxdgrrrBL0bpAvsk/CWP2AP1UyF/BYtpwivjTeYaLnIkrW8of9g4sw5msRnEWlFoLsZ0JaLfzD+svpZLSv21CHysv+FN2vAa6SLrRheFqHFbA57Cfw363Om2Pv/ozJ2PPCqLpAfR20GqJ/v2C96kvldDsDz6fpCuLQIeljWQ4+73P22fu3Ove9ebUqKcWQbGzQImX48bLIT/dgWLvSRPmFGL7lYUWXPepEN1N0f1wpxtReGjYfUMsS4ZYn1oiHXNEOuWIdZVQ6ybhliWfbxhiDWv9nXZEOu2IVbLEMvSviz19Z4hlqV9WfrQB4ZYljZhGVdlMet4EdTkzUssQsPkcolomKgeh/5z4W187FMwt59LjXC5HsuDeRMme2E5g+c5XxgMDwWuucEfLjxWvXGdcp/WQnQldO2vYDFNeG3XhrvWN22RlPMm7ZIXXBrWakKsndwg0Gw8GyGr1g9eYEctWlEnUn8tQi6s/1VZhB6genL4apZF6AG6FrYInXVzSOQMSk7BkgU1r02D0hj89WcrZZ7L7LCrNY7vhthVx3Ggrc2lUoSG/rOHaOtA4/l5A7BkfhZaDtplqN2+CMyHIjC/FiHnwxGYjwBtL9EeBRrGNC5ajiFjFmB+kCDH2P59mwfzAcvzZd63kQOgUfNTnHxZ2nveaIxQh42t6aPAFxzneB32dSyar2v2gvrDgnIHY/LH2REu12OeaO/rRMMx2CAazoc5omEslVgjeYRm6ylvclwXlWtsI9weZeD5WPsrfLwpfDSZNxQZ2GY134rKeTXfmjXX1/hoMvOYW/DB/vAclDHko+VmwmcB2kkeFBzM2pcatQn+ydGvtDcaK2x7YnNEx/r51Ajz4cHnFapjHEta7GdYON/QfAPzDbYzjEFsGxtAQ51z0eKT6CLg9/ME8QnXLWtUV+qnvcnxemtzvJ7wX1LaB+Xs5jiW1H86NZJ7z/qofxwXFhXZF0neoDi2jUIcH0L+GZLVVZ6RJnlYPzJ2wRiLXd+9d+ez5kfdi91mB0Vn9fFfNkn5vkTX+PsCfWcceV5myYtXUgqu1nVZampT5AK142W8lBUFtzH4GzY2vZhF+Em/9yiyCN801fXBfTID91n1Jt2sCGH0TQqjy8SnMaVfMctwe2EVZNf0vEx9k/pV6Ft2fVQf23hevO0YbUsL+83bMWj/0taxvuZq2tGWuVGnt7UpSfQUyJJbH+FyPSlom1FhDf1dfFubztKAuw9sPihLm6N6VmNYrY1eVrA4wBeb57IEdKx/dgDA07/4fGOLcvaqzXyv2Ow1y81Op9RuPkT4HuiOn0PIep4azz1vfqfbJTfyRE63S4oucbr95E6zc7z53buff9LlqZB3OtnVuD7W9RQaZ0Yp+r5A7cSNNFNlOaOm3SUFM+m0uxjC1/NGu7vaNB2FJZ8XI2QJw0gRRjYCg11H291n13G0u9/l0I9FC/28E5UjuTzPix368fUZSe5O4vSGsiEmphHaXZM01f9FSH1+b884v4cUeeKEnKDwKhlDapr69TVDPrhLvEx8HjbkgzvOvBv9iCGfOLvXFny0nXDxz/1Ak76Kfx4EmuFJw+Hpga97k0VojwFvtqnHgRb1KJzmn9KnpP55AGgoG2Kif6JeDwAd6/8wNZLl9Po4f77Dh2m/LBcXvclx2u9N9mW/p2Nj2xWFZjjmJW3MeT54zA3vchy/Qf4ZktV4fhqmUo+RPKyfhKkUmgHCP0xwUgfrYnkYRML6afoeZlZxUqkVb9JNLFeUbk3KH944ftwN/vCm9xNu8NuC/w03+HXBf9INfkXwn3KCnx/etPumG/k7gv+0G/ym4H/LDX6Vp7LfgVTz78G0qk1lQXGcYvhxQ77wz3gup79RyD9I8rB+Fkg/jqagXsqbnG4WFZ4ir4zltxWaYD0z+I5pENb/OvQR6+NnaY/X/tFgwHKEGRS+GfNtpT94TfQb2OlvD3A3lP4coL5p43ZQwc154SmWtsspN4e0wzxvES0bQVuPoG0o/eKlblDOUbt9Cmagt0cWRnhhOke74u0Q1DPaB9uBhnWCsLD9M4T17BSsk4SF7Z8lrOemYL1NWNj+OcJ6PgILc4oNpf3zhHVoCtaThIXtDxHW4SlY3yIsbH+YsF6YgvUYYWH7FwjryBSsbxAWtj9CWEenYD1NWNj+KGG9OAVrP2Fh+xcJ66UpWE8QFrZ/ibD8KVjfJCxsL21X6Lvx/NMVWQtTZPVJ1jzQCtTvKKygyBstN5S+MVZxilxPkVzYXtqu0HdbHeaHOUV5iqxFkrUEtPL2yDq8I1pJKGsZaNI2602OUYr6UXHTj9h5pfDPONXrKK/U9Ir64S3uqiJrTqHxPFhV+FQVPhrWc4ZYzxtiHTLEOmyI9YIh1hFDrKOGWC8aYr1kiJU3xPINsQqGWCVDLJ5HMG4Yxt/hw0/TcmjhH5VDL3qTseQ5kntR6Y/G+zmFt2BoawKcD5DmKTyDwrovhvCLoxtZA25E9G2D6moyH1D4HIgpM69DcU0sb7/Wbo3yWhpvIX+baHjy5xmibSj90m7/Pkc0fMBF9IZrYj7JdWBw3e3tFd/nUy2ajrd/H+5Bno/8PG9n9+F4H0vTxTNOeJfycXXxDOni2450IX6s7W1ofhwVX7Q9Nrxt9VH33pk7H73x/cvNj/gZKT4hgi6H9fjFO18PEatB9Z6h7+K2Yc9E4vBocvBtMa7fmFIfP68p14OyodB5S1J7zhavRW1J8nO2fLiyMfjuz1Sqw9tYzznBLw1vAz3vBL9Q5HD+DwdKDUL+C4PP2hTGIcXNSadC7PAq/DPepM+5CClZkof1w8vRdUXWnEJjO1pX+KwrfHIKjd8HslUszX9mkeuWkVxBuWqIdckQy7KPVuPoGffxiiGWZR/fN8T60BDrPUOsa4ZYLUOsm4ZYljZh6Y+WPmRpE5b6umGI1TTEstT9dUMsS93fNsSy1JdlLLxsiGWpr3mNhZb6sow5X4WcydImLOdtK90Hn3l9OYtc3U07rN4AS9sv2EOYuAbFfQJZo+KWqOWaUPD3ucEf3hLIKXrEPgl/7chUKuSvYDFNeGW8SVtxsZ7W+hZlI7iFzU8TaVi5hFgrCs3FmG5E9Bv5ZyNk1fqRJZ3E3a+Q+vsi5ML6GwpvaSs6xK17Qx0WonSIvij8t/KOO9HbUarH77hDG8yFYHn0/ShdWwQ8T6mvPei+psjEsi8r9RGPn6r77cHg3n+CaDDo/G48bB/g/2xAkDHnYwKNwXd/plIqih+8QPpB3ngUwHAvMvYPcgn/DMnqKnZqxwdRP7wXeVSRNafQeAy1o4VHFT45hcb52CxY7xtifWiI9Z4h1jVDrJYh1k1DLEubuGWIdckQy9ImLPV1wxDLUl/XDbGs9MXz5jzZ6lVDrC/7OAbltiGWpb4s56HLhliW+prXechSX5bx3tK+LGOOpT9a2oRlzmSl++Az763NIld30w6L99ZQTt5bO6z0Jyhu11yjvbUX3eAXo/SIfRL+WUUHqZC/gsU04ZXxJvXuYn2o9Q3lj7LdOI+XxfUDwVpRaC7G9EhEv5F/NkLWOOti7bFCbf0t9V+MkAvrRz1WJzrERwJc7K1pOkRfFP5b2VsTvR2iery3pj2iyFgefT9E18L21vj82/4BsHbuzlC/6nFmPpqOZ9j4bGTS33HB9qshWPhCQ3lUOqDj23+w/hODysG4X1gfx9SO0OKRW35kGmXi2Pp8CP+UN7K5NNV9GmS7PJAt603qSfTveLzbcecG4b9d5xi1cdLsSNvXNZSnFRVLtdxDxvIFhcaxC1/XgPUPQx85zmDcS9M1fzBwOW8y1r+1OS6D9pi4NjcEe+iHF8f7ttUcA3Fz3qRu+D3vGCvxPe/lxfG+aC/7xUcL9wMd6/9OdoRZG2Bqj9jz+LEvYiwKyonN8foynnK/g+twHJP6r0KsuEZxbNqbz1hmwcSXlKLM/K50qf8GzTuO7hmo847w0l5fwY+OJn1NyCFFD1mlHcdhN3EmH/sRFeGfUXTiIg4fjqlXt/bx4PHvaXEL5ZWxPKLQBEtyNvQhrP8C9BHr42dpj9cuURzGmM1xWMtj8RrG4bMUo7A//EqgqPkKcXNKe9Yhtps13msyR/ndVvkgFuaMOK447k8BJp4ZwPHA2Il2yLFT6t+G+H0zItfDua21OF3WVUXWNNX/OzC3dclu8EyAjIc2PnyO46DCN0V1PW/ybIs2H4mcyyH1N0L69Qno9BzNiagLbVz5PI7QlpR+BYXHVep/dwvj+tnidFm1tUaa6v8KjOvnNK6ov6hxzRENx1V0pM25POZJ51xsfzCCzyNEewpo8kbdLH0XelDcrpnasedqXjM96kSe6DUT6ofn6kNu9DOcq7VXZGl5teM1XFHLBcL2vsNygUOgQ6yPn6U9XvsxrZ20V2RZrte2Gysqf8ExDeLVD7dpHckx4pAhH21NquVj6OtIEz58jflge6nn9gxb0ddyeEP8vHZPxhC/oO3f2+GXhq8wwH1ynnPc7HuXK3HnHOGfIVldzTna6/NQP3zGz1dkzSk0HkNf4eMrfHIKje/lzgvWNUOs9w2xPjTEstTXTUOsW4ZYNwyxLhliWfbxA0OsefUhS91fNcSytPumIdYVQyxL+2obYlna121DrI4hlqXdW46jZfyy7GPXCCv4zLn8LHL1jOQKiqW+LPOJr8I8ZGn385p/XTbEes8Qazf/2jm7t8xNdue0ZFjzmsvNayy0zOUsY6HlOFrqa17zL97rnEWuec2/rhtiWfq2pQ9Z6styHrL0oXnVvWX8stxLm9e9IUv7ssx95zXHnNe5g+9jWcwd2j1UfI+y4+crioKfd4QfpSvsk/DnZ2CErv0VLKYJrwxhGfctH9W3qGeR0Kbi/KRUXPsULMc/KTUc05ci+o38k94LtPKz4PNBQ6wsYUU9k4RYUj+v1NfsRPvZLGkrY4s/T2I4toWosdV+Emwrz1uJ3q5QPfmZwAVv0jf8ECyPvl+ha4ue/ryV9rNzuRA5hS9fizrvdiSCz6Mz8nk0Jp8vcn8YW85Z4bu/5GyS23MmlZbbcyaVmvZssR1+uaflEIbyF7T5xg6/VNZyFDv8ak3mJ/xZQ4kXbn+ur1KMm9MI/4znNP4PcxrtZxlRP3zOp6TImlNobCMlhU9J4aNh5Y2wgsL3rGbBumaIdcUQq2WIZdnHq4ZYlwyxLG3isiGWlU1oc+auTURj3TLE+sAQa15921L3lvq6bohl2cf3DLEsx9HS7m8YYlnZffCZ8/t5sYmuIZaVTQSfd/OvnbFVz5vPuTb4zGvY3VgYjdUzxLKKOcFn3iuYBWvNCCsolj5kGaMt57R5zQvndU6bx7VVUCxzE0sfstSXVYzenTu+HHNHUCzXVpax8LYh1u6ews75kKXuLfvYMcSa1/WQpe5vGmLN636hZZ6zGyd2Lp/YjRM7p/t5jROcf/kKVg6unR/U185Q8H3R4hSsE4SF7Yve9D4i1knCwvYlalcGGsqP79FBOygrvI8o+IKxolwP/jUG3/2ZSrW5ovTDDr/QEfyKE/xSV+63V0GvqcFf4V2D63ZnA0qx3x0s/DMkq608o7MKNZKH9cNnFeqKrDmFxmNYV/jUFT45hcbz7SxYLUOsa4ZYl4ywgs98L2YWuS4byRWUpiGWlb484z5ajiPH8Xmx1duGWJa+bWkTtwyxduPXbvxy2UdLu79iiGVl98Fn3sOfF9+eV3+0jNHzOtdajuNVQ6yvwjz0VeijpVyWcXVe523eF5gX+7LSV/CZz23NItdNI7mCYrm2mtc5bdcfd66P8zpvz+vcYelDljGaz6Z9Ge3+Q0Osed3raBtiuYjR/NxkUBqDv/5MpViSvWh8JjzljfPFvTPDffNuiviJjvAa8s+QrMbyDPfxtftUqJ8F0k/ZjTydFOGjPGVFPzKWFYUmWHKfAe+TYf0y9BHr42dpj9f+V/rB35yCyXGyovQHr4l+g99u+K8D3AQ+UGj38sVyt1r2K81SuVMpFjqFqt8plXv5fC1fqJdqxWKvXap1aoVir1AttPnZUZEV+Toa41JcHxD+Gc+pT+ajbE67H63ZnLRlWwjKhc1RvSS2YGlXmlzym0sOY205603qlu0M+2c4roW4dib8M55Tu89HjRnqh+2spsiaU2gvUTscz+3RebG1VZ07esdSpM5fMtD5c/CZ54tF5dpCCFZQeI00C9ZNQ6z3DLGuGWJdNcS6ZIjVMsT6wBDLso9XDLEs+/i+IdaHRljBZ77/NC/2ZemPlvZlGQst5bpliGVp9192mwg+8z3vebGvphGWdR8t7f66IZal3d82xNqNE1+OucOyjx1DLKt8IijzqvuuIdauDyWbO/i5j10f+mLq3nLtbrlG7g2wZA+J1zSNwXd/xiL4zwFvI+wiv090BuyiHyL3i/ZyF3jfbgbsjh8iN9qz3R5caYhft9dLT/brVgFbfis6uJfyo2VvzEa/M6iD94JWod/PAB3r/+c9I8wfDzDd+kFpeJ8S37ub8sZ5u/md+4KfIn6ep+/jCv8MyWorz2gf91GSh/XD+7j7FVlzCo3HcL/CZ7/CJ6fQOH7PgtU0xLpiiPWBIVbbEOuaIdbtOZXrqiHWJUOsy3MqV8sQy9LuLeWy1P17hliW42ip++uGWJZ97BphBZ/5925nkatnJFdQLPV1yxBrXn3bcu6QfELeN4D54/PeOA1t6RDxOwg0xJe89HGgW+aBgv8NN/jD39d5wpvUMfZJ+Eue+RjUT4X8FSymCa8MYVnrLqpvKD/bzxMgD+ogDOuJhFgrCs3FmD4e0W/kn42QVevHQdKJxkdbo0j9JyPkwvril2j70lZ0+BTQrM9ShY33k8BT+G/lt4lEb09SPXl3y4I3qftvhGB59P1JurYIeFhEx7iO5d/YWac+hI1vTmkv9eKs7d3EgUIzblwS/tu1tn8spl5Fd48rsuYUGq/tNf98XOGTU2i8tp8Fq2mIdcUQ6wNDrLYh1jVDrNtzKtdVQ6xLhlhdI6zgM69LZpGrZyRXUCz1dcsQy9IfW4ZYlnZvGQstx/G6IZblOFrGL0t9fWiIddkQy1Jflj5kmU9Y6us9Q6zduLpzcXVec4AXPBusoEgOIGs3zPcf9sZpuKZ6hGiPAG2NZFlT2gXF8X5XYV73u1AHqZC/gsU03u96xE3fIve7UP6v0n4X6tpqv2sWnfDafE3Bito7izu2G97keEpbxz423Ds76IXrCflvZe9M9HaI6p3YHOmBx+7xECyPvh+ia9P2znBMcyFyCl++xraC7dci+ByYkc+BmHy+yP2Zdlbq0z06z7CzUvuBjvX/BZyV+uU9433E9g95Xmj/v0a0LNB4Tsd9SaknPr0BNDufzvuiSxlPLELbB7xXifYQ0LDfXBbpO/YpiBHnUiNcrsfyoA5RNsTEsdb0mqb6m3tGstxa1zFTgIlyyr6+1BddLnujfmMdlkHq/xrIcG1dx1wK6ddGCOZvgg3/jT06pufpcxT3ax/1i2XIkQxS/29Cv84BA6wj3zEWyPsGhNdDCi8v5BrbxkMhtKR8UT9y7Wsx+KYUGtsS6xPbh+mcbUnq/0aELWUVGVAfPO7rJAPX2UcySP2/q8gQ6FliSPvOd79/vPndu59/0vWoLMFnDvXaUPMQZBWcsCJqCLon7sI48j3KTDR39EKuhQ37GlzvdD/p3uuGKGiBwFZDmC14euFYKu2C4nbOif8+C+Gf8XS7bdjIk+c4L/Kwfvi+XU6RVcuPZHCj5nn2NZQh6p5sVOxYj9mfNW9k2Hfv3fkszOZwDtdsbi2Ef0pp71HblHItKIFT/mzglCvE19gOhu8SWlNk1HKPFNGwv2wr7EtIQ1tZIhrOF2mi4dyyTLSvAW0P0R4G2l6i4bp6hWh4/z8Dn7louZ6MWcDvg9QIl+tJCfrzewPBg7ZftjUMYy14k2uToMjv6ojtu9ljavsij6yr0170nmGa6v8hzPVZyjceUfT1qKIvlgHra3uaWjzlPR2NN46V5DFu9z9H+n0C9Kf17XGgY/1/E6FfbX8sSr/T9kh5Pxl1+gRhTdPvic0Hf+ddv/9uB/WL/vUE0VB2jnea7qP2g3MRMiCfAzPyOaDwicLKKVi4Tugnwh//xe5n5+7cG752UiBRrR59XqFrfLSVU9/1EFF5rcF5/EH6vkbfv07f9ynyaUXkwMKyLHrTi5i66Oo/ganfJlPXpjacjiRc8hYctsUtODGvl6Eem/HLCk+8FmXGUk/jw8fAX1HapYiGMrwSIQO2l3oS4l4Fml2IKw1D3GsDvLDtzFeBjvX/W0SIkzbY/28r/WcZsD72W+TRdC9tswrvVMhf4cPXeFxQhme3ic9Tg88bCo1tXdPzqxF8sP2r29Sf3Dbx2dgmPtlt4sNHol8z5PMa1JH5RuztdaBxXHud+PC1qLj2OvXnZcP+aHE6q8g3Kx/UDT/60wAaznEixzFFDonxb8B161veyE/kZR0I/wzJaizPcGvsDZKH9cPbHccVWXMK7Vn4jDTkc1zho2E1SIYGtNum8StsdfwabuSJHL+GN6nXpOP3Iun1uJN+jF4hccKbLEJ7E3g3iPYW0NBXuGhbV9KnIG9qr49wuR7LgzYmsm14k+ON9XhcosYqp7SXeivepE4Mx6PCevWU/r8NvI/CZy6azkXuQOd/nB3hcj3m2QDa20TDcT9JNLTbd4h2AminBp83vHCbSxFN+sjXeByx/ZskA7abdU7UZNbsEvW1Fbs8pvCJis1b7U9DkTlqDt8qH+zPceJz3JAP2uIJ4vMdaIdHXi7sHbXBdrhGxLayrZym+p3sCPPyAFNiCfqzYSypSd9OepNFaO8Ab/aNU0BrEO000Ng2zgANdc5Fi0+ii0BFP08Qn3Ae4jjTUNqueJO2txP5ivDfrnzlGMkTFmu0+C1t2Z+CcnHzwd8NLzxGRclwTJFhq3HIbc4Uf2yF/3atJY7H1KuW10lbbS6T1+xteOE2ESVD1DpDi/0SO+VWwPcG8TKInff2jvcBY6/8XAnniUF5i2gnFFqA/+ur4/2ReITHw3CfmuO91P8JxfiT0E+7sa9UOY4LD+R9yhHvuH4g/LV5ReTOKLSlGWTttWt+0a9UOt1KqVUu9VKEL7LyNd6PPa3ULyj1Rddn3Oi6IHPg4uYI/zToNShLQDtFtDTQRMbARP/S+rj8px3JH0f/yD+n1D8JfUgyli6xMB5YYK1vEeshb9yfMOa4jUGluhaDpGg+f4RoaHM+0dCfikQ7CzQ8PsRFyzNFF4EP/LUEew+Yq58KwZS5ANfwMsekqe5vwdz2D2huw3nznc1xGs7PwifA+F1arwgfPK8p82RQ3g2R65/R/IV2ZWg7HbYP4YG8TzviHXf+wjjL8ojcGYU2y/zVyveKXb/VKhVanXKlUomaj/Aaz19nlPpVpb7o+qwbXbe0+esM6DUoS0DjuQ3nL5FRm7/czL+lVhz9I/+cUv8c9CHJWEps1/ImbZ3Gj/PgHhfmur9LPu4mT3ww9tw3j2TEceP5AW2S54dzQOP54V2gJZ0fRBdJ5weMk9gnxFyCa1qMT1P9P4Q54g9ojsA5XXgH9c6sjNc7rcjt1mfi33MT/loMdbFO1mKi5nea/bF/I42PSJ5V+JxV+GhYMpaO41onq8jlUf/RxxpEQx/DceOi+RiuQ9pb9DGRbUORAeslibc5pb3Uk/HAftuNR3n42OB5b7II7QLwPgqfuWg6F7mT3v9BvV4gGtrmRaKhTV8iGtrV5cHnDS/arpAmfeRrPI7Y/l2SAdulQv4KH77GfDSZNbvkeSGpXZ5R+ETF+a32R5OZx9yCD/bnLPE5a8gHbfEc8cH1B97/+TNaT0k7vP+j7Sukqf5ZuP/zfynvQj/YyVjCvnERaGxnl4DGtnEZaKhzLlp8El0kvf+DuSv2CWWPm3dJ/dVBDuU4T/Ifon5pOt3N39znb7inwrEnaf4m9jhv+dsxou1E/oa+GpW/Yb2tzJPavvJu/rabv4Xx2c3ftsZnHvI3vPeA+durK6M22A7zN2wblr9VIH9rUF7gZt/si5m/4b5ZkvwN19ocn6btcaWId1ied2rzwV/eX7uwMsJ8dyVcrpPA+9/u7q9x+ULtr/G90d39Nd3fovIzrLeVeRDb7+ZnI9pufqbz2c3PtsZnnvfXfhAjP4uzv/Yk5Gc/pPxsd39tVGcn9tc475L6vz5H+2vacwZuz5/Ez9+Ef4ZkNZYnHxUvtTO82vzE5/eQxvtrWp54RuGjYfH+2rycXThGNPRPHDcu09ZSSfI31LPIpp3d5vFIenZbOz/u+BxRl3MbT+k/5glJ8zeRO2n+hnrlOI+2eZ5oSfO+DS/arpAmfeRrUc9FbVd+cJz6gzLwvm9Suzyl8ImK81vtjyazlu/Mykfbx97ufBSfIcP87Q8of5N2mL9hW87fhmtUyN/+iPICR+eWE8cS9o3zQGM7wxyJbUPL++LGJzy3nCR/w1jN8Ul7BlDb49KelXU7Rn43ji0j/4zSXxc50kmSh/UjvrXmjV7b/1H33vnPW5983D7d/f7dY592zjc/u/dx85Njnc5n3bt3sTfIIav0lq2F68hnX7mOGKem9ELeSrXhTY5ynLtziHWCsLSoxlEkDOskYWmRi2c+zds468T6KM/ZKfK8vRkuz1nCOheBFXyWt4lpM/05wnp3CtaThIXt36V250P4YB2MhucV3ho+2+2FKTJ/i2RGuXjleXEK1mOEhe0vEtalKVjfICxsf4naXQ7hg3VwhX8ZeKeUa5o8T0fIc5mwrkzB2k9Y2P4KYV2dgsUvWsT2V6ndtRA+WOcqXL8GvFPKNU2eb0bII23jzHAoq+GMEvspFOG/XTNclF6DwrsA1xVZcwqN7xpcV/hcV/hoWKcMsc4YYp02xDpriPWuIdZ5Q6wLhliXDLEuGmJdNsSSmKjdzckTn6R3c7D9dt3NyROf49AOV5vfyozaoA3iahNX5fjSYqz/X9ZGmM8OMLU3D4mMmp559yypnjU+MtegDRvesRi+XQrncClCw3muAp+5aKtTkTvp7hnqledkjDPXiYZx4wbR0HdvDj5veJP65Zio5YF4LcqO+Q4stpvVXzSZNbvkuJzULs8rfFz7P++Knjfko60f2H4s+Ghri2nx7CTFM2kXFs++CXSs/+8hnp0eYK54k36wk7GEfUPLS4R2A2hsGzeBhjrnosUn0cUsu2ccnzSfWPEmbW8n7hwK/4w36XMu1gzanoAWa7T4LW01f+K5VttDuKDw0bCukAxRaz5H41fY6vi5XvNp4xe15os7fnXS6wUn/SgXeO7HwnMy9k07WcH7Vx7pBgv2KendWrQxkU3LRXleT/oWTGwv9RznmyXWq6f0H/djjsJnLpb5JuqV4wGO+1Wiod3yPIDzrMxtWr7JsSxpvonttyvf5LfsamuXrdqltqaKis1b7U/UHTBXee285Zs/SpBvBoXv1kr9fwX55o8p33QzZyaPJewbuI/MdoZ5KttG2D4VFy0+iS6S5puY80ufHOs3r9koy4Ux7rgif1xdyCvTksZqtnNt7a2dKCnBZ7Zxze7Z17B9nBMl85r/H3cjT2T+qOl1J/N/9u+o/N/ReqkUd/yE/3bl/9peUUnR63bYd9g4H4+Qx81eh1+IytW03Gaf92BuZBsKu5cddi9ZroWNTdRZDfR1ztGmrfNOEFbU/uKFKVh8VkPTAfsw19Oww3hr6xz0M7wueQ3qik/UXaC62okwzqcWQmS4AHQca+5LSqmv4fG5Ay1nR0w+Z3BcwYpaS4ifYZ61E3FR+GeUfruIi9r5CW2NFvj9HtI12wyOX9g5oXNKXzkeTJOJ40HSMx2IdYKwtDMdlmtQbW95VqxrBlja2vgy0XCdcYVouM7gNch1RT7xN9wP3wl/E/4ZktWVv90geVg/mr+FzXfaKd2oOjeAr1wL/t2cIhP7G47ZTcJ6bwrWCcLC9tJ2wZscC+083HtT6Nq+lQfX3id+iHeD6t6gutqZtLDv7yfARRluUt2bETJcoboXQ/hoY3YFcOU66l78OWmMuEg07Uwcn1/4H4M9lyDH/N+ZcL6nI/iejeAr8w/i8xOX/wdk+P8RMhyPkOHdCBnOe5P4MqbavjjSTyt9ke/Y97C8is9vvanUx1xV8LTzv7wvgfP8VeLzrsIn7Fwuft8b0g/Wr6VtMD+xD1/hkaa62dWR3OuwF4R1BCMojp/EjD0P8pOYrtfj087UR71Jg8cXaXwGM+kTY4h1yhBLzmB+VZ8ixHHZ7qcIZ7UJbM9PSvEzFdpf4cPX4rzFJc7zKdoTOycj+JxS+GSVdrP2R5OZx9yCzzw8RRh2X6qyOmqD7eLel5L6P4P7UvUBpuM3/Jg+Rch25uopQnwzkNVThJpPuH063y/Hnbf5VzocPa04nLe15+q0WBOYqzx781H33unu9682P/m407z38Z1PL3Z/+fPu3XvYDYReUrrJw79E7KQebw2+tTlZD4t225+ni6S3/U8q8sRV39ub4XKxm+yAWRa/6GappRXSVgvzs75oH7GijpqUiU9SmysrfBz/wFFTm8qlaHouEw2nLbQPLlqYlz7N8gIRftFWlN8mTbG0eDJvL+RLmvrj1LrV1D/s5abatJt0WbDhRdsV0qSPfC0qlm/Xi8yiUn+OR0ntUnvpp+vUn3/Q6R1DPtifnVpihKX+P6DUH7eM4qT+Uv83IPX/IaX+brZpkscS9g1cFrCd4bKAbUNbFsSNT6KLWY6kcXzCH+GVHxQU2hvQ7m1qdwJogo8/wqvlAK9647RXgfba4HOa5PrHZA+vQRs7eygO7UH6KTyQ90lHvOP4bFQ8Q7m1fHSWHzMsdFvtSrPZK7Z7frvZ6yaNy1L/HaX+S0p9t/l9sSn+gj9miD4alCWg8atc0kDDl7zxjxm6yUmLzTj6R/45pf556MNW5liLPFJ+GBF/lFV8W4tN7Itu4kD89Z/wz5CsxvIM13+veZN6/Y6iV20dIG213B1jMNKQT9S6DLFkvtDie4P4vKrweTWCT0OR2a0tlKranCBFi8ENomEMQPvgos310qek6z/UOefZKAOP+3dInjD7yintpZ6MB/q04XjUtDye+486T7r+E7mTrv9Qr5zvoW1y/t4AGufcUS8CRf0ib7bVReUajyO25xxPy4XixEeNjyazZpevUX+S2uVrCp+o+WSr/dFk5jG34IP9aRCfhiGfBtTh421h678/pfUfHieIs/6T+n8V1n//cXvWf4ljCfsG5qdsZ7h3w7aB+yAN+MzF1fqP49NujrX1HKuhyKr501vwmf12UbkW5Zsylhve5BgdIz5af16L4HNM6c+KIsNO5ljHiDZLjtUYfE6aY6HOo3IsF3OZ47iYeDyS5lgYw7aaY/E+SANoHN/Qpjn/wrjI90pQv5xjJV0jYfvtekw6KsdqeOP9SWqXDYWP6xyrQXwahnwaUOcY8TlmyAdt8TjxwbUv5lhPr43aYDvMsbAt51hS/yPIsZ4ZfJ639TP7hhbbtfyrQTTMv1DnXKatu5PkWNq6m2VPK3VfIZrULcB4dQafNV9+2RunvQy014n2iiKTtleDGKgTzeaCzzXqg9SvD+QOdLlvQ8dc8KLt2G3+0fZFnmNKH7W1V5rqvwZ9zFIOgXvMovvBe9m9pU0n/ckHcjxMx7LFDu7LD3w5ji4q9Xkf/5hSvwF1OA9G/+M8+BUFC/NT2afeSRtAn2kAHeufimkDotedsAHUaxwb0NYJcW1AdKbZwBuE9bqChXYxDzbwOvBsAB3rX41pA7iuCsrSppP+qDaAeo1jA1g/qQ2IzjQbOEFY2joV5wK+XyXYy54+H/G9ZKnfhDE6tz4uH86pbL8vK9g4L6cIA/uxqvQjSzRse/9VP8vj8ksO9zHkBL9COZybPffR6xwkpwnLAd72xmWW+r+k+EWK2qC+ouKOdm8R+83nC3B9x2fU5uUeBee8cfcVG0Rz9UNmeE8kF2OPBG0zRTyFR5h/a7k0ni2RtRDvH2+CX/yE/MLRudyhX8hYanve7DdY/9ci/OLkFH3FOVtxUtGhtrchbR3/YFM9q8gqRbN93m9H22e/QNvn/Xa0/QbR8HyX9roRKZpf4I85xfWLn5BfaPtI6CvsF8cVefE+DJ+r+9vgFz8lv0C9uPAL7cdgUf6z3rjMUv83I/zirKIvbd+NZcD6WizUHv2VtvP2OCOfQ4z7CBLvi+IjSLwvqj1qHNcvRE9J/OKn5BfTfsQ0yi9OA+4PyC9Ed/8E/OL3yS/c/ODwyC9kLMP8Av0G6//TCL+I+lmqoLBfaK+jwn6zX2B85Z87cKOvUi+ryCpFs/2zREPbZ79IavtCw9fwoE64aH6Bj/vH9YvfJ7/QzvbH9YszgFshvxB9/Gvwiz8hv8C+u/ALfF2G5heXvXGZpf4fRfiF9jNc/MoJrK+9lgn7zX6hvZ7Erb7K5awiqxSh4esg+NVgcV5jhH4nNHy9Cj+mfhNo/JNpWDS/ED0l8Ys/Ib/QXo0T1y8uAu6P6HUpQvsP4Bc/3x6/6EjfZCzj+oXU/9OEfhE1X2ivGIvrF9LWsV/M1U9aCE17fZNLv/i5I784ST+zpP3MjPCc9tpP3s919Pq/Ntt6mP9cAjrW/58R/hP3VaJR/qa9Zinq5yB3Mt5cUOThePP/Yu5/n4f+BGVp00l/utr+N45bGvhOG6OgJI2JorM4rw2L+hmq4wom/pwar20y2VGdxwefd3Jtoz0by2ub9YGc27G24fNaX/S1DZ8j+aKsbcQ2U8RTeOBYBYXnKu25ZfxRe95X+ib4RZH8YrtehY1+oT37nab6z0T4xfkp+mK/mPa6ZZFnw5u0fWk7bz9jwHlaUvvmtZTmaxi3+ae1sWh+gT+bENcviuQXWvzD577ZL04p8t7fCwvxixr4xak58Au8NxbmF68k9AvUV1K/EHl2/WKctt1+cSqGX+C9JfaLdxR5A9xXQ/ziXfCL5hdkvriU0C9QX7vzxTjti+IXTUfzxZ/tffBZbEzO7PTAL75HfoHn+1z4BZ4xkb7huZ23vHGZpf5fiPALaYP6egOusV9oZ1aw33yuFs86SVu3+rI9d90gGtrLMaLhvUJel+CaAnXCRfML0VMSv/ge+cUJ4oFjFRT2i+8o8ga4FwZ+IeObg3qHvXHaU0A76I3L84IiD9ZfpfpHQAatvuClqf6vgu2fo3dUHIX2hv7aEplfBJkWlX4dJZml/l+P8Fdpg3o7BNfYX19U6mO/RZ4N0hu2XaHvtvrKD8+evqTo6wVFnjTV/1uKvrS9txz0JyhLm076o549xXFLA99pYxQUHtOXlPo4NqKzHNXH8RXaYaAdJRr67FMkQ06RIe5ZT2kb+PJng4C34U2ON8cTtE2OJ5pfYH2OJy+CDFr9MN/8+xHxBPVsGE96IrMPMmnx5CWSWer/VkQ80WxpA66x7flKfew3xxO0S2m7Qt9dxZO8oq+jijxpqv/TmPHkBehPUJY2nfRHjSc4bhxPosYoKDymeaU+jg3HhTzQXiQaxpOXiIY+e4Rk0PKBuPFE2ga+3KJ4gvWeJ56HFZ44l57YfPB3RZHZxb0njDmL3qQ+jwAd6//zCP8+ovTxAFxjW5gWRzkmY7yWto711YrS16EY+vqXMf17FfoTlKVNJ/1pa/6Ntsn+rY0p1k86pqKznDcZIzmXQB86THxWFT7oT+zDOFbSNvDh8sCHA72cTI23WQC8AWlob4tw3XB8Yv/EilzLkKzG8gzf17HoTeob9cPv61hSZM0RLShvbY7qMW1RubawzVgb3uR4s81rulmM4MNjFZSs0o5tjnXaGHz3Zyuxfx5A+Gc8pz6Qjxo/Ta+iu7Qia45oQWE7SSt80gqfLwqWtA8K+2NQzm6O03CMWadxbVXeoxDEVoylG1742AjvwSN4Y9fTirxpqv/faU90D8naGHz3ZywPAa5HvFaU/hnyHp61W/YmS1bpN4/7XqDx2K6QzEjLAI1/QwPLIn1HXQS8D0OuwfWkaDaSItqy0g+h8bgHJedN2naaaGjby0TD2LaHaOhL8h7nFGF63shncez45y813wt8CPXvAd/G4LuftBQ67Uq3UK351Uq+UO+wTXuO+ZebfqFbyrda5Xy3Wa/3tpt/t1bv+PVet5nP5wsdvzuNvxbD0AbFPjQb5PgmPojX9wBfjm9Sfz/t+bC/NraoCy5afFuhPuyBPmh2ze/CkfqFQR+Cul9fH9fZMvFAGuqT/X0v6QFpKLfoW/S36kZ/w3tmg2OZY2tElHXVG9eR1H96oJdpa8Rl6E9Qljad9KekrRHFH+/LD3yxX5436jfW53x5TamPYyM6y1F9bY7QcqS9cI3fZyA6XPb0MRI8zjWOwhjx+wzQbzIkO/ad55FFhS/PMWjT989mUEzgmNQYfPdnK1XOLbBouQXnHeiHnHdkSGakoR0kzTtEF0nzDos4tOSN85sXvxWeQWG/RR9dVOqz307zc1kD5LzJsWT71uaaJD4TlPPED+1FxgZ9xkVe0W5VWqXgdxvypUqx5G97XlUqN6vtZjWfr5fy/fyqvO15VatUr7bq7bLfT6/y9eJ28682a33u9VKzVPHb/dx2u/kXarVKvdDyS9VOu9cpbXv/W51K268X851ms9rvfm3b+9/pdPOlfLVe65ZKnfq221+50+ovaQrNen950ymW20ny+pQ3HjeCsuiNx6eg8JptkWSfhrUQgZWKwEpPwTpBWNr+SZy9bEd7F7H3soX/du1lT9Mr5yvLiqw5T8+/5DPSkM+ywkfDShliLVF/EBt9Q67v2Rzndf8vXJM8QnKdvVifaCtAW9oc8Q1KZvBd1pSMJXKkqf6vwjoyKMvQRtrnFP7LxH9MbuUa2iFjLSrXpH6g+78MOQfGHN7H5VizolxrDP72921avU4/1JdLrapfKXQqrXKp1K12i5VW3a8WK8Wy36v0Wk0/XyjU2qV8u1rw6/Vyf9+jXPXzXV4zIHbRLxUq3Uqp2e0W/W69Xmvni+1au9ttd5rFZjXYN+q0us1OudBqF3rFVs/vNru1cr7VFyXvt/O8B4vYfr1abPmFdrndbLaLxXq3W+oDdZr9vaBioV4v+L1qq5dvVZp+tdvvXatb7vQqVb/kt4q+X68UBHuvht2s9XvZrfTTj/5/vXKn1k+JSvVOqdbrd6nU8fuJmd/qz06dar7arLfKxUKzVyn2JS4X/Wo9z3srY/rOF/PlvlSVWq/iF/1CsVDy2/V+vheMQLVUqfRVUmzV+slXu1zoK7tUK+QLzXy51faLpW6zItgZTe5up5XvFurFdrHdredbvbZf6vY/Npv9TKqvqlK+1wx2rIIx7OdYfrHba+XbvWah3SoWy9Ue72kgdqFWKLer9Xa70iy3W61ut1ftVJq1+yrOF1rFvpDNYrFWKvnNbq8PXqz3lVRr1+r5UrUvRl2w1zSdFEv5TqVa7jX7Gum2u8W+kvqDWWw3i6W+bRZb+Xqr0q1XKwW/VKn2r5X60IVSu9SXoNMtlgU7q+rE7zQ7hULZL9eKvf6c3vOb7X5q1e10O71834JbtXLLL/Z11uxWy8Ve3/LzpVat1uzV8u1WeWgn6xp2qe8TxX4HW5WaX+vruF0rdGvNcrlZLxc6pU6v4BfKlV7XL9eLnXqp3r/c95+m7/dl6Bvn8F0QeF6J51E8n2p9xgj5eZ4+jwr/DMnqah7VzuVp57lEd/sUWXMKbR0+Iw357FP4aFh7jbCCIvu0FnJljeTCmDtvfcwYyYWxaN76uGwkF85B89bHVSO5pL0FFvbR7f3fvC/xC+OdFC22cd7oUR+xoNxBrPo0xr6llsfvIxrapayJOY/aaT3xHIZF05PInVRPOB6sJ7QZ1pOb+23J9YRrBS6ankTupHrC8WA9oc2wnng/vzH47s9Ukusp6f0CkTupnnA8WE9oM6wnN/cfk+kpKBc3R3Jw0fQkcifVE44H6wlt5iGirSq4vCax1eGDc77cDy3HFv4Zz+WYjnLsqHulQeEcO6vImlNoPA9nFT5ZhY+GtWyItWCItccQa9EQa68hVtoQa8UQa8kQS2IF5z2eNxkfHO0dx97LFv4Zb9LPXMSHBUWv2hrc8bn14XNj2v2P1Qh5HN17GP52u7ZvnlLk2Teoq9mQ503aNMq9DPge8FicwpvvBUWdtdVsLGxvmeVA+RcjeHme3u8w/sxjUcE7szlOW4ohm6ZzT7mmybY4RbYlRTbGXYjoRxgflCnqDHWKaJrsTu6T9/eUm8Vy3W93y9Vmpbrt5xR6fa69qh9stnYLneY0/tq9HTxTExS5P4T3j7C+4KWp/oEB+P0ziZTPphV+Qb1DEfVSIX/vYyjXljbHr2n3lfB+m9QX3pnNSRmFtgq0NPFZG3xHfSGWyJGm+s8O+i5jgvfIpH1O4b+X+I/JrVzjfZNVpf6qUj8YnycHwondYt+t5937PAkfr7FsYjscr3k9GRT8Pcqj9Dt+Ms/g+VJsy2dwpf4JsHcfxpLnMenbVs/cTzsXF3zH+2ycu7nZR4j/fJPwz5CsLmwI+Yk8qHPPm8yVHK01SyKPttbUzgMGudK6NzlmKJ9g4Xz79uaDv5p98doj6XkHbM/PcuAYRz0DwucQ0UbCngFBe1/1op8VSBGW5sfcNkwX6PeSR/LZ+3fA7z8hv9eeGdL8l/1ee2ZIaNozQ473bYa2O5yXPV2neDYf618Y6EV7nl3zBzyDEGevQju7rr0vYHhehr4b62v4rML6FH1lSV9S/3qEvrT+74nQ17pSPxuhL9QltmXeYbFou2xxmm7ZFqX+bUW32nnyvdCfoCxtOulPWTtPjmt5zLHC/EVb+0eNv+YvOaqP463FeI7VyHeVaBibOf5jjJfYhrFUux+Az5cchfGUnM/1s9xaTilFuzeIeuOi7QuI3PdtcIv34JaJps2zzE/av7k5ovEaPE3fFxQc/i4+qOUIaar7Vwb9dfzsjfo8HusspfRT0zXuKfw5vTKfgu54AgA=",
      "debug_symbols": "",
      "brillig_names": [
        "get_l1_token"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Beacon"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "target",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "overrides",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "minter",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shielded_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Portal"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l1_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l2_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "recipient",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            },
            {
              "name": "message_leaf_index",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Deposit"
        },
        {
          "fields": [
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Withdraw"
        },
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "aztec_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Register"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "name_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "decimals",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::register_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::register_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_register_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_register_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_log_claim_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_log_claim_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "withdrawNonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "burnNonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::withdraw_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::withdraw_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_shielded_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_shielded_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "token_contract_class",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::constructor_abi"
        }
      ]
    }
  },
  "file_map": {
    "109": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "114": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "118": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/dispatch/mod.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let name = function.name();\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_struct().map(|typ: (StructDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "119": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/events/mod.nr",
      "source": "use super::utils::compute_event_selector;\nuse protocol_types::meta::generate_serialize_to_fields;\n\ncomptime fn generate_event_interface(s: StructDefinition) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let (serialization_fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let content_len = serialization_fields.len();\n\n    let event_type_id = compute_event_selector(s);\n\n    quote {\n        impl aztec::event::event_interface::EventInterface<$content_len> for $name {\n            fn get_event_type_id() -> aztec::protocol_types::abis::event_selector::EventSelector {\n                aztec::protocol_types::traits::FromField::from_field($event_type_id)\n            }\n\n            fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n                _emit(self);\n            }\n        }\n    }\n}\n\npub comptime fn event(s: StructDefinition) -> Quoted {\n    let event_interface = generate_event_interface(s);\n    s.add_attribute(\"abi(events)\");\n    quote {\n        $event_interface\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "121": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "122": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "125": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_initializer, is_fn_internal,\n        is_fn_private, is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform note discovery, since they may need to access notes. This is slightly inefficient\n    // and could be improved by only doing it once we actually attempt to read any.\n    let note_discovery_call = if NOTES.len() > 0 {\n        create_note_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $note_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_unconstrained(f: FunctionDefinition) {\n    let context_creation = quote { let mut context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All unconstrained functions perform note discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let note_discovery_call = if NOTES.len() > 0 {\n        create_note_discovery_call()\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $note_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_return_public(true);\n    f.set_body(modified_body);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_notes`, causing for new notes to be added to PXE and made\n/// available for the current execution.\ncomptime fn create_note_discovery_call() -> Quoted {\n    quote {\n        /// Safety: note discovery returns nothing and is performed solely for its side-effects. It is therefore always\n        /// safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_notes(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            )\n        };\n    }\n}\n"
    },
    "126": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/mod.nr",
      "source": "pub mod dispatch;\npub mod functions;\npub mod utils;\npub mod notes;\npub mod storage;\npub mod events;\n\nuse functions::{stub_registry, utils::transform_unconstrained};\nuse notes::{generate_note_export, NOTES};\nuse storage::STORAGE_LAYOUT_NAME;\n\nuse dispatch::generate_public_dispatch;\nuse utils::{get_trait_impl_method, module_has_storage};\n\nuse crate::discovery::MAX_NOTE_PACKED_LEN;\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `process_log` and `sync_notes` functions PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n    let unconstrained_functions = m.functions().filter(|f: FunctionDefinition| {\n        f.is_unconstrained() & !f.has_named_attribute(\"test\") & !f.has_named_attribute(\"public\")\n    });\n    for f in unconstrained_functions {\n        transform_unconstrained(f);\n    }\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let process_log = generate_process_log();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $process_log\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    let mut max_note_packed_len: u32 = 0;\n    if notes.len() > 0 {\n        max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (StructDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The note discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_notes`, `do_process_log`\n            /// and `process_private_note_log`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_process_log() -> Quoted {\n    // This mandatory function processes a log emitted by the contract. This is currently used to process private logs\n    // and perform note discovery of either private notes or partial notes.\n    // The bulk of the work of this function is done by aztec::discovery::do_process_log, so all we need to do is call\n    // that function.\n\n    // We'll produce the entire body of the function in one go and then insert it into the function.\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        quote {\n            unconstrained fn process_log(\n                log_plaintext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                tx_hash: Field,\n                unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                first_nullifier_in_tx: Field,\n                recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n                // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n                // unconstrained execution context since it will not be available otherwise.\n                let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n                // TODO(#10727): allow other contracts to process logs and deliver notes\n                let contract_address = context.this_address();\n\n                aztec::discovery::private_logs::do_process_log(\n                    contract_address,\n                    log_plaintext,\n                    tx_hash,\n                    unique_note_hashes_in_tx,\n                    first_nullifier_in_tx,\n                    recipient,\n                    _compute_note_hash_and_nullifier,\n                );\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            unconstrained fn process_log(\n                _log_plaintext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                _tx_hash: Field,\n                _unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                _first_nullifier_in_tx: Field,\n                _recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (StructDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    quote {\n        unconstrained fn sync_notes() {\n            aztec::oracle::note_discovery::sync_notes();\n        }\n    }\n}\n"
    },
    "127": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/notes/mod.nr",
      "source": "use crate::{note::note_getter_options::PropertySelector, prelude::Point};\nuse super::utils::AsStrQuote;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, derive_generators, Hash, Hasher, poseidon2::Poseidon2Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (StructDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: StructDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: StructDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: StructDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` implementation for a given partial note struct `s` and returns it as a quote.\n///\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field {\n///         ...\n///     }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n///         ...\n///     }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n///\n/// # On differences from `generate_note_hash_trait_impl`\n/// We use multi-scalar multiplication (MSM) instead of Poseidon2 here since this is a partial note and therefore\n/// does require MSM's additive homomorphism property (the property is used to add to the commitment in public).\n/// We don't use this implementation for standard notes as well because Poseidon2 is significantly cheaper\n/// constraints-wise.\n///\n/// # On including length in note hash preimage\n/// For a given commitment C = a*G1 + b*G2 + c*G3 we take an x-coordinate of C.x and use it as the hash.\n/// However, due to elliptic curve symmetry about the x-axis, for any x-coordinate,\n/// there are two points with that x-coordinate. This means -C has the same hash (x-coord) as C,\n/// and the tuple [-a, -b, -c] produces the same hash as [a, b, c].\n///\n/// This property makes the hash trivially not collision resistant without including the length.\n/// By including the length l, the commitment becomes:\n/// C = a*G1 + b*G2 + c*G3 + l*G_len\n///\n/// Since -l would be -3 (an extraordinarily large number that cannot be a valid preimage length),\n/// including the length protects against these collisions.\ncomptime fn generate_note_hash_trait_impl_for_partial_note(\n    s: StructDefinition,\n    indexed_fixed_fields: [(Quoted, Type, u32)],\n    indexed_nullable_fields: [(Quoted, Type, u32)],\n) -> Quoted {\n    let name = s.name();\n\n    // First we compute quotes for MSM\n    // `compute_note_hash()` is computed over all the fields so we need to merge fixed and nullable.\n    let merged_fields = indexed_fixed_fields.append(indexed_nullable_fields);\n    // Now we prefix each of the merged fields with `self.` since they refer to the struct members here.\n    let prefixed_merged_fields = merged_fields.map(|(name, typ, index): (Quoted, Type, u32)| {\n        (quote { self.$name }, typ, index)\n    });\n    let (new_generators_list, new_scalars_list, _, new_aux_vars) =\n        generate_multi_scalar_mul(prefixed_merged_fields);\n\n    let (g_slot, g_len) = generate_fixed_generators();\n    let new_generators = new_generators_list.push_back(g_slot).push_back(g_len).join(quote {,});\n\n    let merged_fields_len = merged_fields.len() + 1; // +1 for the storage slot appended below\n    let new_scalars = new_scalars_list\n        .push_back(quote { std::hash::from_field_unsafe(storage_slot) })\n        .push_back(quote { std::hash::from_field_unsafe($merged_fields_len) })\n        .join(quote {,});\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                $new_aux_vars\n                let point = std::embedded_curve_ops::multi_scalar_mul(\n                    [$new_generators],\n                    [$new_scalars]\n                );\n                point.x\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly in\n                // the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly in\n                // the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: StructDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: StructDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Number of fixed generators used to ensure that we don't have a collision of indices in derive_generators(...) in\n/// the generate_multi_scalar_mul(...) function. If the indices collided this could result in a critical vulnerability\n/// (e.g. in case of G_slot collision with other another note field an attacker could move a note to an arbitrary\n/// slot).\nglobal NUM_FIXED_GENERATORS: u32 = 2;\n\n/// Generates G_slot and G_len generator point quotes.\ncomptime fn generate_fixed_generators() -> (Quoted, Quoted) {\n    let generators: [Point; NUM_FIXED_GENERATORS] =\n        derive_generators(\"aztec_nr_generators\".as_bytes(), 0);\n\n    let g_slot_x = generators[0].x;\n    let g_slot_y = generators[0].y;\n    let g_len_x = generators[1].x;\n    let g_len_y = generators[1].y;\n\n    let g_slot = quote {\n        aztec::protocol_types::point::Point { x: $g_slot_x, y: $g_slot_y, is_infinite: false }\n    };\n    let g_len = quote {\n        aztec::protocol_types::point::Point { x: $g_len_x, y: $g_len_y, is_infinite: false }\n    };\n\n    (g_slot, g_len)\n}\n\n/// Generates quotes necessary for multi-scalar multiplication of `indexed_fields` (indexed struct fields). Returns\n/// a tuple containing quotes for generators, scalars, arguments and auxiliary variables. For more info on what are\n/// auxiliary variables and how they are used, see `generate_serialize_to_fields` function.\n///\n/// Example return values:\n/// generators_list: [aztec::generators::Ga1, aztec::generators::Ga2, aztec::generators::Ga3, aztec::generators::Ga4]\n/// scalars_list: [\n///     std::hash::from_field_unsafe(amount.lo as Field),\n///     std::hash::from_field_unsafe(amount.hi as Field),\n///     std::hash::from_field_unsafe(npk_m_hash as Field),\n///     std::hash::from_field_unsafe(randomness as Field)\n/// ]\n/// args_list: [amount: u128, npk_m_hash: Field, randomness: Field]\n/// aux_vars: []\ncomptime fn generate_multi_scalar_mul(\n    indexed_fields: [(Quoted, Type, u32)],\n) -> ([Quoted], [Quoted], [Quoted], Quoted) {\n    let mut generators_list = &[];\n    let mut scalars_list = &[];\n    let mut args_list = &[];\n    let mut aux_vars_list = &[];\n    for i in 0..indexed_fields.len() {\n        // Destructure tuple containing:\n        // - field_name: the name of the struct field/member (as a Quoted type)\n        // - typ: the type of the struct field/member (as a Type)\n        // - field_start_index: index where this field starts in the serialized note array (as u32)\n        let (field_name, typ, field_start_index) = indexed_fields[i];\n        // We add NUM_FIXED_GENERATORS to the start index to avoid collision with fixed generators.\n        let start_generator_index = NUM_FIXED_GENERATORS + field_start_index;\n        let (serialization_fields, aux_vars) =\n            generate_serialize_to_fields(field_name, typ, &[], true);\n        for j in 0..serialization_fields.len() {\n            let serialization_field = serialization_fields[j];\n            let generator_index = start_generator_index + j;\n\n            let generators: [Point; 1] =\n                derive_generators(\"aztec_nr_generators\".as_bytes(), generator_index);\n            let generator_x = generators[0].x;\n            let generator_y = generators[0].y;\n\n            generators_list = generators_list.push_back(\n                quote {\n                aztec::protocol_types::point::Point { x: $generator_x, y: $generator_y, is_infinite: false }\n                },\n            );\n            scalars_list = scalars_list.push_back(\n                quote { std::hash::from_field_unsafe($serialization_field) },\n            );\n        }\n        args_list = args_list.push_back(quote { $field_name: $typ });\n        aux_vars_list = aux_vars_list.append(aux_vars);\n    }\n\n    let aux_vars = if aux_vars_list.len() > 0 {\n        let joint = aux_vars_list.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n    (generators_list, scalars_list, args_list, aux_vars)\n}\n\n/// TODO: The macros shouldn't have a hard-coded opinion of a log layout; not even for partial notes.\n/// Since partial notes are about to be refactored, I won't tackle it yet.\n//\n/// Generates setup payload for a given note struct `s`. The setup payload contains log plaintext and hiding point.\n///\n/// # On including length in note hash preimage\n/// The hiding point is computed as a multi-scalar multiplication that includes the length of the preimage\n/// to protect against collisions due to elliptic curve symmetry.\n///\n/// When computing a note hash in the partial notes flow, we take the hiding point, add the nullable fields to it\n/// in public and then we take the x-coordinate of the point and use it as the note hash. E.g. for a given commitment\n/// C = a*G1 + b*G2 + c*G3 we take an x-coordinate of C.x. However, due to elliptic curve symmetry about the x-axis,\n/// for any x-coordinate, there are two points with that x-coordinate. This means -C has the same hash (x-coord) as C,\n/// and the tuple [-a, -b, -c] produces the same hash as [a, b, c].\n///\n/// This property makes the hash trivially not collision resistant without including the length.\n/// By including the length l, the commitment becomes:\n/// C = a*G1 + b*G2 + c*G3 + l*G_len\n///\n/// Since -l would be -3 (an extraordinarily large number that cannot be a valid preimage length),\n/// including the length protects against these collisions.\n///\n/// # Example function output\n/// ```\n/// struct TokenNoteSetupPayload {\n///     log_plaintext: [u8; 160],\n///     hiding_point: aztec::protocol_types::point::Point\n/// }\n///\n/// impl TokenNoteSetupPayload {\n///     fn new(mut self, npk_m_hash: Field, randomness: Field, storage_slot: Field) -> TokenNoteSetupPayload {\n///         let hiding_point = std::embedded_curve_ops::multi_scalar_mul(\n///             [\n///                 Point { x: 0x..., y: 0x... },\n///                 Point { x: 0x..., y: 0x... },\n///                 Point { x: 0x..., y: 0x... },\n///                 Point { x: 0x..., y: 0x... }\n///             ],\n///             [\n///                 std::hash::from_field_unsafe(npk_m_hash),\n///                 std::hash::from_field_unsafe(randomness),\n///                 std::hash::from_field_unsafe(storage_slot),\n///                 std::hash::from_field_unsafe(3)\n///             ]\n///         );\n///\n///         let let storage_slot_bytes = storage_slot.to_be_bytes();\n///         let let note_type_id_bytes = TokenNote::get_id().to_be_bytes();\n///\n///         for i in 0..32 {\n///             log_plaintext[i] = storage_slot_bytes[i];\n///             log_plaintext[32 + i] = note_type_id_bytes[i];\n///         }\n///\n///         let packed_note = [npk_m_hash as Field, randomness as Field];\n///\n///         for i in 0..packed_note.len() {\n///             let bytes: [u8; 32] = packed_note[i].to_be_bytes();\n///             for j in 0..32 {\n///                 log_plaintext[64 + i * 32 + j] = bytes[j];\n///             }\n///         }\n///\n///         TokenNoteSetupPayload {\n///             log_plaintext,\n///             hiding_point\n///         }\n///     }\n///\n///     fn encrypt_log(self, context: &mut PrivateContext, recipient_keys: aztec::protocol_types::public_keys::PublicKeys, recipient: aztec::protocol_types::address::AztecAddress) -> [Field; 17] {\n///\n///         let encrypted_log_bytes: [u8; 513] = aztec::encrypted_logs::log_assembly_strategies::default_aes128::partial_note::::compute_partial_public_log_payload(\n///             context.this_address(),\n///             self.log_plaintext,\n///             recipient,\n///             sender\n///         );\n///\n///         aztec::utils::bytes::be_bytes_31_to_fields(encrypted_log_bytes)\n///     }\n///\n/// impl aztec::protocol_types::traits::Empty for TokenNoteSetupPayload {\n///     fn empty() -> Self {\n///         Self { log_plaintext: [0; 160], hiding_point: aztec::protocol_types::point::Point::empty() }\n///     }\n/// }\n/// ```\ncomptime fn generate_setup_payload(\n    s: StructDefinition,\n    indexed_fixed_fields: [(Quoted, Type, u32)],\n    indexed_nullable_fields: [(Quoted, Type, u32)],\n    note_type_id: Field,\n) -> (Quoted, Quoted) {\n    let name = s.name();\n    let setup_payload_name = f\"{name}SetupPayload\".quoted_contents();\n\n    // First we get the MSM related quotes\n    let (new_generators_list, new_scalars_list, new_args_list, new_aux_vars) =\n        generate_multi_scalar_mul(indexed_fixed_fields);\n    let new_args = &[quote {mut self}]\n        .append(new_args_list)\n        .push_back(quote { storage_slot: Field })\n        .join(quote {,});\n\n    let (g_slot, g_len) = generate_fixed_generators();\n    let new_generators = new_generators_list.push_back(g_slot).push_back(g_len).join(quote {,});\n    let merged_fields_len = indexed_fixed_fields.len() + indexed_nullable_fields.len() + 1; // +1 for storage_slot\n    let new_scalars = new_scalars_list\n        .push_back(quote { std::hash::from_field_unsafe(storage_slot) })\n        .push_back(quote { std::hash::from_field_unsafe($merged_fields_len) })\n        .join(quote {,});\n\n    // Then the log plaintext ones\n    let log_plaintext_length = indexed_fixed_fields.len() * 32 + 64;\n    let setup_log_plaintext: Quoted = get_setup_log_plaintext_body(\n        s,\n        log_plaintext_length,\n        indexed_nullable_fields,\n        note_type_id,\n    );\n\n    // Then we compute values for `encrypt_log(...)` function.\n    // First, the length of the items that are broken into bytes:\n    let encrypted_log_bytes_length = 1 /* eph_pk_sign */\n        + 48 /* header_ciphertext */\n        + log_plaintext_length /* log_plaintext */\n        + 16\n        - (log_plaintext_length % 16); /* pkcs#7 aes padding */\n\n    // Each field contains 31 bytes so the length in fields is computed as ceil(encrypted_log_byte_length / 31)\n    // Recall: ceil(x / y) = (x + y - 1) // y (integer division).\n    let encrypted_log_fields_length = 1 /* tag */\n        + 1 /* eph_pk.x */\n        + (encrypted_log_bytes_length + 30) / 31;\n\n    (\n        quote {\n        pub struct $setup_payload_name {\n            pub log_plaintext: [u8; $log_plaintext_length],\n            pub hiding_point: aztec::protocol_types::point::Point\n        }\n\n        impl $setup_payload_name {\n            pub fn new($new_args) -> $setup_payload_name {\n                $new_aux_vars\n                let hiding_point = std::embedded_curve_ops::multi_scalar_mul(\n                    [$new_generators],\n                    [$new_scalars]\n                );\n                $setup_log_plaintext\n\n                $setup_payload_name {\n                    log_plaintext,\n                    hiding_point\n                }\n            }\n\n            pub fn encrypt_log(self, context: &mut aztec::prelude::PrivateContext, recipient: aztec::protocol_types::address::AztecAddress, sender: aztec::protocol_types::address::AztecAddress) -> [Field; $encrypted_log_fields_length] {\n                aztec::encrypted_logs::log_assembly_strategies::default_aes128::partial_note::compute_partial_public_log_payload(\n                    context.this_address(),\n                    self.log_plaintext,\n                    recipient,\n                    sender,\n                )\n            }\n        }\n\n        impl aztec::protocol_types::traits::Empty for $setup_payload_name {\n            fn empty() -> Self {\n                Self { log_plaintext: [0; $log_plaintext_length], hiding_point: aztec::protocol_types::traits::Empty::empty() }\n            }\n        }\n    },\n        setup_payload_name,\n    )\n}\n\n/// Generates setup log plaintext for a given note struct `s`. The setup log plaintext is computed by serializing\n/// storage slot from target function arguments, note type id from the note struct `s` and the fixed fields. The fixed\n/// fields are obtained by passing the whole note struct to the `generate_serialize_to_fields(...)` function but omitting the\n/// nullable fields.\ncomptime fn get_setup_log_plaintext_body(\n    s: StructDefinition,\n    log_plaintext_length: u32,\n    indexed_nullable_fields: [(Quoted, Type, u32)],\n    note_type_id: Field,\n) -> Quoted {\n    // Now we compute serialization of the fixed fields. We do that by passing the whole note struct\n    // to the generate_serialize_to_fields function but we omit the nullable fields.\n    let to_omit = indexed_nullable_fields.map(|(name, _, _): (Quoted, Type, u32)| name);\n    let (fields_list, aux_vars) =\n        generate_serialize_to_fields(quote { }, s.as_type(), to_omit, true);\n\n    // If there are `aux_vars` we need to join them with `;` and add a trailing `;` to the joined string.\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n    let fields = fields_list.join(quote {,});\n\n    quote {\n        let mut log_plaintext: [u8; $log_plaintext_length] = [0; $log_plaintext_length];\n\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = $note_type_id.to_be_bytes();\n\n        for i in 0..32 {\n            log_plaintext[i] = storage_slot_bytes[i];\n            log_plaintext[32 + i] = note_type_id_bytes[i];\n        }\n\n        $aux_vars_for_serialization\n        let packed_note = [$fields];\n\n        for i in 0..packed_note.len() {\n            let bytes: [u8; 32] = packed_note[i].to_be_bytes();\n            for j in 0..32 {\n                log_plaintext[64 + i * 32 + j] = bytes[j];\n            }\n        }\n    }\n}\n\n/// Generates finalization payload for a given note struct `s`. The finalization payload contains log and note hash.\n///\n/// Example:\n/// ```\n/// struct TokenNoteFinalizationPayload {\n///     context: &mut aztec::prelude::PublicContext,\n///     hiding_point_slot: Field,\n///     setup_log_slot: Field,\n///     public_values: [Field; 2]\n/// }\n///\n/// impl TokenNoteFinalizationPayload {\n///     fn new(mut self, context: &mut aztec::prelude::PublicContext, slot: Field, amount: u128) -> TokenNoteFinalizationPayload {\n///         self.context = context;\n///         self.hiding_point_slot = slot;\n///         self.setup_log_slot = slot + aztec::protocol_types::point::POINT_LENGTH as Field;\n///         self.public_values = [amount.lo as Field, amount.hi as Field];\n///         self\n///     }\n///\n///     fn emit(self) {\n///         self.emit_note_hash();\n///         self.emit_log();\n///     }\n///\n///     fn emit_note_hash(self) {\n///         let hiding_point: aztec::prelude::Point = self.context.storage_read(self.hiding_point_slot);\n///         assert(!aztec::protocol_types::traits::is_empty(hiding_point), \"transfer not prepared\");\n///\n///         let finalization_hiding_point = std::embedded_curve_ops::multi_scalar_mul([aztec::generators::Ga3, aztec::generators::Ga4], [std::hash::from_field_unsafe(self.public_values[0]), std::hash::from_field_unsafe(self.public_values[1])]) + hiding_point;\n///\n///         let note_hash = finalization_hiding_point.x;\n///\n///         self.context.push_note_hash(note_hash);\n///\n///         // We reset public storage to zero to achieve the effect of transient storage - kernels will squash\n///         // the writes\n///         // self.context.storage_write(self.hiding_point_slot, [0; aztec::protocol_types::point::POINT_LENGTH]);\n///     }\n///\n///     fn emit_log(self) {\n///         let setup_log_fields: [Field; 8] = self.context.storage_read(self.setup_log_slot);\n///\n///         let mut finalization_log = [0; 11];\n///\n///         for i in 0..setup_log_fields.len() {\n///             finalization_log[i + 1] = setup_log_fields[i];\n///         }\n///\n///         for i in 0..self.public_values.len() {\n///            finalization_log[i + 1 + 8] = self.public_values[j];\n///         }\n///\n///         finalization_log[0] = aztec::protocol_types::utils::field::field_from_bytes([\n///                 (2 >> 8) as u8, 2 as u8, 0,\n///                 (8 >> 8) as u8, 8 as u8, 0,\n///                 (91 >> 8) as u8, 91 as u8,\n///                ], true);\n///\n///         self.context.emit_public_log(finalization_log);\n///\n///         // We reset public storage to zero to achieve the effect of transient storage - kernels will squash\n///         // the writes\n///         // self.context.storage_write(self.setup_log_slot, [0; 8]);\n///     }\n/// }\n///\n/// impl aztec::protocol_types::traits::Empty for TokenNoteFinalizationPayload {\n///     fn empty() -> Self {\n///         Self { context: &mut aztec::prelude::PublicContext::empty(), hiding_point_slot: 0, setup_log_slot: 0, public_values: [0, 0] }\n///     }\n/// }\n/// ```\ncomptime fn generate_finalization_payload(\n    s: StructDefinition,\n    indexed_fixed_fields: [(Quoted, Type, u32)],\n    indexed_nullable_fields: [(Quoted, Type, u32)],\n) -> (Quoted, Quoted) {\n    let name = s.name();\n    let finalization_payload_name = f\"{name}FinalizationPayload\".quoted_contents();\n\n    // We compute serialization of the nullable fields which are to be emitted as a public log. We do that by\n    // passing the whole note struct to the `generate_serialize_to_fields(...)` function but we omit the fixed fields.\n    let to_omit = indexed_fixed_fields.map(|(name, _, _): (Quoted, Type, u32)| name);\n    let (nullable_fields_list, aux_vars) =\n        generate_serialize_to_fields(quote { }, s.as_type(), to_omit, true);\n\n    // If there are `aux_vars` we need to join them with `;` and add a trailing `;` to the joined string.\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    // We compute the log length and we concatenate the fields into a single quote.\n    let public_values_length = nullable_fields_list.len();\n    let nullable_fields = nullable_fields_list.join(quote {,});\n\n    // Now we compute quotes relevant to the multi-scalar multiplication.\n    // Note 1: We ignore the `scalars_list` and `aux_vars` return values because it's not used by the `emit_note_hash`\n    // function. Instead, we use `public_values` (defined on the finalization payload struct) and the scalar list\n    // is computed in the for-loop below.\n    // Note 2: The `args_list` is not used for note hash MSM but instead for the `new` function.\n    let (generators_list, _, args_list, _) = generate_multi_scalar_mul(indexed_nullable_fields);\n\n    // We generate scalars_list manually as we need it to refer self.public_values\n    let mut scalars_list: [Quoted] = &[];\n    for i in 0..public_values_length {\n        scalars_list =\n            scalars_list.push_back(quote { std::hash::from_field_unsafe(self.public_values[$i]) });\n    }\n\n    let generators = generators_list.join(quote {,});\n    let scalars = scalars_list.join(quote {,});\n    let args = args_list.join(quote {,});\n\n    // Then we compute values for `encrypt_log(...)` function\n    let setup_log_plaintext_length = indexed_fixed_fields.len() * 32 + 64;\n\n    let setup_log_bytes_length = 1 /* eph_pk_sign */\n        + 48 /* header_ciphertext */\n        + setup_log_plaintext_length /* log_plaintext */\n        + 16\n        - (setup_log_plaintext_length % 16); /* pkcs#7 aes padding */\n\n    // Each field contains 31 bytes so the length in fields is computed as ceil(encrypted_log_byte_length / 31)\n    // Recall: ceil(x / y) = (x + y - 1) // y (integer division).\n    let setup_log_fields_length = 1 /* tag */\n        + 1 /* eph_pk.x */\n        + (setup_log_bytes_length + 30) / 31;\n\n    let finalization_log_fields_length =\n        1 /* some length encodings (see below) */ + setup_log_fields_length + public_values_length;\n\n    (\n        quote {\n        pub struct $finalization_payload_name {\n            pub context: &mut aztec::prelude::PublicContext,\n            pub hiding_point_slot: Field,\n            pub setup_log_slot: Field,\n            pub public_values: [Field; $public_values_length],\n        }\n\n        impl $finalization_payload_name {\n            pub fn new(mut self, context: &mut aztec::prelude::PublicContext, slot: Field, $args) -> $finalization_payload_name {\n                self.context = context;\n\n                self.hiding_point_slot = slot;\n                self.setup_log_slot = slot + aztec::protocol_types::point::POINT_LENGTH as Field;\n\n                $aux_vars_for_serialization\n                self.public_values = [$nullable_fields];\n\n                self\n            }\n\n            pub fn emit(self) {\n                self.emit_note_hash();\n                self.emit_log();\n            }\n\n            pub fn emit_note_hash(self) {\n                // Read the hiding point from \"transient\" storage and check it's not empty to ensure the transfer was prepared\n                let hiding_point: aztec::prelude::Point = self.context.storage_read(self.hiding_point_slot);\n                assert(!aztec::protocol_types::traits::is_empty(hiding_point), \"transfer not prepared\");\n\n                let finalization_hiding_point = std::embedded_curve_ops::multi_scalar_mul(\n                    [$generators],\n                    [$scalars]\n                ) + hiding_point;\n\n                let note_hash = finalization_hiding_point.x;\n\n                self.context.push_note_hash(note_hash);\n\n                // We reset public storage to zero to achieve the effect of transient storage - kernels will squash\n                // the writes\n                // TODO(#9376): Uncomment the following line.\n                // self.context.storage_write(self.hiding_point_slot, [0; aztec::protocol_types::point::POINT_LENGTH]);\n            }\n\n            pub fn emit_log(self) {\n                let max_log_len = aztec::protocol_types::constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS;\n                // Make sure we aren't overflowing the public log maximum\n                assert(\n                    $finalization_log_fields_length <= max_log_len,\n                    f\"finalization public log must not exceed {max_log_len} fields\",\n                );\n\n                // We load the setup log from storage\n                let setup_log_fields: [Field; $setup_log_fields_length] = self.context.storage_read(self.setup_log_slot);\n\n                // We append the public value to the log and emit it as unencrypted log\n                let mut finalization_log = [0; $finalization_log_fields_length];\n\n                // Populate the first field with number of public values and private values:\n                // Search the codebase for \"disgusting encoding\" to see other hardcoded instances of this encoding, that you might need to change if you ever find yourself here.\n                finalization_log[0] = aztec::protocol_types::utils::field::field_from_bytes([\n                    ($public_values_length >> 8) as u8,\n                    $public_values_length as u8,\n                    0,\n                    ($setup_log_fields_length >> 8) as u8,\n                    $setup_log_fields_length as u8,\n                ], true);\n                let mut offset = 1;\n\n                // Iterate over the partial log and copy it to the final log\n                for i in 0..setup_log_fields.len() {\n                    finalization_log[offset + i] = setup_log_fields[i];\n                }\n                offset += setup_log_fields.len();\n\n                // Iterate over the public values and append them to the log\n                for i in 0..self.public_values.len() {\n                    finalization_log[offset + i] = self.public_values[i];\n                }\n\n                // We emit the finalization log via the public logs stream\n                self.context.emit_public_log(finalization_log);\n\n                // We reset public storage to zero to achieve the effect of transient storage - kernels will squash\n                // the writes\n                // TODO(#9376): Uncomment the following line.\n                // self.context.storage_write(self.setup_log_slot, [0; $setup_log_field_length]);\n            }\n        }\n\n        impl aztec::protocol_types::traits::Empty for $finalization_payload_name {\n            fn empty() -> Self {\n                Self { context: &mut aztec::protocol_types::traits::Empty::empty(), public_values: [0; $public_values_length], hiding_point_slot: 0, setup_log_slot: 0 }\n            }\n        }\n    },\n        finalization_payload_name,\n    )\n}\n\n/// Generates `PartialNote` implementation for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// impl PartialNote<TokenNoteSetupPayload, TokenNoteFinalizationPayload> for TokenNote {\n///     fn setup_payload() -> TokenNoteSetupPayload {\n///         TokenNoteSetupPayload::empty()\n///     }\n///\n///     fn finalization_payload() -> TokenNoteFinalizationPayload {\n///         TokenNoteFinalizationPayload::empty()\n///     }\n/// }\n/// ```\ncomptime fn generate_partial_note_impl(\n    s: StructDefinition,\n    setup_payload_name: Quoted,\n    finalization_payload_name: Quoted,\n) -> Quoted {\n    let name = s.name();\n    quote {\n        impl aztec::note::note_interface::PartialNote<$setup_payload_name, $finalization_payload_name> for $name {\n            fn setup_payload() -> $setup_payload_name {\n                aztec::protocol_types::traits::Empty::empty()\n            }\n\n            fn finalization_payload() -> $finalization_payload_name {\n                aztec::protocol_types::traits::Empty::empty()\n            }\n        }\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: StructDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: StructDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - SetupPayload\n/// - FinalizationPayload\n/// - PartialNote trait implementation\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\n///\n/// `nullable_fields` are a list of quotes passed in as varargs which are used to identify which fields/struct members\n/// in the partial note are nullable.\n#[varargs]\npub comptime fn partial_note(s: StructDefinition, nullable_fields: [Quoted]) -> Quoted {\n    assert_has_owner(s);\n\n    // We separate struct members into fixed ones and nullable ones and we store info about the start index of each\n    // member in the packed note array.\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, nullable_fields);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let (setup_payload_impl, setup_payload_name) = generate_setup_payload(\n        s,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n        note_type_id,\n    );\n    let (finalization_payload_impl, finalization_payload_name) =\n        generate_finalization_payload(s, indexed_fixed_fields, indexed_nullable_fields);\n    let note_hash_impl = generate_note_hash_trait_impl_for_partial_note(\n        s,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n    let partial_note_impl =\n        generate_partial_note_impl(s, setup_payload_name, finalization_payload_name);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $setup_payload_impl\n        $finalization_payload_impl\n        $note_interface_impl\n        $note_hash_impl\n        $partial_note_impl\n        $packable_impl\n    }\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: StructDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: StructDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro and #[partial_note] macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: StructDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "128": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/storage/mod.nr",
      "source": "use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: StructDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: StructDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_struct().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_struct().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_struct().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_struct().is_some() {\n        let (def, generics) = typ.as_struct().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_struct().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "129": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_struct().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_struct().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_struct().is_some() {\n        let (s, generics) = typ.as_struct().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: StructDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: StructDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_struct().map_or(false, |struc: (StructDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n"
    },
    "130": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/messaging.nr",
      "source": "use crate::{\n    hash::{compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\n};\n\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    merkle_tree::root::root_from_sibling_path,\n};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    leaf_index: Field,\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_l1_to_l2_message_hash(\n        portal_contract_address,\n        chain_id,\n        contract_address,\n        version,\n        content,\n        secret_hash,\n        leaf_index,\n    );\n\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\n    // get from an oracle.\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let (_leaf_index, sibling_path) =\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\n\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert_eq(root, l1_to_l2_root, \"Message not in state\");\n\n    compute_l1_to_l2_message_nullifier(message_hash, secret)\n}\n"
    },
    "140": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "143": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "146": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "147": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize, ToField}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "148": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "149": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "150": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "151": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n    traits::{Deserialize, FromField},\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "152": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT};\n\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\n/// its existence.\npub unconstrained fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\n    let returned_message =\n        get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret);\n    let leaf_index = returned_message[0];\n    let sibling_path = array::subarray(returned_message, 1);\n\n    (leaf_index, sibling_path)\n}\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field,\n) -> [Field; L1_TO_L2_MSG_TREE_HEIGHT + 1] {}\n"
    },
    "155": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n"
    },
    "156": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::{\n    abis::validation_requests::{\n        key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n    },\n    traits::Deserialize,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "157": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "160": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::discovery::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them\n/// available for later querying via the `get_notes` oracle.\npub unconstrained fn sync_notes() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emtitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "161": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n    traits::{Deserialize, FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<RetrievedNote<Note>>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter TODO(benesjan): try removing this.\n) -> [Option<RetrievedNote<Note>>; S]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            placeholder_opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "163": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "165": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "172": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "186": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr",
      "source": "use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse protocol_types::traits::ToField;\n\nfn emit<Event, let N: u32>(context: &mut PublicContext, event: Event)\nwhere\n    Event: EventInterface<N>,\n{\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; N + 1];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_public_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32>(\n    context: &mut PublicContext,\n) -> fn[(&mut PublicContext,)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| { emit(context, e); }\n}\n"
    },
    "187": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "189": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr",
      "source": "mod append;\nmod collapse;\nmod subarray;\nmod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "pub mod poseidon;\npub mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "190": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "191": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "199": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress,\n    block_header::BlockHeader,\n    hash::poseidon2_hash,\n    traits::{Packable, ToField},\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "215": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "217": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "24": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "253": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "260": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "261": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "263": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "265": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
      "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "269": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_class_id.nr",
      "source": "use crate::constants::GENERATOR_INDEX__CONTRACT_LEAF;\nuse crate::traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField};\n\npub struct ContractClassId {\n    pub inner: Field,\n}\n\nimpl Eq for ContractClassId {\n    fn eq(self, other: ContractClassId) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl ToField for ContractClassId {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for ContractClassId {\n    fn from_field(value: Field) -> Self {\n        Self { inner: value }\n    }\n}\n\nimpl Serialize<1> for ContractClassId {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<1> for ContractClassId {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] }\n    }\n}\n\nimpl Empty for ContractClassId {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n// Implement the Packable trait so ContractClassId can be stored in contract's storage.\nimpl Packable<1> for ContractClassId {\n    fn pack(self) -> [Field; 1] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; 1]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl ContractClassId {\n    pub fn compute(\n        artifact_hash: Field,\n        private_functions_root: Field,\n        public_bytecode_commitment: Field,\n    ) -> Self {\n        let hash = crate::hash::poseidon2_hash_with_separator(\n            [artifact_hash, private_functions_root, public_bytecode_commitment],\n            GENERATOR_INDEX__CONTRACT_LEAF,\n        ); // TODO(@spalladino): Update generator index\n        ContractClassId::from_field(hash)\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "275": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "277": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "278": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "288": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "292": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_struct().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_struct().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_struct().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_struct().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: StructDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: StructDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: StructDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: StructDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "294": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "295": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "304": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "315": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "333": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "334": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "350": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "351": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "353": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "365": {
      "path": "/home/vscode/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "46": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "47": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "50": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"
    },
    "55": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/deposit.nr",
      "source": "use aztec::{\n    protocol_types::{\n        address::{AztecAddress, EthAddress},\n        hash::sha256_to_field,\n        traits::{FromField, ToField},\n    },\n};\n\n// bytes4(keccak256(\"deposit(address,bytes32,uint256)\")) = 0xeb2243f8\nglobal DEPOSIT_SIGNATURE: [u8; 4] = [0xeb, 0x22, 0x43, 0xf8];\n\npub fn deposit_content_hash(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> Field {\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_deposit(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(DEPOSIT_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = DEPOSIT_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n// For testing purposes, enables printing the ABI-encoded data\npub unconstrained fn field_from_encoded_bytes(encoded: [u8; 100], offset: u8) -> Field {\n    let mut arr = [0; 31];\n    for i in 0..31 {\n        if offset + i >= 100 {\n            break;\n        }\n        arr[i] = encoded[offset + i];\n    }\n    aztec::protocol_types::utils::field::field_from_bytes(arr, true)\n}\n\n#[test]\nfn test_abi_encode_deposit() {\n    let eth_token = EthAddress::from_field(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F);\n    let recipient = AztecAddress::from_field(\n        0x1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863,\n    );\n    let amount = 0x1234567890abcdef1234567890abcdef;\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"deposit(address,bytes32,uint256)\", address(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F), bytes32(hex\"1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863\"), 0x1234567890abcdef1234567890abcdef) =\n    // 0xeb2243f80000000000000000000000002458675deb5e0691da2d2ba8dcaf58cfd2c2651f1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863000000000000000000000000000000001234567890abcdef1234567890abcdef\n    let expected: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_deposit: got: {encoded}\");\n        std::println(f\"test_abi_encode_deposit: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nfn test_deposit_content_hash() {\n    let content: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    // sha256(content) = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883aa8\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883a;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_deposit_content_hash: got: {content_hash}\");\n        std::println(f\"test_deposit_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "57": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/register.nr",
      "source": "use aztec::{\n    protocol_types::{\n        address::EthAddress,\n        hash::sha256_to_field,\n        traits::{FromField, ToField},\n    },\n};\n\n// bytes4(keccak256(register(address,string,string,uint8))) = 0x611a7a19\ncomptime global REGISTER_SIGNATURE: [u8; 4] = [0x61, 0x1a, 0x7a, 0x19];\n\npub fn register_content_hash(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> Field {\n    let encoded = abi_encode_register(eth_token, name, name_len, symbol, symbol_len, decimals);\n    let content_hash = sha256_to_field(encoded);\n\n    // Debug log the ABI-encoded data\n    // let field_array: [Field; 9] = aztec::utils::bytes::bytes_to_fields::<260, 9>(encoded);\n    // dep::aztec::oracle::debug_log::debug_log_format(\"ABI Encoded: {}\", field_array);\n    content_hash\n}\n\npub fn abi_encode_register(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> [u8; 260] {\n    // abi.encodeWithSignature(REGISTER_SIGNATURE, tokenAddr, token.name(), token.symbol(), token.decimals())\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the name offset\n    // 0x44 - 32 bytes for the symbol offset\n    // 0x64 - 32 bytes for the decimals\n    // 0x84 - 32 bytes for the name length\n    // 0xa4 - 32 bytes for the name // Limited to 31 bytes\n    // 0xc4 - 32 bytes for the symbol length\n    // 0xe4 - 32 bytes for the symbol // Limited to 31 bytes\n    // Total: 260 bytes\n    let mut encoded = [0; 260];\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let decimals_bytes: [u8; 32] = decimals.to_field().to_be_bytes();\n\n    let name_len_bytes: [u8; 32] = name_len.to_field().to_be_bytes();\n    let symbol_len_bytes: [u8; 32] = symbol_len.to_field().to_be_bytes();\n\n    // Fixed offsets for name and symbol\n    // Offset for the name is 0x80 per the ABI encoding, but 0x84 in the raw data\n    let name_offset_bytes: [u8; 32] = 0x80.to_field().to_be_bytes();\n    // Offset for the symbol is 0xc0 per the ABI encoding, but 0xc4 in the raw data\n    let symbol_offset_bytes: [u8; 32] = 0xc0.to_field().to_be_bytes();\n\n    let name_bytes: [u8; 31] = name.as_bytes();\n    let symbol_bytes: [u8; 31] = symbol.as_bytes();\n\n    for i in 0..32 {\n        // First 4 bytes are the function signature\n        if i < 4 {\n            encoded[i] = REGISTER_SIGNATURE[i];\n        }\n\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = name_offset_bytes[i];\n        encoded[i + 0x44] = symbol_offset_bytes[i];\n        encoded[i + 0x64] = decimals_bytes[i];\n        encoded[i + 0x84] = name_len_bytes[i];\n        encoded[i + 0xc4] = symbol_len_bytes[i];\n\n        // Copy name & symbol\n        if i < name_len {\n            encoded[i + 0xa4] = name_bytes[i];\n        }\n        if i < symbol_len {\n            encoded[i + 0xe4] = symbol_bytes[i];\n        }\n    }\n\n    encoded\n}\n\nunconstrained fn pad_31<let N: u32>(s: str<N>) -> str<31> {\n    let mut padded = [0; 31];\n    let s = s.as_bytes();\n    for i in 0..31 {\n        if i < N {\n            padded[i] = s[i];\n        }\n    }\n    padded.as_str_unchecked()\n}\n\n#[test]\nunconstrained fn test_abi_encode_register() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let name = pad_31(\"Test Token\");\n    let symbol = pad_31(\"TT\");\n    let decimals = 18;\n    let encoded = abi_encode_register(eth_token, name, 10, symbol, 2, decimals);\n\n    // abi.encodeWithSignature(\"register(address,string,string,uint8)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), \"Test Token\", \"TT\", 18) =\n    // 0x611a7a19000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5465737420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025454000000000000000000000000000000000000000000000000000000000000\n    let expected: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_register: got: {encoded}\");\n        std::println(f\"test_abi_encode_register: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nunconstrained fn test_register_content_hash() {\n    let content: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    // sha256(content) = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9f4\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_register_content_hash: got: {content_hash}\");\n        std::println(f\"test_register_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "58": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/withdraw.nr",
      "source": "use aztec::protocol_types::{\n    address::EthAddress,\n    hash::sha256_to_field,\n    traits::{FromField, ToField},\n};\n\n// bytes4(keccak256(\"withdraw(address,address,uint256)\")) = 0xd9caed12\nglobal WITHDRAW_SIGNATURE: [u8; 4] = [0xd9, 0xca, 0xed, 0x12];\n\npub fn withdraw_content_hash(eth_token: EthAddress, recipient: EthAddress, amount: Field) -> Field {\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_withdraw(\n    eth_token: EthAddress,\n    recipient: EthAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(WITHDRAW_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = WITHDRAW_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n#[test]\nfn test_abi_encode_withdraw() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let recipient = EthAddress::from_field(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439);\n    let amount = 0x1234567890abcdef;\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"withdraw(address,address,uint256)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), address(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439), 0x1234567890abcdef) =\n    // 0xd9caed12000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c700000000000000000000000052b1d2cebf3c80813f82dc4b5f56fcb4e04ac4390000000000000000000000000000000000000000000000001234567890abcdef\n    let expected: [u8; 100] = [\n        0xd9, 0xca, 0xed, 0x12, // Function selector - withdraw(address,address,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Recipient Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439\n        0x52, 0xb1, 0xd2, 0xce, 0xbf, 0x3c, 0x80, 0x81, 0x3f, 0x82, 0xdc, 0x4b, 0x5f, 0x56, 0xfc,\n        0xb4, 0xe0, 0x4a, 0xc4, 0x39,\n        // Amount: 0x1234567890abcdef\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    assert_eq(encoded, expected);\n}\n"
    },
    "59": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/main.nr",
      "source": "mod constants;\nmod encoding;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract Portal {\n    use std::meta::derive;\n\n    use aztec::{\n        event::event_interface::EventInterface,\n        hash::hash_args,\n        macros::{\n            events::event,\n            functions::{\n                initialization_utils::compute_initialization_hash, initializer, internal, private,\n                public,\n            },\n            storage::storage,\n        },\n        protocol_types::{\n            address::{AztecAddress, EthAddress, PartialAddress},\n            contract_class_id::ContractClassId,\n            public_keys::PublicKeys,\n            traits::{FromField, Serialize, ToField},\n        },\n        state_vars::{Map, PublicImmutable},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n    };\n\n    use authwit::auth::assert_current_call_valid_authwit_public;\n\n    use token::Token;\n\n    use crate::{\n        constants::PUBLIC_NOT_SECRET_SECRET,\n        encoding::{\n            deposit::deposit_content_hash, register::register_content_hash,\n            withdraw::withdraw_content_hash,\n        },\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        l1_portal: PublicImmutable<EthAddress, Context>,\n        l1_tokens: Map<EthAddress, PublicImmutable<AztecAddress, Context>, Context>,\n        l2_tokens: Map<AztecAddress, PublicImmutable<EthAddress, Context>, Context>,\n        token_contract_class_id: PublicImmutable<ContractClassId, Context>,\n        shield_gateway_beacon: PublicImmutable<AztecAddress, Context>,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Register {\n        eth_token: EthAddress,\n        aztec_token: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Deposit {\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Withdraw {\n        token: EthAddress,\n        from: AztecAddress,\n        to: EthAddress,\n        amount: u128,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(\n        l1_portal: Field,\n        token_contract_class: Field,\n        shield_gateway_beacon: AztecAddress,\n    ) {\n        assert(l1_portal != 0, \"L1 portal address cannot be zero\");\n        assert(token_contract_class != 0, \"Token contract class cannot be zero\");\n\n        storage.l1_portal.initialize(EthAddress::from_field(l1_portal));\n        storage.token_contract_class_id.initialize(ContractClassId::from_field(\n            token_contract_class,\n        ));\n        storage.shield_gateway_beacon.initialize(shield_gateway_beacon);\n    }\n\n    #[private]\n    fn register_private(\n        eth_token: Field,\n        aztec_token: AztecAddress,\n        name: str<31>,\n        name_len: u8,\n        symbol: str<31>,\n        symbol_len: u8,\n        decimals: u8,\n        message_leaf_index: Field,\n    ) {\n        aztec::oracle::debug_log::debug_log_format(\n            \"Registering L1 token {0} as L2 token {1}\",\n            [eth_token, aztec_token.to_field()],\n        );\n\n        let eth_token = EthAddress::from_field(eth_token);\n\n        assert(storage.l1_tokens.at(eth_token).read().is_zero(), \"Token already registered\");\n\n        // L1->L2 message content hash from token name, symbol, decimals\n        let content_hash =\n            register_content_hash(eth_token, name, name_len, symbol, symbol_len, decimals);\n        aztec::oracle::debug_log::debug_log_format(\"Register content hash: {0}\", [content_hash]);\n\n        // Set the shield gateway beacon\n        Token::at(aztec_token)\n            .set_shield_gateway_beacon(storage.shield_gateway_beacon.read())\n            .enqueue(&mut context);\n\n        // Ensure the supplied token address matches the expected address. This ensures its deployed with\n        // the correct code and initialization parameters.\n        let initializer = Token::interface().init(context.this_address(), name, symbol, decimals);\n        let args_hash = hash_args(initializer.args);\n        let init_hash = compute_initialization_hash(initializer.selector, args_hash);\n        let partial_address = PartialAddress::compute(\n            storage.token_contract_class_id.read(),\n            0x9876543210, // salt, hardcoded\n            init_hash,\n            AztecAddress::from_field(0),\n        );\n\n        let computed_address = AztecAddress::compute(PublicKeys::default(), partial_address);\n        // aztec::oracle::debug_log::debug_log_format(\n        //     \"Supplied Address: {0}, Computed address: {1}\",\n        //     [aztec_token.to_field(), computed_address.to_field()]\n        // );\n        // aztec::oracle::debug_log::debug_log_format(\"Gas left 4: {0}\", [context.l2_gas_left()]);\n        assert(\n            computed_address == aztec_token,\n            \"Expected address did not match supplized token address\",\n        );\n\n        // Consume the message\n        aztec::oracle::debug_log::debug_log_format(\n            \"Consuming message with leaf index {0}\",\n            [message_leaf_index],\n        );\n\n        let l1Portal = storage.l1_portal.read();\n        aztec::oracle::debug_log::debug_log_format(\"L1 Portal: {0}\", [l1Portal.to_field()]);\n\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())._register_public(aztec_token, eth_token).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _register_public(aztec_token: AztecAddress, eth_token: EthAddress) {\n        // Initialize the token mappings\n        storage.l1_tokens.at(eth_token).initialize(aztec_token);\n        storage.l2_tokens.at(aztec_token).initialize(eth_token);\n        Register { eth_token, aztec_token }.emit(encode_event(&mut context));\n    }\n\n    #[private]\n    fn claim_public(\n        eth_token: Field,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let eth_token = EthAddress::from_field(eth_token);\n\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())\n            ._claim_public(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _claim_public(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_public(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .call(&mut context);\n    }\n\n    #[private]\n    fn claim_shielded(\n        eth_token: Field,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let eth_token = EthAddress::from_field(eth_token);\n\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_shielded(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _log_claim(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Deposit { eth_token, recipient, amount, message_leaf_index }.emit(encode_event(\n            &mut context,\n        ));\n    }\n\n    #[public]\n    fn withdraw_public(\n        eth_token: EthAddress,\n        from: AztecAddress,\n        recipient: EthAddress,\n        amount: u128,\n        withdrawNonce: Field,\n        burnNonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(withdrawNonce == 0, \"Invalid nonce\");\n        }\n\n        // Burn the tokens\n        Token::at(storage.l1_tokens.at(eth_token).read()).burn_public(from, amount, burnNonce).call(\n            &mut context,\n        );\n\n        // Message the L1 Portal\n        let content_hash = withdraw_content_hash(eth_token, recipient, amount.to_field());\n        context.message_portal(storage.l1_portal.read(), content_hash);\n\n        aztec::oracle::debug_log::debug_log_format(\"Withdraw L2ToL1 Message {0}\", [content_hash]);\n\n        Withdraw { token: eth_token, from, to: recipient, amount }.emit(encode_event(&mut context));\n    }\n\n    unconstrained fn is_registered_l1(eth_token: Field) -> pub bool {\n        let eth_token = EthAddress::from_field(eth_token);\n        !storage.l1_tokens.at(eth_token).read().is_zero()\n    }\n\n    unconstrained fn is_registered_l2(aztec_token: AztecAddress) -> pub bool {\n        !storage.l2_tokens.at(aztec_token).read().is_zero()\n    }\n\n    unconstrained fn get_l2_token(eth_token: Field) -> pub AztecAddress {\n        let eth_token = EthAddress::from_field(eth_token);\n        storage.l1_tokens.at(eth_token).read()\n    }\n\n    unconstrained fn get_l1_token(aztec_token: AztecAddress) -> pub EthAddress {\n        storage.l2_tokens.at(aztec_token).read()\n    }\n\n    unconstrained fn get_l1_portal() -> pub EthAddress {\n        storage.l1_portal.read()\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "61": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "69": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T, let N: u32> CapsuleArray<T>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T) {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().unkonstrained().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n"
    },
    "70": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.set_public_teardown_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "77": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, FromField, Hash, ToField},\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle hashes the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle hashes the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "78": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, args);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, args);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "79": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "80": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "82": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/discovery/mod.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS, debug_log::debug_log,\n};\n\npub mod private_logs;\npub mod partial_notes;\npub mod nonce_discovery;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal NOTE_PRIVATE_LOG_RESERVED_FIELDS: u32 = 2;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size and extra\n/// fields in the log (e.g. the combined log and note type ID).\n// TODO (#11634): we're assuming here that the entire log is plaintext, which is not true due to headers, encryption\n// padding, etc. Notes can't actually be this large.\npub global MAX_NOTE_PACKED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_PRIVATE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of note discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note_content, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note_content */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the note discovery process, in which private and public logs are downloaded and inspected to find private\n/// notes, partial notes, and their completion. This is the mechanism via which PXE learns of new notes.\n///\n/// Receives the address of the contract on which discovery is performed (i.e. the contract that emitted the notes)\n/// along with its `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_notes<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing note discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "83": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr",
      "source": "use crate::{discovery::{ComputeNoteHashAndNullifier, MAX_NOTE_PACKED_LEN}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting note discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note_content,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n"
    },
    "84": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n        private_logs::MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN,\n    },\n    oracle::note_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\n// TODO(#11630): come up with some sort of slot allocation scheme.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = 77;\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = &mut 0;\n    whyle(\n        || *i < pending_partial_notes.len(),\n        || {\n            let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(*i);\n\n            let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n            if maybe_log.is_none() {\n                debug_log_format(\n                    \"Found no completion logs for partial note #{}\",\n                    [(*i) as Field],\n                );\n                *i += 1 as u32;\n                // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n                // for this tagged log when performing note discovery in the future until we either find it or the entry\n                // is somehow removed from the PXE DB.\n            } else {\n                debug_log_format(\"Completion log found for partial note #{}\", [(*i) as Field]);\n                let log = maybe_log.unwrap();\n\n                // Public logs have an extra field at the beginning with the contract address, which we use to verify\n                // that we're getting the logs from the expected contract.\n                // TODO(#10273): improve how contract log siloing is handled\n                assert_eq(\n                    log.log_content.get(0),\n                    contract_address.to_field(),\n                    \"Got a public log emitted by a different contract\",\n                );\n\n                // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n                // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n                // complete packed content.\n                let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                    array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n                let complete_packed_note_content = array::append(\n                    pending_partial_note.packed_private_note_content,\n                    packed_public_note_content,\n                );\n\n                let discovered_notes = attempt_note_nonce_discovery(\n                    log.unique_note_hashes_in_tx,\n                    log.first_nullifier_in_tx,\n                    compute_note_hash_and_nullifier,\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    pending_partial_note.note_type_id,\n                    complete_packed_note_content,\n                );\n\n                debug_log_format(\n                    \"Discovered {0} notes for partial note {1}\",\n                    [discovered_notes.len() as Field, (*i) as Field],\n                );\n\n                array::for_each_in_bounded_vec(\n                    discovered_notes,\n                    |discovered_note: DiscoveredNoteInfo, _| {\n                        // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                        // temporary node connectivity issue - is simply throwing good enough here?\n                        assert(\n                            deliver_note(\n                                contract_address,\n                                pending_partial_note.storage_slot,\n                                discovered_note.nonce,\n                                complete_packed_note_content,\n                                discovered_note.note_hash,\n                                discovered_note.inner_nullifier,\n                                log.tx_hash,\n                                pending_partial_note.recipient,\n                            ),\n                            \"Failed to deliver note\",\n                        );\n                    },\n                );\n\n                // Because there is only a single log for a given tag, once we've processed the tagged log then we\n                // simply delete the pending work entry, regardless of whether it was actually completed or not.\n                // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n                // being completed.\n                pending_partial_notes.remove(*i);\n            }\n        },\n    );\n}\n\n/// Custom version of a while loop, calls `body` repeatedly until `condition` returns false. To be removed once Noir\n/// supports looping in unconstrained code.\nfn whyle<Env, Env2>(condition: fn[Env]() -> bool, body: fn[Env2]() -> ()) {\n    if condition() {\n        body();\n        whyle(condition, body);\n    }\n}\n"
    },
    "85": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    capsules::CapsuleArray,\n    oracle::note_discovery::{deliver_note, sync_notes},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    debug_log::{debug_log, debug_log_format},\n};\n\nuse crate::discovery::{\n    ComputeNoteHashAndNullifier,\n    MAX_NOTE_PACKED_LEN,\n    nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    NOTE_PRIVATE_LOG_RESERVED_FIELDS,\n    partial_notes::{\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT, DeliveredPendingPartialNote,\n    },\n};\n\npub global PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN: u32 = 1;\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (i.e.\n/// the note completion log tag).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_NOTE_PACKED_LEN - PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    _contract_address: AztecAddress,\n    _compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually fetch tagged logs, decrypt and process them here, but for now we simply call the `syncNotes`\n    // oracle. This has PXE perform tag synchronization, log download, decryption, and finally calls to the the\n    // `process_log` contract function with the decrypted payload, which will in turn call `do_process_log` with a\n    // decrypted log, letting us continue the work outside of PXE.\n    sync_notes();\n}\n\n/// Processes a log's plaintext, searching for private notes or partial notes. Private notes result in nonce discovery\n/// being performed prior to delivery, which requires knowledge of the transaction hash in which the notes would've been\n/// created (typically the same transaction in which the log was emitted), along with the list of unique note hashes in\n/// said transaction and the `compute_note_hash_and_nullifier` function.\npub unconstrained fn do_process_log<Env>(\n    contract_address: AztecAddress,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // The first thing to do is to determine what type of private log we're processing. We currently just have two log\n    // types: 0 for private notes and 1 for partial notes. This will likely be expanded and improved upon in the future\n    // to also handle events, etc.\n\n    let (storage_slot, note_type_id, log_type_id, log_payload) =\n        destructure_log_plaintext(log_plaintext);\n\n    if log_type_id == 0 {\n        debug_log(\"Processing private note log\");\n\n        process_private_note_log(\n            contract_address,\n            tx_hash,\n            unique_note_hashes_in_tx,\n            first_nullifier_in_tx,\n            recipient,\n            compute_note_hash_and_nullifier,\n            storage_slot,\n            note_type_id,\n            log_payload,\n        );\n    } else if log_type_id == 1 {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            log_payload,\n            recipient,\n        );\n    } else {\n        panic(f\"Unknown log type id {log_type_id}\");\n    }\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_PRIVATE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_PRIVATE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_PRIVATE_LOG_RESERVED_FIELDS == 2,\n        \"unexpected value for NOTE_PRIVATE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n\n    // We currently identify log types by packing the log type ID and note type ID into a single field, called the\n    // combined type ID. We can do this because the note type ID is only 7 bits long, and so use an 8th bit to\n    // distinguish private note logs and partial note logs.\n    // This abuses the fact that the encoding of both of these logs is extremely similar, and will need improving and\n    // more formalization once we introduce other disimilar log types, such as events. Ideally we'd be able to leverage\n    // enums and tagged unions to achieve this goal.\n    let combined_type_id = log_plaintext.get(1);\n    let note_type_id = ((combined_type_id as u64) % 128) as Field;\n    let log_type_id = ((combined_type_id as u64) / 128) as Field;\n\n    let log_payload = array::subbvec(log_plaintext, NOTE_PRIVATE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, log_type_id, log_payload)\n}\n\nunconstrained fn process_private_note_log<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note_content,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nunconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    log_payload: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    recipient: AztecAddress,\n) {\n    // We store the information of the partial note we found so that we can later search for the public log that will\n    // complete it. The tag is the first value in the payload, with the packed note content taking up the rest of it.\n    static_assert(\n        PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN == 1,\n        \"unexpected value for PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN\",\n    );\n\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag: log_payload.get(0),\n        storage_slot,\n        note_type_id,\n        packed_private_note_content: array::subbvec(log_payload, 1),\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n"
    },
    "97": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.80.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    }
  }
}
