{
  "transpiled": true,
  "noir_version": "1.0.0-beta.11+5b65f9637e85a4177692c3190cb35ea678fb15e9-aztec",
  "name": "Portal",
  "functions": [
    {
      "name": "_claim_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2550444873539515884": {
            "error_kind": "string",
            "string": "Trying to read from uninitialized PublicImmutable"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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"
    },
    {
      "name": "_log_claim",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBIJwAABAMnAgUEBCcCBgQAHwoABQAGgEQdAIBGgEYGLgiARAABLgiARQACLgiARgADLgiARwAEJQAAAF4lAAAAXygCAAEEgEgnAgIEADsOAAIAASYlAAACOB4CAAYAHgIABwAzKgAGAAcACCcCBgEBJAIACAAAAIglAAACYR4CAAYBHgIABwAKKgYHCCQCAAgAAACkJQAAAnMcCgMGACkCAAMAIxDODy0IAQcnAggEBgAIAQgBJwMHBAEAIgcCCC0KCAktDgEJACIJAgktDgIJACIJAgktDgYJACIJAgktDgQJACIJAgktDgMJJwIBAAAtCAECJwIDBAYACAEDAScDAgQBACICAgMtCgMELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBC0IAQEAAAECAS0OAgEnAgIEACcCAwQFJwIEBAEtCgIFIwAAAWQMKgUDAiQCAAIAAAHuIwAAAXYtCwECJwIFBAUGIgUCAScCBwQDACoFBwYtCAEEAAgBBgEnAwQEAQAiBAIGLQ4FBgAiBgIGLQ4FBicCBwQDACoEBwYAIgICBy4CAAeAAy4CAAaABC4CAAWABSUAAAKFACIEAgYtCwYFJwIHBAIAKgYHAjcLAAIABSYAIgcCBgAqBgUILQsIAi0LAQYuAgAGgAMoAIAEBAAGJQAAAssuCIAFAAgAIggCCQAqCQUKLQ4CCi0OCAEAKgUEAi0KAgUjAAABZCgAgAQEeAANAAAAgASAAyQAgAMAAAJgKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQWeoTt9j/vabDwEAgEmAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAALKLgGACIAGLgSABoAJAQCACAACgAgBAIAJAAKACSMAAAKZJi4BgAOABgsAgAYAAoAHJACABwAAAuYjAAAC8S4AgAOABSMAAANYLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAA0QuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAxMoAYAFBAABAwCABgACgAYjAAADWCY=",
      "debug_symbols": "tZfdauswDMffJde9sCR/9lUOZXRdNgIhLVl74DD67kdyraQd2IydnZvmZ6X+W5Jlx/7oXvrny9vTML0e37vtr4/ueR7GcXh7Go+H/Xk4Tmz96Iz8gOGH3fDTddvAT+A2GIHIAAxIBQgUPIN0smKRXlYskcGBQirgbbdFFGALEkOIBSIqhAJJLalY0KCCLyAe3sApFGVEq1CGQCIFFbQqKD6jZxCfb+AKeKOglqCWsFhSgUgKsUCOIkO4ARlQKIMSGAWnUAQJSaEIkpNenGcKEmAUkFeJIY+eQS1JLalYbM5hhlAA1AJqQVDwBcgouAJWLVYtTns51fGkwKMTV4sNpBAKyLzfQC2J4yIUSDdwxiqIDs+Xyz5HgVgAXYHsagZfQCrzBmpx+h+Xc3i9bjpdDk/nue9lNdytD141p/3cT+duO13GcdP93o+X/Kf3037Kz/N+5re8VvrphZ8s+DqMvdB1s/Y29a5ATkLM3XlR+bBIAMCDCDREDC4axuIqYeKDBDYkQopeNUJKbhEJ7kGD6hpctSYWDWa0NY1mKCmpGwCpGor7gVD8/w7FxWVWYn1WYl0ihKgSIdqqE6kRCFkDGghZ+6+BANYDaZU5b8eLBufW18u8VaTpbrEkZ001mHaVBrdObaqKNMMhwDUcwno4P1Go8BOV+vXZIVsNpyESHejKjd6tWXX+MZZGscZkdCuNCe7S8Wkba3jhnQ1FwnuzekH06AY26h3RqwYn5k7Dfz2UBGiLBkeSaqE0Jfi8oxKIVQkZpybB320tU0sh1EoDG0XKX3wtDcsHg2oy2hp21bDpexrOazasN1DX+Go6oq+moylBfpVI1a+kaW3JLi0bEHn035uWSEtKk/leSr2xS0rh07TsuLk/DPPDheEqYvOwfx770ny9TIe7t+c/J32jF47TfDz0L5e5F6X11sE/v/jAswEXdnxQlRb7ysehndxEpMmbON9ApAm5mTaAsLuKa38B"
    },
    {
      "name": "_register_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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"
    },
    {
      "name": "claim_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                          "fields": [
                            {
                              "name": "request",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                "fields": [
                                  {
                                    "name": "pk_m",
                                    "type": {
                                      "kind": "struct",
                                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                      "fields": [
                                        {
                                          "name": "x",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "y",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "is_infinite",
                                          "type": {
                                            "kind": "boolean"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "sk_app",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app_generator",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "note_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                          "fields": [
                            {
                              "name": "call_context",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::call_context::CallContext",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "function_selector",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "returns_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "start_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "end_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  },
                                  {
                                    "name": "calldata_hash",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                "fields": [
                                  {
                                    "name": "recipient",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "content",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                          "fields": [
                            {
                              "name": "log",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log::Log",
                                "fields": [
                                  {
                                    "name": "fields",
                                    "type": {
                                      "kind": "array",
                                      "length": 18,
                                      "type": {
                                        "kind": "field"
                                      }
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "note_hash_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log_hash::LogHash",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "285656119219400463": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 32 limbs"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2444923117917591088": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 39 limbs"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6668324276689745315": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 4 limbs"
          },
          "7136043998373234005": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 40 limbs"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "verification_key": "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\nAAAs5qzRIeYjWGttVXbWN7s="
    },
    {
      "name": "claim_shielded",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                          "fields": [
                            {
                              "name": "request",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                "fields": [
                                  {
                                    "name": "pk_m",
                                    "type": {
                                      "kind": "struct",
                                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                      "fields": [
                                        {
                                          "name": "x",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "y",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "is_infinite",
                                          "type": {
                                            "kind": "boolean"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "sk_app",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app_generator",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "note_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                          "fields": [
                            {
                              "name": "call_context",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::call_context::CallContext",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "function_selector",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "returns_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "start_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "end_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  },
                                  {
                                    "name": "calldata_hash",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                "fields": [
                                  {
                                    "name": "recipient",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "content",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                          "fields": [
                            {
                              "name": "log",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log::Log",
                                "fields": [
                                  {
                                    "name": "fields",
                                    "type": {
                                      "kind": "array",
                                      "length": 18,
                                      "type": {
                                        "kind": "field"
                                      }
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "note_hash_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log_hash::LogHash",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "285656119219400463": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 32 limbs"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2444923117917591088": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 39 limbs"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4456244908619624852": {
            "error_kind": "string",
            "string": "Preimage mismatch"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6668324276689745315": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 4 limbs"
          },
          "7136043998373234005": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 40 limbs"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "verification_key": "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\nAAAs5qzRIeYjWGttVXbWN7s="
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "l1_portal",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_contract_class_id",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::contract_class_id::ContractClassId",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "shield_gateway",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "3263449651635518104": {
            "error_kind": "string",
            "string": "Shield gateway address cannot be zero"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "tZ3bjps3DoDfZa5zoTPFvkpRFGmbLgIEaZFNFlgUefcVz54sfo1iT27ibxibpiiKlKh/kn+e/nj325d//fr+459//fvpp5//efrt0/sPH97/69cPf/3+9vP7vz4u6T9Pif7A9vRTe/OE+PQTvHnKqerrlNesP2f9uejPdX140muX16Y/t6avKK9df+5TXkfV1/VzTgugKsxsMBRw6cyVoBmgQEnNwCTZJIX0NIKhQLYKdANUIHMFSDIWdFAYxYD04ALIBl1hJgOToElQJZU8WhLBVMhLcykEoFBI0giGQs0GJiEPCzQDVOgmIS+XNT2VjBcABTAJmGSahGyumaAZLM11GdbIzwImoYAQmArFJMUk1SQVFFo2GAo9GXQD+4phXzpMIYVEXZPbEylcI+2ZFCJBVyjJwCTVJNUlqNCqwVToxQAUxvqKtuark6MEhgLaX6FKRsoGJsnJoBmgAnlMYCrUYgAK7LFJ0BXYYwzNYCrQqhIABbCPw1CY9vFpH5+ogCoBcm9bAQDkw1YJyOblcKhNoRUDUBg00rVSgJZwA4JugApYDUBgpmJAHlsOn+wxhq5QTFJMUk1STdJMQqHV+gJylEAzmAq0LnoiAAVyVM8E3QAVZjWgN9PHsRgMAaR5FzBJNkk2CY1CoBmgAq0UgalA7h2JYCj0bGCSYZJhEkgGzQAVaBQCU4FGMTIleVrMSmBU/G+Ly6rLqssoQJW6EXleqTmh0fBvo4UtRGmpI9MwojBS6k5oRMGqNJVyKk5glLOTack8E0zk+FGI2NLGRFZ1IraUicJDaRiRLYOLIUXsmEzNaRqxJ4WGEeV1pWUVJCY0otSu5LLusu6y4bLhMorfMZjQiOdeCIwod0FmGko1rXFAYepGXPmFqPaThypXfy7/lLmAPFnJkzMxTSOKXSEK3slaKHonFfFK4auERhS3k7+DrBeaLqOIVVrjmIM3HCQDJjCimRaimcbO1JzQqLqsuqy5jGqCEBUFJTAi65WGES0/ZKvIu0pdqafk5LLsshwyNCI/K00jWoNKYNSy0zCiNYiNqTmhEUW2EhjRGlQaRtO10BpUci3oWmgNMg32OG/t2ONCaFRdVl3WXMYeZ2KPC4ERe1xoGLHHkak5TSOq2ExAvl/ZjZA3hqkw9kB0rDUQHCkhG/LOlEYLPQV2xxHSEVIIKYR0hlR2vBRJgCUQDSdvdwVzCuyB/F6a/1lqIDjW7NhYAzC2wOnY2YbJCI4yIEYZECPafE20OUSOcqacnGzmsGSnrrPE9VCI5kAJjMTBNIcIwyYDxX+CLXA6Ygm06SwpZXX7wu6YU2BIS0hLSGtIa0hb1slYCI69BaLj6I6QAptO0cLpOEvgcOTTBR2SFpLenOkIxGEiSGcMQ3Bk0+W4RIk589Ens38V0ZEyhSE4Qgkkc/iElHkuFLsjhhRdWlIKDGkOaWa9NFmFJ0CxBU7HyuYAIzjyXNBRayF9ReFzIR/xBHlaFEM6QjpCygdURXDkaVEcjpgD+YvZSJ4hxsozpEijKJOQJ0sRHEtIS0hrSOtw5DWt2APRUUYsyF9MZ1Q+JhqCI4QUQjpDKiNm5DlW7IFo2GTEgv7FfIo05K+geWucoRWHIwetYgtEx1YDQxlnMcVQNkIZr0JBXm81cR+AGwo0Q51O7pmOnQunI4enINsryJZVWsedl1PlXgIHlyAvJ0Vw5JaC4nDk5UQHsoUtEB0xpOjSkVpgSHNIeTnR8blwjTacjhxcimwOzRAfRQ25g1IY0ZGDSzGkI6QjpLycFMGRg0txOPJyUvQvlpIuyGFEZ9C1Svm9k5E00MGtAJve+b1cvDtNFnDu6/wxDg3BEVIOjU5zATxDdDIrfKqVOQaZC0asgWA4ucx0Ci6pzTyxU7wuGFLed/TJOB1bSDmqu/SZin+M17Hg8JCT2qzoETVnDgwpxnsxLEPXi8m/jY+1ilwL6SRZkNem4o2Um2nkdeRRKIIjT4Aif4ymBXltKk5HDhhF1kAzhGwkHcfW2WU4cqwrsg2DUOxl5ABXBEcxUnA69pBKU5B6ZUnagoIh5X2dIC9exRY4HdE1ZK56g7qEmeMXuD3InlRERzZSERw5HhTJD8B9RfakYneEkEJIZ0hnSDGkyHordSc5HhTRkb0uyBlGsQeiTUvhWFcER16mgryxpt5AlXrM3ikSD4xcnRSHo4yCW6gcGuwS7r0ahpTLLXRGcCwh5eIDNPM1pqVW9zq3YA19hmr3easyAYI30ngvhGUQemd8G7oGKaG0a6tSQgVlhyc4HGUCKLga55IsHeMaGFKJnckIjiOk3PmmU35tkP1jAI4c4IroiLafrF02e4I3Un9vzzXQ9UphFayhQU4rmXE6ymlFcDjyBFALonawI8Ha+dTAkPKCnPwxzuCMI5VA0ktdjNW6sEPkQnAsLRAda3dsKfBGGu/tNTD0jvg2CA3T/TCm+2FgCXQ/SLFkP0D2EUOpgSGtPmI5/wq2kDb3g5RQ+VjYC6MF+tj00Mvoh7Yq1VQx3othmR/aqlRTwewauJoOucmYRtypFBpG7HxqM1WumdR+W1vY6uQyTi3UZ1oIjjOkXDsn5YiJ2T5FdjJhak5oRMdJoZKcQubvq9XJ9TX7Duz+WXYxdcAWoiOElMN98nvFcsHhyJlFkT+GjKjYUgJHTjKKfA2WCDk6MPP9UHfkEFYkG5DvjdheQbk/ExyObKQiOGJIOZqx0pUTx4FiSLn+KKIjx7giONbQwKuP+ndNKiO1zxa2wOkoRgoOR96fKrIfJiMayjWlYkhzSHNIS0hLSDmHUBukSZFUnI7idUF0FK8LTpsWKZ2Kw1EuMQU5CIBu7rh0sncqx4Mgpz/FHkgXkSnxzR+YS2orgSGlxFEoNzXuCCuOkFK9LEluD31aKrjXKydxRZ8hvrs0REMpnYr+Ximdiq5XSqdiaKDS2YTAiMag1J3YBxRYXCDpZmvV2uLkMuShNsZh2FMOZAeQY7lLzJ/iU6dQqU7TiC/nhNCouaz5+3pxcn3Dv2P4ZyffWQ/G6YghpZxXqAPYhlgu2APRMfPHkHE68k23IN91K5IG6mut0zm9gdpWjU+SinyNrUg2ZLknro6U3Qy7IbCRisMxhzTze2n6oKTAkNYaOB1bCRyOPTQMfi9NJle5Qi2uxlXOEAynGCnYHXMKZD9MxulYamBIa0hrSFtIW0j5+QF6WGFdtKdAcBSvC05H8bog2LRwYTTsgWiI8hwExRnycw/sHeR4EKwpsAXSx6ip11BCg1zCV6GGIaXEsRqJjN1xhpS2UIX6cAt9WhDN62vfWgLBMdfA6VhCWuK9NQeG3oqOLTTw4xqFH3Bgr9PDHJ3vRg1DSmcEw+7IYa84DflpHnlcgp/fkAcnhhHtspX8sQraPym5jB9FaF+/vnmyx4d+/fzp3Tt6eujmeaKf/3n6++2ndx8/P/308cuHD2+e/vP2wxd+07//fvuRXz+//bT+dk3hu49/rNel8M/3H94RfX0Tn07XH10tQwT9eKbDr6tYDe5nSvJGSafMLjpGHqEizWcqykYF4HQd66KmuxLoz3TUax2VWsCqY3FpVzp2QxnUltOhzHI5lH6tgpqfqmLtJWJOlupnKsbGipltTtfu6FrFsRX1UsWxL/DSF3itAqjNxBoAIi5aOTYBSvWoALg0IeddWNBRQ6Ji7ZuuPbEJz8JbdvHmaqhc6zi1Y6fj0B2zXbuj/8ApmS1is18vdro4unRnKsP9mVYH9XKlzo0/117ThrK4Xy/3rSW1hCVLzZ1KUrpRcpm8yi48utmxGguuYN2OnE/MiImZ+ToL71IoPdPFKtaWPua2HytYO9Q+3BXzJoN+64pNiK4NWFEdczWbL0tSGa8QHVtDag5DxsaQTZiu7qnbkW6W/fxGxTaLdjNjbX9jZleH9Xlt3BT63pPNyzq0xNTW79AAxTXcWnGuYXj6Wtju0uAlqY+bzUr9Dl9i9/xXy7Uvdym0Vc+h62RxrWMXnz6l7WbHtAL/uYZd1uEWg9akhNc6NsHZPfnd7lS+S4NvH0fu942j1BhHK/fpgOxZBzYjaeXH6li3W56DB8z7dABEkcdrf7RthHrCaOMuDeiVAPu8SwM9+GrjSOM6NtomulobFhuruRN2ZDx3Jybfxa7j8aUZL1S1Vm+qWr3nZDG9lqzyfL1365uxrEtYP+DkttFRHy8mdG//WBreW3GWhvt4PA13eDQN9/l4Gu74aBreajhKw9txHKbhrY7DFDrqj9Vxmoa3Og7T8BiPpuGdhrM0vNNwmoYHPpyGt+48TMPbDBqtKrxtaXx78txZ4WlnXY5cn5FgM5LV1rfAWLf8N5OCcGoGHRjdjDavzdiVV+x+Slrc0lVNgrFtmUGPlhmmOwpbiaJUbg84/zeY+eC5cz+vLWy4nte0y+PZGwG53tgwnmmYGyuGZ651A3MTF99jwwwb5pUNWw1YPIvfGPEdGkq0umq+1DD74ytkb8UMK+o946jD60jF63HszjaxVerPGqD4/Ow+d6mzVDNj3cS2Sx2YHt8sYX58s4Tl0c0S1sc3S9ge3SxtNRxtlrbjuF0k6bqaIexuTYpvUvpNX/r7dHgflX6b6D4dNSrz6lFfV+aUHt3pbFWcbXW2Kk73OjnVhzc7e5e25i7td05tvbmYw3mXjtcYSvatSs5t3rdaDrf0OeEPVnJ6MNgrOTwZ5N2N0uGC2ak4XDA7FccLZnejdBhle58eHg+25RqS2bFa1fOy1ObdrVKG2n3tQgW83BHnzXDogq/GZV+9vBHaj8ev1Ve/fVyPZ3etFBvjlTlj+7FuMb/Rse1qxoXM4ps9fq3j3JScIiumMTa2tMf3MXl3r3O2kcm7+6XTnQz/PtRjW5m9iqO9zH4oh52fvZLT9FzzD1ZynOO3Sk5zfG0P5/idisMcv1NxnOPr4zuJvU9fJcf35DkeNjmxpV3XI876i8t1jm+7C/s5vHUyYZNa96akWcKUdP38Qdtd26+GhduyeFxp2e2d6Vd+fMPZbs7c//ck2O7Wp/tjRyNd92Fy23UsT58Fyw22ra3Dp8F2wxn+INaoZTMcfI0dRU+vsKN4IVDavLlBwnmvFs+Oj2jp/tQMMd5rSzw4Q/8KyLV3txuC5kWj9n4Tud9q2SbrZLUYy735flg2QOgPlwy4d0dQPdae9QC/c1tx1iPh3018tO7sdJweYV9Q4jOzzg/9TiWHZ/q9ksO+0QtKzhpHLwznsHM05sObpJ2Kw03STsXxJgl+dLAeto72DjlLRFsVZ4nocFp2KrYtjrOBbFWcDeSw0bJTsW1ung1kq+JsIIct1o2K7X300Ti2Go6GcXgnDnc+63BY3/bPSxyWt/kKx6r5Ch3aF5Qclrf5Ci3rvZLT8jZf4V7kheEcljd8vAeAj/cA8DV6APijg/W0vOHj+2x8fJ+ND++zt89YHo1jq+FoGIfPecKdz+8eJtP9M8BnyZR/y/HB+NzqOE2mLyg5S6Z7JYfJdK/kMJm+oOQsmb4wnLNkWvLDyXSr4iyZblWcJtOSf3SwHibTvUOOktBexVEWOp2WXRra/mpI89uy0e/79ZTeXcN49uspv6wf3v7+/tOzf+7/K6n69P7tbx/e6Y9/fvn4+83ffv7v3/Y39t8F/P3pr9/f/fHl0zvSFP9nwPrj5xVL7Q39C82/vHnKIliNr/XHJEFmwcqS6xo1//KVTPof"
    },
    {
      "name": "get_config_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                          "fields": [
                            {
                              "name": "request",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                "fields": [
                                  {
                                    "name": "pk_m",
                                    "type": {
                                      "kind": "struct",
                                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                      "fields": [
                                        {
                                          "name": "x",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "y",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "is_infinite",
                                          "type": {
                                            "kind": "boolean"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "sk_app",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app_generator",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "note_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                          "fields": [
                            {
                              "name": "call_context",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::call_context::CallContext",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "function_selector",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "returns_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "start_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "end_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  },
                                  {
                                    "name": "calldata_hash",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                "fields": [
                                  {
                                    "name": "recipient",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "content",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                          "fields": [
                            {
                              "name": "log",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log::Log",
                                "fields": [
                                  {
                                    "name": "fields",
                                    "type": {
                                      "kind": "array",
                                      "length": 18,
                                      "type": {
                                        "kind": "field"
                                      }
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "note_hash_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log_hash::LogHash",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6006283915776163582": {
            "error_kind": "string",
            "string": "Function get_config_private can only be called statically"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7136043998373234005": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 40 limbs"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "verification_key": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJpAAAAAAAAAAAAAAAAAAAA1AA1\nOKsRv2BhVH4Oeq41gSAAAAAAAAAAAAAAAAAAAAAAABhKjQtra/xdKNKgKRf6BgAAAAAAAAAAAAAA\nAAAAAC174t9DIvNxrWHSSq7i/rCvAAAAAAAAAAAAAAAAAAAAAAASYqyCZpdEC08GYfGoREsAAAAA\nAAAAAAAAAAAAAABT7yQoeXKlSf7Zzllivrx5ZAAAAAAAAAAAAAAAAAAAAAAAEkwXlA/USqCz1Z+y\nGXa+AAAAAAAAAAAAAAAAAAAA780a04vtFKbKO+FYMj9fChsAAAAAAAAAAAAAAAAAAAAAACamN47L\nIc90BrkDRQgx3gAAAAAAAAAAAAAAAAAAAMeMPzEhUSXmJqRprIIUw5IUAAAAAAAAAAAAAAAAAAAA\nAAASQfmSX+qHRfZJ3FA0/CEAAAAAAAAAAAAAAAAAAADXi+tL6gijF+pRxKPj+9b+NwAAAAAAAAAA\nAAAAAAAAAAAAG1L9kVSWr+ES8WvEph/SAAAAAAAAAAAAAAAAAAAA8HbaZC+HOUgnwJFt/WzILqcA\nAAAAAAAAAAAAAAAAAAAAAAgAin1irOmARld7hl9imAAAAAAAAAAAAAAAAAAAALvpITdfuS8AeN8x\nqnk/9KOcAAAAAAAAAAAAAAAAAAAAAAAB4JMl1GQin5XPItuRkKgAAAAAAAAAAAAAAAAAAAA/kvF6\n2DW3hIvfL1KQq3x1VgAAAAAAAAAAAAAAAAAAAAAAGr5RgELOCKTG5XKGvmIkAAAAAAAAAAAAAAAA\nAAAAUWRkyKOvXMktYzSTAGGL5IQAAAAAAAAAAAAAAAAAAAAAAA9nDvJ1rS2USlftD2lJxgAAAAAA\nAAAAAAAAAAAAAF+l/wgPXX3Q6hT/WMm8rTt2AAAAAAAAAAAAAAAAAAAAAAAmYBTGnL4GcuxdHddA\nhkYAAAAAAAAAAAAAAAAAAABFi/1INg9ds0i+WgRO60uuHQAAAAAAAAAAAAAAAAAAAAAAH7yGske4\n7SwgU8Bj8xXXAAAAAAAAAAAAAAAAAAAAmgwq91f09SFJVigyejeFCvQAAAAAAAAAAAAAAAAAAAAA\nAAixVKJ/wMLrF0uVfVziuwAAAAAAAAAAAAAAAAAAAO0Qp7bTwCDWKpI7W9OWGR0TAAAAAAAAAAAA\nAAAAAAAAAAAiqKqwFC76lCbUvzIesCEAAAAAAAAAAAAAAAAAAACpYO0E7RgiavfiNMUPto6zLAAA\nAAAAAAAAAAAAAAAAAAAAH5TAAP1cwiS/0+cpUCw4AAAAAAAAAAAAAAAAAAAAf2bfOy4Wx90Wkg6C\np3acxZEAAAAAAAAAAAAAAAAAAAAAAAhRWG4qQOBJrmhi9vWEmgAAAAAAAAAAAAAAAAAAAE/Vgo9e\n9ysGTYolDvDKtkISAAAAAAAAAAAAAAAAAAAAAAABfJl9r7AqKLC8t6rjz1UAAAAAAAAAAAAAAAAA\nAABXRRAbdkHveZ6lx5PA5H+/IQAAAAAAAAAAAAAAAAAAAAAAAzj44H98MVCY9Uz86H/+AAAAAAAA\nAAAAAAAAAAAApLA/jt6MONfmIT+cr1OYWXsAAAAAAAAAAAAAAAAAAAAAAB4Mjj9uY4Gco1LX5PTa\nKAAAAAAAAAAAAAAAAAAAAImy+htTBIPstinHqt+tOpPxAAAAAAAAAAAAAAAAAAAAAAAagT+FgTaW\numN7dgj6IO8AAAAAAAAAAAAAAAAAAAD823syZBzNWnGGjnzT1yMg5AAAAAAAAAAAAAAAAAAAAAAA\nATDBDUq0HRHSx0+PInBuAAAAAAAAAAAAAAAAAAAAbGP6UV+RTMDMVJE9AtswcMAAAAAAAAAAAAAA\nAAAAAAAAAC8fAcvKUFeoLDHLV9S0EgAAAAAAAAAAAAAAAAAAACrCljqPxfDWxGjF4PGy/xrkAAAA\nAAAAAAAAAAAAAAAAAAAB+kqemFNv8lr9ZUhc1wsAAAAAAAAAAAAAAAAAAAA7RkR36Oe65E/1gWtv\nf7smZQAAAAAAAAAAAAAAAAAAAAAAHNq8fTDuve6Z/iP8f+D/AAAAAAAAAAAAAAAAAAAAu40KrxWt\nUHMUKc6dUA+L7eAAAAAAAAAAAAAAAAAAAAAAAAPZA6T2tVbVMvVGftb3XQAAAAAAAAAAAAAAAAAA\nAPxWP3hhvjWZAnc1CUBivFIAAAAAAAAAAAAAAAAAAAAAAAAfgzJHCuZ1H66fvaGxUxUAAAAAAAAA\nAAAAAAAAAAB3iOh8074kS/kcEcUuFu/xwwAAAAAAAAAAAAAAAAAAAAAAIZmWjr7EWxgzk5Le0jX0\nAAAAAAAAAAAAAAAAAAAAnwSJYNTTK5STugyjjRANEjIAAAAAAAAAAAAAAAAAAAAAAAdI3CX2ECv1\nK2eBy3pzDwAAAAAAAAAAAAAAAAAAAOFuH+aJnJ1btLlj2EGZArcvAAAAAAAAAAAAAAAAAAAAAAAT\nvVI9fCyWeeU+KVAMaiMAAAAAAAAAAAAAAAAAAADrEt1WL+yWYi7E8DD193w9DwAAAAAAAAAAAAAA\nAAAAAAAAKb4m9TR7QUl4k442uwhwAAAAAAAAAAAAAAAAAAAAdgn2vipXHD6RFtk+uNL38ckAAAAA\nAAAAAAAAAAAAAAAAABkf/Omm+yyVjE7X93/NZwAAAAAAAAAAAAAAAAAAAEkFT9VKE1/G0mrqZA5+\nloEdAAAAAAAAAAAAAAAAAAAAAAALcLfkA9vUVSr0IpPkxDIAAAAAAAAAAAAAAAAAAABICUQ28SRt\nl7UvO/ME5BnwXgAAAAAAAAAAAAAAAAAAAAAAJkr1KSn8Jo8ssyglYUTYAAAAAAAAAAAAAAAAAAAA\n7tunv0ZU106weG9C+vw6UmwAAAAAAAAAAAAAAAAAAAAAAAOYNTUZ5/qzj1ewfKPOUwAAAAAAAAAA\nAAAAAAAAAGle0sDLUYWs0/C5xwQy5rIPAAAAAAAAAAAAAAAAAAAAAAAfFiL47JSkA+qcQfUEJcIA\nAAAAAAAAAAAAAAAAAABwdtzpz2LglYdy7oJNBI3wmwAAAAAAAAAAAAAAAAAAAAAAHvY4fTDDxoAD\n5AlgtgzQAAAAAAAAAAAAAAAAAAAAtXrt7gZURC0lqh2kvYvsBuwAAAAAAAAAAAAAAAAAAAAAAAsP\nXxb0cC8S7zylq/N1FQAAAAAAAAAAAAAAAAAAAKVh2qna5dCwEOeaeTfqMEZKAAAAAAAAAAAAAAAA\nAAAAAAAbQucv3nHxA4UMdqLCE+8AAAAAAAAAAAAAAAAAAABL9Ca7Aelnem6y2upBSjYyKAAAAAAA\nAAAAAAAAAAAAAAAAII8EqfL/03TDuv3tJBLrAAAAAAAAAAAAAAAAAAAAXRgqjS4Kcd8EI2PmGhVi\n8RoAAAAAAAAAAAAAAAAAAAAAACq4lTiwg1NeE+DYTsR1JAAAAAAAAAAAAAAAAAAAAFSoAJyVN77x\n2DasaL9LxhutAAAAAAAAAAAAAAAAAAAAAAAtegmv1LEpp9zOwVrIGyYAAAAAAAAAAAAAAAAAAABz\nppf5SaD96wjej2t/LVeM9gAAAAAAAAAAAAAAAAAAAAAAIfb+qALQeI9WSgM75D8CAAAAAAAAAAAA\nAAAAAAAA5nz6kOuY/g34LmKrT7i3Yf4AAAAAAAAAAAAAAAAAAAAAAAw+eqtovptsTqU38slZ2AAA\nAAAAAAAAAAAAAAAAACM/QBDg7gZIUfyw6LxtmvfaAAAAAAAAAAAAAAAAAAAAAAAS1AOSuk4kEWuB\nryBk6dQAAAAAAAAAAAAAAAAAAABaLO1Gg2QWjhf5aN+DVKuVVgAAAAAAAAAAAAAAAAAAAAAALsPy\nLQ1YcjmedSA9iTISAAAAAAAAAAAAAAAAAAAAAKSRP54JZqRxoP9CBwHWm/cAAAAAAAAAAAAAAAAA\nAAAAAA2tQ8uco32kFmkAC84JuwAAAAAAAAAAAAAAAAAAAFizPZI63otdBEhBnUg0Xl+BAAAAAAAA\nAAAAAAAAAAAAAAAorT+MiWPqoo2xOyPO9TIAAAAAAAAAAAAAAAAAAACe1XxR9U4oXDTtSWep/t/5\nwAAAAAAAAAAAAAAAAAAAAAAAHhXa0jS1bGGnpVJQqKzmAAAAAAAAAAAAAAAAAAAAYx8/ayUS6OK6\nwi4J3r8TDiwAAAAAAAAAAAAAAAAAAAAAACGqgNoJupA1TkV9PQbJGAAAAAAAAAAAAAAAAAAAAHTR\n02JqV4LjEinXD7AjqxONAAAAAAAAAAAAAAAAAAAAAAAgveQqOWlou79Of2EQxiYAAAAAAAAAAAAA\nAAAAAAC/cOMgV5JmbRB4Lfgky4mDBQAAAAAAAAAAAAAAAAAAAAAALT7USRibmwMGX6XBt0h+AAAA\nAAAAAAAAAAAAAAAA70JLLYunou4TQHZUN+vS/1cAAAAAAAAAAAAAAAAAAAAAACKwd3QIwJ0gm8XB\nZkrCzQAAAAAAAAAAAAAAAAAAAGBSsDFWpMNlG2T75KQkCAAIAAAAAAAAAAAAAAAAAAAAAAAXpSn4\nAHnnpj3rkDGPgS8AAAAAAAAAAAAAAAAAAAAUkC2e5eP8MdkMvIKIdhOBegAAAAAAAAAAAAAAAAAA\nAAAAAZxwvhZxJTvWaKHUbFbrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADTHJUxkIjK3ee8\n/NyLm5ZalgAAAAAAAAAAAAAAAAAAAAAAJu8vc0UWqcSzJ2jAYVBNAAAAAAAAAAAAAAAAAAAArw+s\nQs4yJo09YDuZeIyXDgIAAAAAAAAAAAAAAAAAAAAAACDdq55T8YjWWtcGW/xsZwAAAAAAAAAAAAAA\nAAAAAGvMegX/lalrKJQkxfczZw2WAAAAAAAAAAAAAAAAAAAAAAAAxDcm91tv2g3iLODg36sAAAAA\nAAAAAAAAAAAAAAAdCgnXF47JO614WPluZPC0jQAAAAAAAAAAAAAAAAAAAAAAL5tuC04sAZaN5cMk\ngqp9AAAAAAAAAAAAAAAAAAAAs8PPbbWlw3xztOqrx8K9tdUAAAAAAAAAAAAAAAAAAAAAAAGaqh23\nOphDKX3dUwWgOQAAAAAAAAAAAAAAAAAAAPMofO4kQhdTybsV1xRQMcptAAAAAAAAAAAAAAAAAAAA\nAAAFiSRi70jt/BTMpcaOrm4="
    },
    {
      "name": "get_config_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "config::Config",
            "fields": [
              {
                "name": "l1_portal",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::eth_address::EthAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "shield_gateway",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "token_contract_class_id",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::contract_class_id::ContractClassId",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "2550444873539515884": {
            "error_kind": "string",
            "string": "Trying to read from uninitialized PublicImmutable"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15520311074722577191": {
            "error_kind": "string",
            "string": "Function get_config_public can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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"
    },
    {
      "name": "get_l1_token_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::address::eth_address::EthAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "get_l2_token_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "is_registered_l1_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": ""
    },
    {
      "name": "is_registered_l2_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2550444873539515884": {
            "error_kind": "string",
            "string": "Trying to read from uninitialized PublicImmutable"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3263449651635518104": {
            "error_kind": "string",
            "string": "Shield gateway address cannot be zero"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "10492081608786484886": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "15520311074722577191": {
            "error_kind": "string",
            "string": "Function get_config_public can only be called statically"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "register_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "name_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "decimals",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                          "fields": [
                            {
                              "name": "request",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                "fields": [
                                  {
                                    "name": "pk_m",
                                    "type": {
                                      "kind": "struct",
                                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                      "fields": [
                                        {
                                          "name": "x",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "y",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "is_infinite",
                                          "type": {
                                            "kind": "boolean"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "sk_app",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app_generator",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "note_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                          "fields": [
                            {
                              "name": "call_context",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::call_context::CallContext",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "function_selector",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "returns_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "start_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "end_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  },
                                  {
                                    "name": "calldata_hash",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                "fields": [
                                  {
                                    "name": "recipient",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "content",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                          "fields": [
                            {
                              "name": "log",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log::Log",
                                "fields": [
                                  {
                                    "name": "fields",
                                    "type": {
                                      "kind": "array",
                                      "length": 18,
                                      "type": {
                                        "kind": "field"
                                      }
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "note_hash_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log_hash::LogHash",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "285656119219400463": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 32 limbs"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2444923117917591088": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 39 limbs"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6668324276689745315": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 4 limbs"
          },
          "7136043998373234005": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 40 limbs"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13612974213305719737": {
            "error_kind": "string",
            "string": "Expected address did not match supplied token address"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18159344801564042747": {
            "error_kind": "string",
            "string": "Token already registered"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "verification_key": "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\nAAAs5qzRIeYjWGttVXbWN7s="
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "withdraw_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "withdrawNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "burnNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2550444873539515884": {
            "error_kind": "string",
            "string": "Trying to read from uninitialized PublicImmutable"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    }
  ],
  "outputs": {
    "globals": {
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "ContractInstanceRegistry"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "updated_class_ids",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shielded_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minter",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "upgrade_authority",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Portal"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l1_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l2_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "recipient",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            },
            {
              "name": "message_leaf_index",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Deposit"
        },
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "aztec_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Register"
        },
        {
          "fields": [
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Withdraw"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_log_claim_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_log_claim_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_register_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_register_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_shielded_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_shielded_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  },
                  {
                    "name": "shield_gateway",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Portal::get_config_private_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "shield_gateway",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_config_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Portal::get_config_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "shield_gateway",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_config_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::get_l1_token_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::eth_address::EthAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_l1_token_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::get_l2_token_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_l2_token_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::is_registered_l1_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::is_registered_l1_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::is_registered_l2_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::is_registered_l2_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "name_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "decimals",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::register_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::register_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Portal::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "withdrawNonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "burnNonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::withdraw_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::withdraw_public_abi"
        }
      ]
    }
  },
  "file_map": {
    "102": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::macros::{\n    dispatch::generate_public_dispatch,\n    functions::{stub_registry, utils::check_each_fn_macroified},\n    notes::NOTES,\n    storage::STORAGE_LAYOUT_NAME,\n    utils::{get_trait_impl_method, module_has_storage},\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    // We generate `_compute_note_hash_and_nullifier`, `sync_private_state` and `process_message`\n    // functions only if they are not already implemented. If they are implemented we just insert empty\n    // quotes.\n    let contract_library_method_compute_note_hash_and_nullifier = if !m.functions().any(|f| {\n        f.name() == quote { _compute_note_hash_and_nullifier }\n    }) {\n        generate_contract_library_method_compute_note_hash_and_nullifier()\n    } else {\n        quote {}\n    };\n    let sync_private_state = if !m.functions().any(|f| f.name() == quote { sync_private_state }) {\n        generate_sync_private_state()\n    } else {\n        quote {}\n    };\n    let process_message = if !m.functions().any(|f| f.name() == quote { process_message }) {\n        generate_process_message()\n    } else {\n        quote {}\n    };\n    let public_dispatch = generate_public_dispatch(m);\n\n    quote {\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    if NOTES.len() > 0 {\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..NOTES.len() {\n            let typ = NOTES.get(i);\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret its raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = <$typ as $crate::protocol_types::traits::Packable>::N;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    },
    "103": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "107": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_array, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n};\nuse std::meta::unquote;\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n\n    if is_fn_private(f) {\n        if is_static_call {\n            create_private_static_stub(f)\n        } else {\n            create_private_stub(f)\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            create_public_static_stub(f)\n        } else {\n            create_public_stub(f)\n        }\n    } else {\n        create_utility_stub(f)\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n    let params_num_fields =\n        fn_parameters.fold(0, |acc, (_, typ)| acc + crate::macros::utils::size_in_fields(typ));\n\n    let serialized_args_index_name = quote { serialized_args_index };\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args = [0;2];\n    // let mut serialized_args_index = 0;\n    // let target_address_serialized = aztec::protocol_types::traits::Serialize::serialize(target_address)\n    // for i in 0..target_address_serialized.len() {\n    //    serialized_args[serialized_args_index] = target_address_serialized[i];\n    //    serialized_args_index += 1;\n    // }\n    // serialized_args[serialized_args_index] = fee_juice_limit_per_tx as Field\n    // serialized_args_index += 1;\n    // ```\n    let serialized_args_array_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_NAME = [0; $params_num_fields];\n            let mut $serialized_args_index_name: u32 = 0;\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append =\n                add_to_field_array(SERIALIZED_ARGS_NAME, serialized_args_index_name, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_array_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n"
    },
    "108": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "111": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{\n        auth_registry::AUTHORIZE_ONCE_REGISTRY, call_interface_stubs::stub_fn, stub_registry,\n    },\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_authorize_once, fn_has_noinitcheck, get_fn_visibility,\n        is_fn_contract_library_method, is_fn_initializer, is_fn_internal, is_fn_private,\n        is_fn_public, is_fn_test, is_fn_utility, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse std::meta::{ctstring::AsCtString, type_of};\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject the authwit check if the function is marked with #[authorize_once].\n    let authorize_once_check = if fn_has_authorize_once(f) {\n        create_authorize_once_check(f)\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    // A quote to be injected at the beginning of the function body.\n    let to_prepend = quote {\n        dep::aztec::oracle::version::assert_compatible_oracle_version();\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n        $authorize_once_check\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n\n    let args_len_quote = if original_params.len() == 0 {\n        // If the function has no parameters, we set the args_len to 0.\n        quote { 0 }\n    } else {\n        // The following will give us <type_of_struct_member_1 as Serialize>::N + <type_of_struct_member_2 as Serialize>::N + ...\n        original_params\n            .map(|(_, param_type): (Quoted, Type)| {\n                quote {\n            <$param_type as $crate::protocol_types::traits::Serialize>::N\n        }\n            })\n            .join(quote {+})\n    };\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len_quote] = dep::aztec::context::public_context::calldata_copy(1, $args_len_quote);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // Inject the authwit check if the function is marked with #[authorize_once].\n    let authorize_once_check = if fn_has_authorize_once(f) {\n        create_authorize_once_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $authorize_once_check\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // A quote to be injected at the beginning of the function body.\n    let to_prepend = quote {\n        dep::aztec::oracle::version::assert_compatible_oracle_version();\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Injects an authwit verification check of the form:\n/// ```\n///   if (!from.eq(context.msg_sender())) {\n///         assert_current_call_valid_authwit::<N>(&mut context, from);\n///     } else {\n///         assert(authwit_nonce, \"Invalid authwit nonce. When 'from' and 'msg_sender' are the same, authwit_nonce must be zero\");\n///     }\n/// ```\n/// where `from` and `authwit_nonce` are the names of the parameters that are expected to be present in the function definition.\n/// This check is injected by the `#[authorize_once(\"from_arg_name\", \"nonce_arg_name\")]`, which allows the user to define\n/// which parameters to use.\npub(crate) comptime fn create_authorize_once_check(f: FunctionDefinition) -> Quoted {\n    let maybe_authorize_once_args = AUTHORIZE_ONCE_REGISTRY.get(f);\n    let authorize_once_args = if maybe_authorize_once_args.is_some() {\n        maybe_authorize_once_args.unwrap()\n    } else {\n        // We need to for authorize_once to have already executed so that we can retrieve its params - this depends on\n        // the order in which the attributes are applied.\n        panic(\n            f\"Functions marked with #[authorize_once] must have the #[private] or #[public] attribute placed last\",\n        )\n    };\n\n    let (from_arg_name, nonce_arg_name) = authorize_once_args;\n    let name: Quoted = f.name();\n\n    let from_arg_candidates =\n        f.parameters().filter(|(name, _)| name == f\"{from_arg_name}\".quoted_contents());\n    let (from_arg_name_quoted, from_arg_type) = if from_arg_candidates.len() == 1 {\n        from_arg_candidates[0]\n    } else {\n        panic(\n            f\"Function {name} does not have a {from_arg_name} parameter. Please specify which one to use in #[authorize_once(\\\"...\\\", \\\"authwit_nonce\\\")]\",\n        )\n    };\n    if from_arg_type\n        != quote { dep::protocol_types::address::aztec_address::AztecAddress }.as_type() {\n        panic(\n            f\"Argument {from_arg_name_quoted} in function {name} must be of type AztecAddress, but is of type {from_arg_type}\",\n        )\n    }\n\n    let nonce_arg_candidates =\n        f.parameters().filter(|(name, _)| name == f\"{nonce_arg_name}\".quoted_contents());\n    let (nonce_arg_name_quoted, nonce_arg_type) = if nonce_arg_candidates.len() == 1 {\n        nonce_arg_candidates[0]\n    } else {\n        panic(\n            f\"Function {name} does not have a {nonce_arg_name}. Please specify which one to use in #[authorize_once(\\\"from\\\", \\\"...\\\")]\",\n        )\n    };\n    if nonce_arg_type != quote { Field }.as_type() {\n        panic(\n            f\"Argument {nonce_arg_name_quoted} in function {name} must be of type Field, but is of type {nonce_arg_type}\",\n        );\n    }\n\n    let nonce_check_quote = f\"{nonce_arg_name_quoted} == 0\".quoted_contents();\n\n    let fn_call = if is_fn_private(f) {\n        // At this point, the original args of the fn have already been altered by the macro\n        // to include PrivateContextInputs, so we need to adjust the args_len accordingly.\n        let args_len = f.parameters().len() - 1;\n        quote { dep::aztec::authwit::auth::assert_current_call_valid_authwit::<$args_len> }\n    } else {\n        quote { dep::aztec::authwit::auth::assert_current_call_valid_authwit_public }\n    };\n    let invalid_nonce_message = f\"Invalid authwit nonce. When '{from_arg_name}' and 'msg_sender' are the same, '{nonce_arg_name}' must be zero\"\n        .as_ctstring()\n        .as_quoted_str();\n    quote {         \n        if (!$from_arg_name_quoted.eq(context.msg_sender())) {\n            $fn_call(&mut context, $from_arg_name_quoted);\n        } else {\n            assert($nonce_check_quote, $invalid_nonce_message);\n        }\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "113": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::note::note_getter_options::PropertySelector;\nuse std::{collections::bounded_vec::BoundedVec, meta::{ctstring::AsCtString, type_of}};\n\n/// Maximum number of note types within 1 contract.\ncomptime global MAX_NOTE_TYPES: u32 = 128;\n\n/// A BoundedVec containing all the note types within this contract.\npub comptime mut global NOTES: BoundedVec<Type, MAX_NOTE_TYPES> = BoundedVec::new();\n\ncomptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < MAX_NOTE_TYPES,\n        f\"A contract can contain at most {MAX_NOTE_TYPES} different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_type_impl(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let note_type_name: str<_> = f\"{name}\".as_ctstring().as_quoted_str!();\n    let max_note_packed_len = crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                // This static assertion ensures the note's packed length doesn't exceed the maximum allowed size.\n                // While this check would ideally live in the Packable trait implementation, we place it here since\n                // this function is always generated by our macros and the Packable trait implementation is not.\n                // Note: We set the note type name and max packed length as local variables because injecting them\n                // directly into the error message doesn't work.\n                let note_type_name = $note_type_name;\n                let max_note_packed_len: u32 = $max_note_packed_len; // Casting to u32 to avoid the value to be printed in hex.\n                let note_packed_len = <$typ as Packable>::N;\n                std::static_assert(note_packed_len <= $max_note_packed_len, f\"{note_type_name} has a packed length of {note_packed_len} fields, which exceeds the maximum allowed length of {max_note_packed_len} fields\");\n\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::traits::Packable::pack(self).concat( [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::context::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates the core note functionality for a struct:\n///\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - NoteHash trait implementation: Handles note hash and nullifier computation\n///\n/// # Requirements\n///\n/// The note struct must:\n/// - Have an `owner` field\n/// - Implement the `Packable` trait\n/// - Not exceed `MAX_NOTE_PACKED_LEN` when packed\n///\n/// # Registration\n///\n/// Registers the note in the global `NOTES` BoundedVec to enable note processing functionality.\n///\n/// # Generated Code\n///\n/// For detailed documentation on the generated implementations, see:\n/// - `generate_note_properties()`\n/// - `generate_note_type_impl()`\n/// - `generate_note_hash_trait_impl()`\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n    assert_has_packable(s);\n\n    // We register the note in the global `NOTES` BoundedVec because we need that information inside the #[aztec] macro\n    // to generate note processing functionality.\n    NOTES.push(s.as_type());\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_type_impl = generate_note_type_impl(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n\n    quote {\n        $note_properties\n        $note_type_impl\n        $note_hash_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n///\n/// # Requirements\n///\n/// The note struct must:\n/// - Implement the `Packable` trait\n/// - Not exceed `MAX_NOTE_PACKED_LEN` when packed\n///\n/// Unlike the `#[note]` macro, there is no requirement for an `owner` field.\n///\n/// # Registration\n///\n/// Registers the note in the global `NOTES` BoundedVec to enable note processing functionality.\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    assert_has_packable(s);\n\n    // We register the note in the global `NOTES` BoundedVec because we need that information inside the #[aztec] macro\n    // to generate note processing functionality.\n    NOTES.push(s.as_type());\n\n    let note_type_id = get_next_note_type_id();\n    let note_properties = generate_note_properties(s);\n    let note_type_impl = generate_note_type_impl(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_type_impl\n    }\n}\n\n/// Asserts that the given note implements the `Packable` trait.\n///\n/// We require that notes have the `Packable` trait implemented because it is used when emitting a note in a log or as\n/// an offchain message.\ncomptime fn assert_has_packable(note: TypeDefinition) {\n    let packable_constraint =\n        quote { crate::protocol_types::traits::Packable }.as_trait_constraint();\n    let note_name = note.name();\n\n    assert(\n        note.as_type().implements(packable_constraint),\n        f\"{note_name} does not implement Packable trait. Either implement it manually or place #[derive(Packable)] on the note struct before #[note] macro invocation.\",\n    );\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    let note_name = note.name();\n\n    assert(\n        has_owner,\n        f\"{note_name} does not have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "114": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields = storage_layout_fields.push_back(\n            quote { pub $name: dep::aztec::state_vars::storage::Storable },\n        );\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::state_vars::storage::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "116": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "117": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "118": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "119": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__EVENT_COMMITMENT,\n    hash::poseidon2_hash_with_separator_bounded_vec, traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u16 {\n    fn from(value: u8) -> u16 {\n        value as u16\n    }\n}\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u16> for u32 {\n    fn from(value: u16) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u16> for u64 {\n    fn from(value: u16) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u16> for u128 {\n    fn from(value: u16) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u16> for Field {\n    fn from(value: u16) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i16 {\n    fn from(value: i8) -> i16 {\n        value as i16\n    }\n}\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i16> for i32 {\n    fn from(value: i16) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\n\nimpl From<i16> for i64 {\n    fn from(value: i16) -> i64 {\n        value as i64\n    }\n}\n\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u16 {\n    fn from(value: bool) -> u16 {\n        value as u16\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for u128 {\n    fn from(value: bool) -> u128 {\n        value as u128\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i16 {\n    fn from(value: bool) -> i16 {\n        value as i16\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n\n    let u_types =\n        [quote { bool }, quote { u8 }, quote { u16 }, quote { u32 }, quote { u64 }, quote { u128 }];\n\n    for type2 in u_types {\n        let body = quote { self as Field };\n\n        impls = impls.push_back(\n            quote {\n                impl AsPrimitive<Field> for $type2 {\n                    fn as_(self) -> Field {\n                        $body\n                    }\n                }\n            },\n        );\n    }\n\n    for type1 in u_types {\n        let body = if type1 == quote { bool } {\n            quote { self != 0 }\n        } else {\n            quote { self as $type1 }\n        };\n\n        impls = impls.push_back(\n            quote {\n                impl AsPrimitive<$type1> for Field {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n        );\n    }\n\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "121": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "122": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "123": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\n/**\n * Computes N close-to-uniformly-random 256 bits from a given ECDH shared_secret.\n *\n * NEVER re-use the same iv and sym_key.\n * DO NOT call this function more than once with the same shared_secret.\n *\n * This function is only known to be safe if shared_secret is computed by combining a \n * random ephemeral key with an address point. See big comment within the body of the function.\n * See big comment within the body of the function.\n */\nfn extract_many_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2_unsafe<let N: u32>(\n    shared_secret: Point,\n) -> [[u8; 32]; N] {\n    /*\n     * Unsafe because of https://eprint.iacr.org/2010/264.pdf Page 13, Lemma 2 (and the * two paragraphs below it).\n     *\n     * If you call this function, you need to be careful and aware of how the arg\n     * `shared_secret` has been derived.\n     *\n     * The paper says that the way you derive aes keys and IVs should be fine with poseidon2\n     * (modelled as a RO), as long as you _don't_ use Poseidon2 as a PRG to generate the * two exponents x & y which multiply to the shared secret S:\n     *\n     * S = [x*y]*G.\n     *\n     * (Otherwise, you would have to \"key\" poseidon2, i.e. generate a uniformly string K\n     * which can be public and compute Hash(x) as poseidon(K,x)).\n     * In that lemma, k would be 2*254=508, and m would be the number of points on the * grumpkin curve (which is close to r according to the Hasse bound).\n     *\n     * Our shared secret S is [esk * address_sk] * G, and the question is: * Can we compute hash(S) using poseidon2 instead of sha256?\n     *\n     * Well, esk is random and not generated with poseidon2, so that's good.\n     * What about address_sk?\n     * Well, address_sk = poseidon2(stuff) + ivsk, so there was some\n     * discussion about whether address_sk is independent of poseidon2.\n     * Given that ivsk is random and independent of poseidon2, the address_sk is also\n     * independent of poseidon2.\n     *\n     * Tl;dr: we believe it's safe to hash S = [esk * address_sk] * G using poseidon2,\n     * in order to derive a symmetric key.\n     *\n     * If you're calling this function for a differently-derived `shared_secret`, be\n     * careful.\n     *\n     */\n\n    /* The output of this function needs to be 32 random bytes.\n     * A single field won't give us 32 bytes of entropy.\n     * So we compute two \"random\" fields, by poseidon-hashing with two different\n     * generators.\n     * We then extract the last 16 (big endian) bytes of each \"random\" field.\n     * Note: we use to_be_bytes because it's slightly more efficient. But we have to\n     * be careful not to take bytes from the \"big end\", because the \"big\" byte is\n     * not uniformly random over the byte: it only has < 6 bits of randomness, because\n     * it's the big end of a 254-bit field element.\n     */\n\n    let mut all_bytes: [[u8; 32]; N] = std::mem::zeroed();\n    // We restrict N to be < 2^8, because of how we compute the domain separator\n    // from k below (where k <= N must be 8 bits). In practice, it's extremely\n    // unlikely that an app will want to compute >= 256 ciphertexts.\n    std::static_assert(N < 256, \"N too large\");\n    for k in 0..N {\n        // We augment the domain separator with the loop index, so that we can\n        // generate N lots of randomness.\n        let k_shift = (k as u16 << 8);\n        let separator_1 = k_shift + GENERATOR_INDEX__SYMMETRIC_KEY as u16;\n        let separator_2 = k_shift + GENERATOR_INDEX__SYMMETRIC_KEY_2 as u16;\n\n        let rand1: Field =\n            poseidon2_hash_with_separator([shared_secret.x, shared_secret.y], separator_1);\n        let rand2: Field =\n            poseidon2_hash_with_separator([shared_secret.x, shared_secret.y], separator_2);\n\n        let rand1_bytes: [u8; 32] = rand1.to_be_bytes();\n        let rand2_bytes: [u8; 32] = rand2.to_be_bytes();\n\n        let mut bytes: [u8; 32] = [0; 32];\n        for i in 0..16 {\n            // We take bytes from the \"little end\" of the be-bytes arrays:\n            let j = 32 - i - 1;\n            bytes[i] = rand1_bytes[j];\n            bytes[16 + i] = rand2_bytes[j];\n        }\n\n        all_bytes[k] = bytes;\n    }\n\n    all_bytes\n}\n\nfn derive_aes_symmetric_key_and_iv_from_uniformly_random_256_bits<let N: u32>(\n    many_random_256_bits: [[u8; 32]; N],\n) -> [([u8; 16], [u8; 16]); N] {\n    // Many (sym_key, iv) pairs:\n    let mut many_pairs: [([u8; 16], [u8; 16]); N] = std::mem::zeroed();\n    for k in 0..N {\n        let random_256_bits = many_random_256_bits[k];\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n        for i in 0..16 {\n            sym_key[i] = random_256_bits[i];\n            iv[i] = random_256_bits[i + 16];\n        }\n        many_pairs[k] = (sym_key, iv);\n    }\n\n    many_pairs\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe<let N: u32>(\n    shared_secret: Point,\n) -> [([u8; 16], [u8; 16]); N] {\n    let many_random_256_bits: [[u8; 32]; N] = extract_many_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2_unsafe(\n        shared_secret,\n    );\n\n    derive_aes_symmetric_key_and_iv_from_uniformly_random_256_bits(many_random_256_bits)\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PlaintextLen: u32>(\n        plaintext: [Field; PlaintextLen],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        // It is safe to call the `unsafe` function here, because we know the `shared_secret`\n        // was derived using an AztecAddress (the recipient). See the block comment\n        // at the start of this unsafe target function for more info.\n        let pairs = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe::<2>(\n            ciphertext_shared_secret,\n        );\n        let (body_sym_key, body_iv) = pairs[0];\n        let (header_sym_key, header_iv) = pairs[1];\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, body_iv, body_sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PlaintextLen * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, header_iv, header_sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PlaintextLen * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PlaintextLen * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n\n        // Derive symmetric keys:\n        let pairs = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe::<2>(\n            ciphertext_shared_secret,\n        );\n        let (body_sym_key, body_iv) = pairs[0];\n        let (header_sym_key, header_iv) = pairs[1];\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext =\n            aes128_decrypt_oracle(header_ciphertext_bvec, header_iv, header_sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, body_iv, body_sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let env = TestEnvironment::new();\n\n        // Log decryption requires oracles that are only available during private execution\n        env.private_context(|_| {\n            let plaintext = [1, 2, 3];\n\n            let recipient = AztecAddress::from_field(\n                0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n            );\n\n            // Mock random values for deterministic test\n            let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n            let _ = OracleMock::mock(\"utilityGetRandomField\").returns(eph_sk).times(1);\n\n            let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n            let _ = OracleMock::mock(\"utilityGetRandomField\").returns(randomness).times(1000000);\n\n            let _ = OracleMock::mock(\"utilityGetIndexedTaggingSecretAsSender\").returns(\n                IndexedTaggingSecret::deserialize([69420, 1337]),\n            );\n            let _ = OracleMock::mock(\"privateIncrementAppTaggingSecretIndexAsSender\").returns(());\n\n            // Encrypt the log\n            let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n            // Mock shared secret for deterministic test\n            let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n                EmbeddedCurveScalar::from_field(eph_sk),\n                recipient,\n            );\n            let _ = OracleMock::mock(\"utilityGetSharedSecret\").returns(shared_secret);\n\n            // Decrypt the log\n            let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n            // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n            // at compile time. For this reason we need to convert the original input to a BoundedVec.\n            let plaintext_bvec =\n                BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n            // Verify decryption matches original plaintext\n            assert_eq(\n                decrypted,\n                plaintext_bvec,\n                \"Decrypted bytes should match original plaintext\",\n            );\n\n            // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n            // static methods of the struct).\n            let _ = AES128 {};\n        });\n    }\n}\n"
    },
    "139": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "142": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messaging.nr",
      "source": "use crate::{\n    hash::{compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\n};\n\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    merkle_tree::root::root_from_sibling_path,\n};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    leaf_index: Field,\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_l1_to_l2_message_hash(\n        portal_contract_address,\n        chain_id,\n        contract_address,\n        version,\n        content,\n        secret_hash,\n        leaf_index,\n    );\n\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\n    // get from an oracle.\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let (_leaf_index, sibling_path) =\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\n\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert_eq(root, l1_to_l2_root, \"Message not in state\");\n\n    compute_l1_to_l2_message_nullifier(message_hash, secret)\n}\n"
    },
    "151": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::{Packable, Serialize};\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize, Packable)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n"
    },
    "154": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "158": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(privateCallPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "159": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize,\n{\n    let serialized_option = load_oracle(contract_address, slot, <T as Deserialize>::N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(utilityStoreCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(utilityLoadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(utilityDeleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(utilityCopyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n\n            assert_eq(load(contract_address, SLOT).unwrap(), value);\n        });\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n\n            let new_value = MockStruct::new(7, 8);\n            store(contract_address, SLOT, new_value);\n\n            assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n        });\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n            delete(contract_address, SLOT);\n\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            delete(contract_address, SLOT);\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 5;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 10;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 1;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 2;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n            // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n            assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n            assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n            assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 2;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 1;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n            // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n            assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n            assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n            assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n        });\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            copy(contract_address, SLOT, SLOT, 1);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            let value = MockStruct::new(5, 6);\n            store(other_contract_address, SLOT, value);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            let _: Option<MockStruct> = load(other_contract_address, SLOT);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            delete(other_contract_address, SLOT);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            copy(other_contract_address, SLOT, SLOT, 0);\n        });\n    }\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars, true)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n    predicate: bool,\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n    _predicate: bool,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2, true)[0]\n}\n"
    },
    "160": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(privateNotifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(privateNotifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(privateNotifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "161": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(utilityGetContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(utilityGetBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(utilityGetTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(utilityGetChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(utilityGetVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "162": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(privateStoreInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(privateLoadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "163": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(utilityGetContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "164": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT};\n\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\n/// its existence.\npub unconstrained fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(utilityGetL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {}\n"
    },
    "167": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(utilityGetPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "168": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(utilityGetKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "169": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(utilityGetPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "171": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(utilityFetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(utilityValidateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(utilityBulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "173": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::note::{note_interface::NoteType, retrieved_note::RetrievedNote};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(privateNotifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(privateNotifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(privateNotifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(utilityGetNotes)]\nunconstrained fn get_notes_oracle<Note, let M: u32, let MaxNotes: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to <RetrievedNote<Note> as Packable>::N. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; <RetrievedNote<Note> as Packable>::N], MaxNotes>\nwhere\n    // TODO(https://github.com/noir-lang/noir/issues/9399): `Note: Packable` should work here.\n    RetrievedNote<Note>: Packable,\n{}\n\npub unconstrained fn get_notes<Note, let M: u32, let MaxNotes: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MaxNotes]\nwhere\n    Note: NoteType + Packable,\n{\n    let packed_retrieved_notes: BoundedVec<[Field; <RetrievedNote<Note> as Packable>::N], MaxNotes>\n         = get_notes_oracle::<Note, M, MaxNotes>(\n            storage_slot,\n            num_selects,\n            select_by_indexes,\n            select_by_offsets,\n            select_by_lengths,\n            select_values,\n            select_comparators,\n            sort_by_indexes,\n            sort_by_offsets,\n            sort_by_lengths,\n            sort_order,\n            limit,\n            offset,\n            status,\n            MaxNotes,\n            <RetrievedNote<Note> as Packable>::N,\n        );\n\n    let mut notes = BoundedVec::<_, MaxNotes>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = RetrievedNote::unpack(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MaxNotes];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(utilityCheckNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n// TODO: Oracles below are generic private log oracles and are not specific to notes. Move them somewhere else.\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(utilityGetIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(privateIncrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Gets the sender for tags.\n///\n/// This unconstrained value is used as the sender when computing an unconstrained shared secret\n/// for a tag in order to emit a log. Constrained tagging should not use this as there is no\n/// guarantee that the recipient knows about the sender, and hence about the shared secret.\n///\n/// The value persists through nested calls, meaning all calls down the stack will use the same\n/// 'senderForTags' value (unless it is replaced).\npub unconstrained fn get_sender_for_tags() -> Option<AztecAddress> {\n    get_sender_for_tags_oracle()\n}\n\n#[oracle(privateGetSenderForTags)]\nunconstrained fn get_sender_for_tags_oracle() -> Option<AztecAddress> {}\n\n/// Sets the sender for tags.\n///\n/// This unconstrained value is used as the sender when computing an unconstrained shared secret\n/// for a tag in order to emit a log. Constrained tagging should not use this as there is no\n/// guarantee that the recipient knows about the sender, and hence about the shared secret.\n///\n/// Account contracts typically set this value before calling other contracts. The value persists\n/// through nested calls, meaning all calls down the stack will use the same 'senderForTags'\n/// value (unless it is replaced by another call to this setter).\npub unconstrained fn set_sender_for_tags(sender_for_tags: AztecAddress) {\n    set_sender_for_tags_oracle(sender_for_tags);\n}\n\n#[oracle(privateSetSenderForTags)]\nunconstrained fn set_sender_for_tags_oracle(_sender_for_tags: AztecAddress) {}\n"
    },
    "176": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(utilityGetSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "178": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(utilityStorageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: u32,\n    length: u32,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number, N)\n}\n\npub unconstrained fn storage_read<T>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"utilityStorageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"utilityStorageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "179": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/version.nr",
      "source": "/// The ORACLE_VERSION constant is used to check that the oracle interface is in sync between PXE and Aztec.nr. We need\n/// to version the oracle interface to ensure that developers get a reasonable error message if they use incompatible\n/// versions of Aztec.nr and PXE. The TypeScript counterpart is in `oracle_version.ts`.\n///\n/// @dev Whenever a contract function or Noir test is run, the `utilityAssertCompatibleOracleVersion` oracle is called and\n/// if the oracle version is incompatible an error is thrown.\npub global ORACLE_VERSION: Field = 1;\n\n/// Asserts that the version of the oracle is compatible with the version expected by the contract.\npub fn assert_compatible_oracle_version() {\n    // Safety: This oracle call returns nothing: we only call it to check Aztec.nr and Oracle interface versions are\n    // compatible. It is therefore always safe to call.\n    unsafe {\n        assert_compatible_oracle_version_wrapper();\n    }\n}\n\nunconstrained fn assert_compatible_oracle_version_wrapper() {\n    assert_compatible_oracle_version_oracle(ORACLE_VERSION);\n}\n\n#[oracle(utilityAssertCompatibleOracleVersion)]\nunconstrained fn assert_compatible_oracle_version_oracle(version: Field) {}\n\nmod test {\n    use super::{assert_compatible_oracle_version_oracle, ORACLE_VERSION};\n\n    #[test]\n    unconstrained fn compatible_oracle_version() {\n        assert_compatible_oracle_version_oracle(ORACLE_VERSION);\n    }\n\n    #[test(should_fail_with = \"Incompatible oracle version. PXE is using version '1', but got a request for '318183437'.\")]\n    unconstrained fn incompatible_oracle_version() {\n        let arbitrary_incorrect_version = 318183437;\n        assert_compatible_oracle_version_oracle(arbitrary_incorrect_version);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "183": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::HasStorageSlot;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n/// Map\n///\n/// A key-value storage container that maps keys to state variables, similar\n/// to Solidity mappings.\n///\n/// `Map` enables you to associate keys (like addresses or other identifiers)\n/// with state variables in your Aztec smart contract. This is conceptually\n/// similar to Solidity's `mapping(K => V)` syntax, where you can store and\n/// retrieve values by their associated keys.\n///\n/// You can declare a state variable contained within a Map in your contract's\n/// #[storage] struct.\n///\n/// For example, you might use\n/// `Map<AztecAddress, PrivateMutable<ValueNote, Context>, Context>` to track\n/// token balances for different users, similar to how you'd use\n/// `mapping(address => uint256)` in Solidity.\n///\n/// > Aside: the verbose `Context` in the declaration is a consequence of\n/// > leveraging Noir's regular syntax for generics to ensure that certain\n/// > state variable methods can only be called in some contexts (private,\n/// > public, utility).\n///\n/// The methods of Map are:\n/// - `at` (access state variable for a given key)\n/// (see the method's own doc comments for more info).\n///\n/// ## Generic Parameters\n/// - `K`: The key type (must implement `ToField` trait for hashing)\n/// - `V`: The value type:\n///   - any Aztec state variable:\n///     - `PublicMutable`\n///     - `PublicImmutable`\n///     - `PrivateMutable`\n///     - `PrivateImmutable`\n///     - `PrivateSet`\n///     - `DelayedPublicMutable`\n///     - `Map`\n/// - `Context`: The execution context (handles private/public function\n///   contexts)\n///\n/// ## Usage\n/// Maps are typically declared in your contract's #[storage] struct and\n/// accessed\n/// using the `at(key)` method to get the state variable for a specific key.\n/// The resulting state variable can then be read from or written to using its\n/// own methods.\n///\n/// ## Advanced\n/// Internally, `Map` uses a single base storage slot to represent the\n/// mapping\n/// itself, similar to Solidity's approach. Individual key-value pairs are\n/// stored at derived storage slots computed by hashing the base storage\n/// slot\n/// with the key using Poseidon2. This ensures:\n/// - No storage slot collisions between different keys\n/// - Uniform distribution of storage slots across the storage space\n/// - Compatibility with Aztec's storage tree structure\n/// - Gas-efficient storage access patterns similar to Solidity mappings\n///\n/// The storage slot derivation uses `derive_storage_slot_in_map(base_slot,\n/// key)` which computes `poseidon2_hash([base_slot, key.to_field()])`,\n/// ensuring cryptographically secure slot separation.\n///\n/// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because\n// nothing is stored at said slot: it is only used to derive the storage slots\n// of nested state variables, which is expected to never result in collisions\n// or slots being close to one another due to these being hashes. This mirrors\n// the strategy adopted by Solidity mappings.\nimpl<K, T, Context> HasStorageSlot<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    /// Initializes a new Map state variable.\n    ///\n    /// This function is usually automatically called within the #[storage]\n    /// macro.\n    /// You typically don't need to call this directly when writing smart contracts.\n    ///\n    /// # Arguments\n    ///\n    /// * `context` - One of `PrivateContext`/`PublicContext`/`UtilityContext`.\n    ///               The Context determines which methods of this struct will\n    ///               be made available to the calling smart contract function.\n    /// * `storage_slot` - A unique identifier for this Map within the contract.\n    ///                    Usually, the #[storage] macro will determine an\n    ///                    appropriate storage_slot automatically. A smart\n    ///                    contract dev shouldn't have to worry about this, as\n    ///                    it's managed behind the scenes.\n    /// * `state_var_constructor` - A function that creates the value type (V)\n    ///                             given a context and storage slot. This is\n    ///                             typically the constructor of the state\n    ///                             variable type being stored in the Map.\n    ///\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    /// Returns the state variable associated with the given key.\n    ///\n    /// This is equivalent to accessing `mapping[key]` in Solidity. It returns\n    /// the state variable instance for the specified key, which can then be\n    /// used to read or write the value at that key.\n    ///\n    /// Unlike Solidity mappings which return the value directly, this returns\n    /// the state variable wrapper (like PrivateMutable, PublicMutable, etc.)\n    /// that you then call methods on to interact with the actual value.\n    ///\n    /// # Arguments\n    ///\n    /// * `key` - The key to look up in the map. Must implement the ToField\n    ///           trait (which most basic Noir & Aztec types do).\n    ///\n    /// # Returns\n    ///\n    /// * `V` - The state variable instance for this key. You can then call\n    ///         methods like `.read()`, `.write()`, `.get_note()`, etc. on this\n    ///         depending on the specific state variable type.\n    ///\n    /// # Example\n    ///\n    /// ```noir\n    /// // Get a user's balance (assuming PrivateMutable<ValueNote>)\n    /// let user_balance = storage.balances.at(user_address);\n    /// let current_note = user_balance.get_note();\n    ///\n    /// // Update the balance\n    /// user_balance.replace(new_note);\n    /// ```\n    ///\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars, true)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn poseidon2_permutation<let N: u32>(input: [Field; N], state_len: u32) -> [Field; N] {\n    assert_eq(input.len(), state_len);\n    poseidon2_permutation_internal(input)\n}\n\n#[foreign(poseidon2_permutation)]\nfn poseidon2_permutation_internal<let N: u32>(input: [Field; N]) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "191": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::HasStorageSlot,\n    utils::with_hash::WithHash,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\n/// # PublicImmutable\n///\n/// PublicImmutable is a public state variable type for values that are set once\n/// during initialization and remain permanently unchanged.\n///\n/// You can declare a state variable of type PublicImmutable within your contract's\n/// #[storage] struct:\n///\n/// E.g.:\n/// `your_variable: PublicImmutable<T, Context>`\n///\n/// PublicImmutable stores an immutable value in public state which can be _read_\n/// from public, utility and even _private_ execution contexts.\n///\n/// The methods of PublicImmutable are:\n/// - `initialize`\n/// - `read`\n/// (see the methods' own doc comments for more info).\n///\n/// # Generic Parameters:\n///\n/// * `T` - The type of value stored (must implement Packable).\n/// * `Context` - The execution context (PublicContext, PrivateContext, or UtilityContext).\n///\n/// # Advanced\n///\n/// PublicImmutable leverages `WithHash<T>` to enable efficient private reads of\n/// public storage. The `WithHash` wrapper optimizes reads by hashing values that would\n/// be larger than a single field into a single field, then proving inclusion of only\n/// the hash in public storage.\n///\n/// This optimization is particularly valuable when T packs to multiple fields,\n/// as it maintains \"almost constant\" verification overhead regardless of the\n/// original data size.\n///\n/// ## Optimizing private reads in your contract\n/// Since reading T from public immutable storage in private contexts has \"almost\n/// constant\" constraint costs regardless of T's size, it's recommended to group\n/// multiple values into a single struct when they are to be read together. This is\n/// typically useful for configuration data set during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using O fields) and its hash (1 field), requiring O = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let O: u32> HasStorageSlot<O> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N = O>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    /// Initializes a new PublicImmutable state variable.\n    ///\n    /// This function is usually automatically called within the #[storage] macro.\n    /// You typically don't need to call this directly when writing smart contracts.\n    ///\n    /// # Arguments\n    ///\n    /// * `context` - One of `PublicContext`/`PrivateContext`/`UtilityContext`. The\n    ///               Context determines which methods of this struct will be made\n    ///               available to the calling smart contract function.\n    /// * `storage_slot` - A unique identifier for this state variable within the\n    ///                    contract. Usually, the #[storage] macro will determine an\n    ///                    appropriate storage_slot automatically. A smart contract\n    ///                    dev shouldn't have to worry about this, as it's managed\n    ///                    behind the scenes.\n    ///\n    /// docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    /// Initializes a PublicImmutable state variable instance with a permanent value.\n    ///\n    /// This function sets the immutable value for this state variable. It can only\n    /// be called once per PublicImmutable. Subsequent calls will fail because the\n    /// initialization nullifier will already exist.\n    ///\n    /// # Arguments\n    /// * `value` - The permanent value to store in this PublicImmutable.\n    ///\n    /// # Panics\n    /// Panics if the value is already initialized.\n    ///\n    /// # Advanced\n    ///\n    /// This function performs the following operations:\n    /// - Creates and emits an initialization nullifier to mark this storage slot\n    ///   as initialized. This prevents double-initialization.\n    /// - Wraps the value in `WithHash<T>` for efficient private reads.\n    /// - Stores the wrapped value in Aztec's public data tree.\n    ///\n    /// docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T)\n    where\n        T: Packable + Eq,\n    {\n        // We emit an initialization nullifier to indicate that the struct is initialized. This also prevents\n        // the value from being initialized again as a nullifier can be included only once.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    /// Reads the permanent value stored in this PublicImmutable state variable.\n    ///\n    /// # Returns\n    /// * `T` - The permanent value stored in this PublicImmutable.\n    ///\n    /// # Panics\n    /// Panics if the value is not initialized.\n    ///\n    /// # Advanced\n    ///\n    /// This function performs the following operations:\n    /// - Checks that the state variable has been initialized by verifying the\n    ///   initialization nullifier exists\n    /// - Reads the `WithHash<T>` wrapper from public storage\n    /// - Extracts and returns the original value T\n    ///\n    /// The function will panic if called on an uninitialized PublicImmutable.\n    ///\n    /// docs:start:public_immutable_struct_read\n    pub fn read(self) -> T\n    where\n        T: Packable + Eq,\n    {\n        assert(self.is_initialized(), \"Trying to read from uninitialized PublicImmutable\");\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n\n    /// Reads the value stored in this PublicImmutable without checking if the value\n    /// is initialized.\n    ///\n    /// This function bypasses the initialization check and directly reads from\n    /// storage.\n    /// If the PublicImmutable has not been initialized, this will return a\n    /// zeroed value.\n    /// However, if the variable is _known_ to be initialized, this is cheaper\n    /// to call than `read`.\n    ///\n    /// # Returns\n    ///\n    /// * `T` - The value stored in this PublicImmutable, or empty/default values if\n    ///         uninitialized.\n    ///\n    pub fn read_unsafe(self) -> T\n    where\n        T: Packable + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n\n    fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.nullifier_exists(nullifier, self.context.this_address())\n    }\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    /// Reads the permanent value stored in this PublicImmutable state variable.\n    ///\n    /// Notice that this function is executable only within a UtilityContext, which\n    /// is an unconstrained environment on the user's local device.\n    ///\n    /// # Returns\n    ///\n    /// * `T` - The permanent value stored in this PublicImmutable.\n    ///\n    pub unconstrained fn read(self) -> T\n    where\n        T: Packable + Eq,\n    {\n        // TODO(#15703): this fn should fail if the variable is not initialized\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    /// Reads the permanent value stored in this PublicImmutable from the anchor\n    /// block.\n    ///\n    /// Private functions execute asynchronously and offchain. When a user begins\n    /// private execution, their view of the chain 'branches off' from the current\n    /// public state, since public state continues to advance while they execute\n    /// privately. Therefore, private functions read from a historical snapshot of\n    /// public state rather than the current state.\n    ///\n    /// # Returns\n    ///\n    /// * `T` - The permanent value stored in this PublicImmutable at the historical\n    ///         block referenced by the private context.\n    ///\n    /// # Advanced\n    ///\n    /// This function performs a historical read using the block header from the private\n    /// context. The `WithHash` optimization is particularly valuable here because it\n    /// reduces the number of required inclusion proofs by proving membership of\n    /// only the hash instead of the full packed value.\n    ///\n    /// The historical read mechanism:\n    /// - Uses an oracle to obtain the value from the historical block\n    /// - Proves inclusion of the value's hash in the public data tree\n    /// - Proves that the root of this public data tree is correct, relative to the\n    ///   historical block header that is being referenced by this private function.\n    /// - Verifies that the oracle-provided value matches the stored hash\n    ///\n    pub fn read(self) -> T\n    where\n        T: Packable + Eq,\n    {\n        // TODO(#15703): this fn should fail if the variable is not initialized\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "209": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends the elements of the second `BoundedVec` to the end of the first one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let ALen: u32, let BLen: u32, let DstLen: u32>(\n    a: BoundedVec<T, ALen>,\n    b: BoundedVec<T, BLen>,\n) -> BoundedVec<T, DstLen> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "212": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DstLen` elements from a source array, starting at `offset`. `DstLen` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SrcLen: u32, let DstLen: u32>(src: [T; SrcLen], offset: u32) -> [T; DstLen] {\n    assert(offset + DstLen <= SrcLen, \"DstLen too large for offset\");\n\n    let mut dst: [T; DstLen] = std::mem::zeroed();\n    for i in 0..DstLen {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DstLen to be 0, so we always get back an empty array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "213": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DstMaxLen` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DstLen` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DstLen` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SrcMaxLen: u32, let DstMaxLen: u32>(\n    bvec: BoundedVec<T, SrcMaxLen>,\n    offset: u32,\n) -> BoundedVec<T, DstMaxLen> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "215": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "216": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "218": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "220": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "225": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    abis::block_header::BlockHeader, address::AztecAddress, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `M` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `M`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let M: u32> {\n    value: T,\n    packed: [Field; M],\n    hash: Field,\n}\n\nimpl<T, let M: u32> WithHash<T, M>\nwhere\n    T: Packable<N = M> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + M as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\n// Note: I don't derive Packable on `WithHash` because `derive_serialize` function does not support setting \"N = M\"\n// as I do here 3 lines below. This could be worked around by placing the \"where\" clause directly on the `WithHash`\n// struct, but Jake mentioned that the syntax is not expected to be supported at least until Noir 1.0.\n// Relevant discussion on Slack:\n// https://aztecprotocol.slack.com/archives/C04QF64EDNV/p1752593876160699?thread_ts=1752589887.955379&cid=C04QF64EDNV\nimpl<T, let M: u32> Packable for WithHash<T, M>\nwhere\n    T: Packable<N = M>,\n{\n    let N: u32 = M + 1;\n\n    fn pack(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n        for i in 0..M {\n            result[i] = self.packed[i];\n        }\n        result[M] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; Self::N]) -> Self {\n        let mut value_packed = [0; M];\n        for i in 0..M {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[M];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::test::OracleMock;\n\n    global STORAGE_SLOT: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let env = TestEnvironment::new();\n\n        env.private_context(|context| {\n            let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n                context.historical_header,\n                context.this_address(),\n                STORAGE_SLOT,\n            );\n\n            assert_eq(result, std::mem::zeroed());\n        });\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        env.public_context(|context| { context.storage_write(STORAGE_SLOT, value_with_hash); });\n\n        env.private_context(|context| {\n            let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n                context.historical_header,\n                context.this_address(),\n                STORAGE_SLOT,\n            );\n            assert_eq(result, value);\n        });\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn bad_hint_uninitialized_value() {\n        let env = TestEnvironment::new();\n\n        env.private_context(|context| {\n            let block_header = context.historical_header;\n            let address = context.this_address();\n\n            // Mock the oracle to return a non-zero hint/packed value\n            let value_packed = MockStruct { a: 1, b: 1 }.pack();\n            let _ = OracleMock::mock(\"utilityStorageRead\")\n                .with_params((\n                    address.to_field(), STORAGE_SLOT, block_header.global_variables.block_number,\n                    value_packed.len(),\n                ))\n                .returns(value_packed)\n                .times(1);\n\n            // This should fail because the hint value is non-zero and the hash is zero (default value of storage)\n            let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n                block_header,\n                address,\n                STORAGE_SLOT,\n            );\n        });\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn bad_hint_initialized_value() {\n        let env = TestEnvironment::new();\n\n        env.public_context(|context| {\n            // Write the value and hash separately so that the hash is wrong\n            let value = MockStruct { a: 5, b: 3 };\n            context.storage_write(STORAGE_SLOT, value);\n\n            let incorrect_hash = 13;\n            let hash_storage_slot = STORAGE_SLOT + (value.pack().len() as Field);\n            context.storage_write(hash_storage_slot, [incorrect_hash]);\n        });\n\n        env.private_context(|context| {\n            let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n                context.historical_header,\n                context.this_address(),\n                STORAGE_SLOT,\n            );\n        });\n    }\n}\n"
    },
    "232": {
      "path": "/home/vscode/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "251": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\nuse std::meta::derive;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct FunctionSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    pub inner: u32,\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "297": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\nuse std::meta::derive;\n\n// Aztec address\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    // We use the AZTEC_ADDRESS_LENGTH constant to ensure that there is a match between the derived trait\n    // implementation and the constant.\n    let serialized: [Field; AZTEC_ADDRESS_LENGTH] = address.serialize();\n    let deserialized = AztecAddress::deserialize(serialized);\n    assert_eq(address, deserialized);\n}\n"
    },
    "298": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::traits::{Deserialize, Empty, Packable, Serialize, ToField};\nuse std::meta::derive;\n\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn to_be_bytes(self) -> [u8; 20] {\n        let field_bytes: [u8; 32] = self.inner.to_be_bytes();\n        let mut bytes = [0; 20];\n        for i in 0..20 {\n            bytes[i] = field_bytes[i + 12];\n        }\n        bytes\n    }\n}\n\nmod test {\n    use crate::{\n        address::eth_address::EthAddress,\n        constants::ETH_ADDRESS_LENGTH,\n        traits::{Deserialize, Serialize},\n    };\n\n    #[test]\n    fn serialization_of_eth_address() {\n        let item = EthAddress::from_field(1);\n        // We use the ETH_ADDRESS_LENGTH constant to ensure that there is a match between the derived trait\n        // implementation and the constant.\n        let serialized: [Field; ETH_ADDRESS_LENGTH] = item.serialize();\n        let deserialized = EthAddress::deserialize(serialized);\n        assert_eq(item, deserialized);\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "300": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Empty, Serialize, ToField},\n};\nuse std::meta::derive;\n\n// Partial address\n#[derive(Deserialize, Eq, Serialize)]\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Empty for PartialAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\nmod test {\n    use crate::{address::partial_address::PartialAddress, traits::{Deserialize, Serialize}};\n\n    #[test]\n    fn serialization_of_partial_address() {\n        let item = PartialAddress::from_field(1);\n        let serialized: [Field; 1] = item.serialize();\n        let deserialized = PartialAddress::deserialize(serialized);\n        assert_eq(item, deserialized);\n    }\n}\n"
    },
    "302": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
      "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\n#[derive(Eq)]\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "311": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "313": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(utilityDebugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "322": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::field::{field_from_bytes, field_from_bytes_32_trunc},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    // Q: shouldn't we be checking whether the _whole_ nullifier is empty?\n    // A: We don't have to. The init and inner circuits add contract address to non-empty nullifiers.\n    // So we know we should silo it if the contract address is not empty.\n    if nullifier.contract_address.is_zero() {\n        // Q: I don't understand this comment. We could still compute a siloed nullifier from a zero contract address.\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n/// Computes sha256 hash of 2 input fields.\n///\n/// @returns A truncated field (i.e., the first byte is always 0).\npub fn accumulate_sha256(v0: Field, v1: Field) -> Field {\n    // Concatenate two fields into 32 x 2 = 64 bytes\n    let v0_as_bytes: [u8; 32] = v0.to_be_bytes();\n    let v1_as_bytes: [u8; 32] = v1.to_be_bytes();\n    let hash_input_flattened = v0_as_bytes.concat(v1_as_bytes);\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = [separator.to_field()].concat(inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert_eq(input[in_len - remainder + i], 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "332": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "336": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "/// Generates the generic parameter declarations for a struct's trait implementation.\n///\n/// This function takes a struct type definition and generates the generic parameter declarations\n/// that go after the `impl` keyword. For example, given a struct with generics `N: u32` and `T`,\n/// it generates `<let N: u32, T>`.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate generic declarations for\n///\n/// # Returns\n/// A quoted code block containing the generic parameter declarations, or an empty quote if the struct\n/// has no generic parameters\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Container<T, let N: u32> {\n///     items: [T; N],\n///     count: u32\n/// }\n/// ```\n///\n/// This function generates:\n/// ```\n/// <let N: u32, T>\n/// ```\ncomptime fn get_generics_declarations(s: TypeDefinition) -> Quoted {\n    let generics = s.generics();\n\n    if generics.len() > 0 {\n        let generics_declarations_items = generics\n            .map(|(name, maybe_integer_typ)| {\n                // The second item in the generics tuple is an Option of an integer type that is Some only if\n                // the generic is numeric.\n                if maybe_integer_typ.is_some() {\n                    // The generic is numeric, so we return a quote defined as e.g. \"let N: u32\"\n                    let integer_type = maybe_integer_typ.unwrap();\n                    quote {let $name: $integer_type}\n                } else {\n                    // The generic is not numeric, so we return a quote containing the name of the generic (e.g. \"T\")\n                    quote {$name}\n                }\n            })\n            .join(quote {,});\n        quote {<$generics_declarations_items>}\n    } else {\n        // The struct doesn't have any generics defined, so we just return an empty quote.\n        quote {}\n    }\n}\n\n/// Generates the `where` clause for a trait implementation that constrains non-numeric generic type parameters.\n///\n/// This function takes a struct type definition and a trait name, and generates a `where` clause that\n/// requires all non-numeric generic type parameters to implement the specified trait.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate the where clause for\n/// - `trait_name`: The name of the trait that non-numeric generic parameters must implement\n///\n/// # Returns\n/// A quoted code block containing the where clause, or an empty quote if the struct has no non-numeric\n/// generic parameters\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Container<T, let N: u32> {\n///     items: [T; N],\n///     count: u32\n/// }\n/// ```\n///\n/// And trait name \"Serialize\", this function generates:\n/// ```\n/// where T: Serialize\n/// ```\ncomptime fn get_where_trait_clause(s: TypeDefinition, trait_name: Quoted) -> Quoted {\n    let generics = s.generics();\n\n    // The second item in the generics tuple is an Option of an integer type that is Some only if the generic is\n    // numeric.\n    let non_numeric_generics =\n        generics.filter(|(_, maybe_integer_typ)| maybe_integer_typ.is_none());\n\n    if non_numeric_generics.len() > 0 {\n        let non_numeric_generics_declarations =\n            non_numeric_generics.map(|(name, _)| quote {$name: $trait_name}).join(quote {,});\n        quote {where $non_numeric_generics_declarations}\n    } else {\n        // There are no non-numeric generics, so we return an empty quote.\n        quote {}\n    }\n}\n\n/// Generates a `Serialize` trait implementation for a struct type.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A quoted code block containing the trait implementation\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Log<N> {\n///     fields: [Field; N],\n///     length: u32\n/// }\n/// ```\n///\n/// This function generates code equivalent to:\n/// ```\n/// impl<let N: u32> Serialize for Log<N> {\n///     let N: u32 = <[Field; N] as Serialize>::N + <u32 as Serialize>::N;\n///\n///     #[inline_always]\n///     fn serialize(self) -> [Field; Self::N] {\n///         let mut result = [0; _];\n///         let mut offset = 0;\n///\n///         let serialized_member = Serialize::serialize(self.fields);\n///         let serialized_member_len = <[Field; N] as Serialize>::N;\n///         for i in 0..serialized_member_len {\n///             result[i + offset] = serialized_member[i];\n///         }\n///         offset += serialized_member_len;\n///\n///         let serialized_member = Serialize::serialize(self.length);\n///         let serialized_member_len = <u32 as Serialize>::N;\n///         for i in 0..serialized_member_len {\n///             result[i + offset] = serialized_member[i];\n///         }\n///         offset += serialized_member_len;\n///\n///         result\n///     }\n/// }\n/// ```\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Serialize` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_serialize_clause = get_where_trait_clause(s, quote {Serialize});\n\n    // The following will give us <type_of_struct_member_1 as Serialize>::N + <type_of_struct_member_2 as Serialize>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Serialize>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly returning the serialized member,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let function_body = if params.len() > 1 {\n        // For multiple struct members, generate serialization code that:\n        // 1. Serializes each member\n        // 2. Copies the serialized fields into the result array at the correct offset\n        // 3. Updates the offset for the next member\n        let serialization_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                let serialized_member = $crate::traits::Serialize::serialize(self.$param_name);\n                let serialized_member_len = <$param_type as $crate::traits::Serialize>::N;\n                for i in 0..serialized_member_len {\n                    result[i + offset] = serialized_member[i];\n                }\n                offset += serialized_member_len;\n            }\n            })\n            .join(quote {});\n\n        quote {\n            let mut result = [0; _];\n            let mut offset = 0;\n\n            $serialization_of_struct_members\n\n            result\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            $crate::traits::Serialize::serialize(self.$param_name)\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Serialize for $typ\n            $where_serialize_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn serialize(self) -> [Field; Self::N] {\n                $function_body\n            }\n        }\n    }\n}\n\n/// Generates a `Deserialize` trait implementation for a given struct `s`.\n///\n/// # Arguments\n/// * `s` - The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A `Quoted` block containing the generated trait implementation\n///\n/// # Requirements\n/// Each struct member type must implement the `Deserialize` trait (it gets used in the generated code).\n///\n/// # Example\n/// For a struct like:\n/// ```\n/// struct MyStruct {\n///     x: AztecAddress,\n///     y: Field,\n/// }\n/// ```\n///\n/// This generates:\n/// ```\n/// impl Deserialize for MyStruct {\n///     let N: u32 = <AztecAddress as Deserialize>::N + <Field as Deserialize>::N;\n///\n///     fn deserialize(serialized: [Field; Self::N]) -> Self {\n///         let mut offset = 0;\n///         let mut member_fields = [0; <AztecAddress as Deserialize>::N];\n///         for i in 0..<AztecAddress as Deserialize>::N {\n///             member_fields[i] = serialized[i + offset];\n///         }\n///         let x = <AztecAddress as Deserialize>::deserialize(member_fields);\n///         offset += <AztecAddress as Deserialize>::N;\n///\n///         let mut member_fields = [0; <Field as Deserialize>::N];\n///         for i in 0..<Field as Deserialize>::N {\n///             member_fields[i] = serialized[i + offset];\n///         }\n///         let y = <Field as Deserialize>::deserialize(member_fields);\n///         offset += <Field as Deserialize>::N;\n///\n///         Self { x, y }\n///     }\n/// }\n/// ```\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Deserialize` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_deserialize_clause = get_where_trait_clause(s, quote {Deserialize});\n\n    // The following will give us <type_of_struct_member_1 as Deserialize>::N + <type_of_struct_member_2 as Deserialize>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Deserialize>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly deserializing the input array,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let function_body = if params.len() > 1 {\n        // This generates deserialization code for each struct member and concatenates them together.\n        let deserialization_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let mut member_fields = [0; <$param_type as Deserialize>::N];\n                    for i in 0..<$param_type as Deserialize>::N {\n                        member_fields[i] = serialized[i + offset];\n                    }\n                    let $param_name = <$param_type as Deserialize>::deserialize(member_fields);\n                    offset += <$param_type as Deserialize>::N;\n                }\n            })\n            .join(quote {});\n\n        // We join the struct member names with a comma to be used in the `Self { ... }` syntax\n        // This will give us e.g. `a, b, c` for a struct with three fields named `a`, `b`, and `c`.\n        let struct_members = params\n            .map(|(param_name, _, _): (Quoted, Type, Quoted)| quote { $param_name })\n            .join(quote {,});\n\n        quote {\n            let mut offset = 0;\n\n            $deserialization_of_struct_members\n\n            Self { $struct_members }\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            Self { $param_name: $crate::traits::Deserialize::deserialize(serialized) }\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Deserialize for $typ\n            $where_deserialize_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn deserialize(serialized: [Field; Self::N]) -> Self {\n                $function_body\n            }\n        }\n    }\n}\n\n/// Generates a `Packable` trait implementation for a given struct `s`.\n///\n/// # Arguments\n/// * `s` - The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A `Quoted` block containing the generated trait implementation\n///\n/// # Requirements\n/// Each struct member type must implement the `Packable` trait (it gets used in the generated code).\n///\n/// # Example\n/// For a struct like:\n/// ```\n/// struct MyStruct {\n///     x: AztecAddress,\n///     y: Field,\n/// }\n/// ```\n///\n/// This generates:\n/// ```\n/// impl Packable for MyStruct {\n///     let N: u32 = 2;\n///\n///     fn pack(self) -> [Field; 2] {\n///         let mut result: [Field; 2] = [0_Field; 2];\n///         let mut offset: u32 = 0_u32;\n///         let packed_member: [Field; 1] = self.x.pack();\n///         let packed_member_len: u32 = <Field as Packable>::N;\n///         for i in 0_u32..packed_member_len {\n///             {\n///                 result[i + offset] = packed_member[i];\n///             }\n///         }\n///         offset = offset + packed_member_len;\n///         let packed_member: [Field; 1] = self.y.pack();\n///         let packed_member_len: u32 = <Field as Packable>::N;\n///         for i in 0_u32..packed_member_len {\n///             {\n///                 result[i + offset] = packed_member[i];\n///             }\n///         }\n///         offset = offset + packed_member_len;\n///         result\n///     }\n///\n///     fn unpack(packed: [Field; 2]) -> Self {\n///         let mut offset: u32 = 0_u32;\n///         let mut member_fields: [Field; 1] = [0_Field; 1];\n///         for i in 0_u32..<AztecAddress as Packable>::N {\n///             member_fields[i] = packed[i + offset];\n///         }\n///         let x: AztecAddress = <AztecAddress as Packable>::unpack(member_fields);\n///         offset = offset + <AztecAddress as Packable>::N;\n///         let mut member_fields: [Field; 1] = [0_Field; 1];\n///         for i in 0_u32..<Field as Packable>::N {\n///             member_fields[i] = packed[i + offset];\n///         }\n///         let y: Field = <Field as Packable>::unpack(member_fields);\n///         offset = offset + <Field as Packable>::N;\n///         Self { x: x, y: y }\n///     }\n/// }\n/// ```\npub comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Packable` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_packable_clause = get_where_trait_clause(s, quote {Packable});\n\n    // The following will give us <type_of_struct_member_1 as Packable>::N + <type_of_struct_member_2 as Packable>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Packable>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly returning the packed member,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let pack_function_body = if params.len() > 1 {\n        // For multiple struct members, generate packing code that:\n        // 1. Packs each member\n        // 2. Copies the packed fields into the result array at the correct offset\n        // 3. Updates the offset for the next member\n        let packing_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let packed_member = $crate::traits::Packable::pack(self.$param_name);\n                    let packed_member_len = <$param_type as $crate::traits::Packable>::N;\n                    for i in 0..packed_member_len {\n                        result[i + offset] = packed_member[i];\n                    }\n                    offset += packed_member_len;\n                }\n            })\n            .join(quote {});\n\n        quote {\n            let mut result = [0; Self::N];\n            let mut offset = 0;\n\n            $packing_of_struct_members\n\n            result\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            $crate::traits::Packable::pack(self.$param_name)\n        }\n    };\n\n    // For structs containing a single member, we can enhance performance by directly unpacking the input array,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let unpack_function_body = if params.len() > 1 {\n        // For multiple struct members, generate unpacking code that:\n        // 1. Unpacks each member\n        // 2. Copies packed fields into member array at correct offset\n        // 3. Updates offset for next member\n        let unpacking_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let mut member_fields = [0; <$param_type as $crate::traits::Packable>::N];\n                    for i in 0..<$param_type as $crate::traits::Packable>::N {\n                        member_fields[i] = packed[i + offset];\n                    }\n                    let $param_name = <$param_type as $crate::traits::Packable>::unpack(member_fields);\n                    offset += <$param_type as $crate::traits::Packable>::N;\n                }\n            })\n            .join(quote {});\n\n        // We join the struct member names with a comma to be used in the `Self { ... }` syntax\n        let struct_members = params\n            .map(|(param_name, _, _): (Quoted, Type, Quoted)| quote { $param_name })\n            .join(quote {,});\n\n        quote {\n            let mut offset = 0;\n            $unpacking_of_struct_members\n            Self { $struct_members }\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            Self { $param_name: $crate::traits::Packable::unpack(packed) }\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Packable for $typ\n            $where_packable_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn pack(self) -> [Field; Self::N] {\n                $pack_function_body\n            }\n\n            #[inline_always]\n            fn unpack(packed: [Field; Self::N]) -> Self {\n                $unpack_function_body\n            }\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Packable, Serialize};\n\n    #[derive(Deserialize, Eq, Packable, Serialize)]\n    pub struct Smol {\n        a: Field,\n        b: Field,\n    }\n\n    #[derive(Deserialize, Eq, Serialize)]\n    pub struct HasArray {\n        a: [Field; 2],\n        b: bool,\n    }\n\n    #[derive(Deserialize, Eq, Serialize)]\n    pub struct Fancier {\n        a: Smol,\n        b: [Field; 2],\n        c: [u8; 3],\n        d: str<16>,\n    }\n\n    #[derive(Deserialize, Eq, Packable, Serialize)]\n    pub struct HasArrayWithGenerics<T, let N: u32> {\n        pub fields: [T; N],\n        pub length: u32,\n    }\n\n    #[test]\n    fn serde_on_smol() {\n        let smol = Smol { a: 1, b: 2 };\n        let serialized = smol.serialize();\n        assert(serialized == [1, 2], serialized);\n        let deserialized = Smol::deserialize(serialized);\n        assert(deserialized == smol);\n\n        // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n        let packed = smol.pack();\n        assert_eq(packed, serialized, \"Packed does not match serialized\");\n    }\n\n    #[test]\n    fn serde_on_has_array() {\n        let has_array = HasArray { a: [1, 2], b: true };\n        let serialized = has_array.serialize();\n        assert(serialized == [1, 2, 1], serialized);\n        let deserialized = HasArray::deserialize(serialized);\n        assert(deserialized == has_array);\n    }\n\n    #[test]\n    fn serde_on_fancier() {\n        let fancier =\n            Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n        let serialized = fancier.serialize();\n        assert(\n            serialized\n                == [\n                    1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                    0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n                ],\n            serialized,\n        );\n        let deserialized = Fancier::deserialize(serialized);\n        assert(deserialized == fancier);\n    }\n\n    #[test]\n    fn serde_on_contains_array_with_generics() {\n        let struct_with_array_of_generics = HasArrayWithGenerics { fields: [1, 2, 3], length: 3 };\n        let serialized = struct_with_array_of_generics.serialize();\n        assert(serialized == [1, 2, 3, 3], serialized);\n        let deserialized = HasArrayWithGenerics::deserialize(serialized);\n        assert(deserialized == struct_with_array_of_generics);\n    }\n\n    #[test]\n    fn packable_on_contains_array_with_generics() {\n        let struct_with_array_of_generics = HasArrayWithGenerics { fields: [1, 2, 3], length: 3 };\n        let packed = struct_with_array_of_generics.pack();\n        assert(packed == [1, 2, 3, 3], packed);\n\n        let unpacked = HasArrayWithGenerics::unpack(packed);\n        assert(unpacked == struct_with_array_of_generics);\n    }\n\n}\n"
    },
    "337": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\n// Note: Not deriving this because it's not supported to call derive_serialize on a \"remote\" struct (and it will never\n// be supported).\nimpl Serialize for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn serialize(self: Self) -> [Field; Self::N] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn deserialize(serialized: [Field; Self::N]) -> Self {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n\n// TODO(#11356): use compact representation here.\nimpl Packable for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn pack(self) -> [Field; Self::N] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; Self::N]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "338": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\nuse crate::traits::{Deserialize, Serialize};\nuse std::meta::derive;\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "348": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::{default::Default, meta::derive};\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nmod test {\n    use crate::{\n        point::POINT_LENGTH,\n        public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n        traits::{Deserialize, Serialize},\n    };\n    use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\n    #[test]\n    unconstrained fn compute_public_keys_hash() {\n        let keys = PublicKeys {\n            npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n            ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n            ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n            tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n        };\n\n        let actual = keys.hash();\n        let expected_public_keys_hash =\n            0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n        assert(actual.to_field() == expected_public_keys_hash);\n    }\n\n    #[test]\n    unconstrained fn compute_default_hash() {\n        let keys = PublicKeys::default();\n\n        let actual = keys.hash();\n        let test_data_default_hash =\n            0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n        assert(actual.to_field() == test_data_default_hash);\n    }\n\n    #[test]\n    unconstrained fn serde() {\n        let keys = PublicKeys {\n            npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n            ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n            ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n            tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n        };\n\n        // We use the PUBLIC_KEYS_LENGTH constant to ensure that there is a match between the derived trait\n        let serialized: [Field; POINT_LENGTH * 4] = keys.serialize();\n        let deserialized = PublicKeys::deserialize(serialized);\n\n        assert_eq(keys, deserialized);\n    }\n}\n"
    },
    "350": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "363": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty: Eq {\n    fn empty() -> Self;\n\n    fn is_empty(self) -> bool {\n        self.eq(Self::empty())\n    }\n\n    // Requires this Noir fix: https://github.com/noir-lang/noir/issues/9002\n    // fn assert_not_empty<let U: u32>(self, msg: str<U>) { // This msg version was failing with weird compiler errors.\n    //     // We provide a default impl but it's likely inefficient.\n    //     // The reason we include this function is because there's a lot of\n    //     // opportunity for optimisation on a per-struct basis.\n    //     // You only need to show one element is not empty to know that the whole thing\n    //     // is not empty.\n    //     // If you know an element of your struct which should always be nonempty,\n    //     // you can write an impl that solely checks that that element is nonempty.\n    //     assert(!self.is_empty(), msg);\n    // }\n\n    // This default impl is overwritten by types like arrays, because there's a much\n    // more efficient approach.\n    fn assert_empty<let S: u32>(self, msg: str<S>) {\n        assert(self.is_empty(), msg);\n    }\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u16 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n\n    fn is_empty(self) -> bool {\n        self.all(|elem| elem.is_empty())\n    }\n\n    fn assert_empty<let S: u32>(self, msg: str<S>) -> () {\n        self.for_each(|elem| elem.assert_empty(msg))\n    }\n}\n\nimpl<T> Empty for [T]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty()]\n    }\n\n    fn is_empty(self) -> bool {\n        self.all(|elem| elem.is_empty())\n    }\n\n    fn assert_empty<let S: u32>(self, msg: str<S>) -> () {\n        self.for_each(|elem| elem.assert_empty(msg))\n    }\n}\nimpl<A, B> Empty for (A, B)\nwhere\n    A: Empty,\n    B: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        (A::empty(), B::empty())\n    }\n}\n\nimpl<T> Empty for Option<T>\nwhere\n    T: Eq,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\n// pub fn is_empty<T>(item: T) -> bool\n// where\n//     T: Empty,\n// {\n//     item.eq(T::empty())\n// }\n\n// pub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\n// where\n//     T: Empty,\n// {\n//     array.all(|elem| is_empty(elem))\n// }\n\n// pub fn assert_empty<T>(item: T) -> ()\n// where\n//     T: Empty,\n// {\n//     assert(item.eq(T::empty()))\n// }\n\n// pub fn assert_empty_array<T, let N: u32>(array: [T; N]) -> ()\n// where\n//     T: Empty,\n// {\n//     // A cheaper option than `is_empty_array` for if you don't need to gracefully\n//     // handle a bool result.\n//     // Avoids the `&` operator of `is_empty_array`'s `.all()` call.\n//     for i in 0..N {\n//         assert(is_empty(array[i]));\n//     }\n// }\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u16 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u16 {\n    fn from_field(value: Field) -> Self {\n        value as u16\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Associated Constants\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize for str<N> {\n///     let N: u32 = N;\n///\n///     fn serialize(self) -> [Field; Self::N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; Self::N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize {\n    let N: u32;\n\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let M: u32> Serialize for str<M> {\n    let N: u32 = M;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; Self::N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n/// Implementation of Deserialize for BoundedVec.\n///\n/// This implementation deserializes a BoundedVec from an array of Fields. The array contains:\n/// 1. The serialized items, each taking up T::N Fields\n/// 2. The length of the BoundedVec as the last Field\n///\n/// # Type Parameters\n/// * `T` - The type of items stored in the BoundedVec, must implement Deserialize\n/// * `M` - The maximum length of the BoundedVec\n///\n/// # Fields Array Layout\n/// [item1_field1, item1_field2, ..., item2_field1, item2_field2, ..., length]\n/// Where:\n/// - itemN_fieldM: The M-th Field of the N-th item (T::N Fields per item)\n/// - length: The number of items in the BoundedVec (1 Field)\n///\n/// Total length N = T::N * M + 1, where:\n/// - T::N is the number of Fields needed to deserialize one item\n/// - M is the maximum length of the BoundedVec\n/// - +1 is for storing the length\n///\n/// # Note\n/// Not deriving this because it's not supported to call derive_deserialize on a \"remote\" struct (and it will never\n/// be supported).\nimpl<T, let M: u32> Deserialize for BoundedVec<T, M>\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N * M + 1;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[<T as Deserialize>::N * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; <T as Deserialize>::N];\n            for j in 0..<T as Deserialize>::N {\n                nested_fields[j] = fields[i * <T as Deserialize>::N + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl Deserialize for () {\n    let N: u32 = 0;\n\n    fn deserialize(_fields: [Field; Self::N]) -> Self {\n        ()\n    }\n}\n\n// Note: Not deriving this because it's not supported to call derive_serialize on a \"remote\" struct (and it will never\n// be supported).\nimpl<T, let M: u32> Serialize for BoundedVec<T, M>\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N * M + 1; // +1 for the length of the BoundedVec\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut fields = [0; Self::N];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..<T as Serialize>::N {\n                fields[i * <T as Serialize>::N + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[<T as Serialize>::N * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Associated Constants\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let M: u32> Deserialize for str<M> {\n///     let N: u32 = M;\n///\n///     #[inline_always]\n///     fn deserialize(fields: [Field; Self::N]) -> Self {\n///         str::<Self::N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize {\n    let N: u32;\n\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let M: u32> Deserialize for str<M> {\n    let N: u32 = M;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        str::<Self::N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Associated Constants\n/// * `N` - The length of the Field array, known at compile time\n#[derive_via(derive_packable)]\npub trait Packable {\n    let N: u32;\n\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "365": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable for bool {\n    let N: u32 = BOOL_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable for u8 {\n    let N: u32 = U8_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable for u16 {\n    let N: u32 = U16_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable for u32 {\n    let N: u32 = U32_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable for u64 {\n    let N: u32 = U64_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable for u128 {\n    let N: u32 = U128_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable for Field {\n    let N: u32 = FIELD_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable for i8 {\n    let N: u32 = I8_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u8 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable for i16 {\n    let N: u32 = I16_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u16 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable for i32 {\n    let N: u32 = I32_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u32 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable for i64 {\n    let N: u32 = I64_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u64 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let M: u32> Packable for [T; M]\nwhere\n    T: Packable,\n{\n    let N: u32 = M * <T as Packable>::N;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n        for i in 0..M {\n            let serialized = self[i].pack();\n            for j in 0..<T as Packable>::N {\n                result[i * <T as Packable>::N + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; M] = std::mem::zeroed();\n        reader.read_struct_array::<T, <T as Packable>::N, M>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "366": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize for bool {\n    let N: u32 = BOOL_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for bool {\n    let N: u32 = BOOL_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize for u8 {\n    let N: u32 = U8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u8 {\n    let N: u32 = U8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize for u16 {\n    let N: u32 = U16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u16 {\n    let N: u32 = U16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize for u32 {\n    let N: u32 = U32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u32 {\n    let N: u32 = U32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize for u64 {\n    let N: u32 = U64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u64 {\n    let N: u32 = U64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize for u128 {\n    let N: u32 = U128_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u128 {\n    let N: u32 = U128_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize for Field {\n    let N: u32 = FIELD_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self]\n    }\n}\n\nimpl Deserialize for Field {\n    let N: u32 = FIELD_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize for i8 {\n    let N: u32 = I8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize for i8 {\n    let N: u32 = I8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize for i16 {\n    let N: u32 = I16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize for i16 {\n    let N: u32 = I16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize for i32 {\n    let N: u32 = I32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize for i32 {\n    let N: u32 = I32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize for i64 {\n    let N: u32 = I64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize for i64 {\n    let N: u32 = I64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let M: u32> Serialize for [T; M]\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N * M;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut result: [Field; _] = std::mem::zeroed();\n        for i in 0..M {\n            let serialized_t = self[i].serialize();\n            for j in 0..<T as Serialize>::N {\n                result[i * <T as Serialize>::N + j] = serialized_t[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let M: u32> Deserialize for [T; M]\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N * M;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; M] = std::mem::zeroed();\n        reader.read_struct_array::<T, <T as Deserialize>::N, M>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T> Serialize for Option<T>\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N + 1;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..<T as Serialize>::N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T> Deserialize for Option<T>\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N + 1;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        if fields[0] == 1 {\n            let mut value_fields = [0; <T as Deserialize>::N];\n            for i in 0..<T as Deserialize>::N {\n                value_fields[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_fields))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "383": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO: This currently only exists to aid point compression in compress_to_blob_commitment().\n// Once compression is part of BigCurve it can either be removed or optimized to be used elsewhere.\npub fn byte_to_bits_be(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[7 - i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "386": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_u64(&mut self) -> u64 {\n        self.read() as u64\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert_eq(self.offset, self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "395": {
      "path": "/home/vscode/nargo/github.com/noir-lang/sha256/v0.2.0/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\npub(crate) mod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let (mut h, mut msg_block, mut msg_byte_ptr) =\n            process_full_blocks(msg, message_size, INITIAL_STATE);\n\n        finalize_sha256_blocks(msg, message_size, N, h, msg_block, msg_byte_ptr)\n    }\n}\n\npub(crate) unconstrained fn __sha_var<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    initial_state: STATE,\n) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = initial_state;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n\n    finalize_last_sha256_block(h, message_size, msg)\n}\n\n// Helper function to finalize the message block with padding and length\npub(crate) unconstrained fn finalize_last_sha256_block<let N: u32>(\n    mut h: STATE,\n    message_size: u32,\n    msg: [u8; N],\n) -> HASH {\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let num_full_blocks = message_size / BLOCK_SIZE;\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    __sha_var(msg, message_size, INITIAL_STATE)\n}\n\npub(crate) fn process_full_blocks<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    mut h: STATE,\n) -> (STATE, MSG_BLOCK, u32) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    let mut msg_byte_ptr = 0;\n    let num_blocks = N / BLOCK_SIZE;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n        // Safety: separate verification function\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        // Verify the block we are compressing was appropriately constructed\n        let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n        if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n    (h, msg_block, msg_byte_ptr)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\npub(crate) unconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let int_input = (block_input + INT_SIZE - 1) / INT_SIZE;\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u32) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u32) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\n#[inline_always]\nfn rshift8(item: u32, shifts: u32) -> u32 {\n    if is_unconstrained() {\n        if 8 * shifts >= 32 {\n            0\n        } else {\n            item >> (8 * shifts)\n        }\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    msg_block[INT_SIZE_PTR] = (len_bytes[0] as u32) << 24\n        | (len_bytes[1] as u32) << 16\n        | (len_bytes[2] as u32) << 8\n        | (len_bytes[3] as u32);\n\n    msg_block[INT_SIZE_PTR + 1] = (len_bytes[4] as u32) << 24\n        | (len_bytes[5] as u32) << 16\n        | (len_bytes[6] as u32) << 8\n        | (len_bytes[7] as u32);\n\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    std::static_assert(\n        INT_SIZE_PTR + 2 == INT_BLOCK_SIZE,\n        \"INT_SIZE_PTR + 2 must equal INT_BLOCK_SIZE\",\n    );\n    let reconstructed_len_hi = msg_block[INT_SIZE_PTR] as Field;\n    let reconstructed_len_lo = msg_block[INT_SIZE_PTR + 1] as Field;\n\n    let reconstructed_len: Field =\n        reconstructed_len_hi * TWO_POW_32 as Field + reconstructed_len_lo;\n    let len = 8 * (message_size as Field);\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\npub(crate) fn finalize_sha256_blocks<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    total_len: u32,\n    mut h: STATE,\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: u32,\n) -> HASH {\n    let modulo = total_len % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let num_blocks = total_len / BLOCK_SIZE;\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n        // Safety: separate verification function\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n        if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n            verify_msg_block_padding(msg_block, msg_byte_ptr);\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    // Safety: separate verification function\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n/**\n * Given some state of a partially computed sha256 hash and part of the preimage, continue hashing\n * @notice used for complex/ recursive offloading of post-partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the preimage to hash\n * @param message_size - the actual length of the preimage to hash\n * @return the intermediate hash state after compressing in msg to h\n */\npub fn partial_sha256_var_interstitial<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u32,\n) -> [u32; 8] {\n    assert(message_size % BLOCK_SIZE == 0, \"Message size must be a multiple of the block size\");\n    if std::runtime::is_unconstrained() {\n        // Safety: running as an unconstrained function\n        unsafe {\n            __sha_partial_var_interstitial(h, msg, message_size)\n        }\n    } else {\n        let (mut h, _, _) = process_full_blocks(msg, message_size, h);\n\n        h\n    }\n}\n\n/**\n * Given some state of a partially computed sha256 hash and remaining preimage, complete the hash\n * @notice used for traditional partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the remaining preimage to hash\n * @param message_size - the size of the current chunk\n * @param real_message_size - the total size of the original preimage\n * @return finalized sha256 hash\n */\npub fn partial_sha256_var_end<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u32,\n    real_message_size: u32,\n) -> [u8; 32] {\n    assert(message_size % BLOCK_SIZE == 0, \"Message size must be a multiple of the block size\");\n    if std::runtime::is_unconstrained() {\n        // Safety: running as an unconstrained function\n        unsafe {\n            h = __sha_partial_var_interstitial(h, msg, message_size);\n\n            // Handle setup of the final msg block.\n            // This case is only hit if the msg is less than the block size,\n            // or our message cannot be evenly split into blocks.\n\n            finalize_last_sha256_block(h, real_message_size, msg)\n        }\n    } else {\n        let (mut h, mut msg_block, mut msg_byte_ptr) = process_full_blocks(msg, message_size, h);\n        finalize_sha256_blocks(msg, real_message_size, N, h, msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn __sha_partial_var_interstitial<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u32,\n) -> [u32; 8] {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n    h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        // Safety: test function\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "430": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[derive(Eq, Serialize, Packable)]\n#[custom_note]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    pub fn get_owner(self) -> AztecAddress {\n        self.owner\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` so that they can discover the\n    /// note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            self.pack().concat([storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        note_completion_log.concat(padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{address::AztecAddress, traits::{Deserialize, FromField, Packable}},\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        // The following is a misuse of the `deserialize` function, but this is just a test and it's better than\n        // letting devs manually construct it when they shouldn't be able to.\n        let partial_note = PartialUintNote::deserialize([commitment]);\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(private_log_without_public_tag.concat(public_log_without_tag), note.pack());\n    }\n}\n"
    },
    "46": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        if result {\n            for i in 0..self.len() {\n                result &= self[i].eq(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let self_len = self.len();\n        let other_len = other.len();\n        let min_len = if self_len < other_len {\n            self_len\n        } else {\n            other_len\n        };\n\n        let mut result = Ordering::equal();\n        for i in 0..min_len {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self_len.cmp(other_len)\n        }\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use super::{Eq, max, min, Ord};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n\n    #[test]\n    fn correctly_handles_unequal_length_slices() {\n        let slice_1 = &[0, 1, 2, 3];\n        let slice_2 = &[0, 1, 2];\n        assert(!slice_1.eq(slice_2));\n    }\n\n    #[test]\n    fn lexicographic_ordering_for_slices() {\n        assert(&[2_u32].cmp(&[1_u32, 1_u32, 1_u32]) == super::Ordering::greater());\n        assert(&[1_u32, 2_u32].cmp(&[1_u32, 2_u32, 3_u32]) == super::Ordering::less());\n    }\n}\n"
    },
    "52": {
      "path": "/home/vscode/turnstile-monorepo/aztec/contracts/portal/src/encoding/deposit.nr",
      "source": "use aztec::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    hash::sha256_to_field,\n    traits::{FromField, ToField},\n};\n\n// bytes4(keccak256(\"deposit(address,bytes32,uint256)\")) = 0xeb2243f8\nglobal DEPOSIT_SIGNATURE: [u8; 4] = [0xeb, 0x22, 0x43, 0xf8];\n\npub fn deposit_content_hash(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> Field {\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_deposit(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(DEPOSIT_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = DEPOSIT_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n// For testing purposes, enables printing the ABI-encoded data\npub unconstrained fn field_from_encoded_bytes(encoded: [u8; 100], offset: u32) -> Field {\n    let mut arr = [0; 31];\n    for i in 0..31 {\n        if offset + i >= 100 {\n            break;\n        }\n        arr[i] = encoded[offset + i];\n    }\n    aztec::protocol_types::utils::field::field_from_bytes(arr, true)\n}\n\n#[test]\nfn test_abi_encode_deposit() {\n    let eth_token = EthAddress::from_field(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F);\n    let recipient = AztecAddress::from_field(\n        0x1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863,\n    );\n    let amount = 0x1234567890abcdef1234567890abcdef;\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"deposit(address,bytes32,uint256)\", address(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F), bytes32(hex\"1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863\"), 0x1234567890abcdef1234567890abcdef) =\n    // 0xeb2243f80000000000000000000000002458675deb5e0691da2d2ba8dcaf58cfd2c2651f1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863000000000000000000000000000000001234567890abcdef1234567890abcdef\n    let expected: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_deposit: got: {encoded}\");\n        std::println(f\"test_abi_encode_deposit: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nfn test_deposit_content_hash() {\n    let content: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    // sha256(content) = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883aa8\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883a;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_deposit_content_hash: got: {content_hash}\");\n        std::println(f\"test_deposit_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "54": {
      "path": "/home/vscode/turnstile-monorepo/aztec/contracts/portal/src/encoding/register.nr",
      "source": "use aztec::protocol_types::{address::EthAddress, hash::sha256_to_field, traits::ToField};\n\n// bytes4(keccak256(register(address,string,string,uint8))) = 0x611a7a19\ncomptime global REGISTER_SIGNATURE: [u8; 4] = [0x61, 0x1a, 0x7a, 0x19];\n\npub fn register_content_hash(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> Field {\n    let encoded = abi_encode_register(eth_token, name, name_len, symbol, symbol_len, decimals);\n    let content_hash = sha256_to_field(encoded);\n\n    // Debug log the ABI-encoded data\n    // let field_array: [Field; 9] = aztec::utils::bytes::bytes_to_fields::<260, 9>(encoded);\n    // dep::aztec::oracle::debug_log::debug_log_format(\"ABI Encoded: {}\", field_array);\n    content_hash\n}\n\npub fn abi_encode_register(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> [u8; 260] {\n    // abi.encodeWithSignature(REGISTER_SIGNATURE, tokenAddr, token.name(), token.symbol(), token.decimals())\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the name offset\n    // 0x44 - 32 bytes for the symbol offset\n    // 0x64 - 32 bytes for the decimals\n    // 0x84 - 32 bytes for the name length\n    // 0xa4 - 32 bytes for the name // Limited to 31 bytes\n    // 0xc4 - 32 bytes for the symbol length\n    // 0xe4 - 32 bytes for the symbol // Limited to 31 bytes\n    // Total: 260 bytes\n    let mut encoded = [0; 260];\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let decimals_bytes: [u8; 32] = decimals.to_field().to_be_bytes();\n\n    let name_len_bytes: [u8; 32] = name_len.to_field().to_be_bytes();\n    let symbol_len_bytes: [u8; 32] = symbol_len.to_field().to_be_bytes();\n\n    // Fixed offsets for name and symbol\n    // Offset for the name is 0x80 per the ABI encoding, but 0x84 in the raw data\n    let name_offset_bytes: [u8; 32] = 0x80.to_field().to_be_bytes();\n    // Offset for the symbol is 0xc0 per the ABI encoding, but 0xc4 in the raw data\n    let symbol_offset_bytes: [u8; 32] = 0xc0.to_field().to_be_bytes();\n\n    let name_bytes: [u8; 31] = name.as_bytes();\n    let symbol_bytes: [u8; 31] = symbol.as_bytes();\n\n    for i in 0..32 {\n        // First 4 bytes are the function signature\n        if i < 4 {\n            encoded[i] = REGISTER_SIGNATURE[i];\n        }\n\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = name_offset_bytes[i];\n        encoded[i + 0x44] = symbol_offset_bytes[i];\n        encoded[i + 0x64] = decimals_bytes[i];\n        encoded[i + 0x84] = name_len_bytes[i];\n        encoded[i + 0xc4] = symbol_len_bytes[i];\n\n        // Copy name & symbol\n        if (i as u8) < name_len {\n            encoded[i + 0xa4] = name_bytes[i];\n        }\n        if (i as u8) < symbol_len {\n            encoded[i + 0xe4] = symbol_bytes[i];\n        }\n    }\n\n    encoded\n}\n\nunconstrained fn pad_31<let N: u32>(s: str<N>) -> str<31> {\n    let mut padded = [0; 31];\n    let s = s.as_bytes();\n    for i in 0..31 {\n        if i < N {\n            padded[i] = s[i];\n        }\n    }\n    padded.as_str_unchecked()\n}\n\n#[test]\nunconstrained fn test_abi_encode_register() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let name = pad_31(\"Test Token\");\n    let symbol = pad_31(\"TT\");\n    let decimals = 18;\n    let encoded = abi_encode_register(eth_token, name, 10, symbol, 2, decimals);\n\n    // abi.encodeWithSignature(\"register(address,string,string,uint8)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), \"Test Token\", \"TT\", 18) =\n    // 0x611a7a19000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5465737420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025454000000000000000000000000000000000000000000000000000000000000\n    let expected: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_register: got: {encoded}\");\n        std::println(f\"test_abi_encode_register: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nunconstrained fn test_register_content_hash() {\n    let content: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    // sha256(content) = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9f4\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_register_content_hash: got: {content_hash}\");\n        std::println(f\"test_register_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "55": {
      "path": "/home/vscode/turnstile-monorepo/aztec/contracts/portal/src/encoding/withdraw.nr",
      "source": "use aztec::protocol_types::{address::EthAddress, hash::sha256_to_field, traits::ToField};\n\n// bytes4(keccak256(\"withdraw(address,address,uint256)\")) = 0xd9caed12\nglobal WITHDRAW_SIGNATURE: [u8; 4] = [0xd9, 0xca, 0xed, 0x12];\n\npub fn withdraw_content_hash(eth_token: EthAddress, recipient: EthAddress, amount: Field) -> Field {\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_withdraw(\n    eth_token: EthAddress,\n    recipient: EthAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(WITHDRAW_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = WITHDRAW_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n#[test]\nfn test_abi_encode_withdraw() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let recipient = EthAddress::from_field(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439);\n    let amount = 0x1234567890abcdef;\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"withdraw(address,address,uint256)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), address(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439), 0x1234567890abcdef) =\n    // 0xd9caed12000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c700000000000000000000000052b1d2cebf3c80813f82dc4b5f56fcb4e04ac4390000000000000000000000000000000000000000000000001234567890abcdef\n    let expected: [u8; 100] = [\n        0xd9, 0xca, 0xed, 0x12, // Function selector - withdraw(address,address,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Recipient Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439\n        0x52, 0xb1, 0xd2, 0xce, 0xbf, 0x3c, 0x80, 0x81, 0x3f, 0x82, 0xdc, 0x4b, 0x5f, 0x56, 0xfc,\n        0xb4, 0xe0, 0x4a, 0xc4, 0x39,\n        // Amount: 0x1234567890abcdef\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    assert_eq(encoded, expected);\n}\n"
    },
    "56": {
      "path": "/home/vscode/turnstile-monorepo/aztec/contracts/portal/src/main.nr",
      "source": "mod constants;\nmod encoding;\nmod config;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract Portal {\n    use std::meta::derive;\n\n    use aztec::{\n        authwit::auth::assert_current_call_valid_authwit_public,\n        context::call_interfaces::CallInterface,\n        event::event_interface::emit_event_in_public,\n        hash::hash_args,\n        macros::{\n            events::event,\n            functions::{\n                initialization_utils::compute_initialization_hash, initializer, internal, private,\n                public, utility, view,\n            },\n            storage::storage,\n        },\n        protocol_types::{\n            address::{AztecAddress, EthAddress, PartialAddress},\n            contract_class_id::ContractClassId,\n            public_keys::PublicKeys,\n            traits::{FromField, Serialize, ToField},\n        },\n        state_vars::{Map, PublicImmutable},\n    };\n\n    use token::Token;\n\n    use crate::{\n        config::Config,\n        constants::PUBLIC_NOT_SECRET_SECRET,\n        encoding::{\n            deposit::deposit_content_hash, register::register_content_hash,\n            withdraw::withdraw_content_hash,\n        },\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        config: PublicImmutable<Config, Context>,\n        l1_tokens: Map<EthAddress, PublicImmutable<AztecAddress, Context>, Context>,\n        l2_tokens: Map<AztecAddress, PublicImmutable<EthAddress, Context>, Context>,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Register {\n        eth_token: EthAddress,\n        aztec_token: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Deposit {\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Withdraw {\n        token: EthAddress,\n        from: AztecAddress,\n        to: EthAddress,\n        amount: u128,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(\n        l1_portal: EthAddress,\n        token_contract_class_id: ContractClassId,\n        shield_gateway: AztecAddress,\n    ) {\n        assert(!l1_portal.is_zero(), \"L1 portal address cannot be zero\");\n        assert(token_contract_class_id.to_field() != 0, \"Token contract class cannot be zero\");\n        assert(!shield_gateway.is_zero(), \"Shield gateway address cannot be zero\");\n\n        storage.config.initialize(Config { l1_portal, shield_gateway, token_contract_class_id });\n    }\n\n    #[private]\n    #[view]\n    fn get_config_private() -> Config {\n        storage.config.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_config_public() -> Config {\n        storage.config.read()\n    }\n\n    #[private]\n    fn register_private(\n        eth_token: EthAddress,\n        aztec_token: AztecAddress,\n        name: str<31>,\n        name_len: u8,\n        symbol: str<31>,\n        symbol_len: u8,\n        decimals: u8,\n        message_leaf_index: Field,\n    ) {\n        aztec::oracle::debug_log::debug_log_format(\n            \"Registering L1 token {0} as L2 token {1}\",\n            [eth_token.to_field(), aztec_token.to_field()],\n        );\n\n        assert(storage.l1_tokens.at(eth_token).read().is_zero(), \"Token already registered\");\n\n        let config = storage.config.read();\n\n        // L1->L2 message content hash from token name, symbol, decimals\n        let content_hash =\n            register_content_hash(eth_token, name, name_len, symbol, symbol_len, decimals);\n        aztec::oracle::debug_log::debug_log_format(\"Register content hash: {0}\", [content_hash]);\n\n        // Ensure the supplied token address matches the expected address. This ensures its deployed with\n        // the correct code and initialization parameters.\n        let initializer = Token::interface().constructor_with_minter(\n            name,\n            symbol,\n            decimals,\n            context.this_address() /* minter */,\n            AztecAddress::zero(), /* not upgradable */\n        );\n        let args_hash = hash_args(initializer.get_args());\n        aztec::oracle::debug_log::debug_log_format(\"Args hash: {0}\", [args_hash]);\n\n        let init_hash = compute_initialization_hash(initializer.get_selector(), args_hash);\n        aztec::oracle::debug_log::debug_log_format(\"Init hash: {0}\", [init_hash]);\n        let partial_address = PartialAddress::compute(\n            config.token_contract_class_id,\n            0x9876543210, // salt, hardcoded\n            init_hash,\n            AztecAddress::from_field(0),\n        );\n\n        aztec::oracle::debug_log::debug_log_format(\n            \"Computed partial address: {0}\",\n            [partial_address.to_field()],\n        );\n        let computed_address = AztecAddress::compute(PublicKeys::default(), partial_address);\n        aztec::oracle::debug_log::debug_log_format(\n            \"Computed address: {0}\",\n            [computed_address.to_field()],\n        );\n\n        assert(\n            computed_address == aztec_token,\n            \"Expected address did not match supplied token address\",\n        );\n\n        // Set the shield gateway\n        Token::at(aztec_token).set_shield_gateway(config.shield_gateway).enqueue(&mut context);\n\n        // Consume the message\n        aztec::oracle::debug_log::debug_log_format(\n            \"Consuming message with leaf index {0} from portal {1}\",\n            [message_leaf_index, config.l1_portal.to_field()],\n        );\n\n        aztec::oracle::debug_log::debug_log_format(\"L1 Portal: {0}\", [config.l1_portal.to_field()]);\n\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            config.l1_portal,\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())._register_public(aztec_token, eth_token).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _register_public(aztec_token: AztecAddress, eth_token: EthAddress) {\n        // Initialize the token mappings\n        storage.l1_tokens.at(eth_token).initialize(aztec_token);\n        storage.l2_tokens.at(aztec_token).initialize(eth_token);\n        emit_event_in_public(Register { eth_token, aztec_token }, &mut context);\n    }\n\n    #[private]\n    fn claim_public(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        let config = storage.config.read();\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            config.l1_portal,\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())\n            ._claim_public(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _claim_public(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_to_public(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .call(&mut context);\n    }\n\n    #[private]\n    fn claim_shielded(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        let config = storage.config.read();\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            config.l1_portal,\n            message_leaf_index,\n        );\n\n        Token::at(storage.l1_tokens.at(eth_token).read())\n            .mint_to_private(recipient, recipient, amount)\n            .call(&mut context);\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _log_claim(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        emit_event_in_public(\n            Deposit { eth_token, recipient, amount, message_leaf_index },\n            &mut context,\n        );\n    }\n\n    #[public]\n    fn withdraw_public(\n        eth_token: EthAddress,\n        from: AztecAddress,\n        recipient: EthAddress,\n        amount: u128,\n        withdrawNonce: Field,\n        burnNonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(withdrawNonce == 0, \"Invalid nonce\");\n        }\n\n        let config = storage.config.read();\n\n        // Burn the tokens\n        Token::at(storage.l1_tokens.at(eth_token).read()).burn_public(from, amount, burnNonce).call(\n            &mut context,\n        );\n\n        // Message the L1 Portal\n        let content_hash = withdraw_content_hash(eth_token, recipient, amount.to_field());\n        context.message_portal(config.l1_portal, content_hash);\n\n        aztec::oracle::debug_log::debug_log_format(\"Withdraw L2ToL1 Message {0}\", [content_hash]);\n\n        emit_event_in_public(\n            Withdraw { token: eth_token, from, to: recipient, amount },\n            &mut context,\n        );\n    }\n\n    #[utility]\n    unconstrained fn is_registered_l1_unconstrained(eth_token: EthAddress) -> pub bool {\n        !storage.l1_tokens.at(eth_token).read().is_zero()\n    }\n\n    #[utility]\n    unconstrained fn is_registered_l2_unconstrained(aztec_token: AztecAddress) -> pub bool {\n        !storage.l2_tokens.at(aztec_token).read().is_zero()\n    }\n\n    #[utility]\n    unconstrained fn get_l2_token_unconstrained(eth_token: EthAddress) -> pub AztecAddress {\n        storage.l1_tokens.at(eth_token).read()\n    }\n\n    #[utility]\n    unconstrained fn get_l1_token_unconstrained(aztec_token: AztecAddress) -> pub EthAddress {\n        storage.l2_tokens.at(aztec_token).read()\n    }\n}\n"
    },
    "58": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/authwit/auth.nr",
      "source": "use crate::{\n    authwit::{\n        authorization_interface::AuthorizationInterface,\n        authorization_selector::AuthorizationSelector,\n    },\n    context::{gas::GasOpts, PrivateContext, PublicContext},\n    hash::hash_args_array,\n    macros::authorization::authorization,\n    oracle::{execution_cache::load, offchain_effect::emit_offchain_effect},\n};\nuse dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::{Serialize, ToField},\n};\n\n/**\n * Authentication witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/// A struct that represents a contract call the user can authorize. It's associated identifier is\n/// generated by serializing and hashing it. The user is expected to sign this hash to signal the contract\n/// call can be performed on their behalf\n#[authorization]\nstruct CallAuthorization {\n    msg_sender: AztecAddress,\n    selector: FunctionSelector,\n    args_hash: Field,\n}\n\n/// A struct that represents a request to authorize a call, which is used to emit an offchain effect\n/// so the user/wallet can understand what they are being asked to sign. It is generated from a\n/// CallAuthorization by adding metadata to it, such as the selector for the authorization, the inner hash,\n/// and the actual arguments that are being passed to the function call.\n#[derive(Serialize)]\nstruct CallAuthorizationRequest {\n    selector: AuthorizationSelector,\n    inner_hash: Field,\n    msg_sender: AztecAddress,\n    fn_selector: FunctionSelector,\n    args_hash: Field,\n}\n\nunconstrained fn emit_authorization_as_offchain_effect<let N: u32>(\n    authorization: CallAuthorization,\n    inner_hash: Field,\n) {\n    let args: [Field; N] = load(authorization.args_hash);\n    let authorization_request = CallAuthorizationRequest {\n        selector: authorization.get_authorization_selector(),\n        inner_hash: inner_hash,\n        msg_sender: authorization.msg_sender,\n        fn_selector: authorization.selector,\n        args_hash: authorization.args_hash,\n    };\n    emit_offchain_effect(authorization_request.serialize().concat(args))\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Additionally, this function emits the identifying information of the call as an offchain effect \n * so PXE can rely the information to the user/wallet in a readable way. To that effect, it is generic over N, \n * where N is the number of arguments the authorized functions takes. This is used to load the arguments \n * from the execution cache. This function is intended to be called via a macro, which will use the turbofish\n * operator to specify the number of arguments.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit<let N: u32>(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n) {\n    let args_hash: Field = context.get_args_hash();\n\n    let authorization = CallAuthorization {\n        msg_sender: context.msg_sender(),\n        selector: context.selector(),\n        args_hash,\n    };\n    let inner_hash = compute_inner_authwit_hash(authorization.serialize());\n    // Safety: Offchain effects are by definition unconstrained. They are emitted via an oracle\n    // which we don't use for anything besides its side effects, therefore this is safe to call.\n    unsafe { emit_authorization_as_offchain_effect::<N>(authorization, inner_hash) };\n\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0, \"cannot pop from an empty vector\");\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            let _ = vec.get(0);\n        }\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_beyond_length() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            let _ = vec.get(3);\n        }\n\n        #[test]\n        fn get_works_within_bounds() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(2), 3);\n            assert_eq(vec.get(4), 5);\n        }\n\n        #[test]\n        fn get_unchecked_works() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            assert_eq(vec.get_unchecked(0), 1);\n            assert_eq(vec.get_unchecked(2), 3);\n        }\n\n        #[test]\n        fn get_unchecked_works_past_len() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            assert_eq(vec.get_unchecked(4), 0);\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_setting_beyond_length() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            vec.set(3, 4);\n        }\n\n        #[test]\n        fn set_unchecked_operations() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            vec.set_unchecked(0, 10);\n            assert_eq(vec.get(0), 10);\n        }\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn set_unchecked_operations_past_len() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            vec.set_unchecked(3, 40);\n            assert_eq(vec.get(3), 40);\n        }\n\n        #[test]\n        fn set_preserves_other_elements() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n\n            vec.set(2, 30);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 30);\n            assert_eq(vec.get(3), 4);\n            assert_eq(vec.get(4), 5);\n        }\n    }\n\n    mod any {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn returns_false_if_predicate_not_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, false, false]);\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn returns_true_if_predicate_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, true, true]);\n            let result = vec.any(|value| value);\n\n            assert(result);\n        }\n\n        #[test]\n        fn returns_false_on_empty_boundedvec() {\n            let vec: BoundedVec<bool, 0> = BoundedVec::new();\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn any_with_complex_predicates() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n\n            assert(vec.any(|x| x > 3));\n            assert(!vec.any(|x| x > 10));\n            assert(vec.any(|x| x % 2 == 0)); // has a even number\n            assert(vec.any(|x| x == 3)); // has a specific value\n        }\n\n        #[test]\n        fn any_with_partial_vector() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            assert(vec.any(|x| x == 1));\n            assert(vec.any(|x| x == 2));\n            assert(!vec.any(|x| x == 3));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn map_with_conditional_logic() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n\n            let result = vec.map(|x| if x % 2 == 0 { x * 2 } else { x });\n            let expected = BoundedVec::from_array([1, 4, 3, 8]);\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn map_preserves_length() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|x| x * 2);\n\n            assert_eq(result.len(), vec.len());\n            assert_eq(result.max_len(), vec.max_len());\n        }\n\n        #[test]\n        fn map_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let result = vec.map(|x| x * 2);\n            assert_eq(result, vec);\n            assert_eq(result.len(), 0);\n            assert_eq(result.max_len(), 5);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn mapi_with_index_branching_logic() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n\n            let result = vec.mapi(|i, x| if i % 2 == 0 { x * 2 } else { x });\n            let expected = BoundedVec::from_array([2, 2, 6, 4]);\n            assert_eq(result, expected);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn for_each_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut count = 0;\n            let count_ref = &mut count;\n            vec.for_each(|_| { *count_ref += 1; });\n            assert_eq(count, 0);\n        }\n\n        #[test]\n        fn for_each_with_side_effects() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            let mut seen = BoundedVec::<u32, 3>::new();\n            let seen_ref = &mut seen;\n            vec.for_each(|x| seen_ref.push(x));\n            assert_eq(seen, vec);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn for_eachi_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut count = 0;\n            let count_ref = &mut count;\n            vec.for_eachi(|_, _| { *count_ref += 1; });\n            assert_eq(count, 0);\n        }\n\n        #[test]\n        fn for_eachi_with_index_tracking() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([10, 20, 30]);\n            let mut indices = BoundedVec::<u32, 3>::new();\n            let indices_ref = &mut indices;\n            vec.for_eachi(|i, _| indices_ref.push(i));\n\n            let expected = BoundedVec::from_array([0, 1, 2]);\n            assert_eq(indices, expected);\n        }\n\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n\n        #[test]\n        fn from_array_preserves_order() {\n            let array = [5, 3, 1, 4, 2];\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array(array);\n            for i in 0..array.len() {\n                assert_eq(vec.get(i), array[i]);\n            }\n        }\n\n        #[test]\n        fn from_array_with_different_types() {\n            let bool_array = [true, false, true];\n            let bool_vec: BoundedVec<bool, 3> = BoundedVec::from_array(bool_array);\n            assert_eq(bool_vec.len(), 3);\n            assert_eq(bool_vec.get(0), true);\n            assert_eq(bool_vec.get(1), false);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n\n    mod push_pop {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn push_and_pop_operations() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n\n            assert_eq(vec.len(), 0);\n\n            vec.push(1);\n            assert_eq(vec.len(), 1);\n            assert_eq(vec.get(0), 1);\n\n            vec.push(2);\n            assert_eq(vec.len(), 2);\n            assert_eq(vec.get(1), 2);\n\n            let popped = vec.pop();\n            assert_eq(popped, 2);\n            assert_eq(vec.len(), 1);\n\n            let popped2 = vec.pop();\n            assert_eq(popped2, 1);\n            assert_eq(vec.len(), 0);\n        }\n\n        #[test(should_fail_with = \"push out of bounds\")]\n        fn push_to_full_vector() {\n            let mut vec: BoundedVec<u32, 2> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n            vec.push(3); // should panic\n        }\n\n        #[test(should_fail_with = \"cannot pop from an empty vector\")]\n        fn pop_from_empty_vector() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let _ = vec.pop(); // should panic\n        }\n\n        #[test]\n        fn push_pop_cycle() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n\n            // push to full\n            vec.push(1);\n            vec.push(2);\n            vec.push(3);\n            assert_eq(vec.len(), 3);\n\n            // pop all\n            assert_eq(vec.pop(), 3);\n            assert_eq(vec.pop(), 2);\n            assert_eq(vec.pop(), 1);\n            assert_eq(vec.len(), 0);\n\n            // push again\n            vec.push(4);\n            assert_eq(vec.len(), 1);\n            assert_eq(vec.get(0), 4);\n        }\n    }\n\n    mod extend {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn extend_from_array() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_array([2, 3]);\n\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n\n        #[test]\n        fn extend_from_slice() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_slice(&[2, 3]);\n\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n\n        #[test]\n        fn extend_from_bounded_vec() {\n            let mut vec1: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut vec2: BoundedVec<u32, 3> = BoundedVec::new();\n\n            vec1.push(1);\n            vec2.push(2);\n            vec2.push(3);\n\n            vec1.extend_from_bounded_vec(vec2);\n\n            assert_eq(vec1.len(), 3);\n            assert_eq(vec1.get(0), 1);\n            assert_eq(vec1.get(1), 2);\n            assert_eq(vec1.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"extend_from_array out of bounds\")]\n        fn extend_array_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_array([2, 3, 4]); // should panic\n        }\n\n        #[test(should_fail_with = \"extend_from_slice out of bounds\")]\n        fn extend_slice_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_slice(&[2, 3, 4]); // S]should panic\n        }\n\n        #[test(should_fail_with = \"extend_from_bounded_vec out of bounds\")]\n        fn extend_bounded_vec_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            let other: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n            vec.extend_from_bounded_vec(other); // should panic\n        }\n\n        #[test]\n        fn extend_with_empty_collections() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let original_len = vec.len();\n\n            vec.extend_from_array([]);\n            assert_eq(vec.len(), original_len);\n\n            vec.extend_from_slice(&[]);\n            assert_eq(vec.len(), original_len);\n\n            let empty: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.extend_from_bounded_vec(empty);\n            assert_eq(vec.len(), original_len);\n        }\n    }\n\n    mod storage {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn storage_consistency() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n\n            // test initial storage state\n            assert_eq(vec.storage(), [0, 0, 0, 0, 0]);\n\n            vec.push(1);\n            vec.push(2);\n\n            // test storage after modifications\n            assert_eq(vec.storage(), [1, 2, 0, 0, 0]);\n\n            // storage doesn't change length\n            assert_eq(vec.len(), 2);\n            assert_eq(vec.max_len(), 5);\n        }\n\n        #[test]\n        fn storage_after_pop() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n\n            let _ = vec.pop();\n            // after pop, the last element should be zeroed\n            assert_eq(vec.storage(), [1, 2, 0]);\n            assert_eq(vec.len(), 2);\n        }\n\n        #[test]\n        fn vector_immutable() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            let storage = vec.storage();\n\n            assert_eq(storage, [1, 2, 3]);\n\n            // Verify that the original vector is unchanged\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n    }\n}\n"
    },
    "66": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T)\n    where\n        T: Serialize,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T\n    where\n        T: Deserialize,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n\n    global SLOT: Field = 1230;\n\n    #[test]\n    unconstrained fn empty_array() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            let _: Field = array.get(0);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            array.push(5);\n\n            assert_eq(array.len(), 1);\n            assert_eq(array.get(0), 5);\n        });\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            array.push(5);\n\n            let _ = array.get(1);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(5);\n            array.remove(0);\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(7);\n            array.push(8);\n            array.push(9);\n\n            assert_eq(array.len(), 3);\n            assert_eq(array.get(0), 7);\n            assert_eq(array.get(1), 8);\n            assert_eq(array.get(2), 9);\n\n            array.remove(1);\n\n            assert_eq(array.len(), 2);\n            assert_eq(array.get(0), 7);\n            assert_eq(array.get(1), 9);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(7);\n            array.push(8);\n            array.push(9);\n\n            array.remove(1);\n            array.remove(1);\n            array.remove(0);\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n            // we do not care about the order in which each tuple was passed to the closure.\n            let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n            array.for_each(|index, value| { called_with.push((index, value)); });\n\n            assert_eq(called_with.len(), 3);\n            assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n            assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n            assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            array.for_each(|index, _| {\n                if index == 1 {\n                    array.remove(index);\n                }\n            });\n\n            assert_eq(array.len(), 2);\n            assert_eq(array.get(0), 4);\n            assert_eq(array.get(1), 6);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            array.for_each(|index, _| { array.remove(index); });\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all_no_copy() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            // We test that the utilityCopyCapsule was never called, which is the expensive operation we want to avoid.\n            let mock = std::test::OracleMock::mock(\"utilityCopyCapsule\");\n\n            array.for_each(|index, _| { array.remove(index); });\n\n            assert_eq(mock.times_called(), 0);\n        });\n    }\n}\n"
    },
    "67": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PrivateCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    /// Makes the call to this private function.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    /// This enables contracts to interact with each other while maintaining\n    /// privacy. This \"composability\" of private contract functions is a key\n    /// feature of the Aztec network.\n    ///\n    /// If a user's transaction includes multiple private function calls, then\n    /// by the design of Aztec, the following information will remain private[1]:\n    /// - The function selectors and contract addresses of all private function\n    ///   calls will remain private, so an observer of the public mempool will\n    ///   not be able to look at a tx and deduce which private functions have\n    ///   been executed.\n    /// - The arguments and return values of all private function calls will\n    ///   remain private.\n    /// - The person who initiated the tx will remain private.\n    /// - The notes and nullifiers and private logs that are emitted by all\n    ///   private function calls will (if designed well) not leak any user\n    ///   secrets, nor leak which functions have been executed.\n    ///\n    /// [1] Caveats: Some of these privacy guarantees depend on how app\n    /// developers design their smart contracts. Some actions _can_ leak\n    /// information, such as:\n    /// - Calling an internal public function.\n    /// - Calling a public function and not setting msg_sender to Option::none\n    ///   (see https://github.com/AztecProtocol/aztec-packages/pull/16433)\n    /// - Calling any public function will always leak details about the nature\n    ///   of the transaction, so devs should be careful in their contract\n    ///   designs. If it can be done in a private function, then that will give\n    ///   the best privacy.\n    /// - Not padding the side-effects of a tx to some standardised, uniform\n    ///   size. The kernel circuits can take hints to pad side-effects, so a\n    ///   wallet should be able to request for a particular amount of padding.\n    ///   Wallets should ideally agree on some standard.\n    ///   - Padding should include:\n    ///     - Padding the lengths of note & nullifier arrays\n    ///     - Padding private logs with random fields, up to some standardised\n    ///       size.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Advanced\n    /// * The call is added to the private call stack and executed by kernel\n    ///   circuits after this function completes\n    /// * The called function can modify its own contract's private state\n    /// * Side effects from the called function are included in this transaction\n    /// * The call inherits the current transaction's context and gas limits\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n\n        // If T is () (i.e. if the function does not return anything) then `get_preimage` will constrain that the\n        // returns hash is empty as per the protocol rules.\n        returns_hash.get_preimage()\n    }\n\n    /// Makes a _read-only_ call to this private function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// See `call` for more general info on private function calls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        // If T is () (i.e. if the function does not return anything) then `get_preimage` will constrain that the\n        // returns hash is empty as per the protocol rules.\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PrivateCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PrivateStaticCallInterface<M, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    /// Makes a read-only call to this private function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PrivateStaticCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PublicCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    /// Makes the call to this public function.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        // If T is () (i.e. if the function does not return anything) then `as_array` will constrain that `returns` has\n        // a length of 0 (since that is ()'s deserialization length).\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Makes a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        // If T is () (i.e. if the function does not return anything) then `as_array` will constrain that `returns` has\n        // a length of 0 (since that is ()'s deserialization length).\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Enqueues a call to this public function, to be executed later.\n    ///\n    /// Unlike private functions which execute immediately on the user's device,\n    /// public function calls are \"enqueued\" and executed some time later by a\n    /// block proposer.\n    ///\n    /// This means a public function cannot return any values back to a private\n    /// function, because by the time the public function is being executed,\n    /// the private function which called it has already completed execution.\n    /// (In fact, the private function has been executed and proven, along with\n    /// all other private function calls of the user's tx. A single proof of the\n    /// tx has been submitted to the Aztec network, and some time later a\n    /// proposer has picked the tx up from the mempool and begun executing all\n    /// of the enqueued public functions).\n    ///\n    /// # Privacy warning\n    /// Enqueueing a public function call is an inherently leaky action.\n    /// Many interesting applications will require some interaction with public\n    /// state, but smart contract developers should try to use public function\n    /// calls sparingly, and carefully.\n    /// _Internal_ public function calls are especially leaky, because they\n    /// completely leak which private contract made the call.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    /// Enqueues a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    /// Enqueues a call to this public function, and designates it to be the\n    /// teardown function for this tx. Only one teardown function call can be\n    /// made by a tx.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase ensures the fee payer\n    /// has sufficient balance to pay the proposer their fees.\n    /// The teardown phase is primarily intended to: calculate exactly\n    /// how much the user owes, based on gas consumption, and refund the user\n    /// any change.\n    ///\n    /// Note: in some cases, the cost of refunding the user (i.e. DA costs of\n    /// tx side-effects) might exceed the refund amount. For app logic with\n    /// fairly stable and predictable gas consumption, a material refund amount\n    /// is unlikely. For app logic with unpredictable gas consumption, a\n    /// refund might be important to the user (e.g. if a hefty function reverts\n    /// very early). Wallet/FPC/Paymaster developers should be mindful of this.\n    ///\n    /// See `enqueue` for more information about enqueuing public function calls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PublicCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T> PublicStaticCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    /// Makes the read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Enqueues a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PublicStaticCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T> CallInterface<M> for UtilityCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T> UtilityCallInterface<M, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n"
    },
    "74": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        logs::notify_created_contract_class_log,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        block_header::BlockHeader,\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, MAX_CONTRACT_CLASS_LOGS_PER_CALL,\n        MAX_ENQUEUED_CALLS_PER_CALL, MAX_INCLUDE_BY_TIMESTAMP_DURATION,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    hash::poseidon2_hash,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::{ClaimedLengthArray, trimmed_array_length_hint},\n};\n\n/// # PrivateContext\n///\n/// The **main interface** between a #[private] function and the Aztec blockchain.\n///\n/// An instance of the PrivateContext is initialized automatically at the outset\n/// of every private function, within the #[private] macro, so you'll never\n/// need to consciously instantiate this yourself.\n///\n/// The instance is always named `context`, and it is always be available within\n/// the body of every #[private] function in your smart contract.\n///\n/// > For those used to \"vanilla\" Noir, it might be jarring to have access to\n/// > `context` without seeing a declaration `let context = PrivateContext::new(...)`\n/// > within the body of your function. This is just a consequence of using\n/// > macros to tidy-up verbose boilerplate. You can use `nargo expand` to\n/// > expand all macros, if you dare.\n///\n/// Typical usage for a smart contract developer will be to call getter\n/// methods of the PrivateContext.\n///\n/// _Pushing_ data and requests to the context is mostly handled within\n/// aztec-nr's own functions, so typically a smart contract developer won't\n/// need to call any setter methods directly.\n///\n/// > Advanced users might occasionally wish to push data to the context\n/// > directly for lower-level control. If you find yourself doing this, please\n/// > open an issue on GitHub to describe your use case: it might be that\n/// > new functionality should be added to aztec-nr.\n///\n/// ## Responsibilities\n/// - Exposes contextual data to a private function:\n///   - Data relating to how this private function was called.\n///     - msg_sender\n///     - this_address - (the contract address of the private function being\n///                      executed)\n///     - See `CallContext` for more data.\n///   - Data relating to the transaction in which this private function is\n///     being executed.\n///     - chain_id\n///     - version\n///     - gas_settings\n/// - Provides state access:\n///   - Access to the \"Anchor block\" header.\n///     Recall, a private function cannot read from the \"current\" block header,\n///     but must read from some historical block header, because as soon as\n///     private function execution begins (asynchronously, on a user's device),\n///     the public state of the chain (the \"current state\") will have progressed\n///     forward. We call this reference the \"Anchor block\".\n///     See `BlockHeader`.\n///   - Enables consumption of L1->L2 messages.\n/// - Enables calls to functions of other smart contracts:\n///   - Private function calls\n///   - Enqueueing of public function call requests\n///     (Since public functions are executed at a later time, by a block\n///     proposer, we say they are \"enqueued\").\n/// - Writes data to the blockchain:\n///   - New notes\n///   - New nullifiers\n///   - Private logs (for sending encrypted note contents or encrypted events)\n///   - New L2->L1 messages.\n/// - Provides args to the private function (handled by the #[private] macro).\n/// - Returns the return values of this private function (handled by the\n///   #[private] macro).\n/// - Makes Key Validation Requests.\n///   - Private functions are not allowed to see master secret keys, because we\n///     do not trust them. They are instead given \"app-siloed\" secret keys with\n///     a claim that they relate to a master public key. They can then request\n///     validation of this claim, by making a \"key validation request\" to the\n///     protocol's kernel circuits (which _are_ allowed to see certain master\n///     secret keys).\n///\n/// ## Advanced Responsibilities\n///\n/// - Ultimately, the PrivateContext is responsible for constructing the\n///   PrivateCircuitPublicInputs of the private function being executed.\n///   All private functions on Aztec must have public inputs which adhere\n///   to the rigid layout of the PrivateCircuitPublicInputs, in order to be\n///   compatible with the protocol's kernel circuits.\n///   A well-known misnomer:\n///   - \"public inputs\" contain both inputs and outputs of this function.\n///     - By \"outputs\" we mean a lot more side-effects than just the\n///       \"return values\" of the function.\n///   - Most of the so-called \"public inputs\" are kept _private_, and never leak\n///     to the outside world, because they are 'swallowed' by the protocol's\n///     kernel circuits before the tx is sent to the network. Only the\n///     following are exposed to the outside world:\n///     - New note_hashes\n///     - New nullifiers\n///     - New private logs\n///     - New L2->L1 messages\n///     - New enqueued public function call requests\n///     All the above-listed arrays of side-effects can be padded by the\n///     user's wallet (through instructions to the kernel circuits, via the\n///     PXE) to obscure their true lengths.\n///\n/// ## Syntax Justification\n///\n/// Both user-defined functions _and_ most functions in aztec-nr need access to\n/// the PrivateContext instance to read/write data. This is why you'll see the\n/// arguably-ugly pervasiveness of the \"context\" throughout your smart contract\n/// and the aztec-nr library.\n/// For example, `&mut context` is prevalent. In some languages, you can access\n/// and mutate a global variable (such as a PrivateContext instance) from a\n/// function without polluting the function's parameters. With Noir, a function\n/// must explicitly pass control of a mutable variable to another function, by\n/// reference. Since many functions in aztec-nr need to be able to push new data\n/// to the PrivateContext, they need to be handed a mutable reference _to_ the\n/// context as a parameter.\n/// For example, `Context` is prevalent as a generic parameter, to give better\n/// type safety at compile time. Many `aztec-nr` functions don't make sense if\n/// they're called in a particular runtime (private, public or utility), and so\n/// are intentionally only implemented over certain\n/// [Private|Public|Utility]Context structs. This gives smart contract\n/// developers a much faster feedback loop if they're making a mistake, as an\n/// error will be thrown by the LSP or when they compile their contract.\n///\n#[derive(Eq)]\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: u64,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let max_allowed_include_by_timestamp =\n            inputs.historical_header.global_variables.timestamp + MAX_INCLUDE_BY_TIMESTAMP_DURATION;\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: max_allowed_include_by_timestamp,\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    /// Returns the contract address that initiated this function call.\n    ///\n    /// This is similar to `msg.sender` in Solidity (hence the name).\n    ///\n    /// Important Note: Since Aztec doesn't have a concept of an EoA (\n    /// Externally-owned Account), the msg_sender is \"undefined\" for the first\n    /// function call of every transaction. A value of `-1` is returned in such\n    /// cases.\n    /// The first function call of a tx is likely to be a call to the user's\n    /// account contract, so this quirk will most often be handled by account\n    /// contract developers.\n    ///\n    /// TODO(https://github.com/AztecProtocol/aztec-packages/issues/14025) - we\n    /// are considering making msg_sender: Option<AztecAddress>, since\n    /// a returned value of `Option:none` will be clearer to developers.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The address of the smart contract that called\n    ///   this function (be it an app contract or a user's account contract).\n    ///   Returns `-1` for the first function call of the tx.\n    ///\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    /// Returns the contract address of the current function being executed.\n    ///\n    /// This is equivalent to `address(this)` in Solidity (hence the name).\n    /// Use this to identify the current contract's address, commonly needed for\n    /// access control or when interacting with other contracts.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The contract address of the current function being\n    ///                    executed.\n    ///\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    /// Returns the chain ID of the current network.\n    ///\n    /// This is similar to `block.chainid` in Solidity. Returns the unique\n    /// identifier for the blockchain network this transaction is executing on.\n    ///\n    /// Helps prevent cross-chain replay attacks. Useful if implementing\n    /// multi-chain contract logic.\n    ///\n    /// # Returns\n    /// * `Field` - The chain ID as a field element\n    ///\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    /// Returns the Aztec protocol version that this transaction is executing\n    /// under. Different versions may have different rules, opcodes, or\n    /// cryptographic primitives.\n    ///\n    /// This is similar to how Ethereum has different EVM versions.\n    ///\n    /// Useful for forward/backward compatibility checks\n    ///\n    /// Not to be confused with contract versions; this is the protocol version.\n    ///\n    /// # Returns\n    /// * `Field` - The protocol version as a field element\n    ///\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    /// Returns the gas settings for the current transaction.\n    ///\n    /// This provides information about gas limits and pricing for the\n    /// transaction, similar to `tx.gasprice` and gas limits in Ethereum.\n    /// However, Aztec has a more sophisticated gas model with separate\n    /// accounting for L2 computation and data availability (DA) costs.\n    ///\n    /// # Returns\n    /// * `GasSettings` - Struct containing gas limits and fee information\n    ///\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    /// Returns the function selector of the currently executing function.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to access this.\n    ///\n    /// This is similar to `msg.sig` in Solidity, which returns the first 4\n    /// bytes of the function signature. In Aztec, the selector uniquely\n    /// identifies which function within the contract is being called.\n    ///\n    /// # Returns\n    /// * `FunctionSelector` - The 4-byte function identifier\n    ///\n    /// # Advanced\n    /// Only #[private] functions have a function selector as a protocol-\n    /// enshrined concept. The function selectors of private functions are\n    /// baked into the preimage of the contract address, and are used by the\n    /// protocol's kernel circuits to identify each private function and ensure\n    /// the correct one is being executed.\n    ///\n    /// Used internally for function dispatch and call verification.\n    ///\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    /// Returns the hash of the arguments passed to the current function.\n    ///\n    /// Very low-level function: You shouldn't need to call this. The #[private]\n    /// macro calls this, and it makes the arguments neatly available to the\n    /// body of your private function.\n    ///\n    /// # Returns\n    /// * `Field` - Hash of the function arguments\n    ///\n    /// # Advanced\n    /// * Arguments are hashed to reduce proof size and verification time\n    /// * Enables efficient argument passing in recursive function calls\n    /// * The hash can be used to retrieve the original arguments from the PXE.\n    ///\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    /// Pushes a new note_hash to the Aztec blockchain's global Note Hash Tree\n    /// (a state tree).\n    ///\n    /// A note_hash is a commitment to a piece of private state.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new note hashes.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The new note_hash.\n    ///\n    /// # Advanced\n    /// From here, the protocol's kernel circuits will take over and insert the\n    /// note_hash into the protocol's \"note hash tree\" (in the Base Rollup\n    /// circuit).\n    /// Before insertion, the protocol will:\n    /// - \"Silo\" the `note_hash` with the contract address of this function,\n    ///   to yield a `siloed_note_hash`. This prevents state collisions\n    ///   between different smart contracts.\n    /// - Ensure uniqueness of the `siloed_note_hash`, to prevent Faerie-Gold\n    ///   attacks, by hashing the `siloed_note_hash` with a unique value, to\n    ///   yield a `unique_siloed_note_hash` (see the protocol spec for more).\n    ///\n    /// In addition to calling this function, aztec-nr provides the contents\n    /// of the newly-created note to the PXE, via the `notify_created_note`\n    /// oracle.\n    ///\n    /// > Advanced users might occasionally wish to push data to the context\n    /// > directly for lower-level control. If you find yourself doing this,\n    /// > please open an issue on GitHub to describe your use case: it might be\n    /// > that new functionality should be added to aztec-nr.\n    ///\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    /// Pushes a new nullifier to the Aztec blockchain's global Nullifier Tree\n    /// (a state tree).\n    ///\n    /// See also: `push_nullifier_for_note_hash`.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifiers.\n    ///\n    /// A nullifier can only be emitted once. Duplicate nullifier insertions are\n    /// rejected by the protocol.\n    ///\n    /// Generally, a nullifier is emitted to prevent an action from happening\n    /// more than once, in such a way that the action cannot be linked (by an\n    /// observer of the blockchain) to any earlier transactions.\n    ///\n    /// I.e. a nullifier is a random-looking, but deterministic record of a\n    /// private, one-time action, which does not leak what action has been\n    /// taken, and which preserves the property of \"tx unlinkability\".\n    ///\n    /// Usually, a nullifier will be emitted to \"spend\" a note (a piece of\n    /// private state), without revealing which specific note is being spent.\n    ///\n    /// (Important: in such cases, use the below `push_nullifier_for_note_hash`).\n    ///\n    /// Sometimes, a nullifier might be emitted completely unrelated to any\n    /// notes. Examples include initialization of a new contract; initialization\n    /// of a PrivateMutable, or signalling in Semaphore-like applications.\n    /// This `push_nullifier` function serves such use cases.\n    ///\n    /// # Arguments\n    /// * `nullifier`\n    ///\n    /// # Advanced\n    /// From here, the protocol's kernel circuits will take over and insert the\n    /// nullifier into the protocol's \"nullifier tree\" (in the Base Rollup\n    /// circuit).\n    /// Before insertion, the protocol will:\n    /// - \"Silo\" the `nullifier` with the contract address of this function,\n    ///   to yield a `siloed_nullifier`. This prevents state collisions\n    ///   between different smart contracts.\n    /// - Ensure the `siloed_nullifier` is unique (the nullifier tree is an\n    ///   indexed merkle tree which supports efficient non-membership proofs).\n    ///\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    /// Pushes a nullifier that corresponds to a specific note hash.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifiers.\n    ///\n    /// This is a specialized version of `push_nullifier` that links a nullifier\n    /// to the specific note hash it's nullifying. This is the most common\n    /// usage pattern for nullifiers.\n    /// See `push_nullifier` for more explanation on nullifiers.\n    ///\n    /// # Arguments\n    /// * `nullifier`\n    /// * `nullified_note_hash` - The note hash of the note being nullified\n    ///\n    /// # Advanced\n    /// Important: usage of this function doesn't mean that the world will _see_\n    /// that this nullifier relates to the given nullified_note_hash (as that\n    /// would violate \"tx unlinkability\"); it simply informs the user's PXE\n    /// about the relationship (via `notify_nullified_note`). The PXE can then\n    /// use this information to feed hints to the kernel circuits for\n    /// \"squashing\" purposes: If a note is nullified during the same tx which\n    /// created it, we can \"squash\" (delete) the note and nullifier (and any\n    /// private logs associated with the note), to save on data emission costs.\n    ///\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    /// Returns the anchor block header - the historical block header that this\n    /// private function is reading from.\n    ///\n    /// A private function CANNOT read from the \"current\" block header,\n    /// but must read from some historical block header, because as soon as\n    /// private function execution begins (asynchronously, on a user's device),\n    /// the public state of the chain (the \"current state\") will have progressed\n    /// forward.\n    ///\n    /// # Returns\n    /// * `BlockHeader` - The anchor block header.\n    ///\n    /// # Advanced\n    /// * All private functions of a tx read from the same anchor block header.\n    /// * The protocol asserts that the `include_by_timestamp` of every tx\n    ///   is at most 24 hours beyond the timestamp of the tx's chosen anchor\n    ///   block header. This enables the network's nodes to safely prune old txs\n    ///   from the mempool. Therefore, the chosen block header _must_ be one\n    ///   from within the last 24 hours.\n    ///\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    /// Returns the header of any historical block at or before the anchor\n    /// block.\n    ///\n    /// This enables private contracts to access information from even older\n    /// blocks than the anchor block header.\n    ///\n    /// Useful for time-based contract logic that needs to compare against\n    /// multiple historical points.\n    ///\n    /// # Arguments\n    /// * `block_number` - The block number to retrieve (must be <= anchor\n    ///                    block number)\n    ///\n    /// # Returns\n    /// * `BlockHeader` - The header of the requested historical block\n    ///\n    /// # Advanced\n    /// This function uses an oracle to fetch block header data from the user's\n    /// PXE. Depending on how much blockchain data the user's PXE has been set\n    /// up to store, this might require a query from the PXE to another Aztec\n    /// node to get the data.\n    /// > This is generally true of all oracle getters (see `../oracle`).\n    ///\n    /// Each block header gets hashed and stored as a leaf in the protocol's\n    /// Archive Tree. In fact, the i-th block header gets stored at the i-th\n    /// leaf index of the Archive Tree. Behind the scenes, this\n    /// `get_block_header_at` function will add Archive Tree merkle-membership\n    /// constraints (~3k) to your smart contract function's circuit, to prove\n    /// existence of the block header in the Archive Tree.\n    ///\n    /// Note: we don't do any caching, so avoid making duplicate calls for the\n    /// same block header, because each call will add duplicate constraints.\n    ///\n    /// Calling this function is more expensive (constraint-wise) than getting\n    /// the anchor block header (via `get_block_header`). This is because the\n    /// anchor block's merkle membership proof is handled by Aztec's protocol\n    /// circuits, and is only performed once for the entire tx because all\n    /// private functions of a tx share a common anchor block header. Therefore,\n    /// the cost (constraint-wise) of calling `get_block_header` is effectively\n    /// free.\n    ///\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    /// Sets the hash of the return values for this private function.\n    ///\n    /// Very low-level function: this is called by the #[private] macro.\n    ///\n    /// # Arguments\n    /// * `returns_hasher` - A hasher containing the return values to hash\n    ///\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    /// Builds the PrivateCircuitPublicInputs for this private function, to\n    /// ensure compatibility with the protocol's kernel circuits.\n    ///\n    /// Very low-level function: This function is automatically called by the\n    /// #[private] macro.\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: ClaimedLengthArray::from_bounded_vec(\n                self.note_hash_read_requests,\n            ),\n            nullifier_read_requests: ClaimedLengthArray::from_bounded_vec(\n                self.nullifier_read_requests,\n            ),\n            key_validation_requests_and_generators: ClaimedLengthArray::from_bounded_vec(\n                self.key_validation_requests_and_generators,\n            ),\n            note_hashes: ClaimedLengthArray::from_bounded_vec(self.note_hashes),\n            nullifiers: ClaimedLengthArray::from_bounded_vec(self.nullifiers),\n            private_call_requests: ClaimedLengthArray::from_bounded_vec(self.private_call_requests),\n            public_call_requests: ClaimedLengthArray::from_bounded_vec(self.public_call_requests),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: ClaimedLengthArray::from_bounded_vec(self.l2_to_l1_msgs),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: ClaimedLengthArray::from_bounded_vec(self.private_logs),\n            contract_class_logs_hashes: ClaimedLengthArray::from_bounded_vec(\n                self.contract_class_logs_hashes,\n            ),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    /// Designates this contract as the fee payer for the transaction.\n    ///\n    /// Unlike Ethereum, where the transaction sender always pays fees, Aztec\n    /// allows any contract to voluntarily pay transaction fees. This enables\n    /// patterns like sponsored transactions or fee abstraction where users\n    /// don't need to hold fee-juice themselves. (Fee juice is a fee-paying\n    /// asset for Aztec).\n    ///\n    /// Only one contract per transaction can declare itself as the fee payer,\n    /// and it must have sufficient fee-juice balance (>= the gas limits\n    /// specified in the TxContext) by the time we reach the public setup phase\n    /// of the tx.\n    ///\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    /// Declares the end of the \"setup phase\" of this tx.\n    ///\n    /// Only one function per tx can declare the end of the setup phase.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase enables such a payment to\n    /// be made, because the setup phase _cannot revert_: a reverting function\n    /// within the setup phase would result in an invalid block which cannot\n    /// be proven. Any side-effects generated during that phase are guaranteed\n    /// to be inserted into Aztec's state trees (except for squashed notes &\n    /// nullifiers, of course).\n    ///\n    /// Even though the end of the setup phase is declared within a private\n    /// function, you might have noticed that _public_ functions can also\n    /// execute within the setup phase. This is because any public function\n    /// calls which were enqueued _within the setup phase_ by a private\n    /// function are considered part of the setup phase.\n    ///\n    /// # Advanced\n    /// * Sets the minimum revertible side effect counter of this tx to be the\n    /// PrivateContext's _current_ side effect counter.\n    ///\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    /// Sets a deadline (an \"include-by timestamp\") for when this transaction\n    /// must be included in a block.\n    ///\n    /// Other functions in this tx might call this setter with differing\n    /// values for the include-by timestamp. To ensure that all functions'\n    /// deadlines are met, the _minimum_ of all these include-by timestamps will\n    /// be exposed when this tx is submitted to the network.\n    ///\n    /// If the transaction is not included in a block by its include-by\n    /// timestamp, it becomes invalid and it will never be included.\n    ///\n    /// This expiry timestamp is publicly visible. See the \"Advanced\" section\n    /// for privacy concerns.\n    ///\n    /// # Arguments\n    /// * `include_by_timestamp` - Unix timestamp (seconds) deadline for inclusion.\n    ///                            The include-by timestamp of this tx will be\n    ///                            _at most_ the timestamp specified.\n    ///\n    /// # Advanced\n    /// * If multiple functions set differing `include_by_timestamp`s, the\n    ///   kernel circuits will set it to be the _minimum_ of the two. This\n    ///   ensures the tx expiry requirements of all functions in the tx are met.\n    /// * Rollup circuits will reject expired txs.\n    /// * The protocol enforces that all transactions must be included within\n    ///   24 hours of their chosen anchor block's timestamp, to enable safe\n    ///   mempool pruning.\n    /// * The DelayedPublicMutable design makes heavy use of this functionality,\n    ///   to enable private functions to read public state.\n    /// * A sophisticated Wallet should cleverly set an include-by timestamp\n    ///   to improve the privacy of the user and the network as a whole.\n    ///   For example, if a contract interaction sets include-by to some\n    ///   publicly-known value (e.g. the time when a contract upgrades), then\n    ///   the wallet might wish to set an even lower one to avoid revealing that\n    ///   this tx is interacting with said contract.\n    ///   Ideally, all wallets should standardise on an approach in order to\n    ///   provide users with a large anonymity set -- although the exact apprach\n    ///   will need to be discussed. Wallets that deviate from a standard might\n    ///   accidentally reveal which wallet each transaction originates from.\n    ///\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp = std::cmp::min(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    /// Makes a request to the protocol's kernel circuit to ensure a note_hash\n    /// actually exists.\n    ///\n    /// \"Read requests\" are used to prove that a note hash exists without\n    /// revealing which specific note was read.\n    ///\n    /// This can be used to prove existence of both settled notes (created in\n    /// prior transactions) and transient notes (created in the current\n    /// transaction).\n    /// If you need to prove existence of a settled note _at a specific block\n    /// number_, use `note_inclusion::prove_note_inclusion`.\n    ///\n    /// Low-level function. Ordinarily, smart contract developers will not need\n    /// to call this directly. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new note_hash read\n    /// requests.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The note hash to read and verify\n    ///\n    /// # Advanced\n    /// In \"traditional\" circuits for non-Aztec privacy applications, the merkle\n    /// membership proofs to check existence of a note are performed _within_\n    /// the application circuit.\n    ///\n    /// All Aztec private functions have access to the following constraint\n    /// optimisation:\n    /// In cases where the note being read was created earlier in the same tx,\n    /// the note wouldn't yet exist in the Note Hash Tree, so a hard-coded\n    /// merkle membership check which then gets ignored would be a waste of\n    /// constraints.\n    /// Instead, we can send read requests for all notes to the protocol's\n    /// kernel circuits, where we can conditionally assess which notes actually\n    /// need merkle membership proofs, and select an appropriately-sized\n    /// kernel circuit.\n    ///\n    /// For \"settled notes\" (which already existed in the Note Hash Tree of the\n    /// anchor block (i.e. before the tx began)), the kernel does a merkle\n    /// membership check.\n    ///\n    /// For \"pending notes\" (which were created earlier in _this_ tx), the\n    /// kernel will check that the note existed _before_ this read request was\n    /// made, by checking the side-effect counters of the note_hash and this\n    /// read request.\n    ///\n    /// This approach improves latency between writes and reads:\n    /// a function can read a note which was created earlier in the tx (rather\n    /// than performing the read in a later tx, after waiting for the earlier tx\n    /// to be included, to ensure the note is included in the tree).\n    ///\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    /// Requests to read a specific nullifier from the nullifier tree.\n    ///\n    /// Nullifier read requests are used to prove that a nullifier exists without\n    /// revealing which specific nullifier preimage was read.\n    ///\n    /// This can be used to prove existence of both settled nullifiers (created in\n    /// prior transactions) and transient nullifiers (created in the current\n    /// transaction).\n    /// If you need to prove existence of a settled nullifier _at a specific block\n    /// number_, use `nullifier_inclusion::prove_nullifier_inclusion`.\n    ///\n    /// Low-level function. Ordinarily, smart contract developers will not need\n    /// to call this directly. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifier read\n    /// requests.\n    ///\n    /// # Arguments\n    /// * `nullifier` - The nullifier to read and verify\n    ///\n    /// # Advanced\n    /// This approach improves latency between writes and reads:\n    /// a function can read a nullifier which was created earlier in the tx\n    /// (rather than performing the read in a later tx, after waiting for the\n    /// earlier tx to be included, to ensure the note is included in the tree).\n    ///\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    /// Requests the app-siloed nullifier secret key (nsk_app) for the given\n    /// (hashed) master nullifier public key (npk_m), from the user's PXE.\n    ///\n    /// Advanced function: Only needed if you're designing your own notes and/or\n    /// nullifiers.\n    ///\n    /// Contracts are not allowed to compute nullifiers for other contracts, as\n    /// that would let them read parts of their private state. Because of this,\n    /// a contract is only given an \"app-siloed secret key\", which is\n    /// constructed by hashing the user's master nullifier secret key with the\n    /// contract's address.\n    /// However, because contracts cannot be trusted with a user's master\n    /// nullifier secret key (because we don't know which contracts are honest\n    /// or malicious), the PXE refuses to provide any master secret keys to\n    /// any app smart contract function. This means app functions are unable to\n    /// prove that the derivation of an app-siloed nullifier secret key has been\n    /// computed correctly. Instead, an app function can request to the kernel\n    /// (via `request_nsk_app`) that it validates the siloed derivation, since\n    /// the kernel has been vetted to not leak any master secret keys.\n    ///\n    /// A common nullification scheme is to inject a nullifier secret key into\n    /// the preimage of a nullifier, to make the nullifier deterministic but\n    /// random-looking. This function enables that flow.\n    ///\n    /// # Arguments\n    /// * `npk_m_hash` - A hash of the master nullifier public key of the user\n    ///                  whose PXE is executing this function.\n    ///\n    /// # Returns\n    /// * The app-siloed nullifier secret key that corresponds to the given\n    ///   `npk_m_hash`.\n    ///\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    /// Requests the app-siloed nullifier secret key (nsk_app) for the given\n    /// (hashed) master nullifier public key (npk_m), from the user's PXE.\n    ///\n    /// See `request_nsk_app` and `request_sk_app` for more info.\n    ///\n    /// The intention of the \"outgoing\" keypair is to provide a second secret\n    /// key for all of a user's outgoing activity (i.e. for notes that a user\n    /// creates, as opposed to notes that a user receives from others). The\n    /// separation of incoming and outgoing data was a distinction made by\n    /// zcash, with the intention of enabling a user to optionally share with a\n    /// 3rd party a controlled view of only incoming or outgoing notes.\n    /// Similar functionality of sharing select data can be achieved with\n    /// offchain zero-knowledge proofs. It is up to an app developer whether\n    /// they choose to make use of a user's outgoing keypair within their\n    /// application logic, or instead simply use the same keypair (the address\n    /// keypair (which is effectively the same as the \"incooming\" keypair)) for\n    /// all incoming & outgoing messages to a user.\n    ///\n    /// Currently, all of the exposed encryption functions in aztec-nr ignore\n    /// the outgoing viewing keys, and instead encrypt all note logs and event\n    /// logs to a user's address public key.\n    ///\n    /// # Arguments\n    /// * `ovpk_m_hash` - Hash of the outgoing viewing public key master\n    ///\n    /// # Returns\n    /// * The application-specific outgoing viewing secret key\n    ///\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    /// Pushes a Key Validation Request to the kernel.\n    ///\n    /// Private functions are not allowed to see a user's master secret keys,\n    /// because we do not trust them. They are instead given \"app-siloed\" secret\n    /// keys with a claim that they relate to a master public key.\n    /// They can then request validation of this claim, by making a \"key\n    /// validation request\" to the protocol's kernel circuits (which _are_\n    /// allowed to see certain master secret keys).\n    ///\n    /// When a Key Validation Request tuple of (sk_app, Pk_m, app_address) is\n    /// submitted to the kernel, it will perform the following derivations\n    /// to validate the relationship between the claimed sk_app and the user's\n    /// Pk_m:\n    ///\n    ///       (sk_m) ----> * G ----> Pk_m\n    ///         |                     |\n    ///         v                       We use the kernel to prove this\n    ///  h(sk_m, app_address)         | sk_app-Pk_m relationship, because app\n    ///         |                       circuits must not be trusted to see sk_m.\n    ///         v                     |\n    ///      sk_app - -  - - - - - - -\n    ///\n    /// The function is named \"request_\" instead of \"get_\" to remind the user\n    /// that a Key Validation Request will be emitted to the kernel.\n    ///\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    /// Sends an \"L2 -> L1 message\" from this function (Aztec, L2) to a smart\n    /// contract on Ethereum (L1). L1 contracts which are designed to\n    /// send/receive messages to/from Aztec are called \"Portal Contracts\".\n    ///\n    /// Common use cases include withdrawals, cross-chain asset transfers, and\n    /// triggering L1 actions based on L2 state changes.\n    ///\n    /// The message will be inserted into an Aztec \"Outbox\" contract on L1,\n    /// when this transaction's block is proposed to L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target portal contract. The message will need to be manually\n    /// consumed from the Outbox through a separate Ethereum transaction: a user\n    /// will need to call a function of the portal contract -- a function\n    /// specifically designed to make a call to the Outbox to consume the\n    /// message.\n    /// The message will only be available for consumption once the _epoch_\n    /// proof has been submitted. Given that there are multiple Aztec blocks\n    /// within an epoch, it might take some time for this epoch proof to be\n    /// submitted -- especially if the block was near the start of an epoch.\n    ///\n    /// # Arguments\n    /// * `recipient` - Ethereum address that will receive the message\n    /// * `content` - Message content (32 bytes as a Field element).\n    ///               This content has a very specific layout.\n    /// docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    /// Consumes a message sent from Ethereum (L1) to Aztec (L2).\n    ///\n    /// Common use cases include token bridging, cross-chain governance, and\n    /// triggering L2 actions based on L1 events.\n    ///\n    /// Use this function if you only want the message to ever be \"referred to\"\n    /// once. Once consumed using this method, the message cannot be consumed\n    /// again, because a nullifier is emitted.\n    /// If your use case wants for the message to be read unlimited times, then\n    /// you can always read any historic message from the L1-to-L2 messages tree;\n    /// messages never technically get deleted from that tree.\n    ///\n    /// The message will first be inserted into an Aztec \"Inbox\" smart contract\n    /// on L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target L2 contract. The message will need to be manually\n    /// consumed by the target contract through a separate Aztec transaction.\n    /// The message will not be available for consumption immediately. Messages\n    /// get copied over from the L1 Inbox to L2 by the next Proposer in batches.\n    /// So you will need to wait until the messages are copied before you can\n    /// consume them.\n    ///\n    /// # Arguments\n    /// * `content` - The message content that was sent from L1\n    /// * `secret` - Secret value used for message privacy (if needed)\n    /// * `sender` - Ethereum address that sent the message\n    /// * `leaf_index` - Index of the message in the L1-to-L2 message tree\n    ///\n    /// # Advanced\n    /// Validates message existence in the L1-to-L2 message tree and nullifies\n    /// the message to prevent double-consumption.\n    ///\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    /// Emits a private log (an array of Fields) that will be published to an\n    /// Ethereum blob.\n    ///\n    /// Private logs are intended for the broadcasting of ciphertexts: that is,\n    /// encrypted events or encrypted note contents.\n    /// Since the data in the logs is meant to be _encrypted_, private_logs are\n    /// broadcast to publicly-visible Ethereum blobs.\n    /// The intended recipients of such encrypted messages can then discover and\n    /// decrypt these encrypted logs using their viewing secret key.\n    /// (See `../messages/discovery` for more details).\n    ///\n    /// Important note: This function DOES NOT _do_ any encryption of the input\n    /// `log` fields. This function blindly publishes whatever input `log` data\n    /// is fed into it, so the caller of this function should have already\n    /// performed the encryption, and the `log` should be the result of that\n    /// encryption.\n    ///\n    /// The protocol does not dictate what encryption scheme should be used:\n    /// a smart contract developer can choose whatever encryption scheme they\n    /// like.\n    /// Aztec-nr includes some off-the-shelf encryption libraries that\n    /// developers might wish to use, for convenience. These libraries not only\n    /// encrypt a plaintext (to produce a ciphertext); they also prepend the\n    /// ciphertext with a `tag` and `ephemeral public key` for easier message\n    /// discovery. This is a very dense topic, and we will be writing more\n    /// libraries and docs soon.\n    ///\n    /// > Currently, AES128 CBC encryption is the main scheme included in\n    /// > aztec.nr.\n    /// > We are currently making significant changes to the interfaces of the\n    /// > encryption library.\n    ///\n    /// In some niche use cases, an app might be tempted to publish\n    /// _un-encrypted_ data via a private log, because _public logs_ are not\n    /// available to private functions. Be warned that emitting public data via\n    /// private logs is strongly discouraged, and is considered a \"privacy\n    /// anti-pattern\", because it reveals identifiable information about _which_\n    /// function has been executed. A tx which leaks such information does not\n    /// contribute to the privacy set of the network.\n    ///\n    /// * Unlike `emit_raw_note_log`, this log is not tied to any specific note\n    ///\n    /// # Arguments\n    /// * `log` - The log data that will be publicly broadcast (so make sure\n    ///           it's already been encrypted before you call this function).\n    ///   Private logs are bounded in size (PRIVATE_LOG_SIZE_IN_FIELDS), to\n    ///   encourage all logs from all smart contracts look identical.\n    /// * `length` - The actual length of the `log` (measured in number of\n    ///              Fields). Although the input log has a max size of\n    ///   PRIVATE_LOG_SIZE_IN_FIELDS, the latter values of the array might all\n    ///   be 0's for small logs. This `length` should reflect the trimmed length\n    ///   of the array. The protocol's kernel circuits can then append random\n    ///   fields as \"padding\" after the `length`, so that the logs of this\n    ///   smart contract look indistinguishable from (the same length as) the\n    ///   logs of all other applications. It's up to wallets how much padding\n    ///   to apply, so ideally all wallets should agree on standards for this.\n    ///\n    /// # Advanced\n    ///\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    // TODO: rename.\n    /// Emits a private log that is explicitly tied to a newly-emitted note_hash,\n    /// to convey to the kernel: \"this log relates to this note\".\n    ///\n    /// This linkage is important in case the note gets squashed (due to being\n    /// read later in this same tx), since we can then squash the log as well.\n    ///\n    /// See `emit_private_log` for more info about private log emission.\n    ///\n    /// # Arguments\n    /// * `log` - The log data as an array of Field elements\n    /// * `length` - The actual length of the `log` (measured in number of\n    ///              Fields).\n    /// * `note_hash_counter` - The side-effect counter that was assigned to the\n    ///                         new note_hash when it was pushed to this\n    //                          `PrivateContext`.\n    ///\n    /// Important: If your application logic requires the log to always be\n    /// emitted regardless of note squashing, consider using `emit_private_log`\n    /// instead, or emitting additional events.\n    ///\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_contract_class_log<let N: u32>(&mut self, log: [Field; N]) {\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n\n        let log_to_emit: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS] =\n            log.concat([0; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS - N]);\n        // Note: the length is not always N, it is the number of fields we want to broadcast, omitting trailing zeros to save blob space.\n        // Safety: The below length is constrained in the base rollup, which will make sure that all the fields beyond length are zero.\n        let length = unsafe { trimmed_array_length_hint(log_to_emit) };\n        // We hash the entire padded log to ensure a user cannot pass a shorter length and so emit incorrect shorter bytecode.\n        let log_hash = poseidon2_hash(log_to_emit);\n        // Safety: the below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\n        unsafe {\n            notify_created_contract_class_log(contract_address, log_to_emit, length, counter);\n        }\n\n        self.contract_class_logs_hashes.push(LogHash { value: log_hash, length: length }.count(\n            counter,\n        ));\n    }\n\n    /// Calls a private function on another contract (or the same contract).\n    ///\n    /// Very low-level function.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the called function\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    /// This enables contracts to interact with each other while maintaining\n    /// privacy. This \"composability\" of private contract functions is a key\n    /// feature of the Aztec network.\n    ///\n    /// If a user's transaction includes multiple private function calls, then\n    /// by the design of Aztec, the following information will remain private[1]:\n    /// - The function selectors and contract addresses of all private function\n    ///   calls will remain private, so an observer of the public mempool will\n    ///   not be able to look at a tx and deduce which private functions have\n    ///   been executed.\n    /// - The arguments and return values of all private function calls will\n    ///   remain private.\n    /// - The person who initiated the tx will remain private.\n    /// - The notes and nullifiers and private logs that are emitted by all\n    ///   private function calls will (if designed well) not leak any user\n    ///   secrets, nor leak which functions have been executed.\n    ///\n    /// [1] Caveats: Some of these privacy guarantees depend on how app\n    /// developers design their smart contracts. Some actions _can_ leak\n    /// information, such as:\n    /// - Calling an internal public function.\n    /// - Calling a public function and not setting msg_sender to Option::none\n    ///   (feature not built yet - see github).\n    /// - Calling any public function will always leak details about the nature\n    ///   of the transaction, so devs should be careful in their contract\n    ///   designs. If it can be done in a private function, then that will give\n    ///   the best privacy.\n    /// - Not padding the side-effects of a tx to some standardised, uniform\n    ///   size. The kernel circuits can take hints to pad side-effects, so a\n    ///   wallet should be able to request for a particular amount of padding.\n    ///   Wallets should ideally agree on some standard.\n    ///   - Padding should include:\n    ///     - Padding the lengths of note & nullifier arrays\n    ///     - Padding private logs with random fields, up to some standardised\n    ///       size.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Advanced\n    /// * The call is added to the private call stack and executed by kernel\n    ///   circuits after this function completes\n    /// * The called function can modify its own contract's private state\n    /// * Side effects from the called function are included in this transaction\n    /// * The call inherits the current transaction's context and gas limits\n    ///\n    pub fn call_private_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    /// Makes a read-only call to a private function on another contract.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// See `call_private_function` for more general info on private function\n    /// calls.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the called function\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn static_call_private_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    /// Calls a private function that takes no arguments.\n    ///\n    /// This is a convenience function for calling private functions that don't\n    /// require any input parameters. It's equivalent to `call_private_function`\n    /// but slightly more efficient to use when no arguments are needed.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    /// Makes a read-only call to a private function which takes no arguments.\n    ///\n    /// This combines the optimisation of `call_private_function_no_args` with\n    /// the safety of `static_call_private_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    /// Low-level private function call.\n    ///\n    /// This is the underlying implementation used by all other private function\n    /// call methods. Instead of taking raw arguments, it accepts a\n    /// hash of the arguments.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args_hash` - Pre-computed hash of the function arguments\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values\n    ///\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1; // TODO: call `next_counter` instead, for consistency\n        ReturnsHash::new(returns_hash)\n    }\n\n    /// Enqueues a call to a public function to be executed later.\n    ///\n    /// Unlike private functions which execute immediately on the user's device,\n    /// public function calls are \"enqueued\" and executed some time later by a\n    /// block proposer.\n    ///\n    /// This means a public function cannot return any values back to a private\n    /// function, because by the time the public function is being executed,\n    /// the private function which called it has already completed execution.\n    /// (In fact, the private function has been executed and proven, along with\n    /// all other private function calls of the user's tx. A single proof of the\n    /// tx has been submitted to the Aztec network, and some time later a\n    /// proposer has picked the tx up from the mempool and begun executing all\n    /// of the enqueued public functions).\n    ///\n    /// # Privacy warning\n    /// Enqueueing a public function call is an inherently leaky action.\n    /// Many interesting applications will require some interaction with public\n    /// state, but smart contract developers should try to use public function\n    /// calls sparingly, and carefully.\n    /// _Internal_ public function calls are especially leaky, because they\n    /// completely leak which private contract made the call.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the public function\n    ///\n    pub fn call_public_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Enqueues a read-only call to a public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// See also `call_public_function` for more important information about\n    /// making private -> public function calls.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the public function\n    ///\n    pub fn static_call_public_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    /// Enqueues a call to a public function that takes no arguments.\n    ///\n    /// This is an optimisation for calling public functions that don't\n    /// take any input parameters. It's otherwise equivalent to\n    /// `call_public_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Enqueues a read-only call to a public function with no arguments.\n    ///\n    /// This combines the optimisation of `call_public_function_no_args` with\n    /// the safety of `static_call_public_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    /// Low-level public function call.\n    ///\n    /// This is the underlying implementation used by all other public function\n    /// call methods. Instead of taking raw arguments, it accepts a\n    /// hash of the arguments.\n    ///\n    /// Advanced function: Most developers should use `call_public_function`\n    /// or `static_call_public_function` instead. This function is exposed for\n    /// performance optimization and advanced use cases.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `calldata_hash` - Hash of the function calldata\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    /// Enqueues a public function call, and designates it to be the teardown\n    /// function for this tx. Only one teardown function call can be made by a\n    /// tx.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase ensures the fee payer\n    /// has sufficient balance to pay the proposer their fees.\n    /// The teardown phase is primarily intended to: calculate exactly\n    /// how much the user owes, based on gas consumption, and refund the user\n    /// any change.\n    ///\n    /// Note: in some cases, the cost of refunding the user (i.e. DA costs of\n    /// tx side-effects) might exceed the refund amount. For app logic with\n    /// fairly stable and predictable gas consumption, a material refund amount\n    /// is unlikely. For app logic with unpredictable gas consumption, a\n    /// refund might be important to the user (e.g. if a heft function reverts\n    /// very early). Wallet/FPC/Paymaster developers should be mindful of this.\n    ///\n    pub fn set_public_teardown_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Low-level function to set the public teardown function.\n    ///\n    /// This is the underlying implementation for setting the teardown function\n    /// call that will execute at the end of the transaction. Instead of taking\n    /// raw arguments, it accepts a hash of the arguments.\n    ///\n    /// Advanced function: Most developers should use\n    /// `set_public_teardown_function` instead.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the teardown\n    ///                        function\n    /// * `calldata_hash` - Hash of the function calldata\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    /// Increments the side-effect counter.\n    ///\n    /// Very low-level function.\n    ///\n    /// # Advanced\n    ///\n    /// Every side-effect of a private function is given a \"side-effect counter\",\n    /// based on when it is created. This PrivateContext is in charge of\n    /// assigning the counters.\n    ///\n    /// The reason we have side-effect counters is complicated. Consider this\n    /// illustrative pseudocode of inter-contract function calls:\n    /// ```\n    /// contract A {\n    ///    let x = 5; // pseudocode for storage var x.\n    ///    fn a1 {\n    ///        read x; // value: 5, counter: 1.\n    ///        x = x + 1;\n    ///        write x; // value: 6, counter: 2.\n    ///\n    ///        B.b(); // start_counter: 2, end_counter: 4\n    ///\n    ///        read x; // value: 36, counter: 5.\n    ///        x = x + 1;\n    ///        write x; // value: 37, counter: 6.\n    ///    }\n    ///\n    ///    fn a2 {\n    ///        read x; // value: 6, counter: 3.\n    ///        x = x * x;\n    ///        write x; // value: 36, counter: 4.\n    ///    }\n    /// }\n    ///\n    /// contract B {\n    ///     fn b() {\n    ///         A.a2();\n    ///     }\n    /// }\n    /// ```\n    ///\n    /// Suppose a1 is the first function called. The comments show the execution\n    /// counter of each side-effect, and what the new value of `x` is.\n    ///\n    /// These (private) functions are processed by Aztec's kernel circuits in an\n    /// order that is different from execution order:\n    /// All of A.a1 is proven before B.b is proven, before A.a2 is proven.\n    /// So when we're in the 2nd execution frame of A.a1 (after the call to\n    /// B.b), the circuit needs to justify why x went from being `6` to `36`.\n    /// But the circuit doesn't know why, and given the order of proving, the\n    /// kernel hasn't _seen_ a value of 36 get written yet.\n    /// The kernel needs to track big arrays of all side-effects of all\n    /// private functions in a tx. Then, as it recurses and processes B.b(), it\n    /// will eventually see a value of 36 get written.\n    ///\n    /// Suppose side-effect counters weren't exposed:\n    /// The kernel would only see this ordering (in order of proof verification):\n    /// [ A.a1.read, A.a1.write, A.a1.read, A.a1.write, A.a2.read, A.a2.write ]\n    /// [         5,          6,        36,         37,         6,         36 ]\n    /// The kernel wouldn't know _when_ B.b() was called within A.a1(), because\n    /// it can't see what's going on within an app circuit. So the kernel\n    /// wouldn't know that the ordering of reads and writes should actually be:\n    /// [ A.a1.read, A.a1.write, A.a2.read, A.a2.write, A.a1.read, A.a1.write ]\n    /// [         5,          6,        6,         36,         36,         37 ]\n    ///\n    /// And so, we introduced side-effect counters: every private function must\n    /// assign side-effect counters alongside every side-effect that it emits,\n    /// and also expose to the kernel the counters that it started and ended\n    /// with.\n    /// This gives the kernel enough information to arrange all side-effects in\n    /// the correct order.\n    /// It can then catch (for example) if a function tries to read state\n    /// before it has been written (e.g. if A.a2() maliciously tried to read\n    /// a value of x=37) (e.g. if A.a1() maliciously tried to read x=6).\n    ///\n    /// If a malicious app contract _lies_ and does not count correctly:\n    /// - It cannot lie about its start and end counters because the kernel\n    ///   will catch this.\n    /// - It _could_ lie about its intermediate counters:\n    ///   - 1. It could not increment its side-effects correctly\n    ///   - 2. It could label its side-effects with counters outside of its\n    ///        start and end counters' range.\n    ///   The kernel will catch 2.\n    ///   The kernel will not catch 1., but this would only cause corruption\n    ///   to the private state of the malicious contract, and not any other\n    ///   contracts (because a contract can only modify its own state). If\n    ///   a \"good\" contract is given _read access_ to a maliciously-counting\n    ///   contract (via an external getter function, or by reading historic\n    ///   state from the archive tree directly), and they then make state\n    ///   changes to their _own_ state accordingly, that could be dangerous.\n    ///   Developers should be mindful not to trust the claimed innards of\n    ///   external contracts unless they have audited/vetted the contracts\n    ///   including vetting the side-effect counter incrementation.\n    ///   This is a similar paradigm to Ethereum smart contract development:\n    ///   you must vet external contracts that your contract relies upon, and\n    ///   you must not make any presumptions about their claimed behaviour.\n    ///   (Hopefully if a contract imports a version of aztec-nr, we will get\n    ///   contract verification tooling that can validate the authenticity\n    ///   of the imported aztec-nr package, and hence infer that the side-\n    ///   effect counting will be correct, without having to re-audit such logic\n    ///   for every contract).\n    ///\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: 0,\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "75": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\n/// # PublicContext\n///\n/// The **main interface** between a #[public] function and the Aztec blockchain.\n///\n/// An instance of the PublicContext is initialized automatically at the outset\n/// of every public function, within the #[public] macro, so you'll never\n/// need to consciously instantiate this yourself.\n///\n/// The instance is always named `context`, and it will always be available\n/// within the body of every #[public] function in your smart contract.\n///\n/// Typical usage for a smart contract developer will be to call getter\n/// methods of the PublicContext.\n///\n/// _Pushing_ data and requests to the context is mostly handled within\n/// aztec-nr's own functions, so typically a smart contract developer won't\n/// need to call any setter methods directly.\n///\n/// ## Responsibilities\n/// - Exposes contextual data to a public function:\n///   - Data relating to how this public function was called:\n///     - msg_sender, this_address\n///   - Data relating to the current blockchain state:\n///     - timestamp, block_number, chain_id, version\n///   - Gas and fee information\n/// - Provides state access:\n///   - Read/write public storage (key-value mapping)\n///   - Check existence of notes and nullifiers\n///     (Some patterns use notes & nullifiers to store public (not private)\n///     information)\n///   - Enables consumption of L1->L2 messages.\n/// - Enables calls to other public smart contract functions:\n/// - Writes data to the blockchain:\n///   - Updates to public state variables\n///   - New public logs (for events)\n///   - New L2->L1 messages\n///   - New notes & nullifiers\n///     (E.g. pushing public info to notes/nullifiers, or for completing\n///     \"partial notes\")\n///\n/// ## Key Differences from Private Execution\n///\n/// Unlike private functions -- which are executed on the user's device and which\n/// can only reference historic state -- public functions are executed by a block\n/// proposer and are executed \"live\" on the _current_ tip of the chain.\n/// This means public functions can:\n/// - Read and write _current_ public state\n/// - Immediately see the effects of earlier transactions in the same block\n///\n/// Also, public functions are executed within a zkVM (the \"AVM\"), so that they\n/// can _revert_ whilst still ensuring payment to the proposer and prover.\n/// (Private functions cannot revert: they either succeed, or they cannot be\n/// included).\n///\n/// ## Optimising Public Functions\n///\n/// Using the AVM to execute public functions means they compile down to \"AVM\n/// bytecode\" instead of the ACIR that private functions (standalone circuits)\n/// compile to. Therefore the approach to optimising a public function is\n/// fundamentally different from optimising a public function.\n///\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl Eq for PublicContext {\n    fn eq(self, other: Self) -> bool {\n        (self.args_hash == other.args_hash)\n        // Can't compare the function compute_args_hash\n    }\n}\n\nimpl PublicContext {\n    /// Creates a new PublicContext instance.\n    ///\n    /// Low-level function: This is called automatically by the #[public]\n    /// macro, so you shouldn't need to be called directly by smart contract\n    /// developers.\n    ///\n    /// # Arguments\n    /// * `compute_args_hash` - Function to compute the args_hash\n    ///\n    /// # Returns\n    /// * A new PublicContext instance\n    ///\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    /// Emits a _public_ log that will be visible onchain to everyone.\n    ///\n    /// # Arguments\n    /// * `log` - The data to log, must implement Serialize trait\n    ///\n    pub fn emit_public_log<T>(_self: &mut Self, log: T)\n    where\n        T: Serialize,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    /// Checks if a given note hash exists in the note hash tree at a particular\n    /// leaf_index.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The note hash to check for existence\n    /// * `leaf_index` - The index where the note hash should be located\n    ///\n    /// # Returns\n    /// * `bool` - True if the note hash exists at the specified index\n    ///\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: u64) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    /// Checks if a specific L1-to-L2 message exists in the L1-to-L2 message\n    /// tree at a particular leaf index.\n    ///\n    /// Common use cases include token bridging, cross-chain governance, and\n    /// triggering L2 actions based on L1 events.\n    ///\n    /// This function should be called before attempting to consume an L1-to-L2\n    /// message.\n    ///\n    /// # Arguments\n    /// * `msg_hash` - Hash of the L1-to-L2 message to check\n    /// * `msg_leaf_index` - The index where the message should be located\n    ///\n    /// # Returns\n    /// * `bool` - True if the message exists at the specified index\n    ///\n    /// # Advanced\n    /// * Uses the AVM l1_to_l2_msg_exists opcode for tree lookup\n    /// * Messages are copied from L1 Inbox to L2 by block proposers\n    ///\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        // TODO(alvaro): Make l1l2msg leaf index a u64 upstream\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index as u64) } == 1\n    }\n\n    /// Checks if a specific nullifier has been emitted by a given contract.\n    ///\n    /// Whilst nullifiers are primarily intended as a _privacy-preserving_\n    /// record of a one-time action, they can also be used to efficiently\n    /// record _public_ one-time actions too. An example is to check\n    /// whether a contract has been published: we emit a nullifier that is\n    /// deterministic, but whose preimage is _not_ private. This is more\n    /// efficient than using mutable storage, and can be done directly\n    /// from a private function.\n    ///\n    /// Nullifiers can be tested for non-existence in public, which is not the\n    /// case in private. Because private functions do not have access to\n    /// the tip of the blockchain (but only the anchor block they are built\n    /// at) they can only prove nullifier non-existence in the past. But between\n    /// an anchor block and the block in which a tx is included, the nullifier\n    /// might have been inserted into the nullifier tree by some other\n    /// transaction.\n    /// Public functions _do_ have access to the tip of the state, and so\n    /// this pattern is safe.\n    ///\n    /// # Arguments\n    /// * `unsiloed_nullifier` - The raw nullifier value (before siloing with\n    ///                          the contract address that emitted it).\n    /// * `address` - The claimed contract address that emitted the nullifier\n    ///\n    /// # Returns\n    /// * `bool` - True if the nullifier has been emitted by the specified contract\n    ///\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    /// Consumes a message sent from Ethereum (L1) to Aztec (L2) -- effectively\n    /// marking it as \"read\".\n    ///\n    /// Use this function if you only want the message to ever be \"referred to\"\n    /// once. Once consumed using this method, the message cannot be consumed\n    /// again, because a nullifier is emitted.\n    /// If your use case wants for the message to be read unlimited times, then\n    /// you can always read any historic message from the L1-to-L2 messages tree,\n    /// using the `l1_to_l2_msg_exists` method. Messages never technically get\n    /// deleted from that tree.\n    ///\n    /// The message will first be inserted into an Aztec \"Inbox\" smart contract\n    /// on L1. It will not be available for consumption immediately. Messages\n    /// get copied-over from the L1 Inbox to L2 by the next Proposer in batches.\n    /// So you will need to wait until the messages are copied before you can\n    /// consume them.\n    ///\n    /// # Arguments\n    /// * `content` - The message content that was sent from L1\n    /// * `secret` - Secret value used for message privacy (if needed)\n    /// * `sender` - Ethereum address that sent the message\n    /// * `leaf_index` - Index of the message in the L1-to-L2 message tree\n    ///\n    /// # Advanced\n    /// * Validates message existence in the L1-to-L2 message tree\n    /// * Prevents double-consumption by emitting a nullifier\n    /// * Message hash is computed from all parameters + chain context\n    /// * Will revert if message doesn't exist or was already consumed\n    ///\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    /// Sends an \"L2 -> L1 message\" from this function (Aztec, L2) to a smart\n    /// contract on Ethereum (L1). L1 contracts which are designed to\n    /// send/receive messages to/from Aztec are called \"Portal Contracts\".\n    ///\n    /// Common use cases include withdrawals, cross-chain asset transfers, and\n    /// triggering L1 actions based on L2 state changes.\n    ///\n    /// The message will be inserted into an Aztec \"Outbox\" contract on L1,\n    /// when this transaction's block is proposed to L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target portal contract. The message will need to be manually\n    /// consumed from the Outbox through a separate Ethereum transaction: a user\n    /// will need to call a function of the portal contract -- a function\n    /// specifically designed to make a call to the Outbox to consume the\n    /// message.\n    /// The message will only be available for consumption once the _epoch_\n    /// proof has been submitted. Given that there are multiple Aztec blocks\n    /// within an epoch, it might take some time for this epoch proof to be\n    /// submitted -- especially if the block was near the start of an epoch.\n    ///\n    /// # Arguments\n    /// * `recipient` - Ethereum address that will receive the message\n    /// * `content` - Message content (32 bytes as a Field element)\n    ///\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    /// Calls a public function on another contract.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - Function to call on the target contract\n    /// * `args` - Arguments to pass to the function\n    /// * `gas_opts` - An optional allocation of gas to the called function.\n    ///\n    /// # Returns\n    /// * `[Field]` - Return data from the called function\n    ///\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    /// Makes a read-only call to a public function on another contract.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Useful for querying data from other contracts safely.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - Function to call on the target contract\n    /// * `args` - Array of arguments to pass to the called function\n    /// * `gas_opts` - An optional allocation of gas to the called function.\n    ///\n    /// # Returns\n    /// * `[Field]` - Return data from the called function\n    ///\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    /// Adds a new note hash to the Aztec blockchain's global Note Hash Tree.\n    ///\n    /// Notes are ordinarily constructed and emitted by _private_ functions, to\n    /// ensure that both the content of the note, and the contract that emitted\n    /// the note, stay private.\n    ///\n    /// There are however some useful patterns whereby a note needs to contain\n    /// _public_ data. The ability to push a new note_hash from a _public_\n    /// function means that notes can be injected with public data immediately\n    /// -- as soon as the public value is known. The slower alternative would\n    /// be to submit a follow-up transaction so that a private function can\n    /// inject the data. Both are possible on Aztec.\n    ///\n    /// Search \"Partial Note\" for a very common pattern which enables a note\n    /// to be \"partially\" populated with some data in a _private_ function, and\n    /// then later \"completed\" with some data in a public function.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The hash of the note to add to the tree\n    ///\n    /// # Advanced\n    /// * The note hash will be siloed with the contract address by the protocol\n    ///\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n\n    /// Adds a new nullifier to the Aztec blockchain's global Nullifier Tree.\n    ///\n    /// Whilst nullifiers are primarily intended as a _privacy-preserving_\n    /// record of a one-time action, they can also be used to efficiently\n    /// record _public_ one-time actions too. Hence why you're seeing this\n    /// function within the PublicContext.\n    /// An example is to check whether a contract has been published: we emit\n    /// a nullifier that is deterministic, but whose preimage is _not_ private.\n    ///\n    /// # Arguments\n    /// * `nullifier` - A unique field element that represents the consumed\n    ///   state\n    ///\n    /// # Advanced\n    /// * Nullifier is immediately added to the global nullifier tree\n    /// * Emitted nullifiers are immediately visible to all\n    ///   subsequent transactions in the same block\n    /// * Automatically siloed with the contract address by the protocol\n    /// * Used for preventing double-spending and ensuring one-time actions\n    ///\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    /// Returns the address of the current contract being executed.\n    ///\n    /// This is equivalent to `address(this)` in Solidity (hence the name).\n    /// Use this to identify the current contract's address, commonly needed for\n    /// access control or when interacting with other contracts.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The contract address of the current function being\n    ///                    executed.\n    ///\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n\n    /// Returns the contract address that initiated this function call.\n    ///\n    /// This is similar to `msg.sender` in Solidity (hence the name).\n    ///\n    /// Important Note: Since Aztec doesn't have a concept of an EoA (\n    /// Externally-owned Account), the msg_sender is \"undefined\" for the first\n    /// function call of every transaction. A value of `-1` is returned in such\n    /// cases, and is enforced by the protocol's kernel circuits.\n    /// The first function call of a tx is likely to be a call to the user's\n    /// account contract, so this quirk will most often be handled by account\n    /// contract developers.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The address of the account or contract that called\n    ///   this function\n    ///\n    /// # Examples\n    /// ```rust\n    /// #[aztec(public)]\n    /// fn transfer(context: &mut PublicContext, to: AztecAddress, amount: u64) {\n    ///     let sender = context.msg_sender();\n    ///     // Only the sender can transfer their own tokens\n    ///     assert(sender == get_token_owner(), \"Unauthorized\");\n    /// }\n    /// ```\n    ///\n    /// # Advanced\n    /// * Value is provided by the AVM sender opcode\n    /// * In nested calls, this is the immediate caller, not the original\n    ///   transaction sender\n    /// * Globally visible unlike private execution where it's contract-local\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n\n    /// Returns the function selector of the currently-executing function.\n    ///\n    /// This is similar to `msg.sig` in Solidity, returning the first 4\n    /// bytes of the function signature.\n    ///\n    /// # Returns\n    /// * `FunctionSelector` - The 4-byte function identifier\n    ///\n    /// # Advanced\n    /// * Extracted from the first element of calldata\n    /// * Used internally for function dispatch in the AVM\n    ///\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n\n    /// Returns the hash of the arguments passed to the current function.\n    ///\n    /// Very low-level function: The #[public] macro uses this internally.\n    /// Smart contract developers typically won't need to access this\n    /// directly as arguments are automatically made available.\n    ///\n    /// # Returns\n    /// * `Field` - Hash of the function arguments\n    ///\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n\n    /// Returns the \"transaction fee\" for the current transaction.\n    /// This is the final tx fee that will be deducted from the fee_payer's\n    /// \"fee-juice\" balance (in the protocol's Base Rollup circuit).\n    ///\n    /// # Returns\n    /// * `Field` - The actual, final cost of the transaction, taking into account:\n    ///             the actual gas used during the setup and app-logic phases,\n    ///             and the fixed amount of gas that's been allocated by the user\n    ///             for the teardown phase.\n    ///             I.e. effectiveL2FeePerGas * l2GasUsed + effectiveDAFeePerGas * daGasUsed\n    ///\n    /// This will return `0` during the \"setup\" and \"app-logic\" phases of\n    /// tx execution (because the final tx fee is not known at that time).\n    /// This will only return a nonzero value during the \"teardown\" phase of\n    /// execution, where the final tx fee can actually be computed.\n    ///\n    /// Regardless of _when_ this function is called during the teardown phase,\n    /// it will always return the same final tx fee value. The teardown phase\n    /// does not consume a variable amount of gas: it always consumes a\n    /// pre-allocated amount of gas, as specified by the user when they generate\n    /// their tx.\n    ///\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    /// Returns the chain ID of the current network.\n    ///\n    /// This is similar to `block.chainid` in Solidity. Returns the unique\n    /// identifier for the blockchain network this transaction is executing on.\n    ///\n    /// Helps prevent cross-chain replay attacks. Useful if implementing\n    /// multi-chain contract logic.\n    ///\n    /// # Returns\n    /// * `Field` - The chain ID as a field element\n    ///\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n\n    /// Returns the Aztec protocol version that this transaction is executing\n    /// under. Different versions may have different rules, opcodes, or\n    /// cryptographic primitives.\n    ///\n    /// This is similar to how Ethereum has different EVM versions.\n    ///\n    /// Useful for forward/backward compatibility checks\n    ///\n    /// Not to be confused with contract versions; this is the protocol version.\n    ///\n    /// # Returns\n    /// * `Field` - The protocol version as a field element\n    ///\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    /// Returns the current block number.\n    ///\n    /// This is similar to `block.number` in Solidity.\n    ///\n    /// Note: the current block number is only available within a public function\n    /// (as opposed to a private function).\n    ///\n    /// Note: the time intervals between blocks should not be relied upon as\n    /// being consistent:\n    /// - Timestamps of blocks fall within a range, rather than at exact regular\n    ///   intervals.\n    /// - Slots can be missed.\n    /// - Protocol upgrades can completely change the intervals between blocks\n    ///   (and indeed the current roadmap plans to reduce the time between\n    ///   blocks, eventually).\n    /// Use `context.timestamp()` for more-reliable time-based logic.\n    ///\n    /// # Returns\n    /// * `u32` - The current block number\n    ///\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n\n    /// Returns the timestamp of the current block.\n    ///\n    /// This is similar to `block.timestamp` in Solidity.\n    ///\n    /// All functions of all transactions in a block share the exact same\n    /// timestamp (even though technically each transaction is executed\n    /// one-after-the-other).\n    ///\n    /// Important note: Timestamps of Aztec blocks are not at reliably-fixed\n    /// intervals. The proposer of the block has some flexibility to choose a\n    /// timestamp which is in a valid _range_: Obviously the timestamp of this\n    /// block must be strictly greater than that of the previous block, and must\n    /// must be less than the timestamp of whichever ethereum block the aztec\n    /// block is proposed to. Furthermore, if the timestamp is not deemed close\n    /// enough to the actual current time, the committee of validators will not\n    /// attest to the block.\n    ///\n    /// # Returns\n    /// * `u64` - Unix timestamp in seconds\n    ///\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n\n    /// Returns the fee per unit of L2 gas for this transaction (aka the \"L2 gas\n    /// price\"), as chosen by the user.\n    ///\n    /// L2 gas covers the cost of executing public functions and handling\n    /// side-effects within the AVM.\n    ///\n    /// # Returns\n    /// * `u128` - Fee per unit of L2 gas\n    ///\n    /// Wallet developers should be mindful that the choice of gas price (which\n    /// is publicly visible) can leak information about the user, e.g.:\n    /// - which wallet software the user is using;\n    /// - the amount of time which has elapsed from the time the user's wallet\n    ///   chose a gas price (at the going rate), to the time of tx submission.\n    ///   This can give clues about the proving time, and hence the nature of\n    ///   the tx.\n    /// - the urgency of the transaction (which is kind of unavoidable, if the\n    ///   tx is indeed urgent).\n    /// - the wealth of the user.\n    /// - the exact user (if the gas price is explicitly chosen by the user to\n    ///   be some unique number like 0.123456789, or their favourite number).\n    /// Wallet devs might wish to consider fuzzing the choice of gas price.\n    ///\n    pub fn base_fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            base_fee_per_l2_gas()\n        }\n    }\n\n    /// Returns the fee per unit of DA (Data Availability) gas (aka the \"DA gas\n    /// price\").\n    ///\n    /// DA gas covers the cost of making transaction data available on L1.\n    ///\n    /// See the warning in `fee_pre_l2_gas` for how gas prices can be leaky.\n    ///\n    /// # Returns\n    /// * `u128` - Fee per unit of DA gas\n    ///\n    pub fn base_fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            base_fee_per_da_gas()\n        }\n    }\n\n    /// Returns the remaining L2 gas available for this transaction.\n    ///\n    /// Different AVM opcodes consume different amounts of gas.\n    ///\n    /// # Returns\n    /// * `u32` - Remaining L2 gas units\n    ///\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n\n    /// Returns the remaining DA (Data Availability) gas available for this\n    /// transaction.\n    ///\n    /// DA gas is consumed when emitting data that needs to be made available\n    /// on L1, such as public logs or state updates.\n    /// All of the side-effects from the private part of the tx also consume\n    /// DA gas before execution of any public functions even begins.\n    ///\n    /// # Returns\n    /// * `u32` - Remaining DA gas units\n    ///\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n\n    /// Checks if the current execution is within a staticcall context, where\n    /// no state changes or logs are allowed to be emitted (by this function\n    /// or any nested function calls).\n    ///\n    /// # Returns\n    /// * `bool` - True if in staticcall context, false otherwise\n    ///\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    /// Reads raw field values from public storage.\n    /// Reads N consecutive storage slots starting from the given slot.\n    ///\n    /// Very low-level function. Users should typically use the public state\n    /// variable abstractions to perform reads: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The starting storage slot to read from\n    ///\n    /// # Returns\n    /// * `[Field; N]` - Array of N field values from consecutive storage slots\n    ///\n    /// # Generic Parameters\n    /// * `N` - the number of consecutive slots to return, starting from the\n    ///         `storage_slot`.\n    ///\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    /// Reads a typed value from public storage.\n    ///\n    /// Low-level function. Users should typically use the public state\n    /// variable abstractions to perform reads: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The storage slot to read from\n    ///\n    /// # Returns\n    /// * `T` - The deserialized value from storage\n    ///\n    /// # Generic Parameters\n    /// * `T` - The type that the caller expects to read from the `storage_slot`.\n    ///\n    pub fn storage_read<T>(self, storage_slot: Field) -> T\n    where\n        T: Packable,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    /// Writes raw field values to public storage.\n    /// Writes to N consecutive storage slots starting from the given slot.\n    ///\n    /// Very low-level function. Users should typically use the public state\n    /// variable abstractions to perform writes: PublicMutable & PublicImmutable.\n    ///\n    /// Public storage writes take effect immediately.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The starting storage slot to write to\n    /// * `values` - Array of N Fields to write to storage\n    ///\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    /// Writes a typed value to public storage.\n    ///\n    /// Low-level function. Users should typically use the public state\n    /// variable abstractions to perform writes: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The storage slot to write to\n    /// * `value` - The typed value to write to storage\n    ///\n    /// # Generic Parameters\n    /// * `T` - The type to write to storage.\n    ///\n    pub fn storage_write<T>(self, storage_slot: Field, value: T)\n    where\n        T: Packable,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// TODO: consider putting this oracle code in its own file.\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn base_fee_per_l2_gas() -> u128 {\n    base_fee_per_l2_gas_opcode()\n}\nunconstrained fn base_fee_per_da_gas() -> u128 {\n    base_fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> u1 {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: u64) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: u64) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\n\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// TODO: consider putting this oracle code in its own file.\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeBaseFeePerL2Gas)]\nunconstrained fn base_fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeBaseFeePerDaGas)]\nunconstrained fn base_fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> u1 {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: u64) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: u64) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "76": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\n/// A hash that represents a private contract function call's return value. Call `get_preimage` to get the underlying\n/// value.\n///\n/// The kernels don't process the actual return values but instead their hashes, so it is up to contracts to populate\n/// oracles with the preimages of these hashes on return to make them available to their callers.\n///\n/// Public calls don't utilize this mechanism since the AVM does process the full return values.\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    /// Fetches the underlying return value from an oracle, constraining that it corresponds to the return data hash.\n    pub fn get_preimage<T>(self) -> T\n    where\n        T: Deserialize,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it. If `T`\n        // is `()`, then `preimage` must be an array of length 0 (since that is `()`'s deserialization length).\n        // `hash_args_array` handles empty arrays following the protocol rules (i.e. an empty args array is signaled\n        // with a zero hash), correctly constraining `self.hash`.\n        let preimage = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage), \"Preimage mismatch\");\n\n        Deserialize::deserialize(preimage)\n    }\n}\n\nmod test {\n    use crate::{\n        hash::hash_args_array,\n        oracle::execution_cache,\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use super::ReturnsHash;\n    use protocol_types::traits::Serialize;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn retrieves_preimage() {\n        let env = TestEnvironment::new();\n        env.private_context(|_| {\n            let value = MockStruct::new(4, 7);\n            let serialized = value.serialize();\n\n            let hash = hash_args_array(serialized);\n            execution_cache::store(serialized, hash);\n\n            assert_eq(ReturnsHash::new(hash).get_preimage(), value);\n        });\n    }\n\n    #[test]\n    unconstrained fn retrieves_empty_preimage() {\n        let env = TestEnvironment::new();\n        env.private_context(|_| {\n            let value = ();\n            let serialized = [];\n\n            let hash = hash_args_array(serialized);\n            execution_cache::store(serialized, hash);\n\n            assert_eq(ReturnsHash::new(hash).get_preimage(), value);\n        });\n    }\n\n    #[test(should_fail_with = \"Preimage mismatch\")]\n    unconstrained fn rejects_bad_preimage() {\n        let value = MockStruct::new(4, 7);\n        let serialized = value.serialize();\n\n        let mut bad_serialized = serialized;\n        bad_serialized[0] += 1;\n\n        let hash = hash_args_array(serialized);\n\n        let _ = OracleMock::mock(\"privateLoadFromExecutionCache\").returns(bad_serialized);\n        assert_eq(ReturnsHash::new(hash).get_preimage(), value);\n    }\n\n    // This test passes due to a Noir bug.\n    // #[test(should_fail_with=\"Preimage mismatch\")]\n    // unconstrained fn rejects_bad_empty_preimage() {\n    //     let value = ();\n    //     let serialized = [];\n\n    //     let hash = hash_args_array(serialized);\n\n    //     let _ = OracleMock::mock(\"privateLoadFromExecutionCache\").returns([1]);\n    //     assert_eq(ReturnsHash::new(hash).get_preimage(), value);\n    // }\n}\n"
    },
    "77": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T>(self, storage_slot: Field) -> T\n    where\n        T: Packable,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "78": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/event/event_interface.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext},\n    event::event_selector::EventSelector,\n    messages::{\n        logs::{event::to_encrypted_private_event_message, utils::prefix_with_tag},\n        offchain_messages::emit_offchain_message,\n    },\n    utils::remove_constraints::remove_constraints_if,\n};\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT,\n    hash::poseidon2_hash_with_separator,\n    traits::{Serialize, ToField},\n};\n\n/// Specifies the configuration parameters for message delivery. There are two fundamental aspects to consider:\n///\n/// +----------------------------------------------------------------------------------------------------------+\n/// | 1. Delivery Mechanism                                                                                    |\n/// | - Messages can be delivered either on-chain or out-of-band                                               |\n/// | - On-chain delivery uses the Aztec protocol's private log stream, submitted to L1 blobs and consuming DA |\n/// | - Out-of-band delivery is implemented by the application (e.g. storing ciphertexts in cloud storage)     |\n/// | - Out-of-band delivery cannot have any cryptographic constraints since messages are never stored on-chain|\n/// +----------------------------------------------------------------------------------------------------------+\n///\n/// For on-chain delivery, we must also consider:\n///\n/// +----------------------------------------------------------------------------------------------------------+\n/// | 2. Message Encryption and Tagging                                                                        |\n/// | - Messages can use either constrained or unconstrained encryption                                        |\n/// | - Constrained encryption guarantees the ciphertext is formed correctly but costs more in constraints,    |\n/// |   which results in slower proving times                                                                  |\n/// | - Unconstrained encryption trusts the sender but is cheaper constraint-wise and hence faster to prove    |\n/// | - Tagging is an indexing mechanism that helps recipients locate their messages                           |\n/// | - If tagging is not performed correctly by the sender, the recipient will not be able to find the message|\n/// +----------------------------------------------------------------------------------------------------------+\n///\n/// For off-chain delivery, constrained encryption is not relevant since it doesn't provide any additional guarantees\n/// over unconstrained encryption and is slower to prove (requiring more constraints).\n///\n/// There are three available delivery modes described below.\npub struct MessageDeliveryEnum {\n    /// 1. Constrained On-chain\n    /// - Uses constrained encryption and in the future constrained tagging (issue #14565) with on-chain delivery\n    /// - Provides cryptographic guarantees that recipients can discover and decrypt messages (once #14565 is tackled)\n    /// - Slowest proving times since encryption is constrained\n    /// - Expensive since it consumes L1 blob space\n    /// - Use when smart contracts need to make decisions based on message contents\n    /// - Example 1: An escrow contract facilitating a private NFT sale that needs to verify payment before releasing\n    ///   the NFT to the buyer.\n    /// - Example 2: An application with private configuration where changes must be broadcast to all participants.\n    ///   This ensures every user can access the latest configuration. Without notification of config changes,\n    ///   users would be unable to read updated variables and therefore blocked from using the application's\n    ///   functions. This pattern applies to all critical events that require universal broadcast.\n    ///\n    /// Safety: Despite being called CONSTRAINED_ONCHAIN, this delivery mode is currently NOT fully constrained.\n    /// The tag prefixing is unconstrained, meaning a malicious sender could manipulate the tag to prevent\n    /// recipient decryption. TODO(#14565): Implement proper constrained tag prefixing.\n    pub CONSTRAINED_ONCHAIN: u8,\n\n    /// 2. Unconstrained On-chain\n    /// - Uses unconstrained encryption and tagging with on-chain delivery\n    /// - Faster proving times since no constraints are used for encryption\n    /// - Expensive since it consumes L1 blob space\n    /// - Suitable when recipients can verify message validity through other means\n    /// - Use this if you don't need the cryptographic guarantees of constrained encryption and tagging but\n    ///   don't want to deal with setting up out-of-band delivery infrastructure as required by mode 3\n    /// - Example: Depositing a privately-held NFT into an NFT-sale escrow contract. The buyers know the escrow\n    ///   contract's decryption keys, they receive the message on-chain and are willing to buy the NFT only if the NFT\n    ///   contained in the message is legitimate.\n    pub UNCONSTRAINED_ONCHAIN: u8,\n\n    /// 3. Out-of-band\n    /// - Uses unconstrained encryption with off-chain delivery\n    /// - Lowest cost since no on-chain storage is needed and short proving times since no constraints are used\n    ///   for encryption\n    /// - Suitable when recipients can verify message validity through other means\n    /// - Requires setting up custom infrastructure for handling off-chain delivery (e.g. cloud storage)\n    /// - Example: A payment app where a merchant receives the message off-chain and is willing to release the goods\n    ///   once he verifies that the payment is correct (i.e. can decrypt the message and verify that it contains\n    ///   a legitimate token note - note with note commitment in the note hash tree).\n    pub UNCONSTRAINED_OFFCHAIN: u8,\n}\n\npub global MessageDelivery: MessageDeliveryEnum = MessageDeliveryEnum {\n    CONSTRAINED_ONCHAIN: 1,\n    UNCONSTRAINED_ONCHAIN: 2,\n    UNCONSTRAINED_OFFCHAIN: 3,\n};\n\n/// Emits an event that can be delivered either via private logs or offchain messages, with configurable encryption and\n/// tagging constraints.\n///\n/// # Arguments\n/// * `event` - The event to emit\n/// * `context` - The private context to emit the event in\n/// * `recipient` - The address that should receive this event\n/// * `delivery_mode` - Controls encryption, tagging, and delivery constraints. Must be a compile-time constant.\n///   See `MessageDeliveryEnum` for details on the available modes.\npub fn emit_event_in_private<Event>(\n    event: Event,\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    delivery_mode: u8,\n)\nwhere\n    Event: EventInterface + Serialize,\n{\n    // This function relies on `delivery_mode` being a constant in order to reduce circuit constraints when unconstrained\n    // usage is requested. If `delivery_mode` were a runtime value then performance would suffer.\n    assert_constant(delivery_mode);\n\n    // The following maps out the 3 dimensions across which we configure message delivery.\n    let constrained_encryption = delivery_mode == MessageDelivery.CONSTRAINED_ONCHAIN;\n    let emit_as_offchain_message = delivery_mode == MessageDelivery.UNCONSTRAINED_OFFCHAIN;\n    // TODO(#14565): Add constrained tagging\n    let _constrained_tagging = delivery_mode == MessageDelivery.CONSTRAINED_ONCHAIN;\n\n    let (ciphertext, randomness) = remove_constraints_if(\n        !constrained_encryption,\n        || to_encrypted_private_event_message(event, recipient),\n    );\n\n    // We generate a cryptographic commitment to the event to ensure its authenticity during out-of-band delivery.\n    // The nullifier tree is chosen over the note hash tree for this purpose since it provides a simpler mechanism\n    // - nullifiers require no nonce, and events, being non-spendable, don't need the guarantee that a \"spending\"\n    // nullifier can be computed.\n    // TODO(#11571): with decryption happening in Noir we can now use the Packable trait instead.\n    let serialized_event_with_randomness = [randomness].concat(event.serialize());\n    let event_commitment = poseidon2_hash_with_separator(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n    context.push_nullifier(event_commitment);\n\n    if emit_as_offchain_message {\n        emit_offchain_message(ciphertext, recipient);\n    } else {\n        // Safety: Currently unsafe. See description of CONSTRAINED_ONCHAIN in MessageDeliveryEnum.\n        // TODO(#14565): Implement proper constrained tag prefixing to make this truly CONSTRAINED_ONCHAIN\n        let log_content = prefix_with_tag(ciphertext, recipient);\n\n        context.emit_private_log(log_content, log_content.len());\n    }\n}\n\npub fn emit_event_in_public<Event>(event: Event, context: &mut PublicContext)\nwhere\n    Event: EventInterface + Serialize,\n{\n    let mut log_content = [0; <Event as Serialize>::N + 1];\n\n    let serialized_event = event.serialize();\n    for i in 0..serialized_event.len() {\n        log_content[i] = serialized_event[i];\n    }\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    log_content[serialized_event.len()] = Event::get_event_type_id().to_field();\n\n    context.emit_public_log(log_content);\n}\n\npub trait EventInterface {\n    fn get_event_type_id() -> EventSelector;\n}\n"
    },
    "79": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "81": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "93": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    abis::block_header::BlockHeader, address::AztecAddress,\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(self.global_variables.block_number, public_data_tree_index)\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "98": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n\nmod test {\n    use super::get_public_keys;\n\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use protocol_types::traits::Serialize;\n    use std::test::OracleMock;\n\n    global KEY_ORACLE_RESPONSE_LENGTH: u32 = 13; // 12 fields for the keys, one field for the partial address\n\n    #[test(should_fail_with = \"Invalid public keys hint for address\")]\n    unconstrained fn get_public_keys_fails_with_bad_hint() {\n        let mut env = TestEnvironment::new();\n        let account = env.create_light_account();\n\n        // Instead of querying for some unknown account, which would result in the oracle erroring out, we mock a bad oracle\n        // response to check that the circuit properly checks the address derivation.\n        let mut random_keys_and_partial_address = [0; KEY_ORACLE_RESPONSE_LENGTH];\n        // We use randomly generated points on the curve, and a random partial address to ensure that\n        // this combination does not derive the address and we should see the assertion fail.\n        // npk_m\n        random_keys_and_partial_address[0] =\n            0x292364b852c6c6f01472951e76a39cbcf074591fd0e063a81965e7b51ad868a5;\n        random_keys_and_partial_address[1] =\n            0x0a687b46cdc9238f1c311f126aaaa4acbd7a737bff2efd7aeabdb8d805843a27;\n        random_keys_and_partial_address[2] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // ivpk_m\n        random_keys_and_partial_address[3] =\n            0x173c5229a00c5425255680dd6edc27e278c48883991f348fe6985de43b4ec25f;\n        random_keys_and_partial_address[4] =\n            0x1698608e23b5f6c2f43c49a559108bb64e2247b8fc2da842296a416817f40b7f;\n        random_keys_and_partial_address[5] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // ovpk_m\n        random_keys_and_partial_address[6] =\n            0x1bad2f7d1ad960a1bd0fe4d2c8d17f5ab4a86ef8b103e0a9e7f67ec0d3b4795e;\n        random_keys_and_partial_address[7] =\n            0x206db87110abbecc9fbaef2c865189d94ef2c106202f734ee4eba9257fd28bf1;\n        random_keys_and_partial_address[8] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // tpk_m\n        random_keys_and_partial_address[9] =\n            0x05e3bd9cfe6b47daa139613619cf7d7fd8bb0112b6f2908caa6d9b536ed948ed;\n        random_keys_and_partial_address[10] =\n            0x051066f877c9df47552d02e7dc32127ff4edefc8498e813bca1cbd3f5d1be429;\n        random_keys_and_partial_address[11] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // partial address\n        random_keys_and_partial_address[12] =\n            0x236703e2cb00a182e024e98e9f759231b556d25ff19f98896cebb69e9e678cc9;\n\n        let _ = OracleMock::mock(\"utilityGetPublicKeysAndPartialAddress\").returns(\n            random_keys_and_partial_address.serialize(),\n        );\n        let _ = get_public_keys(account);\n    }\n}\n"
    }
  }
}
