{
  "transpiled": true,
  "noir_version": "1.0.0-beta.5+0000000000000000000000000000000000000000",
  "name": "Portal",
  "functions": [
    {
      "name": "_claim_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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CqcuAIADgAUBAIAFAAKADi4EgAuADiMAAArsKACADwQAAwEAgAmAD4AOLgAAAYAFAQAAAYAOAAEoAYAFBAABAQCABQACgA4uBIALgA4BAIAOAAKADi4EgAmADiMAAArsIwAAC0UoAIAPBAACBQCAC4APgA4oAIAQBAADAQCADoAQgA8uAAABgAUBAAABgA8AASgBgAUEAAEBAIAFAAKADy4EgAuADwEAgA8AAoAPLgSADoAPIwAAC0UoAIANBAADAQCABYANgAwLAIADgAWADSQAgA0AAAupAQCACoAIgA8uAIAKgBAuAIAMgBELAIAQgA+AEiQAgBIAAAupLgGAEIAOLgSADoARAQCAEAACgBABAIARAAKAESMAAAt4AQCADIAIgAYmLgGAA4AHAQCAAwACgAsuAYALgAgBAIALAAKACy4BgAuACQEAgAsAAoAKAQCACIAEgAsPAIALgAmADAsAgAcAAoANJACADAAADAEjAAAMcSQAgA0AAAwOIwAADCcuAIADgAUBAIAFAAKADi4EgAuADiMAAAxsKACADwQAAwEAgAmAD4AOLgAAAYAFAQAAAYAOAAEoAYAFBAABAQCABQACgA4uBIALgA4BAIAOAAKADi4EgAmADiMAAAxsIwAADMUoAIAPBAACBQCAC4APgA4oAIAQBAADAQCADoAQgA8uAAABgAUBAAABgA8AASgBgAUEAAEBAIAFAAKADy4EgAuADwEAgA8AAoAPLgSADoAPIwAADMUoAIANBAADAQCABYANgAwBAIAMgASADQMAgAgAAoAOAQCADYAOgA8BAIAKgA6AEA0AgBCACoAOJACADgAADSUuAYAQgBEuBIARgA8DAIAQAAKAEAMAgA8AAoAPIwAADPQuAIAMgAYmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAANWSMAAA1kLgCAA4AFIwAADcsuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAANty4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAANhigBgAUEAAEDAIAGAAKABiMAAA3LJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "_claim_public"
      ]
    },
    {
      "name": "_log_claim",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBIJwAABAMnAgUEBCcCBgQAHwoABQAGgEQdAIBGgEYGLgiARAABLgiARQACLgiARgADLgiARwAEJQAAAF4lAAAAXygCAAEEgEgnAgIEADsOAAIAASYlAAACOB4CAAYAHgIABwAzKgAGAAcACCcCBgEBJAIACAAAAIglAAACYR4CAAYBHgIABwAKKgYHCCQCAAgAAACkJQAAAnMcCgMGACkCAAMAIxDODy0IAQcnAggEBgAIAQgBJwMHBAEAIgcCCC0KCAktDgEJACIJAgktDgIJACIJAgktDgYJACIJAgktDgQJACIJAgktDgMJJwIBAAAtCAECJwIDBAYACAEDAScDAgQBACICAgMtCgMELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBC0IAQEAAAECAS0OAgEnAgIEACcCAwQFJwIEBAEtCgIFIwAAAWQMKgUDAiQCAAIAAAHuIwAAAXYtCwECJwIFBAUGIgUCAScCBwQDACoFBwYtCAEEAAgBBgEnAwQEAQAiBAIGLQ4FBgAiBgIGLQ4FBicCBwQDACoEBwYAIgICBy4CAAeAAy4CAAaABC4CAAWABSUAAAKFACIEAgYtCwYFJwIHBAIAKgYHAjcLAAIABSYAIgcCBgAqBgUILQsIAi0LAQYuAgAGgAMoAIAEBAAGJQAAAssuCIAFAAgAIggCCQAqCQUKLQ4CCi0OCAEAKgUEAi0KAgUjAAABZCgAgAQEeAANAAAAgASAAyQAgAMAAAJgKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQWeoTt9j/vabDwEAgEmAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAALKLgGACIAGLgSABoAJAQCACAACgAgBAIAJAAKACSMAAAKZJi4BgAOABgsAgAYAAoAHJACABwAAAuYjAAAC8S4AgAOABSMAAANYLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAA0QuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAxMoAYAFBAABAwCABgACgAYjAAADWCY=",
      "debug_symbols": "tZfbbuIwEIbfJddc2DM+Da+yQhWlaYUUBZTCSquKd9+ZxJOQSrbYor0hnyf4z5zsxF/NW/t6/Xg59u+nz2b766t5HY5dd/x46U6H/eV46tn61Rj5sYYvbsNX32wjXy2PrRFIDJYBMANahcAgk5xYZJYTS2LwVoEyBNdsAQXYAjIrpgwJFGIGUgtlCxhQCBnEwwm8QlYGcAr5EYCooIJOBcVnYOdBfJ7AZwhGQS1RLXG2UIaECinDGMUIcQI0ViE/FK1R8ApZEAEVsiB6mcXJxCgBkgDfQi4TytMnUAuphbLFSQ4niBmsWqxawCqEDGgUfAanFqcWr7O86gRUkKcDQ0SFmEHqPoFaiONCFKAJvHEKosP18uKzxO6lM0cAn0FcnSBkkM6cQC1e/+PHHN5um0aXw8tlaFtZDXfrg1fNeT+0/aXZ9teu2zS/9911/NPned+P18t+4Lsca9u/8ZUF349dK3TbLLNNeapFJJ1ukcOZJXgZrkRsRcQAqIZxsEiYuJKAsoQjE7OEIxtmiehXClhWSM6lrJBccCWFahhEGoa1VAzDPx1G+L9h+DRXI5WrkSoSPmoYNiCWnKCyAnlZMKMCsdiTYVgoh1FrbrA4a/BeHcrNXWlNXv66QhhTMZRab3rrtai8U5Qk6qEEWEK5L+v3UJ5vT/t8fz5eleSKoVREEsKcUd7BZgmu8SqSSovyCz4rgLmrKq23rJoPcXaB7BIEwVqh0uMoXyWjAmIqK1Sa00aSak3JjARLJtDQw374pBoBfhZJ8LpGQsSyQqU30+wDWVtqK6h0Jkaj9cAIixP8VntcIxn1gjH+TIOM5gLJVjQeSwYUt4uqQDSzQHH/xkpBKYIuUoqeflSQhHNB0t1nwb8lE5Zk4rei7ni4PxyH1aHiJmLDcf/atXn4fu0Pd3cvf856Rw8l5+F0aN+uQytKy8mEf37xSWPDr8Mdf8zKiHPOn0k7Oa3IkDd9PqXI0I5D2vCOtruJa38B",
      "brillig_names": [
        "_log_claim"
      ]
    },
    {
      "name": "_register_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_register_public"
      ]
    },
    {
      "name": "claim_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "claim_shielded",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "storage_read",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "l1_portal",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_contract_class_id",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::contract_class_id::ContractClassId",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "shield_gateway",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "3263449651635518104": {
            "error_kind": "string",
            "string": "Shield gateway address cannot be zero"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "get_config_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6006283915776163582": {
            "error_kind": "string",
            "string": "Function get_config_private can only be called statically"
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "get_config_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "config::Config",
            "fields": [
              {
                "name": "l1_portal",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "shield_gateway",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "token_contract_class_id",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::contract_class_id::ContractClassId",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15520311074722577191": {
            "error_kind": "string",
            "string": "Function get_config_public can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBHJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAAUSUAAABZLgIAAYBELgIAAoBFLgIAA4BGKAIABASARCcCBQQDOw4ABQAEKACAQwQAAyYlAAABwh4CAAIAHgIAAwAzKgACAAMABCcCAgEBJAIABAAAAIIlAAAB6x4CAAIJJwIDAAEKKgIDBCQCAAQAAACeJQAAAf0nAgIAAC0IAQQnAgUEBAAIAQUBJwMEBAEAIgQCBS0KBQYtDgIGACIGAgYtDgIGACIGAgYtDgIGLQgBAgAAAQIBLQ4EAicCBAQAJwIFBAEtCgQBIwAAAPUNIgABgEMABCQCAAQAAAF2IwAAAQotCwIBACoBBQMtCwMCHAoCAwAsAgAEAAAAAAAAAAAAAAAAAP//////////////////////////DioDBAUkAgAFAAABUyUAAAIPJwIDBAIAKgEDBS0LBQQBIgABgEMABS0LBQMtCgIBLQoEAiYcCgEEAAAqAwQGLwoABgAELQsCBi4CAAaAAygAgAQEAAQlAAACIS4IgAUABwAiBwIIACoIAQktDgQJLQ4HAgAqAQUELQoEASMAAAD1KACABAR4AA0AAACABIADJACAAwAAAeoqAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYqAQABBddjOLE8ZnsnPAQCASYqAQABBVoC5Bu1HqmfPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAI8IwAAAkcuAIADgAUjAAACri4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAKaLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAJpKAGABQQAAQMAgAYAAoAGIwAAAq4m",
      "debug_symbols": "tZbRbusgDED/Jc95ABsw7q9M05R12RQpSqusvdLV1H+/psVJMwl0t2kvzQmEU4wN4qN56Z/Pb0/D9Hp4b3YPH83zPIzj8PY0HvbdaThM0vrRmPTDrtm5tmFudtQ21sirNQIWBGwCygA+A8pA6xKkFi/gjIK2eFSIzQ6SMKACZSBQ0JaoLVFb2Cr4G4AxCk6BM1hUyMMBshDSxEAmDyEIgAAlj0vgFZKHBaK7AYJVCBlQu5Bvo9A5BW1JsV8h2Awk36BJIN+gTAPTXyAKsEwDIYG7TcxdA7wCZUi5uEHMAKigLajf4DXAy6VtNNlPp7nvU67vsi81cezmfjo1u+k8jm3zpxvP14/ej910fZ66WXpl1v30Ik8Rvg5jn+jSrqNNeaiVRdLhUivgF4W1W4mtSEyK6uYwDlaFoY0CygrHhrLCsQ2LgvzGgGVDdC5mQ3TBlQzVMJg1DGu5GIb/cRjhd8PwcclGLGcjVhSeNAw5E7A0CS4b2KPLBhbZD8OwUA6jVtxyklh1QIhYLu5KaRJ6nyWEZIuhVGqTwaiCAWJJ8YVQyvu0IoHgNSkQaF0NH7aRVMoTA2gkGOIaiaW4dVAtFlr2GfC6z8B8clQqlCLqsUXRl5NSKVFyy3Ynb8y3FB7CogD6liJYzatgWVFdC1jXIhQPHagUqGWOy45n5rU20PB/WxyxLoeLGMuOygnK5JfD6y4p8Km+oFKjBEteA5QNtQq1DpezJ8Syo5IVT6rwdzVu4xcqw9MSR/hmcTn4seJuNUPx6EKoriavyylbZiN5lLduP8ybe+8l2eahex77/Pp6nvZ3vae/R+3Re/NxPuz7l/PcJ9N6eZafBylLuSM/pruzvEXbxpBebOrClv3jJc3jHw==",
      "brillig_names": [
        "get_config_public"
      ]
    },
    {
      "name": "get_l1_token_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_l1_token_unconstrained"
      ]
    },
    {
      "name": "get_l2_token_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_l2_token_unconstrained"
      ]
    },
    {
      "name": "is_registered_l1_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "is_registered_l1_unconstrained"
      ]
    },
    {
      "name": "is_registered_l2_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "is_registered_l2_unconstrained"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3263449651635518104": {
            "error_kind": "string",
            "string": "Shield gateway address cannot be zero"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "15520311074722577191": {
            "error_kind": "string",
            "string": "Function get_config_public can only be called statically"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "register_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "name_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "decimals",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "8998099065237381256": {
            "error_kind": "string",
            "string": "Expected address did not match supplized token address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18159344801564042747": {
            "error_kind": "string",
            "string": "Token already registered"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "storage_read",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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LqO6+SZhG6TflJu47Zra+icHeW0tjH2Il9bC+EWIV9bC2PeuvPg97i/6eV6c5bHvg3vte9xfBPn697i1I509zkda+mqAeycCX7LeHudn+SdCsCLdbYq/E4J+8zs/PCh+IsSqtWfu7PJWCJaq/GHCy2dCPOxPcXv4BuD1EMK+AXduz44iHry+eirbIK/N/71t6+gL61XtAry01NTU9U8N8eXrIM3YudYf1+1+/XO/Nqs7pj1+WPxuCH8rBBte33G+F8IZiB76VggTdqHr710L5evJ/sMeDG+GeO9Hffw25vF14zMh+Ga9u78ZghMZt/dC1DOk9Pnej9oXe9Dcbm+2Cz6JbW/9qGw/9UPH6esBaJrWnl+HuetlbJN95+bD6IC8/lRQT1o/rArxibOouaPe3/oprLqOzPtbAWY9Gi19L0BNE1n9awEeJ4l86iLS+f1WqfTqoHVdXzyCjz/j/77/3z/825/+9i9//uu//eHvf/rrX/7z/vf+cYT625/+8K9//uP1f//vf/3l3x7+69//3//I//Kvf/vTn//8p3//l//421//7Y//57/+9scj0vHffrtd//O/7i8b83c+1/rfv/tN7v9/6P1R81gO/P7/9fj/94eb390HbPz478df6LP77/o0Of5F/I3b/WZx/5/1v/9xHPL/Bw==",
      "brillig_names": [
        "sync_private_state"
      ]
    },
    {
      "name": "withdraw_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "withdrawNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "burnNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "withdraw_public"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "minter",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shielded_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Portal"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l1_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l2_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "recipient",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            },
            {
              "name": "message_leaf_index",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Deposit"
        },
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "aztec_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Register"
        },
        {
          "fields": [
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Withdraw"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_log_claim_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_log_claim_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_register_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_register_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_shielded_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_shielded_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  },
                  {
                    "name": "shield_gateway",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Portal::get_config_private_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "shield_gateway",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_config_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Portal::get_config_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "shield_gateway",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::contract_class_id::ContractClassId"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_config_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::get_l1_token_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_l1_token_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::get_l2_token_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_l2_token_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::is_registered_l1_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::is_registered_l1_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::is_registered_l2_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::is_registered_l2_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "name_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "decimals",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::register_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::register_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Portal::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "withdrawNonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "burnNonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::withdraw_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::withdraw_public_abi"
        }
      ]
    }
  },
  "file_map": {
    "102": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n"
    },
    "103": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "104": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/events.nr",
      "source": "use super::utils::{compute_event_selector, get_trait_impl_method};\n\ncomptime fn generate_event_interface(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let event_type_id = compute_event_selector(s);\n\n    let from_field = get_trait_impl_method(\n        quote { crate::protocol_types::abis::event_selector::EventSelector }.as_type(),\n        quote { crate::protocol_types::traits::FromField },\n        quote { from_field },\n    );\n\n    quote {\n        impl aztec::event::event_interface::EventInterface for $name {\n            fn get_event_type_id() -> aztec::protocol_types::abis::event_selector::EventSelector {\n                $from_field($event_type_id)\n            }\n        }\n    }\n}\n\npub comptime fn event(s: TypeDefinition) -> Quoted {\n    let event_interface = generate_event_interface(s);\n    s.add_attribute(\"abi(events)\");\n    quote {\n        $event_interface\n    }\n}\n"
    },
    "106": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n"
    },
    "107": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "110": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "112": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "113": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "114": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_tuple().is_some() {\n        let tuple_len = typ.as_tuple().unwrap().len();\n        let mut tuple_quotes: [Quoted] = [];\n        for i in 0..tuple_len {\n            let element_quote = quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name.$i)); };\n            tuple_quotes = tuple_quotes.push_back(element_quote);\n        }\n        tuple_quotes.join(quote {})\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n"
    },
    "115": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "116": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "117": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "119": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::fetch_tagged_logs},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "121": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "122": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "133": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messaging.nr",
      "source": "use crate::{\n    hash::{compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\n};\n\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    merkle_tree::root::root_from_sibling_path,\n};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    leaf_index: Field,\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_l1_to_l2_message_hash(\n        portal_contract_address,\n        chain_id,\n        contract_address,\n        version,\n        content,\n        secret_hash,\n        leaf_index,\n    );\n\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\n    // get from an oracle.\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let (_leaf_index, sibling_path) =\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\n\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert_eq(root, l1_to_l2_root, \"Message not in state\");\n\n    compute_l1_to_l2_message_nullifier(message_hash, secret)\n}\n"
    },
    "143": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "146": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "149": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "150": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "151": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "152": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "153": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "154": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "155": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT};\n\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\n/// its existence.\npub unconstrained fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {}\n"
    },
    "158": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "159": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "161": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    length: u32,\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, length, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    length: u32,\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "162": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    // The log fields length is PUBLIC_LOG_SIZE_IN_FIELDS. + 1 because the contract address is prepended to the content.\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_SIZE_IN_FIELDS + 1>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "164": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::note::{\n    note_interface::NoteType,\n    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}\n\npub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<NOTE_PCKD_LEN>,\n{\n    // N + 3 because of the contract address, nonce, and note_hash_counter that are stored out of the packed note.\n    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        MAX_NOTES,\n        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,\n    );\n\n    let mut notes = BoundedVec::<_, MAX_NOTES>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MAX_NOTES];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "166": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "168": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "170": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "178": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "192": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr",
      "source": "use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse protocol_types::traits::{Serialize, ToField};\n\nfn emit<Event, let N: u32>(context: &mut PublicContext, event: Event)\nwhere\n    Event: EventInterface + Serialize<N>,\n{\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; N + 1];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_public_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32>(\n    context: &mut PublicContext,\n) -> fn[(&mut PublicContext,)](Event) -> ()\nwhere\n    Event: EventInterface + Serialize<N>,\n{\n    |e: Event| { emit(context, e); }\n}\n"
    },
    "193": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "196": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "197": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "199": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "200": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "202": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "204": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "208": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "215": {
      "path": "/home/vscode/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "232": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "234": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "277": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "278": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn to_be_bytes(self) -> [u8; 20] {\n        let field_bytes: [u8; 32] = self.inner.to_be_bytes();\n        let mut bytes = [0; 20];\n        for i in 0..20 {\n            bytes[i] = field_bytes[i + 12];\n        }\n        bytes\n    }\n}\n"
    },
    "280": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "282": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
      "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "286": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/contract_class_id.nr",
      "source": "use crate::constants::GENERATOR_INDEX__CONTRACT_LEAF;\nuse crate::traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField};\n\npub struct ContractClassId {\n    pub inner: Field,\n}\n\nimpl Eq for ContractClassId {\n    fn eq(self, other: ContractClassId) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl ToField for ContractClassId {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for ContractClassId {\n    fn from_field(value: Field) -> Self {\n        Self { inner: value }\n    }\n}\n\nimpl Serialize<1> for ContractClassId {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<1> for ContractClassId {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] }\n    }\n}\n\nimpl Empty for ContractClassId {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n// Implement the Packable trait so ContractClassId can be stored in contract's storage.\nimpl Packable<1> for ContractClassId {\n    fn pack(self) -> [Field; 1] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; 1]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl ContractClassId {\n    pub fn compute(\n        artifact_hash: Field,\n        private_functions_root: Field,\n        public_bytecode_commitment: Field,\n    ) -> Self {\n        let hash = crate::hash::poseidon2_hash_with_separator(\n            [artifact_hash, private_functions_root, public_bytecode_commitment],\n            GENERATOR_INDEX__CONTRACT_LEAF,\n        ); // TODO(@spalladino): Update generator index\n        ContractClassId::from_field(hash)\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "292": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "294": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "295": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "305": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "309": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "311": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "312": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "322": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "333": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "347": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        let len = fields[0] as u32;\n        let mut index = 1;\n\n        for _ in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[index];\n                index += 1;\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let len = self.len();\n        fields[0] = len as Field;\n\n        let mut index: u32 = 1;\n\n        for i in 0..len {\n            let item = self.get_unchecked(i);\n            let serialized_item = item.serialize();\n\n            for j in 0..O {\n                fields[index] = serialized_item[j];\n                index += 1;\n            }\n        }\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "351": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "352": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "368": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "369": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "371": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "377": {
      "path": "/home/vscode/nargo/github.com/noir-lang/sha256/v0.1.3/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\npub(crate) mod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        // Safety: test function\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "381": {
      "path": "/home/vscode/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "394": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        },\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "46": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n"
    },
    "52": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/deposit.nr",
      "source": "use aztec::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    hash::sha256_to_field,\n    traits::{FromField, ToField},\n};\n\n// bytes4(keccak256(\"deposit(address,bytes32,uint256)\")) = 0xeb2243f8\nglobal DEPOSIT_SIGNATURE: [u8; 4] = [0xeb, 0x22, 0x43, 0xf8];\n\npub fn deposit_content_hash(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> Field {\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_deposit(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(DEPOSIT_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = DEPOSIT_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n// For testing purposes, enables printing the ABI-encoded data\npub unconstrained fn field_from_encoded_bytes(encoded: [u8; 100], offset: u32) -> Field {\n    let mut arr = [0; 31];\n    for i in 0..31 {\n        if offset + i >= 100 {\n            break;\n        }\n        arr[i] = encoded[offset + i];\n    }\n    aztec::protocol_types::utils::field::field_from_bytes(arr, true)\n}\n\n#[test]\nfn test_abi_encode_deposit() {\n    let eth_token = EthAddress::from_field(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F);\n    let recipient = AztecAddress::from_field(\n        0x1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863,\n    );\n    let amount = 0x1234567890abcdef1234567890abcdef;\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"deposit(address,bytes32,uint256)\", address(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F), bytes32(hex\"1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863\"), 0x1234567890abcdef1234567890abcdef) =\n    // 0xeb2243f80000000000000000000000002458675deb5e0691da2d2ba8dcaf58cfd2c2651f1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863000000000000000000000000000000001234567890abcdef1234567890abcdef\n    let expected: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_deposit: got: {encoded}\");\n        std::println(f\"test_abi_encode_deposit: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nfn test_deposit_content_hash() {\n    let content: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    // sha256(content) = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883aa8\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883a;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_deposit_content_hash: got: {content_hash}\");\n        std::println(f\"test_deposit_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "54": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/register.nr",
      "source": "use aztec::protocol_types::{address::EthAddress, hash::sha256_to_field, traits::ToField};\n\n// bytes4(keccak256(register(address,string,string,uint8))) = 0x611a7a19\ncomptime global REGISTER_SIGNATURE: [u8; 4] = [0x61, 0x1a, 0x7a, 0x19];\n\npub fn register_content_hash(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> Field {\n    let encoded = abi_encode_register(eth_token, name, name_len, symbol, symbol_len, decimals);\n    let content_hash = sha256_to_field(encoded);\n\n    // Debug log the ABI-encoded data\n    // let field_array: [Field; 9] = aztec::utils::bytes::bytes_to_fields::<260, 9>(encoded);\n    // dep::aztec::oracle::debug_log::debug_log_format(\"ABI Encoded: {}\", field_array);\n    content_hash\n}\n\npub fn abi_encode_register(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> [u8; 260] {\n    // abi.encodeWithSignature(REGISTER_SIGNATURE, tokenAddr, token.name(), token.symbol(), token.decimals())\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the name offset\n    // 0x44 - 32 bytes for the symbol offset\n    // 0x64 - 32 bytes for the decimals\n    // 0x84 - 32 bytes for the name length\n    // 0xa4 - 32 bytes for the name // Limited to 31 bytes\n    // 0xc4 - 32 bytes for the symbol length\n    // 0xe4 - 32 bytes for the symbol // Limited to 31 bytes\n    // Total: 260 bytes\n    let mut encoded = [0; 260];\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let decimals_bytes: [u8; 32] = decimals.to_field().to_be_bytes();\n\n    let name_len_bytes: [u8; 32] = name_len.to_field().to_be_bytes();\n    let symbol_len_bytes: [u8; 32] = symbol_len.to_field().to_be_bytes();\n\n    // Fixed offsets for name and symbol\n    // Offset for the name is 0x80 per the ABI encoding, but 0x84 in the raw data\n    let name_offset_bytes: [u8; 32] = 0x80.to_field().to_be_bytes();\n    // Offset for the symbol is 0xc0 per the ABI encoding, but 0xc4 in the raw data\n    let symbol_offset_bytes: [u8; 32] = 0xc0.to_field().to_be_bytes();\n\n    let name_bytes: [u8; 31] = name.as_bytes();\n    let symbol_bytes: [u8; 31] = symbol.as_bytes();\n\n    for i in 0..32 {\n        // First 4 bytes are the function signature\n        if i < 4 {\n            encoded[i] = REGISTER_SIGNATURE[i];\n        }\n\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = name_offset_bytes[i];\n        encoded[i + 0x44] = symbol_offset_bytes[i];\n        encoded[i + 0x64] = decimals_bytes[i];\n        encoded[i + 0x84] = name_len_bytes[i];\n        encoded[i + 0xc4] = symbol_len_bytes[i];\n\n        // Copy name & symbol\n        if i < name_len {\n            encoded[i + 0xa4] = name_bytes[i];\n        }\n        if i < symbol_len {\n            encoded[i + 0xe4] = symbol_bytes[i];\n        }\n    }\n\n    encoded\n}\n\nunconstrained fn pad_31<let N: u32>(s: str<N>) -> str<31> {\n    let mut padded = [0; 31];\n    let s = s.as_bytes();\n    for i in 0..31 {\n        if i < N {\n            padded[i] = s[i];\n        }\n    }\n    padded.as_str_unchecked()\n}\n\n#[test]\nunconstrained fn test_abi_encode_register() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let name = pad_31(\"Test Token\");\n    let symbol = pad_31(\"TT\");\n    let decimals = 18;\n    let encoded = abi_encode_register(eth_token, name, 10, symbol, 2, decimals);\n\n    // abi.encodeWithSignature(\"register(address,string,string,uint8)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), \"Test Token\", \"TT\", 18) =\n    // 0x611a7a19000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5465737420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025454000000000000000000000000000000000000000000000000000000000000\n    let expected: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_register: got: {encoded}\");\n        std::println(f\"test_abi_encode_register: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nunconstrained fn test_register_content_hash() {\n    let content: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    // sha256(content) = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9f4\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_register_content_hash: got: {content_hash}\");\n        std::println(f\"test_register_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "55": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/withdraw.nr",
      "source": "use aztec::protocol_types::{address::EthAddress, hash::sha256_to_field, traits::ToField};\n\n// bytes4(keccak256(\"withdraw(address,address,uint256)\")) = 0xd9caed12\nglobal WITHDRAW_SIGNATURE: [u8; 4] = [0xd9, 0xca, 0xed, 0x12];\n\npub fn withdraw_content_hash(eth_token: EthAddress, recipient: EthAddress, amount: Field) -> Field {\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_withdraw(\n    eth_token: EthAddress,\n    recipient: EthAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(WITHDRAW_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = WITHDRAW_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n#[test]\nfn test_abi_encode_withdraw() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let recipient = EthAddress::from_field(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439);\n    let amount = 0x1234567890abcdef;\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"withdraw(address,address,uint256)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), address(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439), 0x1234567890abcdef) =\n    // 0xd9caed12000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c700000000000000000000000052b1d2cebf3c80813f82dc4b5f56fcb4e04ac4390000000000000000000000000000000000000000000000001234567890abcdef\n    let expected: [u8; 100] = [\n        0xd9, 0xca, 0xed, 0x12, // Function selector - withdraw(address,address,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Recipient Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439\n        0x52, 0xb1, 0xd2, 0xce, 0xbf, 0x3c, 0x80, 0x81, 0x3f, 0x82, 0xdc, 0x4b, 0x5f, 0x56, 0xfc,\n        0xb4, 0xe0, 0x4a, 0xc4, 0x39,\n        // Amount: 0x1234567890abcdef\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    assert_eq(encoded, expected);\n}\n"
    },
    "56": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/main.nr",
      "source": "mod constants;\nmod encoding;\nmod config;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract Portal {\n    use std::meta::derive;\n\n    use aztec::{\n        event::event_interface::EventInterface,\n        hash::hash_args,\n        macros::{\n            events::event,\n            functions::{\n                initialization_utils::compute_initialization_hash, initializer, internal, private,\n                public, utility, view,\n            },\n            storage::storage,\n        },\n        protocol_types::{\n            address::{AztecAddress, EthAddress, PartialAddress},\n            contract_class_id::ContractClassId,\n            public_keys::PublicKeys,\n            traits::{FromField, Serialize, ToField},\n        },\n        state_vars::{Map, PublicImmutable},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n    };\n\n    use authwit::auth::assert_current_call_valid_authwit_public;\n\n    use token::Token;\n\n    use crate::{\n        config::Config,\n        constants::PUBLIC_NOT_SECRET_SECRET,\n        encoding::{\n            deposit::deposit_content_hash, register::register_content_hash,\n            withdraw::withdraw_content_hash,\n        },\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        config: PublicImmutable<Config, Context>,\n        l1_tokens: Map<EthAddress, PublicImmutable<AztecAddress, Context>, Context>,\n        l2_tokens: Map<AztecAddress, PublicImmutable<EthAddress, Context>, Context>,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Register {\n        eth_token: EthAddress,\n        aztec_token: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Deposit {\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Withdraw {\n        token: EthAddress,\n        from: AztecAddress,\n        to: EthAddress,\n        amount: u128,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(\n        l1_portal: EthAddress,\n        token_contract_class_id: ContractClassId,\n        shield_gateway: AztecAddress,\n    ) {\n        assert(!l1_portal.is_zero(), \"L1 portal address cannot be zero\");\n        assert(token_contract_class_id.to_field() != 0, \"Token contract class cannot be zero\");\n        assert(!shield_gateway.is_zero(), \"Shield gateway address cannot be zero\");\n\n        storage.config.initialize(Config { l1_portal, shield_gateway, token_contract_class_id });\n    }\n\n    #[private]\n    #[view]\n    fn get_config_private() -> Config {\n        storage.config.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_config_public() -> Config {\n        storage.config.read()\n    }\n\n    #[private]\n    fn register_private(\n        eth_token: EthAddress,\n        aztec_token: AztecAddress,\n        name: str<31>,\n        name_len: u8,\n        symbol: str<31>,\n        symbol_len: u8,\n        decimals: u8,\n        message_leaf_index: Field,\n    ) {\n        aztec::oracle::debug_log::debug_log_format(\n            \"Registering L1 token {0} as L2 token {1}\",\n            [eth_token.to_field(), aztec_token.to_field()],\n        );\n\n        assert(storage.l1_tokens.at(eth_token).read().is_zero(), \"Token already registered\");\n\n        let config = storage.config.read();\n\n        // L1->L2 message content hash from token name, symbol, decimals\n        let content_hash =\n            register_content_hash(eth_token, name, name_len, symbol, symbol_len, decimals);\n        aztec::oracle::debug_log::debug_log_format(\"Register content hash: {0}\", [content_hash]);\n\n        // Ensure the supplied token address matches the expected address. This ensures its deployed with\n        // the correct code and initialization parameters.\n        let initializer = Token::interface().init(context.this_address() /* minter */, name, symbol, decimals);\n        let args_hash = hash_args(initializer.args);\n        aztec::oracle::debug_log::debug_log_format(\"Args hash: {0}\", [args_hash]);\n        let init_hash = compute_initialization_hash(initializer.selector, args_hash);\n        aztec::oracle::debug_log::debug_log_format(\"Init hash: {0}\", [init_hash]);\n        let partial_address = PartialAddress::compute(\n            config.token_contract_class_id,\n            0x9876543210, // salt, hardcoded\n            init_hash,\n            AztecAddress::from_field(0),\n        );\n\n        aztec::oracle::debug_log::debug_log_format(\"Computed partial address: {0}\", [partial_address.to_field()]);\n        let computed_address = AztecAddress::compute(PublicKeys::default(), partial_address);\n        aztec::oracle::debug_log::debug_log_format(\"Computed address: {0}\", [computed_address.to_field()]);\n\n        assert(\n            computed_address == aztec_token,\n            \"Expected address did not match supplized token address\",\n        );\n\n        // Set the shield gateway\n        Token::at(aztec_token)\n            .set_shield_gateway(config.shield_gateway)\n            .enqueue(&mut context);\n\n        // Consume the message\n        aztec::oracle::debug_log::debug_log_format(\n            \"Consuming message with leaf index {0} from portal {1}\",\n            [message_leaf_index, config.l1_portal.to_field()],\n        );\n\n        aztec::oracle::debug_log::debug_log_format(\"L1 Portal: {0}\", [config.l1_portal.to_field()]);\n\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            config.l1_portal,\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())._register_public(aztec_token, eth_token).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _register_public(aztec_token: AztecAddress, eth_token: EthAddress) {\n        // Initialize the token mappings\n        storage.l1_tokens.at(eth_token).initialize(aztec_token);\n        storage.l2_tokens.at(aztec_token).initialize(eth_token);\n        Register { eth_token, aztec_token }.emit(encode_event(&mut context));\n    }\n\n    #[private]\n    fn claim_public(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        let config = storage.config.read();\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            config.l1_portal,\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())\n            ._claim_public(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _claim_public(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_to_public(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .call(&mut context);\n    }\n\n    #[private]\n    fn claim_shielded(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        let config = storage.config.read();\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            config.l1_portal,\n            message_leaf_index,\n        );\n\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_shielded(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _log_claim(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Deposit { eth_token, recipient, amount, message_leaf_index }.emit(encode_event(\n            &mut context,\n        ));\n    }\n\n    #[public]\n    fn withdraw_public(\n        eth_token: EthAddress,\n        from: AztecAddress,\n        recipient: EthAddress,\n        amount: u128,\n        withdrawNonce: Field,\n        burnNonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(withdrawNonce == 0, \"Invalid nonce\");\n        }\n\n        let config = storage.config.read();\n\n        // Burn the tokens\n        Token::at(storage.l1_tokens.at(eth_token).read()).burn_public(from, amount, burnNonce).call(\n            &mut context,\n        );\n\n        // Message the L1 Portal\n        let content_hash = withdraw_content_hash(eth_token, recipient, amount.to_field());\n        context.message_portal(config.l1_portal, content_hash);\n\n        aztec::oracle::debug_log::debug_log_format(\"Withdraw L2ToL1 Message {0}\", [content_hash]);\n\n        Withdraw { token: eth_token, from, to: recipient, amount }.emit(encode_event(&mut context));\n    }\n\n    #[utility]\n    unconstrained fn is_registered_l1_unconstrained(eth_token: EthAddress) -> pub bool {\n        !storage.l1_tokens.at(eth_token).read().is_zero()\n    }\n\n    #[utility]\n    unconstrained fn is_registered_l2_unconstrained(aztec_token: AztecAddress) -> pub bool {\n        !storage.l2_tokens.at(aztec_token).read().is_zero()\n    }\n\n    #[utility]\n    unconstrained fn get_l2_token_unconstrained(eth_token: EthAddress) -> pub AztecAddress {\n        storage.l1_tokens.at(eth_token).read()\n    }\n\n    #[utility]\n    unconstrained fn get_l1_token_unconstrained(aztec_token: AztecAddress) -> pub EthAddress {\n        storage.l2_tokens.at(aztec_token).read()\n    }\n}\n"
    },
    "58": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "66": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "67": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let N: u32, T> UtilityCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n}\n\nimpl<let N: u32> UtilityVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: () }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n"
    },
    "74": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "75": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "76": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "77": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "79": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/event/event_interface.nr",
      "source": "use dep::protocol_types::abis::event_selector::EventSelector;\n\npub trait EventInterface {\n    fn get_event_type_id() -> EventSelector;\n\n    fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n}\n"
    },
    "81": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "93": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "98": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    }
  }
}
