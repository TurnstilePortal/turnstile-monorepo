{
  "transpiled": true,
  "noir_version": "1.0.0-beta.5+0000000000000000000000000000000000000000",
  "name": "Portal",
  "functions": [
    {
      "name": "_claim_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBNJwAABAMnAgUEBCcCBgQAHwoABQAGgEkdAIBLgEsGLgiASQABLgiASgACLgiASwADLgiATAAEJQAAAF4lAAAApygCAAEEgE0nAgIEADsOAAIAASwAgEMAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAoAIBEBAADKACARQEAACgAgEYEAAAoAIBHAQABKACASAQAASYlAAAGyB4CAAUAHgIABgAzKgAFAAYAByQCAAcAAADLJQAABvEeAgAFAR4CAAYACioFBgckAgAHAAAA5yUAAAcDJwIFAAAtCAEGJwIHBAQACAEHAScDBgQBACIGAgctCgcILQ4FCAAiCAIILQ4FCAAiCAIILQ4FCCsCAAcAAAAAAAAAAAIAAAAAAAAAAC0IAQgnAgkEBQAIAQkBJwMIBAEAIggCCS0KCQotDgUKACIKAgotDgUKACIKAgotDgUKACIKAgotDgcKLQgBBwAAAQIBLQ4GBy0IAQYAAAECAS0OCAYtCAEIAAABAgEuDIBGAAgtCAEJAAABAgEuDIBFAAknAgoAAycCCwQMLQgADC0KBw0tCgYOLQoIDy0KCRAtCgoRAAgACwAlAAAHFS0CAAAnAgoECy0IAAstCgcMLQoGDS0KCA4tCgkPLQoBEAAIAAoAJQAABxUtAgAALQsJCgsiAAqARQALJAIACwAAAh4nAgwEADwGDAEnAgoECy0IAAstCgcMLQoGDS0KCA4tCgkPAAgACgAlAAAIPi0CAAAtCwcKLQsGCy0LCAwtDgoHLQ4LBi0ODAguDIBHAAkBIgALgEgABy0LBwYKKgYFBwsiAAeARQAFJAIABQAAAoklAAAJUS8KAAYABScCBwQAJwIJBAMAKgcJCC0IAQYACAEIAScDBgQBACIGAggtDgcIACIIAggtDgcIJwIIBAMAKgYIBy0LBgcAIgcCBy0OBwYnAggEAScCCgQDACoICgktCAEHAAgBCQEnAwcEAQAiBwIJLQ4ICQAiCQIJLQ4ICScCCQQDACoHCQgtCggJLQ4CCScCCQQKLQgACi4IgEYACy0KBgwuCIBIAA0tCgcOAAgACQAlAAAJYy0CAAAtCgsCLQoMCC0LCAkAIgkCCS0OCQgcCgMJAAAiAgIDLgIACIADKACABAQAASUAAAoyLgiABQAKLgiABgALLQ4JCy0LCgIAIgICAi0OAgopAgACAEUbX64AIgMCCC4CAAqAAygAgAQEAAElAAALsi4IgAUACy4IgAYADC0OAgwAIgsCCi0LCgMnAgwEAgAqCgwCOQOggEOAQwAFAAMAAiACAAIhAgADLQgBCAAiCAIMLQsMCycCDQQCACoMDQoiMgADgEYACi0KAwsnAg0EAwAqCw0MAAgBDAEnAwgEAQAiCAINLQ4LDQAiDQINLQ4LDS0KCwUGIgUCBSQCAAIAAARvIwAABEYtCwgCACICAgItDgIIACIIAgotCwoDJwILBAIAKgoLAjwOAwIjAAAEbwsiAAWARgACJAIAAgAABIgnAgMEADwGAwEeAgACAC0LBgMAIgMCAy0OAwYnAgUEAScCCgQDACoFCggtCAEDAAgBCAEnAwMEAQAiAwIILQ4FCAAiCAIILQ4FCCcCCAQDACoDCAUtCgUILQ4BCCcCCAQKLQgACi4IgEYACy0KBgwuCIBIAA0tCgMOAAgACAAlAAAJYy0CAAAtCgsBLQoMBS0LBQMAIgMCAy0OAwUtCwcDACIDAgMtDgMHJwIIBAotCAAKLQoBCy0KBQwuCIBIAA0tCgcOAAgACAAlAAAJYy0CAAAtCgsDLQoMBi0LBgEAIgECAS0OAQYAIgMCAS4CAAaAAygAgAQEAAElAAAKMi4IgAUABS4IgAYABy0OCQctCwUDACIDAgMtDgMFACIBAgMuAgAFgAMoAIAEBAABJQAACjIuCIAFAAYuCIAGAActDgQHLQsGAQAiAQIBLQ4BBikCAAEAHHPsyQAiAwIELgIABoADKACABAQAASUAAAuyLgiABQAFLgiABgAHLQ4BBwAiBQIGLQsGAycCBwQCACoGBwE5A6CAQ4BDAAIAAwABIAIAASECAAItCAEEACIEAgctCwcGJwIIBAIAKgcIBSIyAAKARgAFLQoCBicCCAQDACoGCAcACAEHAScDBAQBACIEAggtDgYIACIIAggtDgYILQoGAwYiAwIDJAIAAQAABq4jAAAGhS0LBAEAIgECAS0OAQQAIgQCBS0LBQInAgYEAgAqBQYBPA4CASMAAAauCyIAA4BGAAEkAgABAAAGxycCAgQAPAYCASYoAIAEBHgADQAAAIAEgAMkAIADAAAG8CoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJioBAAEFYhv5fegPMcY8BAIBJiUAAAbILQsEBgsiAAaARQAHJAIABwAABzcnAggEADwGCAEtCwMGCyIABoBEAAckAgAHAAAHyiMAAAdQLQsDBi0LAQctCwIILQsECQ0iAAaARAAKJAIACgAAB3UlAAANLC4CAAeAAygAgAQEAAQlAAANPi4IgAUACgAiCgILACoLBgwtDgUMASIABoBIAAUOKgYFByQCAAcAAAe1JQAADcwtDgoBLQ4IAi0OBQMtDgkEIwAACD0nAgYEBy0IAActCgEILQoCCS0KAwotCgQLAAgABgAlAAAIPi0CAAAtCwEGLQsCBy0LBAguAgAGgAMoAIAEBAAEJQAADT4uCIAFAAkAIgkCCgEiAAqARgALLQ4FCy0OCQEtDgcCLgyASAADLQ4IBCMAAAg9JiUAAAbILgiARgAFIwAACE4NIgAFgEQABiQCAAYAAAi+IwAACGMtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAACNQjAAAJQC0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADT4uCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAJQAEiAAWASAAGLQoGBSMAAAhOKgEAAQUC3G4ngHYSnTwEAgEmJQAABsgtCAEGAAABAgEtDgEGLQgBAQAAAQIBLQ4CAS0LBAIAIgICAi0OAgQuCIBGAAUjAAAJmgwqBQMCJAIAAgAACb0jAAAJrC0LBgItCwEDLQoCAS0KAwImJAIAAgAACcolAAANLCcCCAQDACoECAcAKgcFCC0LCAItCwYHLQsBCC0LCAkAIgkCCS0OCQgAIgcCCS4CAAiAAygAgAQEAAElAAAKMi4IgAUACi4IgAYACy0OAgstDgkGLQ4KAQEiAAWASAACLQoCBSMAAAmaLgGAA4AHAQCAAwACgAsuAYALgAgBAIALAAKACy4BgAuACQEAgAsAAoAKAQCACIAEgAsPAIALgAmADAsAgAcAAoANJACADAAACoEjAAAK8SQAgA0AAAqOIwAACqcuAIADgAUBAIAFAAKADi4EgAuADiMAAArsKACADwQAAwEAgAmAD4AOLgAAAYAFAQAAAYAOAAEoAYAFBAABAQCABQACgA4uBIALgA4BAIAOAAKADi4EgAmADiMAAArsIwAAC0UoAIAPBAACBQCAC4APgA4oAIAQBAADAQCADoAQgA8uAAABgAUBAAABgA8AASgBgAUEAAEBAIAFAAKADy4EgAuADwEAgA8AAoAPLgSADoAPIwAAC0UoAIANBAADAQCABYANgAwLAIADgAWADSQAgA0AAAupAQCACoAIgA8uAIAKgBAuAIAMgBELAIAQgA+AEiQAgBIAAAupLgGAEIAOLgSADoARAQCAEAACgBABAIARAAKAESMAAAt4AQCADIAIgAYmLgGAA4AHAQCAAwACgAsuAYALgAgBAIALAAKACy4BgAuACQEAgAsAAoAKAQCACIAEgAsPAIALgAmADAsAgAcAAoANJACADAAADAEjAAAMcSQAgA0AAAwOIwAADCcuAIADgAUBAIAFAAKADi4EgAuADiMAAAxsKACADwQAAwEAgAmAD4AOLgAAAYAFAQAAAYAOAAEoAYAFBAABAQCABQACgA4uBIALgA4BAIAOAAKADi4EgAmADiMAAAxsIwAADMUoAIAPBAACBQCAC4APgA4oAIAQBAADAQCADoAQgA8uAAABgAUBAAABgA8AASgBgAUEAAEBAIAFAAKADy4EgAuADwEAgA8AAoAPLgSADoAPIwAADMUoAIANBAADAQCABYANgAwBAIAMgASADQMAgAgAAoAOAQCADYAOgA8BAIAKgA6AEA0AgBCACoAOJACADgAADSUuAYAQgBEuBIARgA8DAIAQAAKAEAMAgA8AAoAPIwAADPQuAIAMgAYmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAANWSMAAA1kLgCAA4AFIwAADcsuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAANty4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAANhigBgAUEAAEDAIAGAAKABiMAAA3LJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrbbhs5DIbfxde50JlSXqUoirRNFwGCtMgmCyyKvPuSFH+OHWAE187eJJ/p0T+kRFGH5Pfh+/3X17++PDz9+Pn34fbT78PX54fHx4e/vjz+/Hb38vDzia2/D0F+REqH23LDv+lwS/y78+cYGAZ/H6NAn5BCZigCYuGHUxRLF+gGqRnkeLhNVaAZlACoBhWWCkuDpRVAN6AMIANxdYK8ot0cciCDGAH4KsGSYMmw5AoYBqUAukHNALyiJYAIcrdkCoAKGAY9A7rBSABrXkIEkEGEJeKZJK1IgAwyLNrPAtrPCgXQDSoerni4RQAshOYahcIw0CgU8PaB5gMPD3u4hgKARbIlDQFunjnHaqoGOQO6QWFXcxQggxoBFTAMWgbgYUJzgqWjeUfzjuYDzYc93EIE2MNNxiIngWGQpFUV6AYyBArS8xP44SLNxeeSGSTDJ8BCsFABDIMOS4dFXJ3QJ1BIADKIsEjaKEjyT5CXciJRDgBYCizi/IRhUGGpsEiHT+gGWkcUyKDDItNTQUpKqQIVMCb0UAGwRFgiLKkAYJG0mUAGJQLQvAaANG8CaN4gSHiGoKPOK3SDgYe157nEDe15BTKQJKmcvSMFQDXI+EoyXKFkwDCoeFg8rJxjQzyc0A2kDE6AReZgLQLSvAlIc/YnBinZRh0k6WFEoOS2XJxcpbituK26rbqt+duav41cmRpIurKSUjeK6ukk9qrJChTFU6MGklQ2cpvkcJOlKkqfTpJqYdRAMvdaUZIWTWmAZPoZsVdNfZGKZ+S24TYpF0pJUsHIbdFt6r2Sej+pgmQqGm22AdKIulIHSRk3cltzW3MbuU3yelJ3m0zLSTIvjYoTVHLITohN11cjxJYTVLLGNmmAsqtk+JI9tlzc5rHpSjtJFikjV26uTK5C7rNHmburDDxXQnCCnq61RmhRkts8opK9bS5O8KUUf87jKB5Hae6Be1/EewpKBBLvjbh3KQnJ5Faq4r0RvtWl1aiDpFxOyt5CfKaiNEAyCkYdVN0m+wKSWVGlSFJXYpUelDpIZooRgWSPYwRbk/o+KRYntyW3Jbdlt2W8rZXs5Moy4ydJ79IQ0t6d1EHSuz0pEUhqqFEzogAbRY68Z6UOkuozSSq7Utdv5yZa3iF91aXvjTpIvZ9EIPVe/Osya0dQaqAenIpTBw08N0Jx4j4Yun2XhXSSeGVEIJmXRh1U3Cb+DekDXZsmSRU16iDpZyNvIRsuI28r9WVkpTEp6RplRCCZjUbVyVuk4uS27CrZVYqryLwcenSRfjbqIJmXRgMkOT5J8sXI+jmFEZysx1MMsOnKNORgErX/mpC+d1IFaU9OKjNzkq5Hk6RPjTqou627bbhtwKZHNSPo6WHNiEBS4Yyqk7fI3kJzQyJKsi8falPvJxWLI2n/KZHbxPtJ2pN6SpSZN2m4TbN4yIlRZp5RdYJyjui/rPk8Cf2s64wR3qvrjJE/5+ORfTxy9Xc0tC2yb+oy+kXWcyMCaf9NqiCd8ZNkVPXEq3NfSef+PAW7TeZ517fJPJ808FzVOjSpgaLbotuS29SXSQOUXU/mxyQZSyN4oKcsIwJpdk4aIDkdTureom82f07jaG9vNwdcPnx5eb6/l7uHo9sIvqP4dfd8//RyuH16fXy8Ofxz9/iqD/396+5Jf7/cPfO3PL/un77zbxb88fB4L/R2s7UO+0155zHQXPYZ1SV4H3oiEhcivFWGRijpSKKdSKR9icLnBZPg83NzCSonCnlfoRc5bahCL63sKSzDkFk1w+B97G4Y9eow2v8bRu0+Gn1/NPpCgm8IINFy3nNi7CsM3lWZwmCxK8Pgk8FuGKvk5vLuGrzGtP3kXqRmDR0zhLHvhrLKzRorBpU3nnsS61Ba2kI5GdZ3oVyfnvH6/Dx/VHrZDWUhwttUaPA90DYotZ5GMlalryFF+Xxz5EU79SKtYpGrBZXgbZcr5JxOFRZpTnyjZBJEYxsSPnWeaiwyNFekRjkaVN5onSosEpS3SRGB8O5oX6Ms5klCIMcp/kcKA9nZYr0sjtThBO+O0mUaFH1QaRVJ/381+MjmKzOf1C7TIMrQoJEu0+BjEzRG2tdYzrXi48In6rY71/JiXPhOGDnKB81tUeLV4VRjkWG8UU6eH+loiecl6oLKM47KxrvKkxc1lP9MguWAN9V914tMqypK3qNpHM3Y8E5jMbLUMzKMeIna3XQtBpaaz3pqbXdxLKsayvc4nqR8Q9MuWFNab9ug5LQ3KCWtplso257nqIxSO1sjtejlpx3tevg29myN5sW8tSOF8AeRjG3Sj76vcW5/Hu2b3vcnLXfTrfk+dBwt862dL8IbBNp2gaXuiixyNIeCwsFn5930Wkv40pQlIXYk6nI/G8nreeBT90V+ZB8XPsqnXT/yyg/Knh6B/4x1kR/FKwf/XXh3e1/ryo8etvzo+7vitR8xbn7slp+6zlPfnDPXfpEfNaF45Lroj9USyZfx24GnpN1T13q+5F42kaMdUDv71MTLLPqDQq57c79df5pv1x/nl3F4QafQdteEVs+TiEcZ+gcS5y4JK43zloRwfRyr9GzFZytvTF2itPMlzi3mFK8u5muJs4o55Q8o5ks/zivmVD+gmC/9OK+YE31AMV/7cVYxp/EBxXzpx3nFvMcPKObr+XJ9Mee/vm6XHJV2d7Uria2Cyd8i92Z+uLp2hDNvmNv+3cDymOFZzp3ZL5PY7uD4j5MXSWSvPZIiF0nUFLazNF0m0bbjeB+XBbLdCuR0WSB5y81cLwqECgaESrtEYJTq19QXBbHtdEa6zAPPqUH1yhDeC3zmj3ffHp5P/sf1TaSeH+6+Pt7bxx+vT9+Ovn359xe+wf/I/nr++e3+++vzvSht/yjLPz5xSbhppX6+ORT+VGO4qU0+VfnEJ8CWAn+S/xb4lPlCI5ckH6O05KrQSv/8Jo7+Bw==",
      "brillig_names": [
        "_claim_public"
      ]
    },
    {
      "name": "_log_claim",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBIJwAABAMnAgUEBCcCBgQAHwoABQAGgEQdAIBGgEYGLgiARAABLgiARQACLgiARgADLgiARwAEJQAAAF4lAAAAXygCAAEEgEgnAgIEADsOAAIAASYlAAACOB4CAAYAHgIABwAzKgAGAAcACCcCBgEBJAIACAAAAIglAAACYR4CAAYBHgIABwAKKgYHCCQCAAgAAACkJQAAAnMcCgMGACkCAAMAIxDODy0IAQcnAggEBgAIAQgBJwMHBAEAIgcCCC0KCAktDgEJACIJAgktDgIJACIJAgktDgYJACIJAgktDgQJACIJAgktDgMJJwIBAAAtCAECJwIDBAYACAEDAScDAgQBACICAgMtCgMELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBAAiBAIELQ4BBC0IAQEAAAECAS0OAgEnAgIEACcCAwQFJwIEBAEtCgIFIwAAAWQMKgUDAiQCAAIAAAHuIwAAAXYtCwECJwIFBAUGIgUCAScCBwQDACoFBwYtCAEEAAgBBgEnAwQEAQAiBAIGLQ4FBgAiBgIGLQ4FBicCBwQDACoEBwYAIgICBy4CAAeAAy4CAAaABC4CAAWABSUAAAKFACIEAgYtCwYFJwIHBAIAKgYHAjcLAAIABSYAIgcCBgAqBgUILQsIAi0LAQYuAgAGgAMoAIAEBAAGJQAAAssuCIAFAAgAIggCCQAqCQUKLQ4CCi0OCAEAKgUEAi0KAgUjAAABZCgAgAQEeAANAAAAgASAAyQAgAMAAAJgKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQWeoTt9j/vabDwEAgEmAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAALKLgGACIAGLgSABoAJAQCACAACgAgBAIAJAAKACSMAAAKZJi4BgAOABgsAgAYAAoAHJACABwAAAuYjAAAC8S4AgAOABSMAAANYLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAA0QuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAxMoAYAFBAABAwCABgACgAYjAAADWCY=",
      "debug_symbols": "tZfdjuIwDIXfpddcxHZ+eZUVGjFMZ4RUFdSBlVYj3n3tNm7pSInYQXtDv7jk1Cd2Av1q3trX68fLsX8/fTbbX1/N63DsuuPHS3c67C/HU8/Rr8bIBxi+2A1fXbMNfAUegxGIDMCAlIFAwTPIJCsRmWUlEhkcKKQM3jZbJAGOoMwKMUNEhZAhaSTlCBpU8BkkwwmcQlZGtAr5EUikoIJWBSVn5ORRcp7AZfBGQSNBI2GOpAyRFGKG0cUIYQIyoJAfSmAUnEIWJCSFLEhOZvFiUhCDSYBvEZeJ5OkTaCRpJOWIlTWcIGQAjYBGEBR8BjIKLoPViNWI01lOdTwpyNORIZBCyCB1n0AjiX0RCaQJnLEKosP1cpKzeHfSmSOgyyCpTuAzSGdOoBGn33HjGt5um0a3w8tlaFvZDXf7g3fNeT+0/aXZ9teu2zS/9911/NLned+P18t+4Lvste3f+MqC78euFbptltmmPBWIkk4HYjuzBJi0EoGKiEFUDWPxTsKvJLAsYZMJWcIm8LNEsCsFKitEa2NWiNbbkkLVRkpqAyAVbbinbfj/a8PFuRqxXI1YkXBBbYAnKiWRygrJyYYZFRKLPWkDsGyj1twINGvwWe3LzV1pTd7+ukMYY9FKrTcdOC0qnxQliboVj4uVVVm/WXm+PeH5/ny8KtEWrVREInrSNPhHapZwbu2k0qL8A58V0NxVNa6PrFoOYS5qgsUE80qh0uOEaoIolhUqzQkhSbWmxQwJl94iEx/Ow0XV8PgzJ97pHvGBygqV3oxzDgmg1FZY6UwKRutBAZckyMHjGtFoFozhZxrJ6FpQgorGY4uBxeOiKhDMLFA8v6lS0BRQN2kKLv2oIJHmgsS7vwX/tpi4LCZ9K+qOh/vDcVi9VNxEbDjuX7s2D9+v/eHu7uXPWe/oS8l5OB3at+vQitLyZsIfv/hNY8M/hzv+MysjXnP+m7STtxUZ8qHPbykyhHGYNnyi7W6S2l8=",
      "brillig_names": [
        "_log_claim"
      ]
    },
    {
      "name": "_register_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_register_public"
      ]
    },
    {
      "name": "claim_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "claim_shielded",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "storage_read",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "l1_portal",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "token_contract_class",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "shield_gateway_beacon",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "get_l1_portal",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_l1_portal"
      ]
    },
    {
      "name": "get_l1_token",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_l1_token"
      ]
    },
    {
      "name": "get_l2_token",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_l2_token"
      ]
    },
    {
      "name": "is_registered_l1",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "vb3druzKbXD7Lvs6F80iWT9+lQ8fAidxAgOGHTjOAQ6CvPtpUSJHr7nctXr2nD433sN7r8UhqYuUVFWq+p/f/u0P//Lf//HPf/zzv//lv3773f/5n9/+5a9//NOf/vgf//ynv/zr7//2x7/8+f5v/+e32/E/0u7/0H+6/1N++50f/2y//W4c/9TffreOf9pvvxM5wBN6wkiYCesCvSVIQkvQhIysGVkzsmZkzciakS0jW0a2jGwZ2TKyZWTLyJaRLSNbRvaM7BnZM7JnZM/InpE9I3tG9ozsGbln5J6Re0buGbln5J6Re0buGbln5J6RR0YeGXlk5JGRR0YeGXlk5JGRR0YeGXlm5JmRZ0aeGXlm5JmR5xG5HTASZsK6YN0SJOGIfDS+dUQ+Wt+yBE/oCSNhJqwT2u2WIAktQRPukVs7wBN6wkiYCesCuSVIQkvQhIwsGVkysmRkyciSkVtGbhm5ZeSWkVtGbhm5ZeSWkVtGbhlZM7Jm5CMHmx+gCZbgCT1hJMyEdcGRgydIQka2jGwZ2TKyZWTLyJaRLSN7RvaM7BnZM7JnZM/InpE9I3tG9ozcM3LPyD0j94zcM3LPyD0j94zcM3LPyCMjj4w8MvLIyCMjj4w8MvLIyCMjj4w8M/LMyDMjz4w8M/LMyDMjz4w8M/LMyCsjr4x85GCbB2iCJXhCTxgJM2GdoEcOniAJLUETLMET7pG1HTASZsK64MjBEyShJWiCJXhCRpaMLBlZMnLcA/0ASWgJmmAJntATRsJMWBdoRtaMrBlZM/KRg7oO8ISeMBJmwrrgyMETJKElaEJGtoxsGdkysmVky8iekT0je0b2jOwZ2TOyZ2TPyJ6RPSP3jNwzcs/IPSP3jNwzcs/IPSP3jNwz8sjIIyOPjDwy8sjIIyOPjDwy8sjIIyPPjDwz8szIMyPPjDwz8szIMyPPjDwz8srIKyOvjLwy8srIKyOvjLwy8srI64pst1uCJLQETbAET+gJI2EmZGTJyJKRJSNLRpaMLBlZMrJkZMnIkpFbRm4ZuWXklpFbRm4ZuWXklpFbRm4ZWTOyZmTNyJqRMwctc9AyB+3IQZMDZsK64MjBEyShJWiCJXhCT8jIlpEtI3tG9ozsGdkzsmdkz8iekT0je0b2jNwzcs/IPSP3jNwzcs/IPSP3jNwzcs/IIyOPjDwy8sjIIyOPjDwy8sjIIyOPjDwz8szIMyPPjDwz8szIMyPPjDwz8szIKyOvjLwy8srIKyOvjLwy8srIKyOvK7LfbgmS0BI0wRI8oSeMhJmQkSUjS0aWjCwZWTKyZGTJyJKRJSNLRm4ZuWXklpFbRm4ZuWXklpFbRm4ZuWVkzciakTUja0bWjKwZWTNy5qBnDnrmoGcOeuagZw565qBnDnrmoGcOeuagZw565qBnDnrmoGcOeuagZw565qBnDnrmoGcOeuagZw565qBnDnrmoEcO+gGe0BNGwkxYF0QOBkhCS9CEjDwy8sjIIyMfOejtgHXBkYMnSEJL0ARL8ISeMBIy8szIKyOvjLwy8srIKyOvjLwy8srIKyOvK3I/ctDtAEloCZpgCZ7QE0bCTFgXSEaWjCwZWTLykYPuB3hCTxgJM2FdcOTgCZLQEjQhI7eM3DJyy8hHDvo8YF1w5OAJ98j9dkBL0ARL8ISeMBJmwrrgyMETMrJlZMvIlpGPHOx6QE8YCTNhXXDk4AmS0BI0wRIysmdkz8iekY8c7Mevc+TgCZLQEjTBEjyhJ4yEmZCRR0YeGXlk5JGRR0YeGXlk5JGRR0YeGXlm5JmRZ0aeGXlm5JmRZ0aeGXlm5JmRV0ZeGXll5JWRV0ZeGXll5JWRV0ZeV+RxuyVIQkvQBEvwhJ4wEmZCRpaMLBlZMrJkZMnIkpElI0tGlowsGbll5JaRW0ZuGbll5JaRW0ZuGbll5JaRNSNrRtaMrBlZM7JmZM3ImpE1I2tGtoxsGdkysmVky8iWkS0jW0a2jGwZ2TOyZ2TPyJGD/QBL8ISeMBJmwrogcjBAElpCRu4ZuWfknpF7Ru4ZuWfkkZFHRh4ZeWTkkZFHRh4ZeWTkkZFHRp4ZeWbkmZFnRp4ZeWbkmZFnRp4ZeWbklZFXRl4ZeWXklZFXRl4ZeWXklZHXFXnebgmS0BI0wRI8oSeMhJmQkSUjS0aWjCwZWTKyZGTJyJKRJSNLRm4ZuWXklpFbRm4ZuWXklpFbRm4ZuWVkzciakTUja0bWjKwZWTOyZmTNyJqRLSNbRraMbBnZMrJlZMvIlpEtI1tG9ozsGdkzcubgzBycmYMzc3BmDs7MwZk5ODMHZ+bgzBycmYMzc3BmDs7MwZk5ODMHZ+bgzBycmYMzc3BmDs7MwZk5ODMHZ+bgzBycmYMzc3BmDs7MwZk5ODMHZ+bgzBycmYMzc3BmDs7MwZk5ODMHZ+bgzBycmYMzc3BmDs7MwZk5uDIHV+bgyhxcmYMrc3BlDq7MwZU5uDIHV+bgyhxcmYMrc3BlDq7MwZU5uDIHV+bgihxcB6wLIgcDJKElaIIleEJPGAkZuWVkzciakY8cHLcDNMESPKEnjISZsC44cvAEScjIlpEtI1tGtoxsGdkysmVkz8iekT0je0b2jOwZ2TOyZ2TPyJ6Re0buGbln5J6Re0buGbln5J6Re0buGXlk5JGRR0YeGXlk5JGRR0YeGXlk5JGRZ0aeGXlm5JmRZ0aeGXlm5JmRZ0aeGXll5CMHhx3QEjTBEjyhJ4yEmbBOkNuRhBdJUSs6oo8gK/KiXjSKZtFKOtLxIilqReWQckg5pBxSDimHlKOVo5WjlaOVo5WjlaOVo5WjlaOVQ8uh5dByaDm0HFoOLYeWQ8uh5bByWDmsHFYOK4eVw8ph5bByWDm8HF4OL4eXw8vh5fByeDm8HF6OXo5ejl6OXo5ejl6OXo5ejl6OXo5RjlGOUY5RjlGOUY5RjlGOUY5RjlmOWY5ZjlmOWY5ZjlmOWY5ZjlmOVY5VjlWOVY5VjlWOVY5VjlWOlQ653YqkqBVpkRV5US8aRbOoHJXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J5LpXnUnkuledSeS6V51J53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzxvleet8rxVnrfK81Z53irPW+V5qzyPOUPzFjSLVtKR5xdJUSvSIivyol5UjlGOUY5ZjiPPZwtqRVpkRV7Ui0bRLFpJR55fVI5VjlWOVY5VjlWOVY5VjpWOmFR0kRS1Ii2yIi/qRaNoFpVDyiHlkHJIOaQcUg4ph5RDyiHlaOVo5WjlaOVo5WjlaOVo5WjlaOXQcmg5tBxaDi2HlkPLoeXQcmg5rBxWDiuHlcPKYeWwclg5rBxWDi+Hl8PL4eXwcng5vBxeDi+Hl6OXo5ejl6OXo5ejl6OXo5ejl6OXY5RjlCPyXIO0yIq8qBeNolm0kiLPT5KicsxyzHLMcsxyzHLMcsxyrHKscqxyrHKscqxyrHKscqxyrHTExKWLpKgVaZEVeVEvGkWzqBxSDimHlEPKIeWQckg5pBxSDilHK0crRytHK0crRytHK0crRytHK4eWQ8uh5dByaDm0HFoOLYeWQ8th5bByWDmsHFYOK4eVI/J8BM2ilXTk+boFSVEr0iIr8qJeNIpm0Urq5ejl6OXo5ejl6OXo5ejl6OXo5RjlGOUY5RjlGOUY5RjlGOUY5RjlmOWY5ZjlmOWY5ZjlmOWY5ZjlmOVY5VjlWOVY5VjlWOVY5VjlWOVY6YjJURdJUSvSIivyol40imZROaQcUg4ph5RDyiHlkHJIOaQcUo5WjlaOVo5WjlaOVo5WjlaOVo5WDi2HlkPLoeXQcmg5tBxaDi2HlsPKYeWwclg5rBxWDiuHlcPKYeWoPPfKc68898pzrzz3ynOvPPfKc68898pzrzz3ynOvPPfKc68898pzrzz3ynOvPPfKc68898pzrzz3ynOvPPfKc68898pzrzz3ynOvPPfKc68898pzrzz3ynOvPPfKc68898pzrzz3ynOvPPfKc68898pzrzz3ynOvPPfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzzvlee98rxXnvfK81553ivPe+V5rzwfleej8nxUno/K81F5PirPR+X5qDwfleej8nxUno/K81F5PirPR+X5qDwfleej8nxUno/K81F5PirPR+X5qDwfleej8nxUno/K81F5PirPR+X5qDwfleej8nxUno/K81F5PirPR+X5qDwfleej8nxUnsd8sKVBVuRFvWgUzaKVFHl+khS1onJ4ObwcXo7IcwuaRSsp8vwkKWpFWmRFXtSLytHL0csxyjHKMcoxyjHKMcoxyjHKMcoxyjHLMcsxyzHLMcsxyzHLMcsxyzHLscqxyrHKscqxyrHKscqxyrHKsdIRE8kukqJWpEVW5EW9aBTNonJIOaQcUg4ph5RDyiHlkHJEnnvQSoo8P0mKWpEWWZEX9aJRVI5WDi2HlkPLoeXQcmg5tBxaDi2HlsPKYeWwclg5rBxWDiuHlcPKYeXwcng5vBxeDi+Hl8PL4eXwcng5ejl6OXo5ejl6OXo5ejl6OXo5ejpiHs/1Sflh60FH5BlkRV7Ui0bRLFpJcfQnSVErKkcvRy9HL0cvRy9HL8coxyjHKMcoxyjHKMcoxyjHKMcoxyzHLMcsxyzHLMcsxyzHLMcsxyzHKscqxyrHKscqxyrHKscqxyrHuhwtZvlcJEWtSIusyIsOxwoaRbNoJUWVOkmKWpEW3R1yuwX6gRrYwQFOcBUetSpRwAYqaCC2hq1ha9hi2Y6bxTIJN1DABipoYNh6YAcHOMFVGIt5XChgAxU0EJuhiBU9buPAcwWPuOrnGh4nKmigg8ehSwQ7V/M4cYKr8FzT40QBG6iggQ5i69g6to5tYBvYBraBbWAb2Aa2gW1gO1f+iMt3rv1xooANVNBABzs4wAliW9gWtoVtYVvYFraFbWFb2GKFEDkSPKYGJQrYQAUNdLCDA5zgYWty4FEmEgVs4GGLFRRiotB90DPQwQ4OcIKrMEqFWqCAh0174GE7Fh1o53I+kS3ngj564gAnuAqjPlwYihBHfbhQQQMd7OAAJ3jY7EjIc7GfCwU8bNYCD5tp4GGzOLeoDxd2cIATXIVRKix+iygVF1phpLTH7xYpfaGDHRzgBFdhpPSFAjYQ28A2sA1sA9vANrBNbBPbxDaxTWwT28Q2sU1sE9vCtrAtbAvbwrawLWwL28K2ynYu+3OhgA1U0EAHOzjACWITbIJNsAk2wSbYBJtgE2yCrWFr2Bq2hq1hiyx0DTTQwTgGDxzgBFdhZOGFAjZQQQMdxGbYIgt9BK7CWIbrQgEbqKCBDnZwgNjiNu5HRYyZPokCNlBBAw/b8Tlri/k+iQOc4CqMnL9QwAYqaCC2gW1gG9giu3s0gsjuCxU00MEODnCCqzCy+0JsC9vCtrAtbAvbwrawrbLF3J9EARuooIEOdnCAE8Qm2ASbYBNsgk2wCTbBJtgEW8PWsDVsDVvD1rA1bA1bw9awKTbFptgUm2JTbIpNsSk2xWbYDJthM2yGzbAZNsNm2AybY3Nsjs2xOTbH5tgcm2NzbB1bx9axdWwdW8fWsXVsHVvHNrANbAPbwDawDWwD28A2sA1sExu1RKklSi1RaolSS5RaotQSpZYotUSpJUot0bOWtEAFDXSwgwOMEn88tdn5eHCigA1U0EAHOzjACWITbIJNsAk2wSbYBJtgE2yCrWFr2Bq2hq1ha9gatoatYWvYFJtiU2yKTbEpNsWm2BSbYjNshs2wGTbDZtgMm2EzbIbNsTk2x+bYHJtjc2yOzbE5to6tY+vYOraOrWPr2Dq2jq1jG9gGtoFtYBvYBraBbWAb2Aa2iW1im9gmtoltYpvYJraJbWJb2Ba2hW1hW9gWtoVtYVvYqCVOLXFqiZ8PIx6ooIFRrnpgBwc4wVV4PoycGMUxbOfDyIkKhm0EOtjBw3Z8V9liKlPiKoxaMlqggIdtaKCCBh62EacZteTCAYYtjiFqyYlRSy4UsIEKRtw4zagP4+gniElLMuPQoz5c2EAFj+OdcUJRHy7s4AAnGLajFyWmLyUKGLY4zagPFxoYtvPPdnCAE1yFUR8ujHOLRhD14UIFDXSwgwOc4CqM+jDjUkd9uLCBChroYAcHOMFVOLFFfZjRjKI+XKiggQ52cIATDFs0mKgPFwrYQAUNdLCDA5xg2WLCU6KADVTQQAc7OMAJYhNsgk2wCTbBJtgEm2ATbIKtYWvYGraGrWFr2Bq2hq1ha9gUm2JTbIpNsSk2xabYFJtiM2yGzbAZNsNm2AybYTNshs2xOTbH5tgcm2NzbI7NsTm2jq1j69g6to6tY+vYOraOrWMb2Aa2gW1gG9gGtoFtYBvYBraJbWKb2Ca2iW1im9gmtomNWtKpJZ1a0qklnVrSqSWdWtKpJZ1a0qklnVoyqCWDWjKoJYNaMqglg1oyqCWDWjKoJYNaMs5asgIP22qBDVTQQAc7OMAJrsKoJRdia9gatoatYWvYopYc04laTLhKXIVRSy4UsIER1wMjggWuwqgPawQK2EAFDXSwgwMMW/wAUR9OjPpwYdjiZ4n6cKGCBt5tLcaaYzLVvTM8cBXGGugXCtgOjOsQK6HHiG5Mqbp3kQdG3DjeWA/9FkcWK6LfQhxrol+4CmNd9AsPW4yxxtSqRAUNPGwSP2wsjS5xOLE4usThxPLoMWYZ86paDLrFxKoWY2oxsypRQQMd7OAAD1ssmR8TrC6MnD9bSeT8hQoaSIuKnL9wgBNciTHBKlHABsYJWaCBDsYJnX92gBNcheeuBicK2EAFDXQQm2A7dzmYgavw3OlgBAoYth4YcVdgBwc4wSOuHg0mJlolCtjAeJOIvxZPChc62MEBTrDeOmLKVaKAdk4pajHB6t7HG9jBAU5wFcbGB8di9C2mWSU2UEEDHezgAMOmgaswCsGFYYufLQpBDBTHlKsWw7wx5yrRwQ4OcBZGyschRMafpEVW5EU9KdIvxnpjZa4LY8+CCwVsoIIGOtjBAWJbZYv1uhIFbKCCBjrYwQFOEJtgE2yCTbAJNsEm2ASbYBNsDVvD1rA1bA1bw9awNWwNW8Om2BSbYlNsik2xKTbFptgUm2EzbIbNsBk2w2bYDJthM2yOzbE5Nsfm2BybY3Nsjs2xdWwdW8fWsXVsHVvH1rF1bB3bwDawDWwD28A2sA1sA9vANrBNbBPbxDaxTWwT28Q2sVFLFrVkUUsWtWRRSxa1ZFFLFrVkUUsWtWRRS1bVEr1VLdFb1RK9VS3RW9USvVUt0VvVEr1VLdFb1RK9VS3R2w2bYBNsgk2wCTbBJtgEm2ATbA1bw9awNWwNW8PWsDVsDVvDptgUm2JTbIpNsSk2xabYFJthM2yGzbAZNsNm2AybYTNsjs2xOTbH5tgcm2NzbI7NsXVsHVvH1rF1bB1bx9axdWwd28A2sA1sA9vANrANbAPbwDawTWwT28Q2sU1sE9vENrFNbBPbwrawLWwL28K2sC1sC9vCRi0RaolQS4RaItQSoZYItUSoJUItEWqJUEuEWiLUEqGWCLVEqCVCLRFqiVBLhFoi1BKhlgi1RKglQi0RaolQS4RaItQSoZYItUSoJUItEWqJUEuEWiLUEqGWCLVEqCVCLRFqiVBLhFoi1BKhlgi1RKglQi0RaolQS4RaItQSoZYItUSoJUItEWqJUEuEWiLUEqGWCLVEqCVCLRFqiVBLhFoi1BKhlgi1RKglQi0RaolQS4RaItQSoZYItUSoJUItEWqJUEuEWiLUEqGWCLVEqCVCLRFqiVBLhFoi1BKhlgi1RKglQi0RaolQS4RaItSSRi1p1JJGLWnUkkYtadSSRi1p1JJGLWnUkkYtadSSRi1p1JJGLWnUkkYtadSSRi1p1JJGLWnUkkYtadSSRi1p1JJGLWnUkkYtadSSRi1p1JJGLWnUkkYtadSSRi1p1JJGLWnUkkYtadSSRi1p1JJGLWnUknOjxGMKtZ5bJV64Cs+U1kABG6iggQ4eJ+RBo2gWhSrwzOcTBQzVCFTwUHmcwrmT4okdHOAEV+G5p+KJAjZQQWwT28Q2sZ17LErgKjz3WTxRwAYqeNhmkBf1olE0i9ZF5x6Lx543eu6peEzy1Zj42I69aDQmPiZOcBVGdh6TWzUmPiY2UEEDwzYCOzjAsK3AVRjZeeFhO6Z9aUx8TDxsPU4osvNCB/u1eeO5/eJJs2glxe5vJ0lRRIxLFLnW4wpErh3zNTSmMV4YuXahgHGkcYKRaxca6GAHR+35OItWUmy8GIcSOy+e1Iq0yIq8KCTRFiK3L5yFkcUXxmHGxY98vfC4oHFNYp/Fk2bRcUVG/DSRrxcKeFyREX828vXCQzXiCCNfL+zgcbAjTj/ydUSrinwdcckiX49JHBrTERMbqKCBDnZwgJFFceiRrzNaRuTrjEM/90GNgzwzMw7yTM0TOzjACa5EO3dFPTGC9UAHOzjACa7CSNUL46+NwAFOcBVGzh2DfRpzBdsx2KeWO7yp5RZvarnHm1pu8qaWu7yp5TZvarnPm1pu9KaWO72p5VZvaloOLYeWQ8uh5dByaDm0HFYOK4eVw8ph5bByxEPysQ6CWm10arXTqdVWp1Z7nVptdmq126nVdqdW+51abXhqteOp1ZanVnueWm16arXrqdW2p1b7nlptfGq186nV1qdWe59abX5qtfup1fanVvufxsy9dgyZaszcS1yFkWsrGkvk2jE4qjFzr61oN5FVK4LF7qW3uKSxf+kt/mzsYHqhgsfJ3aLBxj6mF3ZwgBNciTHvLlHAsFmgggYetmMsUWOG3f0eFrgKYz9TiT8bO5pe2EAFjb/mYAcHiE2wxR6nFwqooJ377+m5u+JJvWgUzaKVFDc6OVHABjoYhxfXMDYUPr6S1JhQlyhgAxU00MEOxsWYgRNchZF9sgIFbOBhO8ZjNSbUJTrYwQFOcBVGHl4oYAOxdWwdW8fWsXVsHVtkZIt2Fyl5YQMjbvzmsfdwixYWew1fGIcTP1bsLtzix4r9hS/sYESIqx67DF94HI7G4UT+xX085p9pPDLE/LNEBzsYzwEeOMFVGNlzoYANVDDi9sABTjDiHoceM80SBWygggY62Atjj1+dgQY62MEBTjCO7GiTMU8sUcAGKmhgPKfdAjs4wAketrhX9fPhrwXG01/8hOfj34kOdnCAE1yFkQwWv3Ekw4UNDFv8bpEMFzoYtrg6kQwXTnAVRjJcKGADFQxbXLNIkXgzilleGm83McsrsYEKHkcWrz8xnytxgqsw7mEXCthABY8ji1elmM+V2MEBzsSYxKXH544ak7gSI1gPjMM5WmpMttJjRrnGZCuN96OYbJXo59aiGnOtLhpFs2glxW6iJ0lRK9KiQ3J8QKgxxyqxgwOc4CqM28+FAjYw4kpgRGiB69yvVGOK1UVS1Iq0yIoiogZ2cIATXIVx47nwuMzx9hdLUmm83MWaVInHjTYONDbvDYrde0+SolakRXFN45eNzLmwgwOc4CqMHIl3tpgVpfGiFotOna3kuHVcNIuOCxp/O3bsPUmKWpEWWdEhide5mBeVOAojYS48Lt2IE43UuNDB4zCjiccOvSfNonVRTHm6SIqOE483yJjwlGiggx0c4ARXYdywLhQQm2CLvIs305jwlNjBsI3ACYbt+CliwpMe84M0JjxpvG3GhKdEBQ9bvHjGNKjEwxbvoDENSuMN8tzS8Ba0kmJDtZOkqBVpUUSMixy3tXg1jElNGu+DMakpsYHxEhER4rZ2oYMdHIXnG1ac4Pk61QIjQpzg+UJ1YgcHOMFVeL5VnShgA8MWF+58szrRwbDF5Txfrk6c4Co836/imp0vWCc28Li84Y39DE/yorsqit25peFJs2glxa6GJ0lRSOI3invchQY6OAvjbhavbDE/KjEixO8ZKXuhg/3cClBrI0OtnQy1tjLU2stQazNDrd0MtbYz1NrPUGtDQ60dDbW2NNTa01BrU0OtXQ21tjXU2tdQa2NDrZ0NtbY21NrbUGtzQ11Sjtju/pgmqzERKlHAo5jfWqCCBh4vZ/GGGROhEo/Xs2OarMZEqMRVGF0jFwoYthmoYNhWYPRdxJGdHSQSOMAJRh9JHOTZSXKigO3cb1FjHtRFVuRFvWgkeUTUwOhjidP26GTxQAc7OMA40jjtuJ+eGDfUCwVs4N024gLEpgtxBLmAo57LoEX4WAbtJCs6jqnFX45t7i8c4ARX4byBAjZQQQOxTWwT28Q2wxY/27qBAjZQQQN7XoNctlFXLtuoMQHJjtdNiwlIiQI2UEED42wssIMDjLPxwFWY+yrYLfdVsFvuq2Ax5ei461jMOLqoF0XwHjjBVRgpe6GADYxTiWCRshc6eFy1W9AomkUrKRdqtVsu1Gq3XKjVbrlQq91yoVa75UKtdtNyaDm0HFoOK4eVw8ph5bByWDmsHFYOi2s2A1dhJO6Fcc1WYAMVNNDBDg5wgqvwfD4+EVvHFo/IGsd73JwTHezgACe4Co+bc6KAh+3o/LCYWZRo4HEZoz3G6ognjaJZtJJidcSTImJkSCS5nv82jjTSIpL8wlUYSX5hHGk010jyCxU00MGwxe+4BjjBlRjzhBIFbKCCh+3ofbCYJ2RH74PFPCE7+gMs5gklTnAVHnfrRAEbqKCBDmITbIJNsDVsDVvD1rA1bA1bw9awNWwNm2JTbIpNsSk2xabYFJtiU2yGzbAZNsNm2AybYTNshs2wOTbH5tgcm2NzbI7NsTk2x9axdWwdW8fWsXVsURmOLiiLeUKJYeuBqzAqw4UChm0FKmiggx0c4ARXYTwweORQPDBceCg80imeEi50sIPRvd8CJ7gKo4BcKFl35CwgJypooIMdHOAEV+K5j+ItSIus6B70GMG1cx/Fk0ZRHP8ZZhVGkbhQwAYqeJgkyIt6UVyqUEWFuHAV5oaKVhsqWm2oaLWhotWGilYbKlptqGi1oaLVhopWGypabahotaGi1YaKVhsqWm2oaLWhotWGilYbKlptqGi1oaI1K4eVI2rB0QNmMc8n0cBoXj2wgwOc4CqMWnChgA1UMGxxOFELLuzg3TajpcS+ayetpNh37SQpakURcQbGka7A40h7/IHI7AsFbOBxpMcbtMWMoUQHOzjAw9aj/UVmnxiZfaGcO7hZ7aJotYui1S6KVrsoWu2iaLWLotUuila7KFrtomi1i6LVLopWuyha7aJotYui1S6KVrsoWu2iaLWLosVKanb0dlqspGZHJ6PF1KFEBQ10sIMDnOAqjGy/EJtgE2yCLR4Jjj5PiwlFiQOc4CqMR4ILj7hRpfSctxc0i46/NOKCxJ39QgEbqKCBDnbwOMSj69BiJlHiKow7e9THmEmU2EAFw+aBEbcHTnAVRt5eGHHjKkTeHp2PFjOHLFIrpg7Z2Roib+OVLCYP2Qxx3MMvnOAqjHv4jCOLe/iFDVQwbPGzxo17xuHEjTteV2J+kR39gxYTjCyer2OCka04oUjvCxuooIEOdjBscQyR3idGTp9tJO7WFzYwFHG8ceO+0MGje/t2/tkBTnAVHsmdKGADFTTQQWwLW3Sn3+KaRX96YMw18qOjymK9s8SwSWDEtcAODnCCEff4NWPaUaKADdQs1rGyWaKDHRzgBFdhJPSFcXV6oIEOdjDOYgROcBXqDYzOpjjNc4bSiQoa6GAHBzgLY/zq6MazmJWUqKCBDnYwziJO3ia4Cv0GCnjEPXoKLWYlucTPfeSxSzSCI48vPPI48Ygg0XaOPE48jvc8oW6gg8fxSvzyfYATXIXjBgrYwLDFTzgMdLCDA5zgujq6LWYsXdchhrku5OrMiBuNIPL4wgFOMM4irm/k8YUCHrYWlzry+EIDD1v0qMWcp8QBhi0OPfL4mBhiMefJ454Vc548OtdizlOighG3Bw5wgqsw8ji6wmJ209lKYnZTooMdnIUxmrVObKCCdg32WExkSuzgACe4CmM4+UIBGxgXdQZ2cIATjJM/fqyY45QoYAP1GhWzc47ThQ52cIATXIUx/nWhgHaNoto5m+nC4yyi9ypmMyVOcBVG8kZHVsxmSmygggY62K+BWjtnM104wVUY418XCthABQ10MM7ixFUYA9QXChhnERkQyXuhgQ72a1TczklQF05wFcbY9YUCNlDB+C0i9SJNL5zgSowlv/yY42Sx5FdiAxU00MEODjBsPXAVRvJeKGDYRqCCBjqYEx3snIh14QRXYYxgXyhgAxU0MOJKYJzFDFyFcRO+MM5iBcbElBaooIEOdnCAE1yFkfPHzCeL6VkeXUnnRKx+/oH4s3HocWO9UMAGRoS46nG7vdDBDg5wgqswxrHPY4hx7AsbqKCBDnIW53SSE2dh3G4tfvm43Vpc9bjdXmigg3EW8bPE7fbCCcbEnaMaxfSsRAEbqKCBDh626AWLSVuJEwxbnFDchC8UsIEKGuhg2KI9RHZfOMGwHa0k5m8lCthABQ10MGweOMAJhu34hWIRLo+H3liEy6M3I+aFeaRTzAtLNNDBmHWjgTHtJo4h7t2Rm+fcsBNjctiFAoYtDicevOOlOiaIeRTHmCCW2MEBxrn1wFUYOX+hgDnnzWLrw0QDHezgACe4CmNGy4Ux0ymuZDx4X+hgB4+ziPtxTB5LXIVRHy4UsIEKGuhgxG2BqzDu6BdG3PgJ445+oYIGOhhx4+eOnI/eg5hClqiggQ7GlOITBzjBVXhOVT5RwAYqaGBc3/jlI7svXIWR3RfGWURDjIyNfo1zMtmFE4wIR+s755NdKOBxxtEHEnPHPPpAYu6YRx9IzB07r0PMHUtchZGbFwrYwIhrgR0c4ARjHvxxmucssQsFbKCCBjrYwVEYn6RG8p7LYl3YwKM9zPPPGhhncf6BDg4wziIuatxjT4x77IXH1Yn3gJhBlqiggQ4ethVXJ7LwwgmuwsjCCwVsoIIRN36h+L41alTMFfPoIYq5YokGxpGNwA7GkcV1iHy7cBXGi270EMVcscQGKmiggx08pt5EV885YezCVRhTxi4UsIFaZ3zcY3t0AM05wAmuwhVxI0WWgA1U0K4vKO1cauvCDg5wgivxXGrrQgGPWUnRo3XOHruwgwOMszj/2iqMKWQXCtiu72PtXFTrQgMd7OAAJ7gKYy5m3PJjoleigA1U0EAHOzjACWIzbBY2D2ygggY62MGIe7T1mO6VKGADFTQwpuFJYAcHOMGY7nc0o5gEliigV9zewQFOkEMfHPqQso0GKmiglzgmbV44Cme0ybhQ08EODnCCq/DMrBMFbKCC2FbYemAHBzjBdaHHvK9EARuooIEOdnAUxqTLoxPVYxJXP3otPWZxJQ5wgquwxZGtwOMYjn45jwlbiQ52cIATXIWRekcvlcesrcQGKmiggx0MWwuc4CqM1LtQwAYqaGAoNHCAE1yFkYUXCthABQ10EJtjiyw8OnI95m5dGFl4oYANVNBAfqzOj9X5sTo/VmTh0enrMTWrS7SoyMILHexgBIsmF/fCC1dh3AsvFLCBChroYAexTWwT28K2sC1skccSbT3yODBmRM2jMHnMiEo08BjV9fPPHsO6x8ugx4yoxAmuwiOd5vG26DEjKrGBCh5xj4LnMctpHqXNY5ZTooBaf/bIlnm8WXpMbUrs4AAnuArtBobCAxuoYNh6oIMdDJsFTnAV+g3khLyBChroYAcHOEEuX+fyRV6c4siLCzs4wAmuwrh9XShgAxXENrANbAPbwDawTWwT28Q2sUXinD9hJM6FHRzgBFdhJM6FAjZQQWwL28K2sC1sq2ztdgMFbKCCBjrYwQFOEJtgE2yCTbAJNsEm2ASbYBNsDVvD1rA1bA1bw9awNWwNW8Om2BSbYlNsik2xKTbFptgUm2EzbIbNsBk2w2bYDJthM2yOzbE5Nsfm2BybY3Nsjs2xdWwdW8fWsXVsHVvH1rF1bB3bwDawDWwD28A2sA1sA9vANrBNbBPbxDaxUUsataRRSxq1pFFLGrWkUUsataRRSxq1pFFLGrWkUUsataRRSxq1RKklSi1RaolSS5RaotQSpZYotUSpJUotUWqJUkuUWqLUEqWWKLVEqSVKLVFqiVJLlFqi1BKllii1RKklSi1RaolSS5RaotQSpZYotUSpJUotUWqJUkuUWqLUEqWWKLVEqSVKLVFqiVJLlFqi1BKllii1RKklSi1RaolSS5RaotQSpZYotUSpJUotUWqJUkuUWqLUEqWWKLVEqSVKLVFqiVJLlFqi1BKlluhZSzwwbDNQQQMd7OAAJ7gKz1pyooDYJraJbWKb2Ca2iW1iO2vJChSwgQoa6OBhO/r4PeZoJU7wsB099B5ztPrRbewxRyuxgQoa6GAHBzjBVSjYBJtgE2yCTbAJNsEm2ARbw9awNWwNW8PWsDVsDVvD1rApNsWm2BSbYlNsik2xKTbFZtgMm2EzbIbNsBk2w2bYDJtjc2yOzbE5Nsfm2BybY3NsHVvH1rF1bB1bx9axdWwdW8c2sA1sA9vANrANbAPbwDawDWwT28Q2sU1sE9vENrFNbBPbxLawLWwL28K2sC1sC9vCtrCtsjm1xKklTi1xaolTS5xa4tQSp5Y4tcSpJU4tcWqJU0ucWuLUEqeWOLXEqSVOLXFqiVNLnFri1BKnlji1xKklTi1xaolTS5xa4tQSp5Y4tcSpJU4tcWqJU0ucWuLUEqeWOLXEqSVOLXFqiVNLnFri1BKnlji1xKklTi1xaolTS5xa4tQSp5Y4tcSpJU4tcWqJU0ucWuLUEqeWOLXEqSVOLXFqiVNLnFri1BKnlji1xKklTi1xaolTS5xa4tQSp5Y4tcSpJU4tcWqJU0ucWuLUEqeWOLXEqSVOLXFqiVNLnFri1BKnlji1xKklTi1xakmnlnRqST9ryQhU0EAHOzjAw3YMv3tMZrswasmFh+0YG/eYzJaooIEOdnCAE1yFUUsuxNawNWwNW8PWsDVsDVvDptgUm2JTbIpNsSk2xabYFJthM2yGzbAZNsNm2AybYTNsjs2xOTbH5tgcm2NzbI7NsXVsHVvH1rF1bB1bx9axdWwd28A2sA1sA9vANrANbAPbwDawTWwT28Q2sU1sE9vENrFNbBPbwrawLWwL28K2sC1sC9vCtsoWU+cSBWygggY62MEBThCbYKOWDGrJoJYMasmglgxqyaCWDGrJoJYMasmglgxqyaCWDGrJoJYMasmglgxqyaCWDGrJoJYMasmglgxqyaCWDGrJoJYMasmglgxqyaCWDGrJoJYMasmglgxqyaCWDGrJoJYMasmglgxqyaCWDGrJoJYMasmglgxqyaCWDGrJoJYMasmglgxqyaCWDGrJoJbE5Lt+zGPyWL/twqglFwrYQAUNdLCDA8Q2sE1sE9vEFrXk+MTOY0peooMdHOAEV2HUkgsFbCC2he18LjmxgwOc4Eqc53PJiQI2UEEDHezgACeITbAJNsEm2ASbYBNsgk2wCbaGrWFr2Bq2hq1ha9gatoatYVNsik2xKTbFptgUm2JTbIrNsBk2w2bYDJthM2yGzbAZNsfm2BybY3Nsjs2xOTbH5tg6to6tY+vYOraOrWPr2Dq2jm1gG9gGtoFtYBvYBraBbWAb2Ca2iW1im9gmtoltYpvYJraJbWFb2Ba2hW1ho5ZMasmklkxqyaSWLGrJopYsasmilixqyaKWLGrJopYsasmilixqyaKWLGrJopYsasmilqwz5yUwbLfACa7CM7tPFLCBChroYAexKTbFZtgMm2EzbIbNsBk2w2bYDJtjc2yOzbE5Nsfm2BybY3NsHVvH1rF1bB1bx9axdWwdW8c2sA1sA9vANrANbAPbwDawDWwT28Q2sU1sE9vENrFNbBPbxLawLWwL28K2sC1sC9vCtrBFdh/Tvfs55fGYrN3PKY8XNlBBAx3s4AAnuAoFm2ATbIItsvuYJd7PSZMXdnCAE1yF8aRwTGXvsfZdYgNzCKqfMyUvnOAqPEvFiQK2Y4WfW6CCBvqB55/t4ADngS1wFcZCNhcK2EAFDXSwgwPEZtg8bNEePGwrsIEKGuhgBwc4wVXYbyC2jq1j69g6to6tY+vYOraBbWAb2I5SMSR+rKNUJDrYwQFOcBUepSJRwAZim9gmtoltYpvYJraFbWFb2Ba2hW1hW9gWtoVtlS2WyEsUsIFhk0ADHezgACe4CuUGCtjA+LNH+43pnIkCZqdvlxr26FLDHl1q2KNLDXt0qWGPLjXs0aWGPbrUsEeXGvbootgUm2JTbIpNsSk2xWbYDJthM2yGzbAZNsMWleCY29xjFuiFUQkuFLCBChroYAcHmN0LPeZ7DoljiJS+sIMDnOAqjJS+UMAGKohtYBvYBraBbWCb2Ca2iW1iOzN2Bk5wFZ4Ze6KADVTQQAc7eNiOxXH7ufrcsV5FP5efu9BABzs4wAmuwsjCCwXEJtgEm2ATbIJNsAm2hq1ha9gatliK7liWo59r0V3YwQFOcBXGgnQXCthABbEpNsWm2BSbYjNshs2wGTbDZtgMm2EzbIbNsTk2x+bYIo+PlT96TNFM7OAAJ7gK445+oYANVPCwaTTaSP8LOzjAw6bxc0f6nxjpf6GADVTQQAc7OEBsA9vENrFNbBPbxDaxTWwT28Q2sUV90PhZoj5c2EAFDXSwgwOc4EqMKZqJAjZQQQMd7OAAJ4hNsAk2wSbYBJtgE2yCTbAJtqglx5oZPaZoJjZQQQMd7OAAJ7gKo2oc6wD3mGA5LI4hKsGFqzAqwYUCNlBBAx3sIDbDZtgcm2NzbI7NsTk2x+bYHFtUAovrEJXgQgEbqKCBDnZwgBPENrANbAPbwDawDWwD28A2sA1sE9vENrFNbBPbxDaxTWwTW1SCY8GQHhMsEwVsoIIGOtjBAU7wsB0LhvSYYJkoYAMP2/HNVY8JlokOdnCAE1yFUQkuFLCB2ASbYBNsgk2wCbaGrWFr2Bq2hi0qwfFpWY8JlokDnOAqjKeKCwVsoIIGYlNsik2xKTbDZtgMm2EzbIbNsBk2w2bYHJtjc2yOzbFFLTk+vOsxwTJxgBNchVFLLhSwgQoaeMTt0Wijaly4CqNqXChgA4+4x8dpPaZSJh5ncczm7jGVMjFsFjjBsB2vBDGVMjFsPbCBYYsmF1XjwrDF5YuqcWHY4jSjaly4CqNqHJ18PaZSJh626LCKqZSJh23EuUXVuPCwjTi3qBoXHrYR5xZVIzCmUo54nYyplIlh64EKhm0EOhi2GTjAw3ZMdOoxlfLCqBoXCthABQ10sIMDxCbYGraGrWFr2Bq2hq1ha9gatoZNsSk2xabYFJtiU2yaQ9/9nEp54Sq0GyhgAyPuiXG8LTCON37NqAQXCthABQ10sIMDnCC2jq1j69g6to6tY+vYOraOrWMb2KI+zGipUR8uVLCDESHab+T8hQI2UEEDHezgACd42I45Aj2mPCYK2EAFDXSwgwOcYNliymOigA1U0EAHOzjACWITbJHzMWgRUx4TFTTQwQ4OcIKrMHL+QmwNW8PWsDVsDVvD1rA1bIpNsSk2xabYFJtiU2yKTbEZtnhSiBGQmPKYqKCBDnZwgBNchVEfLgzbCmygHsvX3wLtQAnMyTX9nPJ44QAnuAr7DRSwgQoaiK1jO+rDvJ04wVV41IdEARuooIEOdjBs8bOMCa7CeQMFbGBEmIETXIWxVv6FAjYwjjd+llgvPzCmG87o2I/phokOHmdxrDbRY7ph4gRX4ZHHiQI2UEEDHcQm2ASbYGvYGraGrWFr2Bq2hq1ha2EbgaswloK4UMAGKmiggx0cIDbFZtgMm2EzbIbNsBk2w2bYDJtjc2yOzbE5Nsfm2BxbrAoRvdgx3fDCWBXiQgEbqKCBDnZwgIftWFy6x3TDGT3IMd0wUcAGKmiggx0c4ASxTWwT28Q2sU1sE9vENrFNbBPbwnZukBFX/dwh40QFDXSwgwOc4EqM6YaJAjZQQQMd7OAAJ4hNsAk2wSbYBJtgE2yCTbAJtoYtakn0Ysd0w0QFDXSwgwOc4CqMWnJhTmnqMYVwRpd4TCFMnOAqjPpwoYANVNBAB7EZNsNm2BybY3Nsjs2xOTbHFvXhWFa8xxTCGV3iMYXwwqgPFwrYQAUNdLCDA8TWsQ1sA9vANrANbAPbwDawDWwDW9SH6LqOKYSJDVTQQAc7OMAJrsKFbWFb2Ba2hW1hW9gWtoVtlS2mECYK2EAFDXSwgwOcILaoD9Etv86tNU9soIIGOtjBAU5wFUZ9OJbI7rEnbmIDFTTQwQ4OcIKrULEpNsWm2BSbYlNsik2xKTbDZtiilhyre/eYsJhooIMdHOAEV2HUkgsFxObYHJtjc2yOzbE5to6tY+vYOraOrWPr2Dq2jq1jG9gGtqglx9LmPSYsJhroYAcHOMFVGLXkQgHDFikSVePCDkbcFTjBI+6x7niPqYmJAh5xY5QgpiYmGuhgBwc4wXXhiKmJiQI2UEEDHezgACeITbAJNsEm2ASbYDsXoGuBA5zgKoyqcaGAMZXnxAimgQOcYASzA6MoXChgAxU00MEODnCC2CL9j9VPR0xCnMfC5CMmISY62MEBTnAVnl2KcfJnl+KJDVTQQAc7OAqj9c043mh9Fw7wOJyjD2/EbLcTY7ZbooANVNBABzs4wAliE2zRoo5OvnEuXnisEj3OFQvPfxsN5tgQbJwrFh5dtuNcsfBCAx3s4AAneBzOsVvMOFc3vFDAsGlg2CwwbB4Yth7Y69CjRV3ICUUzGiGOZnShgQ52cIATXIVxF7lQwLDFWcRdZMRZxF3kQgc7GLY4zbiLXLgK4y5yoYANVNDAiBvXLO4MI65Z3A5GNIK4HYz4ueN2cKGDHVyFUeJHXN94XLwwmmc0mCjxMy5JlO1IkZh0lmhgNMS4DmfinDjACUZTPs6tnYlzouQfaGfinKiggZ7XISaoJQ5wFkaBjjOOqWjnacZUtEQrPFfGHIEOdvBQ9PPPTnAVni3qFihgKzxXdo0/G18utPPfTnAVxpcLFx5dlbc4hvhy4UIFDXSwgwOc4Co8Fzw/EdvENrFNbBPbubJrnFt8rnD0ooxz+bgLW51QfJhwoYEOHod+7OE1zuXjLpxgXKijPZzLx10oYNnO5eMuNNDBDg5wgvWznMvHXSggNkER3xIcfSvjXPHtQgUNdLCDA5zgKowpxhdiiynGx/vxOFd8u9BABzs4wAmuwhgOvFBAbIbNsBk2w2bY4gskjWsW3xodW2mNcxW3Y8+mca7idmEHBzjBVRjd/RcK2EAFsXVsHVvH1rF1bAPbwDawDWwD28A2sEXGavyakbEXrsLIzQsjwgjs4AAnuArj+6ELBWygggYeNosfK9LU4ngjTS+c4Eo8V2a7UMAGKmiggx0c4ASxCTbBJtgEm2ATbIJNsMX3Q8db0jhXZjsxvh+6UMAGKmiggx0cILaGTbEpNsWm2BSbYlNsik2xKTbDZtgMm2EzbIbNsBm2+BbxeJ0c58psJ0YluFDABipooIMdHGAojgeBczm2CwUMxQpU0EAHOzjACa7CKAoXCogt0v94Px7nwmvxinguvHbhBFdh3LAvFLCBVUjPhdcudLCDA5zgKjxLhfzv//7Tb3/6y7/+/m9//Muf//lvf/3DH3773f/Uv/iv3373f/7nt//8/V//8Oe//fa7P//3n/70T7/9P7//03/HH/qv//z9n+Off/v9X+//9X66f/jzv93/eQ/473/80x8O+t9/4m/fnv/V+4vT0YDir9/fnG5eIe6vST8EkedBYtZGhLgPM1SA0X/4++3534/dQePvu3MO9/eIVw8geiDPA/D17ADs+d+3Y2e/+Pv3dvfWARwP3ucBrPnsAPrzvx/7Z8Tfvz9zvHMA63iQiwD3TsdnBzA3BzCzEd17Z54ewK4h3e9keQhyv0vI84a0idLWMSEhgtyfIx+uhMjLMe7Por1irPEQw16PIbf8Qe8Pm+t5DN1ckdjT67wgXdtDjPljjF3DnJUZ9pCaXV4/ilnJdX83nc+PYtM6Pb5dOw/jPuhVMbq/HmJUmTkWyHkaYtNEW+z4HCGaD3kaYm3S1PM87m+0XAr7sYG2XQOVKjXtyI6MYe3HEJtUbZMm/jTAL66lcC3nswvRtq1iVNW/jyY8bRVt0zYltpg/Y/hoTw/Dduk+V10LvT0/jL47jGF1GPJwKuvD/Wfsyu/8e+V3vX4m96KT7UKPo396JpvWKRLf2J2nIvfBOaK0HxNeb1+/Hipfvh67c7l3LGUjvR/9w2PBT+eiu2wbrbJtPpTh9eNV1V0bi4/tzxijPTTTT5yLzlnnYrb5XTbttPW6LbXeKeb3frkfY4zdbanNamX+GOPDcWzK6L1folrq/Z30eYzdcTTzuj3O58dhm3Z67FiWVew+IPQ0xv6X6Tda2XjMuw+/jLVd7q6qyO3hl/kpxq6l8gB1P471PMaupbZbVsPW2ngvhmndJG0+b6m2exi1TJjeOQqdP75U2KZ9LPLl9nAxfgqxeyCVSQ16eCv4KcaueRw9/nkgR3f70yi+aaidZ9JjXgKX9Mca5LvXg2b1ftB6exZiez1a3WCO71mfn8n2rt+rdRxsz6/qrqmPOpk7Pk+XbeLeq1C9Ldx7NNvTKL679UsMyl43zPuowJPi7uMfenu49585bz72PHF9/UNvuRZ9INdx9E3y993TqY48kHZ/pXs4kh8fknv76jXdHoVJldN7n9nTo9g+kml/uNH1p49kx0diT2N0HlCHPrb128sx7j2MeTXuvYb9eYzx9Ye6Pv+hD7l2qzdre8z8T7w13JOdGJtfZciurlcTfXhIvo+D/Rhh00Jnvd5PXc8j6O4Wl6ex1vMI2yvht2qfs8vzK+G7B6DqeLqX1IeHbPkxT0bfHYfUL+Lz9laMezf7oo235zHm19v4+HIV3V5RrZdr6Y+vYB/OZMr2QY7qpc+vxrZ1TB7TV7P3cm1pPaav+fwtf9pXc236V3Nt9n9orq2VB3Efinre0TB3/U+jcVf7IU8+9LLuOqBEeRC89bdirFvPXFu3tZ7GWPL1XFvtH3k/uQ8F5g97H+nrb7Vx44XHxqYLad+hdqND7eFX+dizuOswblpF9P4E9bTDeI3tw8atHjbW88axjRH7zl43lSVfjrFu7c0YN60Y8jxZ5CZfrRxya18tHfsQvVLl9nA1PsbYXo0lFPPHF4SfroZ/vRd+G+O1lr5p6Mtmnsp9wIcf1j8exe5OL8Zr28OAWxvjQ5C1O5WM4Y9FcL58Iq5SJ/LQk//xRGRXRpW2cX/zexig+TDkJW03TlT9gg/NS/XDgMBukGeMevMbj5WjrQ/DVbJ9Hm3cIgnxccRLfNdfWz1pR2fWm0FavXM1fUy4TwUZ9VDbHm8LPwfZ3iUnIxzWNz/v7pGUlLt37z8+hH34gbfDTir17KGP45EfMubV9v7Qr/exvbe2rWPcGWZ/ehiyHXsyr95Be7hVttvHILt+Tunz740MfBjxlrZ71F+VNfdO5/E8xubRIRagPH/cx5kD/eOpjN0Ybx6FP94oPxWiektcxybE7kRunMh6HkK3z0Crnl/0oRreX3Q/BNnl3K3q+v0e8tB3PD4G2b3ey6oHB9uE0F3/c55L1/40xKv5Np7nm+5u12qzftiH2tHGZ54bRuOe/zCs8LnnhteG73cDT/dX4U6f3rsxagDsHqO/F8NrZLJ5f/4cZdsB0nrDP1ZMfyvGsdb9KzH0G+ZE7IaMZnXqTVtPJ0XsQ7w0r0J2g04vTqyQ3bDTazMrtkdxWww4Pzwf/xRj944/8ydZ0p5fjN2Q030sox6k7uNgDyejt/lu63g6UUR8U0pjvbXryfL59fhF7Xhluoq4fcML1C6I3Vp1Uj7eWn4Osust7cwM64/9DR/nZG2PRKoU3kcHbHMk88tvx7tBpxffjvenwuiGyO6iri+/Yu8PpPPrjqXPD6Trl69pty9f022I77gcszLGpu4ux/hq8u8Ow6W6oF1809L72j5Yzr/3YPmZEFqdpqoPw+cfQuxGnUzqKO69lU9DvHo12qZnbR9k1LjRsbHe8yBjOyuqhhfuOJ9eD/t6H7KM/tVO5H2Imo7QH54bPheiM+NlbkLsrobXm6D440jc+tQlZfDJH4ebPwbZjT7JehgUXG2911Jnq1fK5fN5I5ubamqrGupj59j6UD/ml2fvbY/Cef2xuTmKXYiae+NzcyLbC7pWrxdKl/dS/1g5t9r6u/XjWOu7gvRNSV63L98od2NQL94otyG+4UbZmaZ/rJy5uRzb7F813iHHZnnv5NyIdZCv2+3u+XTt3mBi0eMs7M/fbvcxeAuamzfTXQxlMqO2Ta/DL2LcvhzDpF4K7WG84lMxlOcPk6cx2m4U6eFt/9ge7q0YL/Y6vHoc216H/TWt76XUXJ4fR/+G69H/0ecyHuYjzS/HeCzLn2tjrd5wXZ5fj+14BQPI98eMTd/D9kAGvSiP71E/HYh+/cfdxXi1sb94HO83ELovdO6OYzd977YY8HzsNPjUDzObMbT//LOf3WCU1auDtefto7X9h34M3zx85qcfvhXcH4fe6l19bi7H/parvH8sfzp1dzsWdew6+xCkvxPkxRfDX53Ma8exe4uJdVHO5we9PZ9z0XZDSfdbbg2KPc6Y/6l/a/s+VTMV+vQ3X8l40p2bF8P+9XGPbxiy+IYRi68PWLTdV1CvVlO1b6imXx1r2I6Ev9ZD33b94q/10Ddd39JD//UO+rYbRnqpj659wxfC2+H4WTe4tn7oBf4Yw77azbcP8VI3X9sNAb1WzfcXox7l7m+im69a7cu9+82+3Lu/D/HaC/b229qXuue2EV7qndt+I/xi59z+O+PX+uaa+9f75tpXJ77tvzPu1Z9154dh458+4dqNP72YrtsQr6Vrv301XXfTVl7rCt9+Lv1SE99GeKmJbz/7frGJ7z8df7GJ9/71Jr797rvVsEBr7fHzr/l6DLf6COOHZWXWJzKltZpJdOfHKB8zZdy+nCnbEK9lyu6bpxdvbK9fjv68cOw/hOeJuOvjB+j6Zozx9RgPvSWf+iD/1quH8tY3H7FvP3ya4+FRUjdBdk/W9cwxTd4MUROAp483QxgLMc0vh+j63gVtTL27p357Nwi3hS7+5k+7SJi1+V12CyVor9eV43PUt2Lc32P5BnXTxF5csOHeUfr813158YldjFcX0hjP87atr741bY9i8GHcvOnmKHYfkWrdKte9a+75w9z2lYdPlPVxuavxIcZutvx6mDn3OK74Mcb2Y/yHz+DvHZ7z2dlsr+qsSTxtPtxuP1XXZ7203LFvfpndnc5rpob8MLPy56V4dnOAWeTg9tjT8OH9frughwgT3TdrC+hu0GfW2PPjt1g/XdTtV1D0YN9ucxNj1wn12koauptN+OJSGttzkVtNbpCb7S7Irk9/1RcIstbmMWb3JdSLBUBv68sFQPfr7r1UAHQ7+vRyAdj+Nlp3u/tIQ3uvsf4YZD0Nsl+Np9Y4uneYP3/y38eoy9p0tzrRLobW5Or2uF7TTzHG7smunqnme8vx3Ed86zNbeziTz8S4d3bypct8vviM7vp/e6+ho2P/zveCDK3etWOB8HeD1OKMxyrNbwaxGtQ7Vhp+M8isAYLx+ND8qR/HatzHH+c4fCrGYLnKH7rEPxWj3qh8tl0j2T1236tDraR3fzHbXdftUwBjv3fum9a275pxxuW9325vHw2rN7XHr7R+PppdbbT58P3dHPPdS8xadHf2d1vM47cB470Yi9l562G48VOrjd2q5XaR946jS725dtll4fry08120bNjy/H8YY7dut86kKOLmHVQ7pn4ZpROX+CxXe2bUUbjjIb1d6PUeIgcO2q+GWXWQKocG2G+eywPV3fK86uru6GqT9Sn3dPBUZ/4zvlxUOHTYV4sc784qVfL3PYTKpssDWnbS/yLMC9Wy1/83v7Q9vrbba++kZM+/d1sWg8rHK1u70ZhacVjE7z3ohxbBmWUO/u7UVgG8Nh852mU3eKI37PAIt+D39nlzSiznsXuLLc3o6yHY1mbR+X9Yo+DdU033SD7GIsFIx/XtflMjGl0t/nzt6D9A9TiPtIe5yX+PHzx5U9W9iFeGzDsX/5k5RerZ1KvZT08r38YqNuNSy2WcFrydFxqH6LVJx7r/sL8zriUurCaqG9e1vdReq1fIDrkeRQdX57Fsg/x0mCfjq/PYnn9crS3LyrPFvco/c0oo0Z07uyb7tj55XHYfYjXfpr5jx2H/fFybMZhf/XTzIcomzV411dL2TbCa9N7tivfanUK3Xlzi9H9An8vTQTZhbhXQ8YNRrc3g4yH55nxsKPN54LUANWdZ3+nnZkRw7w9X8S/b1dR+pZ1iRtLS+ljT/nHdYlfjfE4HvOZGE63sD9m3idi3I+/VW/74/X4GGMzDvLizLztwsS3mn1qYo8/7icWNxYWfr0/QzyNYbt1/l6ry/sQL9Vlu315Gv/2YjTWomyP3zX8dDF2QeZimP3xI42fgmznvr8wR3B/GPSq2XpcEepT58Kood+avR2kVRCbbwepjsbbm4twv7yQ9/zq7XIb4aXb5XYx8RenCu4XJH9tqqDJN0wV3K7/yr3SZns+2drky5OtTb482Xof4sXJ1rur0RofePX35vKb1roO9sNXYh+v6O6jgl6D4/2hP6bpjzf83ZwUudGN3R5bWP8x27YLR792RbcrNt9qrdJ523wtv43hi/WxRnsvxqoexPsNQt6KcX/Hz8fkdWv+NMb2k/tXV59uXy2C2wgvFcHtCtgvFsH9KtovFkH9hk8Cdg/7KrU8n7bxfOVo281llYc+6tGfft61j8EqF+1xmtBPMbZr+L/0qdo2xoufqv3iXOoJqN306Vfdttta6rXvbW3X83l/wBZ+l/Vwi/v4pdn+SF764nZ7QZrUGqHtXpLfuqhN2J9KHsrHTxd1fP2ibkevX/uIeX8cL13SbRl76TvZfYRXPpPdbmTy2j1yu4OI1ReE+viN66d2IVk1tmU/zB371C4kxGhv7kLy8k4mX+4TG1/uE9vOPH/x/rbfkeXF+1v/huWotktafcemLKwD9cNHAZ+KwcIn986f51vlWP/yfijWv7whyj7Ei4/G2ytaQ8DNV9tcjV0f44srJ22/YF70l67+fK8c2y3v9+LCSb+I8dLCSdsYLy6c9KsYty/HeG3hpH2M1xZOsjFeepTbrSWzjfHqI+WLx7GPsb2mLy2cZFO+fj1ejPGFc3lp4aSXY2wWTvpFG3tp4STb9RO8unDS/kBeWzjJ5vyGH3d+vbG/eBzvN5DXFk6ytf1S47WFk/YH8trCSbbsy+8c2w6tV985tsfx2mvcL+64Ly2cZGvug7yyYNE2yGsjLr88mVeOw3eDR22yeZf05+8vvvvm5NWFk7aP/S+9D+4jvPI+uB1feOkY9hFeOobtk2XNTLjjej5Aun0W04dtim/vxegMGPel78WYbGe0bv5WjPvAU93jbu359dBdtr066rwNcm8T9W47x9MpY9sQq7qR+mrjvRC8YS9/OlT7cuuwN1tYI4Y+v6AuX15FZR/ipbFvb7d/aIgXh8/3b2B/d/7N534Tvrgb693K8XAc78ZgS5Q7vhvD2isx/Mt3FP/yHeUXMzyrL2q19uYkUXZTavp0RlT/8qKEvwjxyrXYz2OuT4/bD4utfWoudD2M3nsZxpsxBm1rvHscLMQwHzci+Dh9cD/X3Zil/jiz+5Mz5h+jbL55+lUUI8p4/jWC79bJePErd98t6vfid2C/mP/fWFZmbb5y/cU1WXyLsG5vf4vweCz6dhReXOayN79cGbE25PWyf+/RfTdKf/jm5O3vX/TG2J629m4Ue4ji735Fo/oYpb8b5aErRefb12U8RFm3N6PYw9dF1t79pe32GOXtVseSBMN0U1u232yY1pzNO28azK/CME3ZdPedkm/Hh179OO5XR+Nso6ubT2c/c1JfCFOdksdk8s0l7u3/j2uzOCm72Xec1BfCWO0qJbZbr8C3SwR+17VheeY7m3/LSdm75fN2Y+b/7fbuR8qLj27G48DcJ1eVqOl3d1xvBukPe9u28WYQr8Hf4evd0xnVCzzm22t+PJ7O+0FYN6yPd9f8eNgReoi9eyQ1TfwexN89EmcZNLdv+HVkUxKmfEdJ+MVKKDVXattS9gvuMFFA7fnXKvsFTGvWaGuPn6t+WHzUp3+5a2gb4rV+nTn+oSFeXKN3dz2Vr250PF/M1Xd7Vr30UcT2KIzOpcchz5+Pon399XC3buCri6Btl8dtLD3/OBf4U0vsPm5M8Px6tN0Izsvr9O6CvNYtvQ/xUrf0L0K80i29XQf6tT4q+WoX1Xa59ZeOYR/hlWPYZWp9p+8PfQXtXgNfDbBYisffCSC3xtKN/b0Qwkep8vDd0qdC1DxAkfneUWhdCnlcpewzIZzlEv1hCcpPheisMPO4hu1nToRFMbS9dyJK/576WyfSRj1g3Md83mqb9xFmVhAa753IGHQmPC6S+IkQi8v5+JnhJ0KMGp54XJPpEwFW3dQftxj9TIDqCH/s3/xMgMqvNfyLp/BegPuYcA0irselrdaPS2/23Sdb9xh82DNlE2S3TztdBP5Dx13/xJHce4vrJ5GHjyZ+PpLdttMsrTof1829X6APQXZTmFqNcHh7vCY/nc4uiNY02Tv6u0FevbC7JTxvwjV56OL96Zrs1v4bo77EH48r8fwcZPPUp86G78+Trut2UWPmVbTbejMIQ4L31632ZpCv1/P7fam+fpCHmfY/NXndfpDCQqB3fhgZ/DnM9mFax997mL4PEHzmWJSxDbW1yeLtGNarLda+o8Xa11usfUeL/cVywDUVSG/tzSAvtth9s9eadH/PInk3AV88nX1xrHERf9wR4JMVliUC7Pa81m8fqWrG2eNq/j8tp7FbZf2lDzv6bojztQ879iFe+7Bju+bhelgO8ums7L7rVH9to799COej6b4JsVvR57XNAvtu/strmwX23R5VTfkq1h6mAH6c+fvqbzKe/ibbBv64qNDjt0sffta+XcqvlsC4P149mzm8f+2oN9rHDVE+HsX+5afeaNcPnx19PJH+5VzdLYHxYq5uQ3w5V5vQJfm4fuZPF2Ns30jHjcU8x/PJe78Ioo9rnOrTILtJ1LOGcPUmujmd7a7PNSDRbw89BfJhk5ltkE7C9R/6Rz8VZNQa2fc3fd0E+fKks19cEb9xHLY5jt1s/VFVzB6nrn38DL2P7QAnY6398WHZb6+fzr2SPQwqbn7guf9uKFvaw5CvfLgz7BbyczYi8vE4s/vj7WXuKiqrG+njigk/BXnx9x2Pa1L/fEF2Y0Wz1n3Rx9VAf3ro335JxafgYg+37Z9i7EacpKYQqTw+848PlWS7JAYduPrY+6of15zbLZjyckfEdtjp1Y6I7TUx4cvBh9XYf7omu6Env9Wrg98e9xJ6+fZtvW43NqS9c/u2LoRom+eQ9eVvqPv68jfU+xAvrsH3i9vmw7ftzxd77Gt9w713F+TFCfy72/fLF2T3COA3xgMf3x0+tI9x234RzozIx9WSPibuPgiP/u3WdkH8670gY7ec36u9IGO3YdVrvSBjt13Vq70g+yAvdhvsg7zaC/LibXPe5pvPeI/PVrNvguyeAu59iHz0L88fJYZs+mPqNjNIXtNPPFa16gM5pig9PZOxXdNvPEyDe1w30j6kr+y+ta/eKX/8cu9TIei4f3xC/CnEriCyrYC1x6fmn36Ubb89vRj6/Dja7jsgrZlrzXRTh1r7hjq0W2jj5Tq0GyJ6sQ7thqperkPbIK/WoW2QF+vQto3wccRy37SR3YJnt3p4d3lcIedTbXU+7PHYnx/Ibv7JvXqxbd7DNJqfmoh+R2PV72is+vXGqt/RWPU7Gqt+S2PdrpXBQNUYu1ayXhz19k1d3G5IfKvbhN1+6GVurx/J/aWbnS/n5nR2o1QvV+jdKNXLjX43OvRyozf/cqPf7eL0cqPfBnm10W+DvNrot61EatOX+089nreS3V5SP3Sg/fBc85n2ykDVD0s7/Xwk7RuKtH9He/XvaK/+9fbq39Fe/Tvaq39De913wyk7helDn9OHbrjRt3vG1zLQj+9Gvl4P4XSQ9ndD1IeA/viJ8adC1PZTP6wd+GaIx+7Vz4R47Ma/vRmCTSqXvRdi1Ky/8bgf8ZshHrfz+VQI1sO+vXkibJE23z2RWUvRzsc1v94M4W/+qEv+3hzGz4VgbQR7s3Wyuvjq/cshxps/qtycjdn78wv6i57/zhji44fZH3r+x26cSkc9oB7rmD0fPtj2/L86e3Af5MXZg/tV7F+8V8/veKGaX3+hmt/xQrUN8uLswX2Ql+/Vu35Z9mzQxxlQH4d2xrf8wOv2DT/wblH8F3/g1b7hB94GefVhbBvkW35gq4ex+9idPP+Bd2NN9zeQwXimPxu7G2u7wj9DTePxgezDU+F6cQMbfS/C5EFovhmhRrtvT49hOxJqq8a6/Pa4tNKHNal3C/4ZD4XWH1/n3o6hz2J8Ymj4+XD53A1TCQtcyuPs459OZrsxqrFo6NpckF0TvS32i7x3ZPZvibKeX9jtXIbbfGkuw+7VdNWXGfq4OuXHSRVTdh9HC3uOy+O33h8eRqZst52suvy4co582E1HvuEBYMqXHwCmfMMDwD7Ii/eHfZCX7w/bNsKkitvjbs8/tZHdA2t9Pm8P8+Y+RtiuAfh3I4jP18/EbvWloIlvzuQ7Rqrmd4xUza+PVM3vGKma3zFSNb9jpOr1+Zn6fH7m3G4rOh+W8XqYmvXTjLe2exzShzliz2cRTf2GgdX5HWNV8zvGqubXx6rmd4xVze8Yq5r6j26u91crrc7y2TatZH29s3za7Rtaye6LqpdbyW6s6sVWsl348dVWsg3yaivZBvmeVlLjMqqbbxK2Qeym3MR909R221J9S5DX1sLYh3hpLYxfhHhlLYx978qLH6n9op/nxY/U9n1wL36ktg/y5Y/UvHak88f5SKu9GuDeicCKErfH+Vn9EyFYke42pb8Tgn7zOz88KH4ixKq1Z+7c5a0QLFX5w4SXz4R42J/i9vANwOshhH0D7tyeHcXs9vVT2QZ5bf7vbVtHX1iv6surkM8+/6EhvnwdpDk71z6kWLu9/rlfm9Ud0x4X+Hg3RH8rBBteiz58m/KpEJ2B6IcJkJ8J4cIudPbetVC+nnz8APPtEO/9qI/fxjy+bnwmBGvHWO9vhuBEHr4D/VSIeoYUm+/9qLbYg+Z2e7Nd8Else+tHZfupHzpOXw9A0/T2/DrMXS9jm+w7Nx9GBz6s5bY7iHrS+mF1pk+cRc0dfezH/kyA6jryh+33PhNg1qPR0vcC1DSRZV8L8DhJ5FMXkc7vt0plrw7aruuLR/DxZ/y/9//7+3/941//+U9/+dff/+2Pf/nzf93/3v8eof76x9//y5/+cP3ff//vP//rw3/92//7n/lf/uWvf/zTn/74H//8n3/9y7/+4d/++69/OCId/+232/U//2cc+8uM29L/+0+/yfH/7f5aNVzs/v/1+P/3d8V/GveH8OO/H3/B1r0b8P4/4/gX8TfavR2N1m//93+PQ/7/AA==",
      "brillig_names": [
        "is_registered_l1"
      ]
    },
    {
      "name": "is_registered_l2",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "is_registered_l2"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "register_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "name_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "decimals",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "8998099065237381256": {
            "error_kind": "string",
            "string": "Expected address did not match supplized token address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18159344801564042747": {
            "error_kind": "string",
            "string": "Token already registered"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "storage_read",
        "debug_log_oracle_wrapper",
        "storage_read",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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\n0wjG1j0HkTruZrSFZmQJ4zJievrMBCtdWDUY"
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_private_state"
      ]
    },
    {
      "name": "withdraw_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "withdrawNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "burnNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "withdraw_public"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Beacon"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "target",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "overrides",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "minter",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shielded_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Portal"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l1_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l2_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "recipient",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            },
            {
              "name": "message_leaf_index",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Deposit"
        },
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "aztec_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Register"
        },
        {
          "fields": [
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Withdraw"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_log_claim_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_log_claim_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_register_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_register_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_shielded_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_shielded_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "token_contract_class",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Portal::get_l1_portal_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_l1_portal_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::get_l1_token_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_l1_token_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::get_l2_token_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::get_l2_token_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::is_registered_l1_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::is_registered_l1_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::is_registered_l2_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::is_registered_l2_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "name_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "decimals",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::register_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::register_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Portal::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "withdrawNonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "burnNonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::withdraw_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::withdraw_public_abi"
        }
      ]
    }
  },
  "file_map": {
    "101": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n"
    },
    "102": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "103": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/events.nr",
      "source": "use super::utils::{compute_event_selector, get_trait_impl_method};\n\ncomptime fn generate_event_interface(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let event_type_id = compute_event_selector(s);\n\n    let from_field = get_trait_impl_method(\n        quote { crate::protocol_types::abis::event_selector::EventSelector }.as_type(),\n        quote { crate::protocol_types::traits::FromField },\n        quote { from_field },\n    );\n\n    quote {\n        impl aztec::event::event_interface::EventInterface for $name {\n            fn get_event_type_id() -> aztec::protocol_types::abis::event_selector::EventSelector {\n                $from_field($event_type_id)\n            }\n        }\n    }\n}\n\npub comptime fn event(s: TypeDefinition) -> Quoted {\n    let event_interface = generate_event_interface(s);\n    s.add_attribute(\"abi(events)\");\n    quote {\n        $event_interface\n    }\n}\n"
    },
    "105": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n"
    },
    "106": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "109": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "111": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "112": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "113": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_tuple().is_some() {\n        let tuple_len = typ.as_tuple().unwrap().len();\n        let mut tuple_quotes: [Quoted] = [];\n        for i in 0..tuple_len {\n            let element_quote = quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name.$i)); };\n            tuple_quotes = tuple_quotes.push_back(element_quote);\n        }\n        tuple_quotes.join(quote {})\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n"
    },
    "114": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "115": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "116": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "118": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::fetch_tagged_logs},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "119": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "121": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "132": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/messaging.nr",
      "source": "use crate::{\n    hash::{compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\n};\n\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    merkle_tree::root::root_from_sibling_path,\n};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    leaf_index: Field,\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_l1_to_l2_message_hash(\n        portal_contract_address,\n        chain_id,\n        contract_address,\n        version,\n        content,\n        secret_hash,\n        leaf_index,\n    );\n\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\n    // get from an oracle.\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let (_leaf_index, sibling_path) =\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\n\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert_eq(root, l1_to_l2_root, \"Message not in state\");\n\n    compute_l1_to_l2_message_nullifier(message_hash, secret)\n}\n"
    },
    "142": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "145": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "148": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "149": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "150": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "151": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "152": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "153": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "154": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT};\n\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\n/// its existence.\npub unconstrained fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {}\n"
    },
    "157": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "158": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "159": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    length: u32,\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, length, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    length: u32,\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "161": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    // The log fields length is PUBLIC_LOG_SIZE_IN_FIELDS. + 1 because the contract address is prepended to the content.\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_SIZE_IN_FIELDS + 1>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "163": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::note::{\n    note_interface::NoteType,\n    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}\n\npub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<NOTE_PCKD_LEN>,\n{\n    // N + 3 because of the contract address, nonce, and note_hash_counter that are stored out of the packed note.\n    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        MAX_NOTES,\n        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,\n    );\n\n    let mut notes = BoundedVec::<_, MAX_NOTES>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MAX_NOTES];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "165": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "167": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "169": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "177": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "191": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr",
      "source": "use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse protocol_types::traits::{Serialize, ToField};\n\nfn emit<Event, let N: u32>(context: &mut PublicContext, event: Event)\nwhere\n    Event: EventInterface + Serialize<N>,\n{\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; N + 1];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_public_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32>(\n    context: &mut PublicContext,\n) -> fn[(&mut PublicContext,)](Event) -> ()\nwhere\n    Event: EventInterface + Serialize<N>,\n{\n    |e: Event| { emit(context, e); }\n}\n"
    },
    "192": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "195": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "196": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "198": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "199": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "201": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "203": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "207": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "214": {
      "path": "/home/vscode/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "231": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "233": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "276": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "277": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn to_be_bytes(self) -> [u8; 20] {\n        let field_bytes: [u8; 32] = self.inner.to_be_bytes();\n        let mut bytes = [0; 20];\n        for i in 0..20 {\n            bytes[i] = field_bytes[i + 12];\n        }\n        bytes\n    }\n}\n"
    },
    "279": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "281": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
      "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "285": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/contract_class_id.nr",
      "source": "use crate::constants::GENERATOR_INDEX__CONTRACT_LEAF;\nuse crate::traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField};\n\npub struct ContractClassId {\n    pub inner: Field,\n}\n\nimpl Eq for ContractClassId {\n    fn eq(self, other: ContractClassId) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl ToField for ContractClassId {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for ContractClassId {\n    fn from_field(value: Field) -> Self {\n        Self { inner: value }\n    }\n}\n\nimpl Serialize<1> for ContractClassId {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<1> for ContractClassId {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] }\n    }\n}\n\nimpl Empty for ContractClassId {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n// Implement the Packable trait so ContractClassId can be stored in contract's storage.\nimpl Packable<1> for ContractClassId {\n    fn pack(self) -> [Field; 1] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; 1]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl ContractClassId {\n    pub fn compute(\n        artifact_hash: Field,\n        private_functions_root: Field,\n        public_bytecode_commitment: Field,\n    ) -> Self {\n        let hash = crate::hash::poseidon2_hash_with_separator(\n            [artifact_hash, private_functions_root, public_bytecode_commitment],\n            GENERATOR_INDEX__CONTRACT_LEAF,\n        ); // TODO(@spalladino): Update generator index\n        ContractClassId::from_field(hash)\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "291": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "293": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "294": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "304": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "308": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "310": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "311": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "321": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "332": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "346": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        let len = fields[0] as u32;\n        let mut index = 1;\n\n        for _ in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[index];\n                index += 1;\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let len = self.len();\n        fields[0] = len as Field;\n\n        let mut index: u32 = 1;\n\n        for i in 0..len {\n            let item = self.get_unchecked(i);\n            let serialized_item = item.serialize();\n\n            for j in 0..O {\n                fields[index] = serialized_item[j];\n                index += 1;\n            }\n        }\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "350": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "351": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "367": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "368": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "370": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "376": {
      "path": "/home/vscode/nargo/github.com/noir-lang/sha256/v0.1.3/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\npub(crate) mod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        // Safety: test function\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "380": {
      "path": "/home/vscode/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "397": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        },\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "46": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n"
    },
    "51": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/deposit.nr",
      "source": "use aztec::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    hash::sha256_to_field,\n    traits::{FromField, ToField},\n};\n\n// bytes4(keccak256(\"deposit(address,bytes32,uint256)\")) = 0xeb2243f8\nglobal DEPOSIT_SIGNATURE: [u8; 4] = [0xeb, 0x22, 0x43, 0xf8];\n\npub fn deposit_content_hash(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> Field {\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_deposit(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(DEPOSIT_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = DEPOSIT_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n// For testing purposes, enables printing the ABI-encoded data\npub unconstrained fn field_from_encoded_bytes(encoded: [u8; 100], offset: u32) -> Field {\n    let mut arr = [0; 31];\n    for i in 0..31 {\n        if offset + i >= 100 {\n            break;\n        }\n        arr[i] = encoded[offset + i];\n    }\n    aztec::protocol_types::utils::field::field_from_bytes(arr, true)\n}\n\n#[test]\nfn test_abi_encode_deposit() {\n    let eth_token = EthAddress::from_field(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F);\n    let recipient = AztecAddress::from_field(\n        0x1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863,\n    );\n    let amount = 0x1234567890abcdef1234567890abcdef;\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"deposit(address,bytes32,uint256)\", address(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F), bytes32(hex\"1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863\"), 0x1234567890abcdef1234567890abcdef) =\n    // 0xeb2243f80000000000000000000000002458675deb5e0691da2d2ba8dcaf58cfd2c2651f1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863000000000000000000000000000000001234567890abcdef1234567890abcdef\n    let expected: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_deposit: got: {encoded}\");\n        std::println(f\"test_abi_encode_deposit: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nfn test_deposit_content_hash() {\n    let content: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    // sha256(content) = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883aa8\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883a;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_deposit_content_hash: got: {content_hash}\");\n        std::println(f\"test_deposit_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "53": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/register.nr",
      "source": "use aztec::protocol_types::{address::EthAddress, hash::sha256_to_field, traits::ToField};\n\n// bytes4(keccak256(register(address,string,string,uint8))) = 0x611a7a19\ncomptime global REGISTER_SIGNATURE: [u8; 4] = [0x61, 0x1a, 0x7a, 0x19];\n\npub fn register_content_hash(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> Field {\n    let encoded = abi_encode_register(eth_token, name, name_len, symbol, symbol_len, decimals);\n    let content_hash = sha256_to_field(encoded);\n\n    // Debug log the ABI-encoded data\n    // let field_array: [Field; 9] = aztec::utils::bytes::bytes_to_fields::<260, 9>(encoded);\n    // dep::aztec::oracle::debug_log::debug_log_format(\"ABI Encoded: {}\", field_array);\n    content_hash\n}\n\npub fn abi_encode_register(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> [u8; 260] {\n    // abi.encodeWithSignature(REGISTER_SIGNATURE, tokenAddr, token.name(), token.symbol(), token.decimals())\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the name offset\n    // 0x44 - 32 bytes for the symbol offset\n    // 0x64 - 32 bytes for the decimals\n    // 0x84 - 32 bytes for the name length\n    // 0xa4 - 32 bytes for the name // Limited to 31 bytes\n    // 0xc4 - 32 bytes for the symbol length\n    // 0xe4 - 32 bytes for the symbol // Limited to 31 bytes\n    // Total: 260 bytes\n    let mut encoded = [0; 260];\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let decimals_bytes: [u8; 32] = decimals.to_field().to_be_bytes();\n\n    let name_len_bytes: [u8; 32] = name_len.to_field().to_be_bytes();\n    let symbol_len_bytes: [u8; 32] = symbol_len.to_field().to_be_bytes();\n\n    // Fixed offsets for name and symbol\n    // Offset for the name is 0x80 per the ABI encoding, but 0x84 in the raw data\n    let name_offset_bytes: [u8; 32] = 0x80.to_field().to_be_bytes();\n    // Offset for the symbol is 0xc0 per the ABI encoding, but 0xc4 in the raw data\n    let symbol_offset_bytes: [u8; 32] = 0xc0.to_field().to_be_bytes();\n\n    let name_bytes: [u8; 31] = name.as_bytes();\n    let symbol_bytes: [u8; 31] = symbol.as_bytes();\n\n    for i in 0..32 {\n        // First 4 bytes are the function signature\n        if i < 4 {\n            encoded[i] = REGISTER_SIGNATURE[i];\n        }\n\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = name_offset_bytes[i];\n        encoded[i + 0x44] = symbol_offset_bytes[i];\n        encoded[i + 0x64] = decimals_bytes[i];\n        encoded[i + 0x84] = name_len_bytes[i];\n        encoded[i + 0xc4] = symbol_len_bytes[i];\n\n        // Copy name & symbol\n        if i < name_len {\n            encoded[i + 0xa4] = name_bytes[i];\n        }\n        if i < symbol_len {\n            encoded[i + 0xe4] = symbol_bytes[i];\n        }\n    }\n\n    encoded\n}\n\nunconstrained fn pad_31<let N: u32>(s: str<N>) -> str<31> {\n    let mut padded = [0; 31];\n    let s = s.as_bytes();\n    for i in 0..31 {\n        if i < N {\n            padded[i] = s[i];\n        }\n    }\n    padded.as_str_unchecked()\n}\n\n#[test]\nunconstrained fn test_abi_encode_register() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let name = pad_31(\"Test Token\");\n    let symbol = pad_31(\"TT\");\n    let decimals = 18;\n    let encoded = abi_encode_register(eth_token, name, 10, symbol, 2, decimals);\n\n    // abi.encodeWithSignature(\"register(address,string,string,uint8)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), \"Test Token\", \"TT\", 18) =\n    // 0x611a7a19000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5465737420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025454000000000000000000000000000000000000000000000000000000000000\n    let expected: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_register: got: {encoded}\");\n        std::println(f\"test_abi_encode_register: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nunconstrained fn test_register_content_hash() {\n    let content: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    // sha256(content) = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9f4\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_register_content_hash: got: {content_hash}\");\n        std::println(f\"test_register_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "54": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/withdraw.nr",
      "source": "use aztec::protocol_types::{address::EthAddress, hash::sha256_to_field, traits::ToField};\n\n// bytes4(keccak256(\"withdraw(address,address,uint256)\")) = 0xd9caed12\nglobal WITHDRAW_SIGNATURE: [u8; 4] = [0xd9, 0xca, 0xed, 0x12];\n\npub fn withdraw_content_hash(eth_token: EthAddress, recipient: EthAddress, amount: Field) -> Field {\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_withdraw(\n    eth_token: EthAddress,\n    recipient: EthAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(WITHDRAW_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = WITHDRAW_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n#[test]\nfn test_abi_encode_withdraw() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let recipient = EthAddress::from_field(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439);\n    let amount = 0x1234567890abcdef;\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"withdraw(address,address,uint256)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), address(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439), 0x1234567890abcdef) =\n    // 0xd9caed12000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c700000000000000000000000052b1d2cebf3c80813f82dc4b5f56fcb4e04ac4390000000000000000000000000000000000000000000000001234567890abcdef\n    let expected: [u8; 100] = [\n        0xd9, 0xca, 0xed, 0x12, // Function selector - withdraw(address,address,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Recipient Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439\n        0x52, 0xb1, 0xd2, 0xce, 0xbf, 0x3c, 0x80, 0x81, 0x3f, 0x82, 0xdc, 0x4b, 0x5f, 0x56, 0xfc,\n        0xb4, 0xe0, 0x4a, 0xc4, 0x39,\n        // Amount: 0x1234567890abcdef\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    assert_eq(encoded, expected);\n}\n"
    },
    "55": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/main.nr",
      "source": "mod constants;\nmod encoding;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract Portal {\n    use std::meta::derive;\n\n    use aztec::{\n        event::event_interface::EventInterface,\n        hash::hash_args,\n        macros::{\n            events::event,\n            functions::{\n                initialization_utils::compute_initialization_hash, initializer, internal, private,\n                public, utility,\n            },\n            storage::storage,\n        },\n        protocol_types::{\n            address::{AztecAddress, EthAddress, PartialAddress},\n            contract_class_id::ContractClassId,\n            public_keys::PublicKeys,\n            traits::{FromField, Serialize, ToField},\n        },\n        state_vars::{Map, PublicImmutable},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n    };\n\n    use authwit::auth::assert_current_call_valid_authwit_public;\n\n    use token::Token;\n\n    use crate::{\n        constants::PUBLIC_NOT_SECRET_SECRET,\n        encoding::{\n            deposit::deposit_content_hash, register::register_content_hash,\n            withdraw::withdraw_content_hash,\n        },\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        l1_portal: PublicImmutable<EthAddress, Context>,\n        l1_tokens: Map<EthAddress, PublicImmutable<AztecAddress, Context>, Context>,\n        l2_tokens: Map<AztecAddress, PublicImmutable<EthAddress, Context>, Context>,\n        token_contract_class_id: PublicImmutable<ContractClassId, Context>,\n        shield_gateway_beacon: PublicImmutable<AztecAddress, Context>,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Register {\n        eth_token: EthAddress,\n        aztec_token: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Deposit {\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Withdraw {\n        token: EthAddress,\n        from: AztecAddress,\n        to: EthAddress,\n        amount: u128,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(\n        l1_portal: Field,\n        token_contract_class: Field,\n        shield_gateway_beacon: AztecAddress,\n    ) {\n        assert(l1_portal != 0, \"L1 portal address cannot be zero\");\n        assert(token_contract_class != 0, \"Token contract class cannot be zero\");\n\n        storage.l1_portal.initialize(EthAddress::from_field(l1_portal));\n        storage.token_contract_class_id.initialize(ContractClassId::from_field(\n            token_contract_class,\n        ));\n        storage.shield_gateway_beacon.initialize(shield_gateway_beacon);\n    }\n\n    #[private]\n    fn register_private(\n        eth_token: Field,\n        aztec_token: AztecAddress,\n        name: str<31>,\n        name_len: u8,\n        symbol: str<31>,\n        symbol_len: u8,\n        decimals: u8,\n        message_leaf_index: Field,\n    ) {\n        aztec::oracle::debug_log::debug_log_format(\n            \"Registering L1 token {0} as L2 token {1}\",\n            [eth_token, aztec_token.to_field()],\n        );\n\n        let eth_token = EthAddress::from_field(eth_token);\n\n        assert(storage.l1_tokens.at(eth_token).read().is_zero(), \"Token already registered\");\n\n        // L1->L2 message content hash from token name, symbol, decimals\n        let content_hash =\n            register_content_hash(eth_token, name, name_len, symbol, symbol_len, decimals);\n        aztec::oracle::debug_log::debug_log_format(\"Register content hash: {0}\", [content_hash]);\n\n        // Set the shield gateway beacon\n        Token::at(aztec_token)\n            .set_shield_gateway_beacon(storage.shield_gateway_beacon.read())\n            .enqueue(&mut context);\n\n        // Ensure the supplied token address matches the expected address. This ensures its deployed with\n        // the correct code and initialization parameters.\n        let initializer = Token::interface().init(context.this_address(), name, symbol, decimals);\n        let args_hash = hash_args(initializer.args);\n        let init_hash = compute_initialization_hash(initializer.selector, args_hash);\n        let partial_address = PartialAddress::compute(\n            storage.token_contract_class_id.read(),\n            0x9876543210, // salt, hardcoded\n            init_hash,\n            AztecAddress::from_field(0),\n        );\n\n        let computed_address = AztecAddress::compute(PublicKeys::default(), partial_address);\n        // aztec::oracle::debug_log::debug_log_format(\n        //     \"Supplied Address: {0}, Computed address: {1}\",\n        //     [aztec_token.to_field(), computed_address.to_field()]\n        // );\n        // aztec::oracle::debug_log::debug_log_format(\"Gas left 4: {0}\", [context.l2_gas_left()]);\n        assert(\n            computed_address == aztec_token,\n            \"Expected address did not match supplized token address\",\n        );\n\n        // Consume the message\n        aztec::oracle::debug_log::debug_log_format(\n            \"Consuming message with leaf index {0}\",\n            [message_leaf_index],\n        );\n\n        let l1Portal = storage.l1_portal.read();\n        aztec::oracle::debug_log::debug_log_format(\"L1 Portal: {0}\", [l1Portal.to_field()]);\n\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())._register_public(aztec_token, eth_token).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _register_public(aztec_token: AztecAddress, eth_token: EthAddress) {\n        // Initialize the token mappings\n        storage.l1_tokens.at(eth_token).initialize(aztec_token);\n        storage.l2_tokens.at(aztec_token).initialize(eth_token);\n        Register { eth_token, aztec_token }.emit(encode_event(&mut context));\n    }\n\n    #[private]\n    fn claim_public(\n        eth_token: Field,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let eth_token = EthAddress::from_field(eth_token);\n\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())\n            ._claim_public(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _claim_public(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_to_public(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .call(&mut context);\n    }\n\n    #[private]\n    fn claim_shielded(\n        eth_token: Field,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let eth_token = EthAddress::from_field(eth_token);\n\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_shielded(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _log_claim(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Deposit { eth_token, recipient, amount, message_leaf_index }.emit(encode_event(\n            &mut context,\n        ));\n    }\n\n    #[public]\n    fn withdraw_public(\n        eth_token: EthAddress,\n        from: AztecAddress,\n        recipient: EthAddress,\n        amount: u128,\n        withdrawNonce: Field,\n        burnNonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(withdrawNonce == 0, \"Invalid nonce\");\n        }\n\n        // Burn the tokens\n        Token::at(storage.l1_tokens.at(eth_token).read()).burn_public(from, amount, burnNonce).call(\n            &mut context,\n        );\n\n        // Message the L1 Portal\n        let content_hash = withdraw_content_hash(eth_token, recipient, amount.to_field());\n        context.message_portal(storage.l1_portal.read(), content_hash);\n\n        aztec::oracle::debug_log::debug_log_format(\"Withdraw L2ToL1 Message {0}\", [content_hash]);\n\n        Withdraw { token: eth_token, from, to: recipient, amount }.emit(encode_event(&mut context));\n    }\n\n    #[utility]\n    unconstrained fn is_registered_l1(eth_token: Field) -> pub bool {\n        let eth_token = EthAddress::from_field(eth_token);\n        !storage.l1_tokens.at(eth_token).read().is_zero()\n    }\n\n    #[utility]\n    unconstrained fn is_registered_l2(aztec_token: AztecAddress) -> pub bool {\n        !storage.l2_tokens.at(aztec_token).read().is_zero()\n    }\n\n    #[utility]\n    unconstrained fn get_l2_token(eth_token: Field) -> pub AztecAddress {\n        let eth_token = EthAddress::from_field(eth_token);\n        storage.l1_tokens.at(eth_token).read()\n    }\n\n    #[utility]\n    unconstrained fn get_l1_token(aztec_token: AztecAddress) -> pub EthAddress {\n        storage.l2_tokens.at(aztec_token).read()\n    }\n\n    #[utility]\n    unconstrained fn get_l1_portal() -> pub EthAddress {\n        storage.l1_portal.read()\n    }\n}\n"
    },
    "57": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "65": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "66": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let N: u32, T> UtilityCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n}\n\nimpl<let N: u32> UtilityVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: () }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n"
    },
    "73": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "74": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "75": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "76": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "78": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/event/event_interface.nr",
      "source": "use dep::protocol_types::abis::event_selector::EventSelector;\n\npub trait EventInterface {\n    fn get_event_type_id() -> EventSelector;\n\n    fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n}\n"
    },
    "80": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "92": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "97": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.87.8/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    }
  }
}
