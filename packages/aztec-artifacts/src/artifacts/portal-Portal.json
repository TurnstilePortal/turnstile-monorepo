{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "Portal",
  "functions": [
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "l1_portal",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "token_contract_class",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "shield_gateway_beacon",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "claim_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "_register_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_register_public"
      ]
    },
    {
      "name": "is_registered_l1",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "is_registered_l1"
      ]
    },
    {
      "name": "_log_claim",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBIJwAABAMnAgUEBCcCBgQAHxgABgAFgEQdAIBGgEYGLgiARAABLgiARQACLgiARgADLgiARwAEJQAAAF4lAAAAXygCAAEEgEgnAgIEADsNAAEAAiYlAAACOB4CAAYAHgIABwAzOAAGAAcACCcCBgEBJAIACAAAAIglAAACYR4CAAYBHgIABwAKOAYHCCQCAAgAAACkJQAAAnMcDAMGACkCAAMAIxDODy0IAQcnAggEBgAQAQgBJwMHBAEAKAcCCC0MCAktDgEJACgJAgktDgIJACgJAgktDgYJACgJAgktDgQJACgJAgktDgMJJwIBAAAtCAECJwIDBAYAEAEDAScDAgQBACgCAgMtDAMELQ4BBAAoBAIELQ4BBAAoBAIELQ4BBAAoBAIELQ4BBAAoBAIELQ4BBC0IAQEAAAECAS0OAgEnAgIEACcCAwQFJwIEBAEtDAIFIwAAAWQMOAUDAiQCAAIAAAHuIwAAAXYtDQECJwIFBAUGKAUCAScCBwQDADgFBwYtCAEEABABBgEnAwQEAQAoBAIGLQ4FBgAoBgIGLQ4FBicCBwQDADgEBwYAKAICBy4EAAeAAy4EAAaABC4EAAWABSUAAAKFACgEAgYtDQYFJwIHBAIAOAYHAjcNAAIABSYAKAcCBgA4BgUILQ0IAi0NAQYuBAAGgAMoAIAEBAAGJQAAAssuCIAFAAgAKAgCCQA4CQUKLQ4CCi0OCAEAOAUEAi0MAgUjAAABZCgAgAQEeAANAAAAgASAAyQAgAMAAAJgKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQWeoTt9j/vabDwBAQImAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAAALKLgGACIAGLgKABoAJAQCACAACgAgBAIAJAAKACSMAAAKZJi4BgAOABgsAgAYAAoAHJACABwAAAuYjAAAC8S4AgAOABSMAAANYLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAA0QuAYAKgAguAoAIgAsBAIAKAAKACgEAgAsAAoALIwAAAxMoAYAFBAABAwCABgACgAYjAAADWCY=",
      "debug_symbols": "7ZzbTuMwEIbfJde58Hh8mOFVVggVCKhS1aJSVloh3n1jtkkT7CUr6Dbx4QbVaNz883lce2zHr9V9c/vyeLPePuyeq6sfr9Vmd7c6rHfbtvT6Vle3+/Vms368Gf67Eu4PCPFe4flptXXl58Nqf6iuAKUWddVs791nJN1+ycN607QlwW+1by+k7MyFkgNrE7BWxsDRWhkremurAsakhT4ak5YwNL6uW/36PPqZO3MAvqB+OBN/TT1/muIP2trO2iB+rp81d86yQeXpp3PrBznW754i8RJPQbjIU0zwKcDcV5MCzMRTFKHqYpAGPe4vMWhlH4NkP7ahCvstB51ajns1/+deof6FkVIjRa6ehi/W46/VMypUj6TBzjmU1NfSOhgu4tR1Rz89GOKG1GMbyGERsJW9eAScsAVibToZxObUfCjsH1d5wa7qPvQ0m5Gtk24pWukk45Vuo5XO8VLnaKm3w0280k200sMT0Dik63ilRzuaSqnilR7tREAixis93iFJxTskqSUPSUZ22Z9RNGFL1CUmDPB5Vom2zyrRylPOg+o9XZPh9DBzJkseRGdiYpY8J5qLSYkTj4ktceIzKXHiM1nybH8mJrTkCe1cTJacn8zEZNFrcXMxWXJGNQ8TFGVu7zMpOaDHZNHrnXMxKXM2n0mZs3lMZJmz+UzKnM1jonMcd0h0tu1H6zGxKkMmLLqTU8gQYJJg35Gjk0/OyxQz3YCXWbQlZ9GWnENbqkWfNzmflwmuFfheQhZtCVm0pUxwJSfgZYJzZN9LTHC1JeBlgusnvpcqi7ZUWbRliidhAl5mMV6aHHISZZLJSazovZx6985S971Mg1fCjkhsMg1/PiTJ9PizIVn0K0QzISlR8hEJqxyX7LHfxhi+Q3tcnlac4xbg50y0KHHiM8lxC5Co39ohAo9Jigty39zu0pBjnEwwkTkePZlgkuKi2beZ5HikYIKJyvHI4xSTEiceE11+T3wmqjAZMXlriz9X+/XqdtMcrw17eNneDW4RO/x6aj5cKPa039019y/7xl0tdrpVzMUboKlB25a1W6WC1iNAfe1u7HJFwBqAXBHei1yDhFZDq+M3",
      "brillig_names": [
        "_log_claim"
      ]
    },
    {
      "name": "claim_shielded",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/+y9B5hURdP+vbCBzbtExUTOoN2zw86MEcw558jOzK6SBATFiFkxZ0ElIzlIBsGsmHPOCXPOKKbv9ONZOTP0wO6eu85b9f3t6+oLOK9vP9XVd91dv5nZ2UZZ/4yDNs/KWrHlP39v5Mxs98/Gzmyb9qz2T+/fcy3/XZHlWYnlWZnlWVPLs1bO7JP2rI3lv2tredbO8qy95VkXy7PuzrwgK3U0cv/s4/5ZoSrD4epIqFpX6CoVisWjvVW4d7wyqqO6d7R3MhStqKiOhqORWDwWUTEdrqjWNb1jFTXqn2H+x2rXUr5GKEEZZ6OGx9k7/YGJrZkzc7yxOuv/5f69a9b6v3fz/L2R+9/U/v81dv6d7cwcZ+Zmr39eO7LTcqD8Dd0duFbjbNzZ5ME05OiRMH89gGtlA/PXBJg/m7bzPNpu4vl7jufvuWnaznf+XeDMQmcWWbTdGHw2XbJw+SzG5VN7/dis25Y4D8VAXZUQ5aHEzUNOWg68oxE4L42yaDwmCxtnPCUBtQkzF8okN2FNs9YbG2XCumZJSFiIbm39jxnW5rat+/dSJ/llzix3ZlNnNnNmc2e2cGZLZ7Zy5mbO3NyZrZ25hTO3dOZWztzamds4s40pAGe2c2Z7Z3ZwZkdndnJmZ2d2cWZXZ3ZzZndn9nBmT2f2Su9kTTD5ac/KLM/KLc+aWp41szxrbnnWwvKspeVZK8uzzSzPNrc8a215toXl2ZaWZ1tZnm1tebaN5Vkby7O2lmftLM/aW551sDzraHnWyfKss+VZF8uzrpZn3SzPulue9bA862l51st95h3t3D/7uH8qfyPFdPzeXqWAm7C6xgyly0BrmT2WQ9b6J19N/a8VcvOlm/ldK/xv7nVzf2spzznqFn7WCqVoQrds+FoqTV+6VQPXqqzZQKt6s4atFbXoXm/ekLWi1hrSreu/ViRDPeot6rtWJGNt6y3rt1ZoIz6ht6rPWpGNeo7euu5rJTbhX3qbuq4V2aQX6jZ1W0vVwVd127qsperk0brdptfqXUe/1+03tVa4zneH7rDRtcI19biHdMeNrRWp152mO2VeK1rP+1F3zrBWrKbed63uYl9LNeDe1l1ta6kG9QC624Zr6Qb2E7p7+lrJBvcmukfqWhU++hzd07NWqMZXz6R7ZeOgz8CqeSWpFqK8Aw2rvWC9XlJ74902mzBgs3j6yz9+g98Wd4B6O0BS/32bgCiHJkbUWwW1OdwOXATNs4J5iQtXvEnSV1W8uVBugen0VzZU9obv1WkLgWYTJtEvNSpgAWnw4aLFZ4pGAYuxdt9K6I3UE6ajWNIbbyibMOAQ/EaKJUPAG6mC+Y1kclgBv5FiyQqhN1JPWNyxhCVckhsp7BZY7/QbKWy5kXoHcCP1BN5IYWAB9SY6XJQB1caJ3HMl0MyysvC35XauAaHfVUaiQARoZrYcKn9DmzOOEHQyEaGdTA+Y/8QrvPFGswkDjsI7mXhFFFj8MeadjMlhDN7JxCtixMWPMNAIcwPdHpzD2oG+eJEa3wFYe0F2wD1gccdDlnBJOuAdXWPeKb0D3tHSAe8UQAeMu4GU3hEoyp2IDhddiMg970zcASt/Qxtz3IGge9uFeddqzmUXAfum0vguQI33Ya7xTE0KovlBrdUXfGEHRTvdYXdNtMYb767ZhAHvCqedaM2uwAPcjTntmBzuBqedaM1uzGnHGF3fbN5mvDvYjGsHes9Ije8hlHa6w+KOVlvCJaGdPV1j3iuddva00M5eAdAO7gZSek+gKPciOlx0ISL3vDfzTtCY4x4EXf8+zGnHnMs+AvZNpfF9gBrfl7nGMzUpyt/QyCZlP6Hv7XSD3TUh5Y13/2zCgPeH005I7Q8sggOY047J4QFw2gmpA5jTjjG6/bJ5m/GBQmgHqfGDhNJON1jcusYSLgntHOwa8yHptHOwhXYOCYB2cDeQ0gcDRXkI0eGiCxG550OZd4LGHA8i6PoPY0475lwOE7BvKo0fBtT44cw1nqlJUf6GRjYpRwilna6wuyaZQjtHZhMGfCScdpLqSGARHMWcdkwOj4LTTlIdxZx2jNEdkc3bjI8WQjtIjR8jlHa6wuJOBEY7x7rGfFw67RxroZ3jAqAd3A2k9LFAUR5HdLjoQkTu+XjmnaAxx2MIuv4TmNOOOZcTBOybSuMnADV+InONZ2pSlL+hkU3KSUJppwvsrqlM+U6MftmEAfeD006l7gcsgirmtGNyWAWnncqUfSufw7ZvhNGdlM3bjONCaAep8YRQ2ukCi7sysO9SSbrGXJ1OO0kL7VQHQDu4G0jpJFCU1USHiy5E5J5rmHeCxhwTBF3/ycxpx5zLyQL2TaXxk4EaP4W5xjM1Kcrf0Mgmpb9Q2umMe28n6o13QDZhwAPw7+1EBwCLYCBz2jE5HIh/byc6kDntGKPrn83bjAcJoR2kxgcLpZ3OsLiTEUu4JLRzqmvMQ9Jp51QL7QwJgHZwN5DSpwJFOYTocNGFiNzzUOadoDHHwQRd/zDmtGPOZZiAfVNpfBhQ46cx13imJkX5GxrZpAwXSjudYHdNOOaNd0Q2YcAj4LQTjo0AFsHpzGnH5PB0OO2EY6czpx1jdMOzeZvxGUJoB6nxkUJppxMs7nDUEi4J7ZzpGvNZ6bRzpoV2zgqAdnA3kNJnAkV5FtHhogsRueezmXeCxhxHEnT95zCnHXMu5wjYN5XGzwFq/FzmGs/UpCh/QyOblPOE0k5H2F0TT/kk26hswoBHwWknrkcBi+B85rRjcng+nHbiKftWPodt3wijOy+btxlfIIR2kBq/UCjtdITFHQ/sk2wXucZ8cTrtXGShnYsDoB3cDaT0RUBRXkx0uOhCRO75EuadoDHHCwm6/kuZ0445l0sF7JtK45cCNX4Zc41nalKUv6GRTcrlQmmnA452Et54R2cTBjwaTzuJ0cAiuII57ZgcXoGnncQVzGnHGN3l2bzN+EohtIPU+FVCaacDriGOW8IloZ2rXWO+Jp12rrbQzjUB0A7uBlL6aqAoryE6XHQhIvd8LfNO0JjjVQRd/3XMacecy3UC9k2l8euAGr+eucYzNSnK39DIJuUGobTTHvdJtrg33huzCQO+Ef9JtviNwCK4iTntmBzehP8kW/wm5rRjjO6GbN5mfLMQ2kFq/BahtNMe92GnKku4JLRzq2vMY9Jp51YL7YwJgHZwN5DStwJFOYbocNGFiNzzWOadoDHHWwi6/tuY0445l9sE7JtK47cBNX47c41nalKUv6GRTcodQmmnHeyuiaZ8A/W4bMKAx8FpJ6rGAYtgPHPaMTkcD6edqBrPnHaM0d2RzduMJwihHaTGJwqlnXawuCOBfQP1JNeYJ6fTziQL7UwOgHZwN5DSk4CinEx0uOhCRO55CvNO0JjjRIKufypz2jHnMlXAvqk0PhWo8TuZazxTk6L8DY1sUqYJpZ22RLQzPZsw4OkEtDMdWAQzmNOOyeEMAtqZwZx2jNFNy+ZtxjOF0A5S47OE0k5bgbQz2zXmOem0M9tCO3MCoB3cDaT0bKAo5wihHeSe5zLvBI05ziLo+ucxpx1zLvME7JtK4/OAGp/PXOOZmhTlb2hkk3KXUNppA7trqlK+k21BNmHAC+C0UxVbACyChcxpx+RwIZx2qmILmdOOMbq7snmb8SIhtIPU+GKhtNMGFndVYN/JtsQ15qXptLPEQjtLA6Ad3A2k9BKgKJcSHS66EJF7Xsa8EzTmuJig61/OnHbMuSwXsG8qjS8HanwFc41nalKUv6GRTcrdQmlnGxzthL3xrswmDHglnnbCK4FFsIo57ZgcrsLTTngVc9oxRnd3Nm8zvkcI7SA1fq9Q2tkG1xBXWMIloZ37XGO+P5127rPQzv0B0A7uBlL6PqAo7yc6XHQhIvf8APNO0JjjvQRd/4PMacecy4MC9k2l8QeBGn+IucYzNSnK39DIJuVhobSzNeyuSaa8t/NINmHAj8BpJxl7BFgEq5nTjsnhajjtJGOrmdOOMbqHs3mb8aNCaAep8ceE0s7WsLiTgb2387hrzE+k087jFtp5IgDawd1ASj8OFOUTRIeLLkTknp9k3gkac3yMoOt/ijntmHN5SsC+qTT+FFDjTzPXeKYmRfkbGtmkPCOUdraC3TWJam+8z2YTBvwsnHYS1c8Ci+A55rRjcvgcnHYS1c8xpx1jdM9k8zbj54XQDlLjLwilna1gcSeSlnBJaOdF15hfSqedFy2081IAtIO7gZR+ESjKl4gOF12IyD2/zLwTNOb4AkHX/wpz2jHn8oqAfVNp/BWgxl9lrvFMTYryNzSySXlNKO1sCbtrdMp7O69nEwb8Opx2dOx1YBG8wZx2TA7fgNOOjr3BnHaM0b2WzduM3xRCO0iNvyWUdraExa0De2/nbdeY30mnnbcttPNOALSDu4GUfhsoyneIDhddiMg9v8u8EzTm+BZB1/8ec9ox5/KegH3XDrTG3wNq/H3mGs/UpCh/QyOblA+E0s4WsLsmnkI7H2YTBvwhnHbisQ+BRbCGOe2YHK6B0048toY57Rij+yCbtxl/JIR2kBr/WCjtbAGLOx4Y7XziGvOn6bTziYV2Pg2AdnA3kNKfAEX5KdHhogsRuefPmHeCxhw/Juj6P2dOO+ZcPhewbyqNfw7U+BfMNZ6pSVH+hkY2KV8KpZ3WsLsmGvXG+1U2YcBfwWknGv0KWARfM6cdk8Ov4bQTjX7NnHaM0X2ZzduMvxFCO0iNfyuUdlrD4o5GLOGS0M53rjF/n04731lo5/sAaAd3Ayn9HVCU3xMdLroQkXv+gXknaMzxW4Ku/0fmtGPO5UcB+6bS+I9Ajf/EXOOZmhTlb2hkk/KzUNrZHHbXhFNo55dswoB/gdNOOPoLsAjWMqcdk8O1cNoJR9cypx1jdD9n8zbjX4XQDlLjvwmlnc1hcYcDo511rjH/nk476yy083sAtIO7gZReBxTl70SHiy5E5J7/YN4JGnP8jaDr/5M57Zhz+VPAvqk0/idQ438x13imJkX5GxrZpPwtlHY2g901MZ0Sbw5hwGZxLO3EtFkTFWOjHN60Y3JoYsTSTixl38rnsO0bYXR/Z/M248Y5WDOuHeg9IzWeDdxzkLSzGcz0Y8oSLgnt5LjGnJuTlUo2OTkb0o75j6hpZzMg7eQARZmbQ3O46EJE7jkPbD7ogjPmmJ2DvxiaEF9cyt/Q5lyaCNg3lcabADWez1zjmZoU5W9oZJNSANRNkLTTCnbXRJQ33sIcwoAL4bQTUYXAIihiTjsmh0Vw2omoIua0Y4yuIIe3GRcLoR2kxkuE0k4rGO1U1ljCJaGdUteYy9Jpp9RCO2UB0E4rIO2UAkVZlkNzuOhCRO65nHknaMyxhKDrb8qcdsy5NBWwbyqNNwVqvBlzjWdqUpS/oZFNSnOhtNMSdtfEU76BukUOYcAt4LQTr24BLIKWzGnH5LAlnHbi1S2Z044xuuY5vM24lRDaQWp8M6G00xL3g+xJS7gktLO5a8yt02lncwvttA6AdloCaWdzoChb59AcLroQkXvegnknaMxxM4Kuf0vmtGPOZUsB+6bS+JZAjW/FXOOZmhTlb2hkk7K1UNppAbtrQinv7WyTQxjwNnDaCaltgEXQhjntmBy2gdNOSLVhTjvG6LbO4W3GbYXQDlLj7YTSTgsY7ejA3ttp7xpzh3TaaW+hnQ4B0E4LIO20B4qyQw7N4aILEbnnjsw7QWOO7Qi6/k7MacecSycB+6bSeCegxjsz13imJkX5GxrZpHQRSjvNcXdNwhtv1xzCgLvCaUclugKLoBtz2jE57AanHZXoxpx2jNF1yeFtxt2F0A5S4z2E0k5z3A9rxi3hktBOT9eYe6XTTk8L7fQKgHaAN5DuCRRlrxyaw0UXInLP2zLvBI059iDo+rdjTjvmXLYTsG8qjW8H1LhirvFMTYryNzSySdFCaacZ7K6pTPkkWyiHMOAQnHYqq0PAIqhgTjsmhxVw2qmsrmBOO6aydA5vMw4LoR2kxnsLpZ1muJ/bSVrCJaGdSteYI+m0U2mhnUgAtNMMSDuVQFFGcmgOF12IyD1HmXeCxhx7E3T9Mea0Y84lJmDfVBqPATW+PXONZ2pSlL+hkU3KDkJppynsrtEp38m2Yw5hwDvCaUfrHYFFsBNz2jE53AlOOzpl38rnsO0bYXQ75PA2452F0A5S47sIpZ2muE+yBfadbH1cY+6bTjt9LLTTNwDaaQqknT5AUfbNoTlcdCEi97wr807QmOMuBF3/bsxpx5zLbgL2TaXx3YAa3525xjM1Kcrf0MgmZQ+htFMO/OZsb7x75hAGvGcOft29mBOK2fdeOesTDFqXhCqMoeyRw9v09hZCFUhd7kNs9Igz2YdA40EaahmRoe6bQxjwvgSGuh9zQzX73u8/Q4Wttb8QQ0Xq8gDmhmrO5ADhhloK/OZkb7wH5hAGfCBBsR4IFNtBzM3Z5PAgArw/iPnr8RKM/mAhRo/U+CHMXyIxZ3IIQb0cyvxlQOMThxI1cVS6PBSoy8OY6zKTnyl/QyP97HDmGjdnfDgBoCF1aEqwadb6t8K8Ax13tyyaOs+Cxhkiff+ykSe3bd2/H+EcwpHOPMqZRzvzGGce68zjnHm8M09w5onOPMmZ/ZxZ5cy4MxPOTDqz2pk1zjzZmac4s78zBzhzoDMHOXOwM0915hBnDnXmMGee5szhzhyR/t7pEe77pN5nR1qeHWV5drTl2TGWZ8danh1neXa85dkJlmcnWp6dZHnWz/KsyvIsbnmWsDxLWp5VW57VWJ6dbHl2iuVZf8uzAZZnAy3PBlmeDbY8O9XybIjl2VDLs2GWZ6dZng23PBuRs+F78u3cP/u4fyp/I8V0/JrlEQDjrX1//0jQWmaPR0HW+idfR/tfK+TmSx/jd63wv7nXx/pbS3nOUR/nZ61Qiib08Q1fS6XpS5/QwLUqazbQqj6xYWtFLbrXJzVkrai1hnS/+q8VyVCPuqq+a0Uy1raO12+t0EZ8Qifqs1Zko56jk3VfK7EJ/9LVdV0rskkv1DV1W0vVwVf1yXVZS9XJo/Upm16rdx39Xvff1FrhOt8desBG1wrX1OMe0gM3tlakXneaHpR5rWg970c9OMNasZp637X6VPtaqgH3th5iW0s1qAfQQzdcSzewn9DD0tdKNrg30aelrlXho8/Rwz1rhWp89Ux6BBDSg3z3YgSs10um/DTB6TmEAZ+eg/5pgqQ+HXeA+gxAUinfvTA5PAP4amxtDs8AF0FQnwrHFW8ysE+Fj3QL7Mz0VzZG5mz4qfAzc+g/FY5zEqVHAgvoTPDhosVnimYksBhr9z1S6I00HKajWNIb71k5hAGfBb+RYsmzgDfS2cxvJJPDs+E3Uix5ttAbaTgs7ljCEi7JjXSOW2Dnpt9I51hupHMDuJGGA2+kc4AFdC7R4aLfCEbu+TygmWVl4W/LM1wDQr8RjESBUUAzs+VQ+RvanPEogk5mlNBO5jSY/8QrvPGen0MY8PnwTiZecT6w+C9g3smYHF4A72TiFRcQFz/CQEcxN9ALwTmsHeiLF6nxi4C1F2QHfBos7njIEi5JB3yxa8yXpHfAF1s64EsC6IBxN5DSFwNFeQnR4aILEbnnS4k7YOVvaGOOFxF0b5cx71rNuVwmYN9UGr8MqPHLmWs8U5OCaH5Qa40GX9hB0c4w2F0TrfHGe0UOYcBXwGknWnMF8ACvZE47JodXwmknWnMlc9oxRjc6h7cZXwU249qB3jNS41cLpZ1hsLij1ZZwSWjnGteYr02nnWsstHNtALSDu4GUvgYoymuJDhddiMg9X8e8EzTmeDVB1389c9ox53K9gH1Tafx6oMZvYK7xTE2K8jc0skm5Ueh7O0Nhd00o5VsfbsohDPgmOO2E1E3AIriZOe2YHN4Mp52Qupk57RijuzGHtxnfIoR2kBq/VSjtDIXFnfor57OQcabRzhjXmMem084YC+2MDYB2cDeQ0mOAohxLdLjoQkTu+TbmnaAxx1sJuv7bmdOOOZfbBeybSuO3AzV+B3ONZ2pSlL+hkU3KOKG0MwR21yRTaGd8DmHA4+G0k1TjgUUwgTntmBxOgNNOUk1gTjvG6Mbl8DbjiUJoB6nxSUJpZwgs7kRgtDPZNeYp6bQz2UI7UwKgHdwNpPRkoCinEB0uuhCRe57KvBM05jiJoOu/kzntmHO5U8C+qTR+J1Dj05hrPFOTovwNjWxSpgulnVNhd01lyndizMghDHgGnHYq9QxgEcxkTjsmhzPhtFOZsm/lc9j2jTC66Tm8zXiWENpBany2UNo5FRZ3ZWDfpTLHNea56bQzx0I7cwOgHdwNpPQcoCjnEh0uuhCRe57HvBM05jiboOufz5x2zLnMF7BvKo3PB2r8LuYaz9SkKH9DI5uUBUJpZzDuvZ2oN96FOYQBL8S/txNdCCyCRcxpx+RwEf69negi5rRjjG5BDm8zXiyEdpAaXyKUdgbD4k5GLOGS0M5S15iXpdPOUgvtLAuAdnA3kNJLgaJcRnS46EJE7nk5807QmOMSgq5/BXPaMeeyQsC+qTS+Aqjxu5lrPFOTovwNjWxSVgqlnUGwuyYc88a7Kocw4FVw2gnHVgGL4B7mtGNyeA+cdsKxe5jTjjG6lTm8zfheIbSD1Ph9QmlnECzucNQSLgnt3O8a8wPptHO/hXYeCIB2cDeQ0vcDRfkA0eGiCxG55weZd4LGHO8j6PofYk475lweErBvKo0/BNT4w8w1nqlJUf6GRjYpjwilnYGwuyae8km21TmEAa+G005crwYWwaPMacfk8FE47cRT9q18Dtu+EUb3SA5vM35MCO0gNf64UNoZCIs7Htgn2Z5wjfnJdNp5wkI7TwZAO7gbSOkngKJ8kuhw0YWI3PNTzDtBY46PE3T9TzOnHXMuTwvYN5XGnwZq/BnmGs/UpCh/QyOblGeF0s4AHO0kvPE+l0MY8HN42kk8ByyC55nTjsnh83jaSTzPnHaM0T2bw9uMXxBCO0iNvyiUdgbgGuK4JVwS2nnJNeaX02nnJQvtvBwA7eBuIKVfAoryZaLDRRcics+vMO8EjTm+SND1v8qcdsy5vCpg31QafxWo8deYazxTk6L8DY1sUl4XSjv9cZ9ki3vjfSOHMOA38J9ki78BLII3mdOOyeGb+E+yxd9kTjvG6F7P4W3GbwmhHaTG3xZKO/1xH3aqsoRLQjvvuMb8bjrtvGOhnXcDoB3cDaT0O0BRvkt0uOhCRO75PeadoDHHtwm6/veZ0445l/cF7JtK4+8DNf4Bc41nalKUv6GRTcqHQmnnFNhdE035Buo1OYQBr4HTTlStARbBR8xpx+TwIzjtRNVHzGnHGN2HObzN+GMhtIPU+CdCaecUWNyRwL6B+lPXmD9Lp51PLbTzWQC0g7uBlP4UKMrPiA4XXYjIPX/OvBM05vgJQdf/BXPaMefyhYB9U2n8C6DGv2Su8UxNivI3NLJJ+Uoo7ZxMRDtf5xAG/DUB7XwNLIJvmNOOyeE3BLTzDXPaMUb3VQ5vM/5WCO0gNf6dUNo5WSDtfO8a8w/ptPO9hXZ+CIB2cDeQ0t8DRfmDENpB7vlH5p2gMcfvCLr+n5jTjjmXnwTsm0rjPwE1/jNzjWdqUpS/oZFNyi9CaacGdtdUpXwn29ocwoDXwmmnKrYWWAS/Mqcdk8Nf4bRTFfuVOe0Yo/slh7cZ/yaEdpAaXyeUdmpgcVcF9p1sv7vG/Ec67fxuoZ0/AqAd3A2k9O9AUf5BdLjoQkTu+U/mnaAxx3UEXf9fzGnHnMtfAvZNpfG/gBr/m7nGMzUpyt/QyCYlK1cm7VTjaCfsjbdRLmHAZnEw7YQb4Q5QN87lTTsmhyZGMO2EG+fSXhoIo8vK5W3G2blYM64d6D0jNZ4D3HOQtFONa4grLOGS0E6ua8x5uVmpZJObuyHtmP+ImnaqgbSTCxRlXi7N4aILEbnnJmDzQRecMcecXPzFkE98cSl/Q5tzyRewbyqN5wM1XsBc45maFOVvaGSTUiiUdpKwuyaZ8t5OUS5hwEVw2knGioBFUMycdkwOi+G0k4wVM6cdY3SFubzNuEQI7SA1XiqUdpIw2kkG9t5OmWvM5em0U2ahnfIAaCcJpJ0yoCjLc2kOF12IyD03Zd4JGnMsJej6mzGnHXMuzQTsm0rjzYAab85c45maFOVvaGST0kIo7SRgd02i2htvy1zCgFvCaSdR3RJYBK2Y047JYSs47SSqWzGnHWN0LXJ5m/FmQmgHqfHNhdJOAkY7iaQlXBLaae0a8xbptNPaQjtbBEA7CSDttAaKcotcmsNFF2Jr4J63ZN4JGnPcnKDr34o57Zhz2UrAvqk0vhVQ41sz13imJkX5GxrZpGwjlHbisLtGp7y30yaXMOA2cNrRsTbAImjLnHZMDtvCaUfH2jKnHWN02+TyNuN2QmgHqfH2QmknDqMdHdh7Ox1cY+6YTjsdLLTTMQDaiQNppwNQlB1zaQ4XXYjIPXdi3gkac2xP0PV3Zk475lw6C9g3lcY7AzXehbnGMzUpyt/QyCalq1DaqYLdNfEU2umWSxhwNzjtxGPdgEXQnTntmBx2h9NOPNadOe0Yo+uay9uMewihHaTGewqlnSoY7cQDo51erjFvm047vSy0s20AtFMFpJ1eQFFum0tzuOhCRO55O+adoDHHngRdv2JOO+ZclIB9U2lcATWumWs8U5Oi/A2NbFJCQmmnH+4bqKPeeCtyCQOugNNONFoBLIIwc9oxOQzDaScaDTOnHWN0oVzeZtxbCO0gNV4plHb6wWgnGrGES0I7EdeYo+m0E7HQTjQA2ukHpJ0IUJTRXJrDRRcics8x5p2gMcdKgq5/e+a0Y85lewH7ptL49kCN78Bc45maFOVvaGSTsqNQ2jkJdteEU2hnp1zCgHeC0044uhOwCHZmTjsmhzvDaScc3Zk57Rij2zGXtxnvIoR2kBrvI5R2ToLRTjgw2unrGvOu6bTT10I7uwZAOycBaacvUJS75tIcLroQkXvejXkn+D9zJOj6d2dOO+ZcdhewbyqN7w7U+B7MNZ6pSVH+hkY2KXsKpZ0TYXdNTHvj3SuXMOC94LQT03sBi2Bv5rRjcrg3nHZiKftWPodt3wij2zOXtxnvI4R2kBrfVyjtnAijnZiyhEtCO/u5xrx/Ou3sZ6Gd/QOgnROBtLMfUJT759IcLroQkXs+gHknaMxxX4Ku/0DmtGPO5UAB+6bS+IFAjR/EXOOZmhTlb2hkk3KwUNo5AXbXRJQ33kNyCQM+BE47EXUIsAgOZU47JoeHwmknog5lTjvG6A7O5W3GhwmhHaTGDxdKOyfAaKeyxhIuCe0c4Rrzkem0c4SFdo4MgHZOANLOEUBRHplLc7joQkTu+SjmnaAxx8MJuv6jmdOOOZejBeybSuNHAzV+DHONZ2pSlL+hkU3KsUJp53jctxSkfAP1cbmEAR8Hp5149XHAIjieOe2YHB4Pp5149fHMaccY3bG5vM34BCG0g9T4iUJp53jctxQkLeGS0M5JrjH3S6edkyy00y8A2jkeSDsnAUXZL5fmcNGFiNxzFfNO0JjjiQRdf5w57ZhziQvYN5XG40CNJ5hrPFOTovwNjWxSkkJp5zjYXRNKeW+nOpcw4Go47YRUNbAIapjTjslhDZx2QqqGOe0Yo0vm8jbjk4XQDlLjpwilneNw30Ad2Hs7/V1jHpBOO/0ttDMgANo5Dkg7/YGiHJBLc7joQkTueSDzTtCY4ykEXf8g5rRjzmWQgH1TaXwQUOODmWs8U5Oi/A2NbFJOFUo7x+LumoQ33iG5hAEPgdOOSgwBFsFQ5rRjcjgUTjsqMZQ57RijOzWXtxkPE0I7SI2fJpR2joXRjopbwiWhneGuMY9Ip53hFtoZEQDtAG8gPRwoyhG5NIeLLkTknk9n3gkaczyNoOs/gzntmHM5Q8C+qTR+BlDjI5lrPFOTovwNjWxSzhRKO8fA7prKlE+ynZVLGPBZcNqprD4LWARnM6cdk8Oz4bRTWX02c9oxRndmLm8zPkcI7SA1fq5Q2jkG93M7gX2S7TzXmEel0855FtoZFQDtHAOknfOAohyVS3O46EJE7vl85p2gMcdzCbr+C5jTjjmXCwTsm0rjFwA1fiFzjWdqUpS/oZFNykVCaedo2F2jU76T7eJcwoAvhtOO1hcDi+AS5rRjcngJnHZ0yr6Vz2HbN8LoLsrlbcaXCqEdpMYvE0o7R+M+yRbYd7Jd7hrz6HTaudxCO6MDoJ2jgbRzOVCUo3NpDhddiMg9X8G8EzTmeBlB138lc9ox53KlgH1TafxKoMavYq7xTE2K8jc0skm5WijtHIX7MEbKz+1ck0sY8DW5+HWvZU4oZt/X5q5PMGhdEqowhnJ1Lm/Tu04IVSB1eT2x0SPO5HoCjQdpqEcSGeoNuYQB30BgqDcyN1Sz7xv/M1TYWjcJMVSkLm9mbqjmTG4WbqhH5ODy4Y33llzCgG8hKNZbgGK7lbk5mxzeSoD3tzJ/PV6C0Y8RYvRIjY9l/hKJOZOxBPVyG/OXAY1P3EbUxFHp8jagLm9nrstMfqb8DY30szuYa9yc8R0EgIbUoWkIm2atfyvMO9Bxd8+iqfMsaJwh0vcvG3ly29b9+zjnPMc7c4IzJzpzkjMnO3OKM6c6805nTnPmdGfOcOZMZ85y5mxnznHmXGfOc+Z8Z97lzAXOXOjMRc5c7MwlzlzqzGXOXO7MFc6825krnbkq/b3Tce77pN5n4y3PJlieTbQ8m2R5NtnybIrl2VTLszstz6ZZnk23PJtheTbT8myW5dlsy7M5lmdzLc/mWZ7Ntzy7y/JsgeXZQsuzRZZniy3PllieLbU8W2Z5ttzybIXl2d2WZystz1blbviefDv3zz7un8rfSDEdv2Y5DmC8te/vjwetZfY4AbLWP/ma6H+tkJsvPcnvWuF/c68n+1tLec5RT/GzVihFE3pqw9dSafrSdzZwrcqaDbSqpzVsrahF93p6Q9aKWmtIz6j/WpEM9ahn1netSMba1rPqt1ZoIz6hZ9dnrchGPUfPqftaiU34l55b17Uim/RCPa9ua6k6+KqeX5e1VJ08Wt+16bV619Hv9YJNrRWu892hF250rXBNPe4hvWhja0XqdafpxZnXitbzftRLMqwVq6n3XauX2tdSDbi39TLbWqpBPYBevuFauoH9hF6Rvlaywb2Jvjt1rQoffY5e6VkrVOOrZ9KrgJAe5LsXq2C9XjLlpwnuySUM+J5c9E8TJPU9uAPU9wKSSvnuhcnhvcBXY2tzeC+4CIL6VDiueJOBfSr8PrfA7k9/ZeO+3A0/FX5/Lv2nwnFOovR9wAK6H3y4aPGZorkPWIy1+75P6I20EqajWNIb7wO5hAE/AL+RYskHgDfSg8xvJJPDB+E3Uiz5oNAbaSUs7ljCEi7JjfSQW2APp99ID1lupIcDuJFWAm+kh4AF9DDR4aLfCEbu+RGgmWVl4W/Le10DQr8RjESB1UAzs+VQ+RvanPFqgk5mtdBO5m6Y/8QrvPE+mksY8KPwTiZe8Siw+B9j3smYHD4G72TiFY8RFz/CQFczN9DHwTmsHeiLF6nxJ4C1F2QHfDcs7njIEi5JB/yka8xPpXfAT1o64KcC6IBxN5DSTwJF+RTR4aILEbnnp4k7YOVvaGOOTxB0b88w71rNuTwjYN9UGn8GqPFnmWs8U5OCaH5Qaz0HvrCDop0VsLsmWuON9/lcwoCfh9NOtOZ54AG+wJx2TA5fgNNOtOYF5rRjjO65XN5m/CLYjGsHes9Ijb8klHZWwOKOVlvCJaGdl11jfiWddl620M4rAdAO7gZS+mWgKF8hOlx0ISL3/CrzTtCY40sEXf9rzGnHnMtrAvZNpfHXgBp/nbnGMzUpyt/QyCblDaHv7SyH3TWhlG99eDOXMOA34bQTUm8Ci+At5rRjcvgWnHZC6i3mtGOM7o1c3mb8thDaQWr8HaG0sxwWd+qvnM9CxplGO++6xvxeOu28a6Gd9wKgHdwNpPS7QFG+R3S46EJE7vl95p2gMcd3CLr+D5jTjjmXDwTsm0rjHwA1/iFzjWdqUpS/oZFNyhqhtLMMdtckU2jno1zCgD+C005SfQQsgo+Z047J4cdw2kmqj5nTjjG6Nbm8zfgTIbSD1PinQmlnGSzuRGC085lrzJ+n085nFtr5PADawd1ASn8GFOXnRIeLLkTknr9g3gkac/yUoOv/kjntmHP5UsC+qTT+JVDjXzHXeKYmRfkbGtmkfC2UdpbC7prKlO/E+CaXMOBv4LRTqb8BFsG3zGnH5PBbOO1Upuxb+Ry2fSOM7utc3mb8nRDaQWr8e6G0sxQWd2Vg36Xyg2vMP6bTzg8W2vkxANrB3UBK/wAU5Y9Eh4suROSef2LeCRpz/J6g6/+ZOe2Yc/lZwL6pNP4zUOO/MNd4piZF+Rsa2aSsFUo7S3Dv7US98f6aSxjwr/j3dqK/AovgN+a0Y3L4G/69nehvzGnHGN3aXN5mvE4I7SA1/rtQ2lkCizsZsYRLQjt/uMb8Zzrt/GGhnT8DoB3cDaT0H0BR/kl0uOhCRO75L+adoDHH3wm6/r+Z0445l78F7JtK438jG6o83hrP1KQof0Mjm5RGuBwGSjuLYXdNOOaNt3EeYcBmcSzthGONgUWQncebdkwOTYxY2gnHsvNoLw2E0TXK423GOWAz/rcgwXtGajwXuOcgaWcxrFkIRy3hktBOnmvMTfKyUskmL29D2jH/ETXtLAbSTh5QlE3yaA4XXYjIPecz7wSNOebm4S+GAuKLS/kb2pxLgYB9U2m8AKjxQuYaz9SkKH9DI5uUIqG0swh218RTPslWnEcYcDGcduK6GFgEJcxpx+SwBE478ZR9K5/Dtm+E0RXl8TbjUiG0g9R4mVDaWQSjnXhgn2Qrd425aTrtlFtop2kAtLMISDvlQFE2zaM5XHQhIvfcjHknaMyxjKDrb86cdsy5NBewbyqNNwdqvAVzjWdqUpS/oZFNSkuhtLMQRzsJb7yt8ggDboWnnUQrYBFsxpx2TA43w9NOYjPmtGOMrmUebzPeXAjtIDXeWijtLMTRTtwSLgntbOEa85bptLOFhXa2DIB2FgJpZwugKLfMozlcdCEi97wV807QmGNrgq5/a+a0Y85lawH7ptL41kCNb8Nc45maFOVvaGST0kYo7SzAfZIt7o23bR5hwG3xn2SLtwUWQTvmtGNy2A7/SbZ4O+a0Y4yuTR5vM24vhHaQGu8glHYW4D7JVmUJl4R2OrrG3CmddjpaaKdTALSzAEg7HYGi7JRHc7joQkTuuTPzTtCYYweCrr8Lc9ox59JFwL6pNN4FqPGuzDWeqUlR/oZGNindhNLOXbC7JpryDdTd8wgD7g6nnajqDiyCHsxpx+SwB5x2oqoHc9oxRtctj7cZ9xRCO0iN9xJKO3fBaCdSYwmXhHa2dY15u3Ta2dZCO9sFQDt3AWlnW6Aot8ujOVx0ISL3rJh3gsYcexF0/Zo57Zhz0QL2TaVxDdR4iLnGMzUpyt/QyCalQijtzCeinXAeYcBhAtoJA4ugN3PaMTnsTUA7vZnTjjG6ijzeZlwphHaQGo8IpZ35Amkn6hpzLJ12ohbaiQVAO/OBtBMFijImhHaQe96eeSdozDFC0PXvwJx2zLnsIGDfVBrfAajxHZlrPFOTovwNjWxSdhJKO/Ngd01Vyney7ZxHGPDOcNqpiu0MLIJdmNOOyeEucNqpiu3CnHaM0e2Ux9uM+wihHaTG+wqlnXkw2qkK7DvZdnWNebd02tnVQju7BUA784C0sytQlLvl0RwuuhCRe96deSdozLEvQde/B3PaMeeyh4B9U2l8D6DG92Su8UxNivI3NLJJ2Uso7czF0U7YG+/eeYQB742nnfDewCLYhzntmBzug6ed8D7MaccY3V55vM14XyG0g9T4fkJpZy6Odios4ZLQzv6uMR+QTjv7W2jngABoZy6QdvYHivKAPJrDRRcics8HMu8EjTnuR9D1H8Scdsy5HCRg31QaPwio8YOZazxTk6L8DY1sUg4RSjtzcL9dNOW9nUPzCAM+FE47ydihwCI4jDntmBweBqedZOww5rRjjO6QPN5mfLgQ2kFq/AihtDMH9wsoA3tv50jXmI9Kp50jLbRzVAC0MwdIO0cCRXlUHs3hogsRueejmXeCxhyPIOj6j2FOO+ZcjhGwbyqNHwPU+LHMNZ6pSVH+hkY2KccJpZ3ZsLsmUe2N9/g8woCPh9NOovp4YBGcwJx2TA5PgNNOovoE5rRjjO64PN5mfKIQ2kFq/CShtDMbRjuJpCVcEtrp5xpzVTrt9LPQTlUAtDMbSDv9gKKsyqM5XHQhIvccZ94JGnM8iaDrTzCnHXMuCQH7ptJ4AqjxJHONZ2pSlL+hkU1KtVDamQW7a3TKezs1eYQB18BpR8dqgEVwMnPaMTk8GU47OnYyc9oxRledx9uMTxFCO0iN9xdKO7NgtKMDe29ngGvMA9NpZ4CFdgYGQDuzgLQzACjKgXk0h4suROSeBzHvBI059ifo+gczpx1zLoMF7JtK44OBGj+VucYzNSnK39DIJmWIUNqZifvtoim0MzSPMOChcNqJx4YCi2AYc9oxORwGp514bBhz2jFGNySPtxmfJoR2kBofLpR2ZuJ+u2hgtDPCNebT02lnhIV2Tg+AdmYCaWcEUJSn59EcLroQkXs+g3knaMxxOEHXP5I57ZhzGSlg31QaHwnU+JnMNZ6pSVH+hkY2KWcJpZ0ZuG+gjnrjPTuPMOCz4bQTjZ4NLIJzmNOOyeE5cNqJRs9hTjvG6M7K423G5wqhHaTGzxNKOzNgtBONWMIloZ1RrjGfn047oyy0c34AtDMDSDujgKI8P4/mcNGFiNzzBcw7QWOO5xF0/Rcypx1zLhcK2DeVxi8Eavwi5hrP1KQof0Mjm5SLhdLOdNhdE06hnUvyCAO+BE474eglwCK4lDntmBxeCqedcPRS5rRjjO7iPN5mfJkQ2kFq/HKhtDMdRjvhwGhntGvMV6TTzmgL7VwRAO1MB9LOaKAor8ijOVx0ISL3fCXzTtCY4+UEXf9VzGnHnMtVAvZNpfGrgBq/mrnGMzUpyt/QyCblGqG0Mw1218S0N95r8wgDvhZOOzF9LbAIrmNOOyaH18FpJ5ayb+Vz2PaNMLpr8nib8fVCaAep8RuE0s40GO3ElCVcEtq50TXmm9Jp50YL7dwUAO1MA9LOjUBR3pRHc7joQkTu+WbmnaAxxxsIuv5bmNOOOZdbBOybSuO3ADV+K3ONZ2pSlL+hkU3KGKG0cyfsrokob7xj8wgDHgunnYgaCyyC25jTjsnhbXDaiajbmNOOMboxebzN+HYhtIPU+B1CaedOGO1U1ljCJaGdca4xj0+nnXEW2hkfAO3cCaSdcUBRjs+jOVx0ISL3PIF5J2jM8Q6Crn8ic9ox5zJRwL6pND4RqPFJzDWeqUlR/oZGNimThdLOVNy3FKR8A/WUPMKAp8BpJ149BVgEU5nTjsnhVDjtxKunMqcdY3ST83ib8Z1CaAep8WlCaWcq7lsKAvsG6umuMc9Ip53pFtqZEQDtTAXSznSgKGfk0RwuuhCRe57JvBM05jiNoOufxZx2zLnMErBvKo3PAmp8NnONZ2pSlL+hkU3KHKG0MwV214RS3tuZm0cY8Fw47YTUXGARzGNOOyaH8+C0E1LzmNOOMbo5ebzNeL4Q2kFq/C6htDMF9w3UNZZwSWhngWvMC9NpZ4GFdhYGQDtTgLSzACjKhXk0h4suROSeFzHvBI053kXQ9S9mTjvmXBYL2DeVxhcDNb6EucYzNSnK39DIJmWpUNqZjLtrEt54l+URBrwMTjsqsQxYBMuZ047J4XI47ajEcua0Y4xuaR5vM14hhHaQGr9bKO1MhtGOilvCJaGdla4xr0qnnZUW2lkVAO0AbyC9EijKVXk0h4suROSe72HeCRpzvJug67+XOe2Yc7lXwL6pNH4vUOP3Mdd4piZF+Rsa2aTcL5R2JsHumsqUT7I9kEcY8ANw2qmsfgBYBA8ypx2TwwfhtFNZ/SBz2jFGd38ebzN+SAjtIDX+sFDamYT7uZ3APsn2iGvMq9Np5xEL7awOgHYmAWnnEaAoV+fRHC66EJF7fpR5J2jM8WGCrv8x5rRjzuUxAfum0vhjQI0/zlzjmZoU5W9oZJPyhFDamQi7a3TKd7I9mUcY8JNw2tH6SWARPMWcdkwOn4LTjk7Zt/I5bPtGGN0TebzN+GkhtIPU+DNCaWci7pNsgX0n27OuMT+XTjvPWmjnuQBoZyKQdp4FivK5PJrDRRcics/PM+8EjTk+Q9D1v8Ccdsy5vCBg31QafwGo8ReZazxTk6L8DY1sUl4SSjsTcB/GSPm5nZfzCAN+OQ+/7ivMCcXs+5W89QkGrUtCFcZQXsrjbXqvCqEKpC5fIzZ6xJm8RqDxIA11PJGhvp5HGPDrBIb6BnNDNft+4z9Dha31phBDReryLeaGas7kLeGGOi4Xlw9vvG/nEQb8NkGxvg0U2zvMzdnk8B0CvH+H+evxEoz+XSFGj9T4e8xfIjFn8h5BvbzP/GVA4xPvEzVxVLp8H6jLD5jrMpOfKX9DI/3sQ+YaN2f8IQGgIXWYk7X+bbLaHFg/rgiLvzpOs24oRLNuuIJm3ZpolifnuHWV7pWN91N0jD0FxNhDQIzdBcTYTUCMXQXE2EVAjJ0FxNhJQIwdBcTYQUCM7QXE2E5AjG0FxNhGQIzbCIhxawExbiUgxi0FxLiFgBhbC4hxcwExbiYgxlYCYmwpIMYWAmJsLiDGZgJibCogxnIBMZYJiLFUQIwjcvjHOFxAjKcJiHGYgBiHCohxiIAYTxUQ42ABMQ4SEONAATEOEBBjfwExniIgxpMFxFgjIMZqATEmBcSYEBBjXECMVQJi7CcgxpMExHiigBhPEBDj8QJiPE5AjMcKiPEYATEeLSDGowTEeKSAGI8QEOOqXP4xrhQQ490CYlwhIMblAmJcJiDGpQJiXCIgxsUCYlwkIMaFAmJcICDGuwTEOF9AjPMExDhXQIxzBMQ4W0CMswTEOFNAjDMExDhdQIzTBMR4p4AYpwqIcYqAGCcLiHGSgBgnCohxgoAYxwuIcRxBjN6BWbsyTLf2+u/ANrktd/++Ji8r6yNnfuzMT5z5qTM/c+bnzvzCmV868ytnfu3Mb5z5rTO/c+b3zvzB/R6OH9O/R9ss2Dbt2ceWZ59Ynn1qefaZ5dnnlmdfWJ59aXn2leXZ15Zn31iefWt59p3l2feWZz9Ynv3oPvMOtPjXAL74QYWTyXhCxbxxor8HHfbD/Vop75cZ+P2yi5+AXxjiPfufLGffGJlTnRq73zz8TJSHny15QGsL+KUM+mdgTn8hyukvAWjrF2Ae1hLlYW0A2gJ+mYZeC8zpr0Q5/ZVaW04ePmKaB0oddQXef92A999vRDr6LQCP+g2oo3VEeVgXgEcBvwRGrwPm9HeinP4egLZ+B+bhD6I8/BGAtoBf3qP/AOb0T6Kc/hnA/fcx0zxQ6qgj8P7rBLz//iLS0V8BeNRfQB39TZSHvwPwKOCXTum/kV+m3YQmp2bdtsTa8sbu+5vaifLQqAm9toBfFqYbAXPamCinjZvQ33+f5PHMA6WO2gLvv3bA+y+bSEfZAXhUNrCecojykBOARwG/5E7nAHOaS5TT3AC0lQvMQx5RHvIC0Bbwywl1HjCnTYhy2iSA++/TPJ55oNTRVsD7b2vg/ZdPpKP8ADwqH1hPBUR5KAjAo4BfqqkLgDktJMppYQDaKgTmoYgoD0UBaAv4Zai6CJjTYqKcFgdw/32WxzMPlDraHHj/tQbefyVEOioJwKNKgPVUSpSH0gA8CvglvroUmNMyopyWBaCtMmAeyonyUB6AtoBfvqzLgTltSpTTpgHcf5/n8cwDpY5aAO+/lsD7rxmRjpoF4FHNgPXUnCgPzQPwKOCXhuvmwJy2IMppiwC01QKYh5ZEeWgZgLaAX/auWwJz2ooop60CuP++yOOZB0odlQPvv6bA+28zIh1tFoBHbQasp82J8rB5AB4F/CUFenNgTlsT5bR1ANpqDczDFkR52CIAbQF/uYTeApjTLYlyumUA99+XeTzzQKkj2C/XcGrT+8tE/OZvKyIdbRWAR20FrKetifKwdQAeBfylKHprYE63IcrpNgFoaxtgHtoQ5aFNANoC/jIb3QaY07ZEOW0bwP33VR7PPFDqaAjw/hsKvP/aEemoXQAe1Q5YT+2J8tA+AI8C/hIm3R6Y0w5EOe0QgLY6APPQkSgPHQPQFvCXZ+mOwJx2IspppwDuv6/zeOaBUkcDgfffIOD915lIR50D8KjOwHrqQpSHLgF4FPCXvukuwJx2Jcpp1wC01RWYh25EeegWgLaAv6xPdwPmtDtRTrsHcP99k8czD5Q6Ohl4/50CvP96EOmoRwAe1QNYTz2J8tAzAI8C/pJJ3ROY015EOe0VgLZ6AfOwLVEetg1AW8BfDqq3BeZ0O6KcbhfA/fdtHs88UOooAbz/ksD7TxHpSAXgUQpYT5ooDzoAjwL+UlutgTkNEeU0FIC2QsA8VBDloSIAbQF/GbGuAOY0TJTTcAD333d5PPNAqaOTgPdfP+D915tIR70D8KjewHqqJMpDZQAeBfwl2roSmNMIUU4jAWgrAsxDlCgP0QC0Bfzl5zoKzGmMKKexAO6/7/N45oFSR8cB77/jgfff9kQ62j4Aj9oeWE87EOVhhwA86ligR+0AzOmORDndMQBt7QjMw05EedgpAG0dA9TWTsCc7kyU050DuP9+yOOZB++eG6Xt2W+cuwDirI6HQuGKmihlnH0AcVZWqVh1ZWWEMs6+gDjj8cpIVXW0N2WcuwLirEhUVtdUREKUce4GiLOqd7impndFFWWcuwPi7K1Vde9QpIYyzj0AccbiqndlNJqgjHNPQJy6JlqRjFXFKePcC3Hu8WqVSOqYia25G+Mu7n1n/u793Ybe32no/V2G3t9h6P3dhd7fWej9XYXe31Ho/d2E3t9J6P1dhN7fQej93YPe3zno/V2DfTzx9/X8fVfP33fz/H13z9/38Px9T8/f93L/vrfz5z7O3NeZ+zlzf2ce4MwDnXmQM3Oy1v++w9ozT2bZRx+fZ/fPqI7TrBsK0awbrqBZd30P0Ai6rtK9svH9FDrGngJi7CEgxu4CYuwmIMauAmLsIiDGzgJi7CQgxo4CYuwgIMb2AmJsJyDGtgJibCMgxm0ExLi1gBi3EhDjlgJi3EJAjK0FxLi5gBg3ExBjKwExthQQYwsBMTYXEGMzATE2FRBjuYAYywTEWCogxhE5/GMcLiDG0wTEOExAjEMFxDhEQIynCohxsIAYBwmIcaCAGAcIiLG/gBhPERDjyQJirBEQY7WAGJMCYkwIiDEuIMYqATH2ExDjSQJiPFFAjCcIiPF4ATEeJyDGYwXEeIyAGI8WEONRAmI8UkCMRwiIcVUu/xhXCojxbgExrhAQ43IBMS4TEONSATEuERDjYgExLhIQ40IBMS4QEONdAmKcLyDGeQJinCsgxjkCYpwtIMZZAmKcKSDGGQJinC4gxmkCYrxTQIxTBcQ4RUCMkwXEOElAjBMFxDhBQIzjBcQ4jiBG78CsXRmmWzusGntyW+7+/eAmWVmHOPNQZx7mzMOdeYQzj3TmUc482pnHOPNYZx7nzOOdeYIzT3TmSU3+WaNfk6z1XwbQyF20bdqzQyzPDrU8O8zy7HDLsyMsz460PDvK8uxoy7N+AXyhFOzNBK3U0cAvwqsi+kKpqgC+rKwK+MVacaI8xAPQFvBNIB0H5jRBlNNEANpKAPOQJMpDMgBtAd+800lgTquJclodwBfhHcw0D5Q6gr156dSm981av/mrIdJRTQAeVQPU0clEeTg5AI8CvumsTwbm9BSinJ4SgLZOAeahP1Ee+gegLeCHBXR/YE4HEOV0QAD33yFM80Cpo2XA+2858P4bSKSjgQF41ECgjgYR5WFQAB4F/JCLHgTM6WCinA4OQFuDgXk4lSgPpwagLeCHk/SpwJwOIcrpkADuv0OZ5oFSR4uA999i4P03lEhHQwPwqKFAHQ0jysOwADwK+KE6PQyY09OIcnpaANo6DZiH4UR5GB6AtoAfhtTDgTkdQZTTEQHcf4cxzQOljuYD77+7gPff6UQ6Oj0AjzodqKMziPJwRgAeBfwQrz4DmNORRDkdGYC2RgLzcCZRHs4MQFvAD1/rM4E5PYsop2cFcP8dzjQPlDqaDbz/5gDvv7OJdHR2AB51NlBH5xDl4ZwAPAr4QwP6HGBOzyXK6bkBaOtcYB7OI8rDeQFoC/jDHvo8YE5HEeV0VAD33xFM80Cpo+nA+28G8P47n0hH5wfgUecDdXQBUR4uCMCjgD+kpC8A5vRCopxeGIC2LgTm4SKiPFwUgLaAP1ymLwLm9GKinF4cwP13JNM8UOpoCvD+mwq8/y4h0tElAXjUJUAdXUqUh0sD8CjgD0XqS4E5vYwop5cFoK3LgHm4nCgPlwegLeAPs+rLgTkdTZTT0QHcf0cxzQOljiYA77+JwPvvCiIdXRGAR10B1NGVRHm4MgCPAv4Qtr4SmNOriHJ6VQDaugqYh6uJ8nB1ANoC/vC8vhqY02uIcnpNAPff0Uzz4N1zI/CejxES57FC4jxOSJzHC4nzBCFxnigkzpOAceZk/ePB2Z5Yy7NSBzr+gwnyjI7xEAExHiogxsMExHi4gBiPEBDjkQJiPEpAjEcT3UOIGKNE61LF+9+6/zfr4tYO9aZbuzJcW7vevudap/6uc+b1zrzBmTc68yZn3uzMW5x5qzPHOHOsM29z5u3OvMOZ45w5vklW6hegXdtkwy9Fu87y7HrLsxssz260PLvJ8uxmy7NbLM9utTwbZ3k23n1mGsbmWevB3TvQRjimCXOB6n/+8OZiQpN//pyYLgTzf8hPCwD9itIYwKsf1f+8/KEnAF9JmSiErKTEOVZInLcJifN2IXHeISROhA9F3LW8caa/WuzXl4CvROhric4GvWfgKxv6OiF7Br5Soq8XsmfgKy/6BiF7Br6So28UsmfgK0P6JiF7Br7SpG8WsmfgK1f6FiF7Br4Spm8NaM+qYUPX/mUckLsmEb2T710XnIfaoccDz34ShIudkahO6UcbgfU+BbBn2yu06DingnXVPGvD33Dg/c0G3t9o4P1NBt7fYOD9zQXe31jg/U0F3t9QMMXz96n1/Lv3BbLxnr/v7fn7Pp6/7+v5+36ev+/v+fsBnr8f6Pn7Qe7f73T+nObM6c6c4cyZzpzlzNnOnNPknxfmmmatf01pY+ev/A19J/cX5v4ZdL/2Q/+j29rc5rh/n+vkZZ4z5zvzrvQXAOe6LwB6n82zPJtveXZXkw1fPMzFJivlUP0axFyU4dYoPQ+0ltnjfOALpHeBP4YRVPFO+694rcW7wMnLQmcucubi9OJdYCnKhZZniyzPFgdQvNOAxbsAWLwLgcW7CFi8i4UW7/T/itdavEucvCx15jJnLk8v3iWWolxqebbM8mx5AMU7HVi8S4DFuxRYvMuAxbtcaPHO+K94rcW7wsnL3c5c6cxV6cW7wlKUd1uerbQ8WxVA8c4AFu8KYPHeDSzelcDiXSW0eGf+V7zW4r3Hycu9zrzPmfenF+89lqK81/LsPsuz+wMo3pnA4r0HWLz3Aov3PmDx3i+0eGf9V7zW4n3AycuDznzImQ+nF+8DlqJ80PLsIcuzhwMo3lnA4n0AWLwPAov3IWDxPiy0eGf/V7zW4n3EyctqZz7qzMfSi/cRS1Gutjx71PLssQCKdzaweB8BFu9qYPE+Cizex4QW75z/itdavI87eXnCmU8686n04n3cUpRPWJ49aXn2VADFOwdYvI8Di/cJYPE+CSzep8DFa866sUdUrbPsA/O/GQ7TrFvZm2bdCNFPOVXWEMVbQRRvjCheIj2EqM6NKr9Eeqisplk3IqyOpeWBTL9RonU1UX6p6o0oDxVVNOtS6SESJ8oDVbxJ06M0Slu7Tab/Da0aNOZu2GM1cCWl5qWv1eCVlJqfupaPlZTa6EeO6rnygsxr1TvGhZnWasBuF9nXalDe6vQpjzquvGTTa9U5xqWbWqseu1228bXqlbd6vbG+iZVX1H2tTcZ4d13XqsNuV9ZtrTrlrUHvZWZY+Z76r5Uxxnvru9ZGdntf/dbaaN58vX2UtvIDDV9rgxgfbOhalt0+1LC1rHmDvGLvrvyI/7X+jXG137U8u33U31opeQO+SJryWpLyM5wIn8Ss9b+9Il9LyqodQX6rR4ssgg14hs+1/xWUNxdPN/nnz2fSX6k1/4d3056Z/6htWlDob/rwJrGBr06G3Fdg9dPAV3OfIXq5v3Fa/vzGidzzs5Y9N3RNr46edbVlirNZ1oYElZWF/8mup8F7qR3PNSEM2CyeLhC/wT8HvEqeB4qNKocmxkbgHD4PNgP0vp9x951JO/Udtesiz/sFYA695mLWbZf1j7nUvqWUPtA3f6Ms1jf/v3FS5uAZ8HnWjhebZG388PwK8SUgb5nYmmWtfzO8kbuBv7LW/6yt7e8vuX+v/f972fn3K8581ZmvNVn/nCoHr8MOT0co43wDJ7IQZZxvNjzOivQHNk297tGOmbV/f8Pz/M00Tb3l/PttZ75juq8m6w3SfIYiCDyi6qDRcb4FjDPPE+d7rpG97/75gfvnh+6fa9xGpav733/k/PtjZ37izE+d+ZkzP3fmF8780plfOfNrZ37jzG+d+Z0zv3fmD8780Zk/OfNnZ/7izLXO/NWZvzlznTN/d+YfzvzTaMSZf5sY8p3/fWc2dma2M3OcmevMPGc2cWa+MwucWejMovQP56xx0bA+Lb3yN/T7RDdOcT5hwGZx9Lol+bRtuPI3/rfvEs9Ht0DrqiDF9gGR2ErzCQMuJRBbGXOxmX2XCRfbh0RiK88nDLicQGxNmYvN7LspgdgoYjUOXJaP73Wb5csssjVERdY8nzDg5gRF1oJ5kZl9txBSZMYMmhEUWct87L4zFZXfOFs1PM5w+gMb+L7vAdwPPH9f4/m7icELvps5/97cma2duUX+hi+moN/CAt7eejNgbW6ZjzW89LPZMn/9GWzu+Xtrz9+3SDubrZx/b+3MbZzZJj91PaQujX+0JKjLtric6iB/euk9ohdjsqBxhqJ0a6uQ96eXurp/b+ecZ3tndnBmR2d2cmZnZ3ZxZldndnNmd2f2cGZPZ/Zy5rbO3M6ZypnamSFnVjgz7Mzezqx0ZsSZUWfGnLm9M3dw5o7O3MmZOztzF6MjZ/Z15q7O3M2ZuztzD2fu6cy9nLl3+osu7fLXvwJY+6y95VkHy7OOlmedLM86W551sTzrannWzfKsu+VZD8uznpZnvSzPtrU8287yTFmeacuzkOVZheVZ2PKst+VZpeVZxPIsankWszzb3vJsB8uzHS3PdrI829nybBfLsz6WZ30tz3a1PNvN8mx3y7M9LM/2tDzby/Jsb4+5145u7p993D+Vv5Fimn4vjnaAi/2fnw6sqWmPWyvZAbdWrCNuLd0Jtla17gxbK6G7wNaK6q6wtZTuhlqrWunuqLUSSvdArRVVuidqLae2e4HWqnbW2ha0VsJZazvQWlHzbjVoLeOFGrNWtVkrhFkrYdaqwKxlvmxchzFr/e/u6A1Zq/p/a1VC1kr8b60IZK3/fTe7jkLW+ueujSHWqv5nre0RayX+WWsHxFr/fJW93hGxltub7ARYK+mutTNgrbi71i6AtWp/Y1Yf/2v9+9ngvv7X0rVr7ep7rWhN7Vq7+V8rXrvW7v7Xqu1X9R6+14r8u9aevtfq/e9ae/leS/+71t64F3NIP+ONYIfatfbB7fl/Hy9Ev1BlXiBsS/DC3b7gs0Z91NYd2nz6px3wbMw570uQx/0E5BGp8XZEedyfyHvQcR7Q8DhD6Q9MbOlvIhg91b5ZsH++/dOyB+SnvolwoPPvg5x5sDMPyc/8JoLyN7T5NF57grMPt6J9U9NvfGbPBxLsu3crGs3ngM/9QOB9eyjQi4C60VLO4mPga7CH5dPUMKe6sHnsoR5fPayOHnu48+8jnHmkM48i9FjzaecOBF5TydxjzZ4PJ9h3REhdHw6sxaOBHgvUjZZyFp8APfaYfJoa5lQXNo892uOrx9TRY491/n2cM4935gmEHmt+mqQjgddEmXus2fOxBPuOCanrY4G1eCLQY4G60VLO4lOgx56UT1PDnOrC5rEnenz1pDp6bD/n31XOjDszQeix5qf1OhF4zfbMPdbsuR/BvncQUtf9gLWYBHosUDdayll8BvTY6nyaGuZUFzaPTXp8tbqOHlvj/PtkZ57izP6EHmt+GrozgdfsyNxjzZ5rCPa9k5C6rgHW4gCgxwJ1o6WcxedAjx2YT1PDnOrC5rEDPL46sI4eO8j592BnnurMIYQea75toguB1+zM3GPNngcR7HsXIXU9CFiLQ4EeC9SNlnIWXwA9dlg+TQ1zqgubxw71+OqwOnrsac6/hztzhDNPJ/RY820+XQm8pg9zjzV7Po1g332F1PVpwFo8A+ixQN1oKWfxJdBjR+bT1DCnurB57BkeXx1ZR4890/n3Wc4825nnEHqs+ba0bgResytzjzV7PpNg37sJqeszgbV4LtBjgbrRUs7iK6DHnpdPU8Oc6sLmsed6fPW8OnrsKOff5zvzAmdeSOix5tsouxN4ze7MPdbseRTBvvcQUtejgLV4EdBjgbrRUs7ia6DHXpxPU8Oc6sLmsRd5fPXiOnrsJc6/L3XmZc68nNBjzbf99iDwmj2Ze6zZ8yUE+95LSF1fAqzF0UCPBepGSzmLb4Aee0U+TQ1zqgubx472+OoVdfTYK51/X+XMq515DaHHmm9T70ngNXsz91iz5ysJ9r2PkLq+EliL1wI9FqgbLeUsvgV67HX5NDXMqS5sHnutx1evq6PHXu/8+wZn3ujMmwg91vy2il4EXrMvc481e76eYN/7Canr64G1eDPQY4G60VLO4jugx96ST1PDnOrC5rE3e3z1ljp67K3Ov8c4c6wzbyP0WPPbgLYl8Jr9mXus2fOtBPs+QEhd3wqsxduBHgvUjZZyFt8DPfaOfJoa5lQXNo+93eOrd9TRY8c5/x7vzAnOnEjosea3rW1H4DUHMvdYs+dxBPs+SEhdjwPW4iSgxwJ1o6WcxQ9Aj52cT1PDnOrC5rGTPL46uY4eO8X591Rn3unMaYQea36bpSLwmoOZe6zZ8xSCfR8ipK6nAGtxOtBjgbrRUs7iR6DHzsinqWFOdWHz2OkeX51RR4+d6fx7ljNnO3MOocea3xasCbzmUOYea/Y8k2Dfhwmp65nAWpwL9FigbrSUs/gJ6LHz8mlqmFNd2Dx2rsdX59XRY+c7/77LmQucuZDQY81vYw8ReM3hzD3W7Hk+wb6PEFLX84G1uAjosUDdaCln8TPQYxfn09Qwp7qweewij68urqPHLnH+vdSZy5y5nNBjf3FiqCDwmiOZe6zZ8xKCfR8lpK6XAGtxBdBjgbrRUs7iF6DH3p1PU8Oc6sLmsSs8vnp3HT12pfPvVc68x5n3Enrs2ibrf/+pd13f39vM3GPNnlcS7PsYIXW9EliL9wE9FqgbLeUs1gI99v58mhrmVBc2j73P46v319FjH3D+/aAzH3Lmw4Qe+2uT9b9P2ruu35wey9xjzZ4fINj3cULq+gFgLT4C9FigbrSUs/gV6LGr82lqmFNd2Dz2EY+vrq6jxz7q/PsxZz7uzCcIPfY3J4ZKAq85nrnHmj0/SrDvE4TU9aPAWnwS6LFA3WgpZ/Eb0GOfyqepYU51YfPYJz2++lQdPfZp59/POPNZZz5H6LHrnBgiBF5zInOPNXt+mmDfJwmp66eBtfg80GOButFSzmId0GNfyKepYU51YfPY5z2++kIdPfZF598vOfNlZ75C6LG/OzFECbymH3OPNXt+kWDfVULq+kVgLb4K9FigbrSUs/gd6LGv5dPUMKe6sHnsqx5ffa2OHvu68+83nPmmM98i9Ng/nBhiBF4TZ+6xZs+vE+w7IaSuXwfW4ttAjwXqRks5iz+AHvtOPk0Nc6oLm8e+7fHVd+rose86/37Pme878wNCj/3TiWF7Aq9JMvdYs+d3CfZdLaSu3wXW4odAjwXqRks5iz+BHrsmn6aGOdWFzWM/9Pjqmjp67EfOvz925ifO/JTQY/9yYtiBwGtqmHus2fNHBPs+WUhdfwSsxc+AHgvUjZZyFn8BPfbzfJoa5lQXNo/9zOOrn9fRY79w/v2lM79y5teEHvu3E8OOBF5zCnOPNXv+gmDf/aX8nj5gLX4D9FigbrSUs/gb6LHf5tPUMKe6sHnsNx5f/baOHvud8+/vnfmDM38k9NgsZ+2dCLxmAHOPNXv+jmDfA6V8ZymwFn8CeixQN1rKWWQBz+LnfJoa5lQXNo/9yeOrP9fRY39x/r3Wmb868zdCj23krL0zgdcMYu6xZs+/EOx7sJSf3wTW4jqgxwJ1o6WcRSPgWfyeT1PDnOrC5rHrPL76ex099g/n33+aZ878m9BjGztr70LgNacy91iz5z8I9j1EynvZwFrMKsDFBdSNlnIWjYFn0aiApoY51YXNY40Ga720UUHdPLax899lOzPHmbkFdB6bbc6XwGuGMvdYs2eTY/S6w6TUNbAW84AeC9SNlnIW2UCPbVJAU8Oc6sLmsXkeX21SR4/Nd/67AmcWOrOI0GNznP/dvgQeexpzjzV7zifw2OFC6jofWIvFQI8F6kZLOYscoMeWFNDUMKe6sHlsscdXS+rosaXOf1fmzHJnNiX02Fznf3dXAo8dwdxjzZ5LCTz2dCF1XQqsxWZAjwXqRks5i1ygxzYvoKlhTnVh89hmHl9tXkePbeH8dy2d2cqZmxF6bJ7zv7sbgceewdxjzZ5bEHjsSCF13QJYi5sDPRaoGy3lLPKAHtu6gKaGOdWFzWM39/hq6zp67BbOf7elM7dy5taEHtvE+d/dncBjz2TusWbPWxB47FlC6noLYC1uA/RYoG60lLNoAvTYNgU0NcypLmweu43HV9vU0WPbOv9dO2e2d2YHQo/Nd/539yDw2LOZe6zZc1sCjz1HSF23BdZiR6DHAnWjpZxFPtBjOxXQ1DCnurB5bEePr3aqo8d2dv67Ls7s6sxuhB5b4Pzv7kngsecy91iz584EHnuekLruDKzF7kCPBepGSzmLAqDH9iigqWFOdWHz2O4eX+1RR4/t6fx3vZy5rTO3I/TYQud/dy8Cjx3F3GPNnnsSeOz5Quq6J7AWFdBjgbrRUs6iEOixuoCmhjnVhc1jlcdXdR09NuT8dxXODDuzN6HHFjn/u3sTeOwFzD3W7DlE4LEXCqnrELAWK4EeC9SNlnIWRUCPjRTQ1DCnurB5bKXHVyN19Nio89/FnLm9M3fweGztaAw+5/IsXD6jBTTazgbv+S3gd3G8D1xrR2D+clw9NsracKDva2Tc3nh3KiAMeKcC/Lo7A42Oat87F6xPMGjd/4ktL2u9OVGKzVu8yuegjPP9JjRFsYtHt/hvGgB2TSa2bDfG2qCNUJpkBeNKyAPwCruPW0B9zZ4oDmAXAmfaBXw1U+27MeG+fX/smziHyt/QRpi7EuDjbuDrvdYUzLoXuOuic9GXKBe7E+Vi943kwveP3RLl4uL/25dTEpuIj0wDl7Ti7QPm4tuVwEuB562ROTRNhUPR1u4zq5452JSmvGtS+DcqJ94Ga4+NdYzK39C7EhmiN+h6xqw39b9jYt6DwBguZfLaXn0aGd+fvSjgaTCXtqLR5Z6ei7qh57OpnCPPZy/PWrqiwqmNZETXJGsqekdiobiurKisrAnXRCqj4WRN73BVMlKtw1UVoVh1RNXoaHV1pHdFIlJZE0smKmu8pq2TFRXhZCye0L1DlVVxFU1WVKmacKQipKqSFZFksiJaWVlVUZGsjNZEY9FQqKqmIqp6RyIxVRmqiIWozmcv93yCJM23iEhzb5c095Fi4FTx7U1g1vsSXVz7ElKNycU+BLnYjygX+xFSDZUuLmdONVQaGM2cat4iohrgeevR/1FN+tB7E1HN/hKpZn9iqtmfwBiu+H+Qag4o4GkwVxB1zQcIo5oDgVQzGkg1VOdzoIdqMl0KnF+OooyT6oI5SOIFcxDxBXMQwQVzJdEFkwuOE2lgBwPXQr5shrysriQyw4PrcFn5zekhBbhLIeVlM0aXFdX5HPL/o5fgDnVfgjvM9mEP5W/oTB96QH6Kx/f34gM7YYqDr81htpAc+l3rcObnYQrmcIIm4QiihukIwpdrDyPKxZFEuTiS8OVaKl1cw/zlWioNXCvg5drDCV6uBZ63vva/l2vTx//8G5UTb+N3FCVNH05kiEcR0rSJ+SgCY7hOyMu1hwOboqMLeBrMdUSEdXQAL9ciz+cY4Mu11wIJmOp8jvk/IGCqH3c41iXg46QYOFV8xxKY9fFEF9fxhFRjcnEcQS5OIMrFCYRUQ6WLG5hTDZUGbhTw0XoKqgGet77xP6pJH/pYIqo5USLVnEhMNScSGMNN/w9SzUkFPA3mJqKu+SRhVNMPSDU3AqmG6nz6/R98COXQApq6l3LBVEm8YKqIL5gqggvmZiEfQkEaWBy4FvJlM+RldTORGcYD+BBKAvghlGtb8bysqM4nYTkf9GcEgB860R8Cv0cqCfT1IL9HKkl0iVYXEAZcXYBftwZozFT7rilYn2DQuoF+j9SHQr5H6i2i75E6uYDwe6RqgOjqdfXaoP//8NHCU9wC6l9A8D1S5gBOJnCmk4nfqEHtuzHhvv3GOID5m11GmAMIEGsgEW4OJHyzqz9RLgYR5WIQ4ZtdVLoYw/zNLioNjBXwEb4BBF4KPG899r83u9LH//wblRNvgzWY8rXIAUSGOJjwtUgT82ACY7hNyJtdA4BN0akFPA3mNqLXp04N4M0u5PkMAb7ZNRb4+iHV+Qz5P/gI34dEpDnUJc1hUgycKr6hBGZ9GtHFdRoh1ZhcDCPIxXCiXAwnpBoqXdzBnGqoNDCOOdV8SEQ1wPPW4/6jmvShhxJRzQiJVDOCmGpGEBjD+P8Hqeb0Ap4GM56oaz5dGNWcAaSacUCqoTqfM/4PPsJ3SgFN3Uu5YEZKvGBGEl8wIwkumAlCPsKHNLAzgWshXzZDXlYTiMzwzAA+wncW8CN8Y1vxvKyozues/x+9BHe2+xLcObYPeyh/Q2f60APyUzx+1wJ+cITke4tqc4j+jChVDv2udS7z8zAFcy5Bk3AeUcN0HuHLtecQ5WIUUS5GEb5cS6WLycxfrqXSwBQBL9eeS/ByLfC89ZT/Xq5NH//zb1ROvI3f+ZQ0fS6RIZ5PSNMm5vMJjGGqkJdrzwU2RRcU8DSYqUSEdUEAL9ciz+dC4Mu1U4AETHU+F/4fEDDVjztc5BLwxVIMnCq+iwjM+hKii+sSQqoxubiYIBeXEuXiUkKqodLFNOZUQ6WB6QI+Wk9BNcDz1tP/o5r0oS8ioprLJFLNZcRUcxmBMcz4f5BqLi/gaTAziLrmy4VRzWgg1UwHUg3V+Yz+P/gQytkFNHUv5YK5QuIFcwXxBXMFwQUzU8iHUJAGdiVwLeTLZsjLaiaRGV4ZwIdQrgJ+CGVKK56XFdX5XEX4CkhT5/ZrkY/3oKuJXwVDeM/Vls9aKH8DeQ/pq4Gedg3z8zDfKXgNwV14LfgzJujPN5lXYZAxvu+ul4XVNckrUB+4saLP/Dqg1oP87rnriBrv6wsIA76+AL/uDUDjo9r3Df+PF9mNRDSLNliklm5ifpm87Jw1MkZzxjcJ0fmLTWhq0lwATbPWN4reQbEHZI7TB2btEN3aev3FZf5s6/79Zudcb3Hmrc4c48yxzrzNmbc78w5njnPmeGdOcOZEZ05y5mRnTnHmVGfe6cxpzpzuzBnOnOnMWc6c7cw5zpzrzHnOnO/Mu5y5wJkLnbnImYsL3GBqacwEk5/27BbLs1stz8ZYno21PLvN8ux2y7M7LM/GWZ6NtzybYHk20fJskuXZZMuzKZZnUy3P7rQ8m2Z5Nt3ybIbl2UzLs1mWZ7Mtz+ZYns21PJtneTbf8uwuy7MFlmcLLc8WWZ4tdp95Rzv3zz7un8rfSDEd399gD7hsq2vMUPoW0Fpmj7dC1vonX2P8rxWqfZ94rN+1wuvfc77N31rK+/717X7WCqW+F35Hw9dS6e+rj2vgWs6LfRu8Rz++YWtFbe/3T2jIWlH7Zwcm1n+tSKbPIUyq71qRzJ9pmFy/tUIb+3zElPqsFdn4Zy2m1n2tTX4W6M66rhXZpBfqaXVbS9XBV/X0uqyl6uTResam1+pdR7/XMze1VrjOd4eetdG1wjX1uIf07I2tFanXnabnZF4rWs/7Uc/NsFaspt53rZ5nX0s14N7W821rqQb1APquDdfSDewn9IL0tZIN7k30wtS1Knz0OXqRZ61Qja+eSS8W+mrlYlivl9TeeJcUEAZsFke96lIb/BLcAeqlgKRSvvJpcrgU+GpibQ6XgougeVYwn+nBFW+S9FUVby6WuQW2PP2VjWXuwXqfLbcQKPo9U5yTKL0MWEDLwYeLFp8pmmXAYqzd9zKhN9IimI5iSW+8KwoIA14Bv5FiyRXAG+lu5jeSyeHd8Bsplrxb6I20CBZ3LGEJl+RGWukW2Kr0G2ml5UZaFcCNtAh4I60EFtAqosNFvxGJ3PM9QDPLysLflktdA2oM1iASBe4Fmpkth8rf0OaM7yXoZO4V2skshPlPvMIb730FhAHfB+9k4hX3AYv/fuadjMnh/fBOJl5xP3HxIwz0XuYG+gA4h7UDffEiNf4gsPaC7IAXwuKOhyzhknTAD7nG/HB6B/yQpQN+OIAOGHcDKf0QUJQPEx0uuhCRe36EuANW/oY25vggQfe2mnnXas5ltYB9U2l8NVDjjzLXeKYmBdH8oNZ6DHxhB0U7C2B3TbTGG+/jBYQBPw6nnWjN48ADfII57ZgcPgGnnWjNE8xpxxjdYwW8zfhJsBnXDvSekRp/SijtLIDFHa22hEtCO0+7xvxMOu08baGdZwKgHdwNpPTTQFE+Q3S46EJE7vlZ5p2gMcenCLr+55jTjjmX5wTsm0rjzwE1/jxzjWdqUpS/oZFNygtC39u5C3bXhFJ+yvvFAsKAX4TTTki9CCyCl5jTjsnhS3DaCamXmNOOMboXCnib8ctCaAep8VeE0s5dsLh1jSVcEtp51TXm19Jp51UL7bwWAO3gbiClXwWK8jWiw0UXInLPrzPvBI05vkLQ9b/BnHbMubwhYN9UGn8DqPE3mWs8U5Oi/A2NbFLeEko782F3TTKFdt4uIAz4bTjtJNXbwCJ4hzntmBy+A6edpHqHOe0Yo3urgLcZvyuEdpAaf08o7cyHxZ0IjHbed435g3Taed9COx8EQDu4G0jp94Gi/IDocNGFiNzzh8w7QWOO7xF0/WuY0445lzUC9k2l8TVAjX/EXOOZmhTlb2hkk/KxUNqZB7trKlO+E+OTAsKAP4HTTqX+BFgEnzKnHZPDT+G0U5myb+Vz2PaNMLqPC3ib8WdCaAep8c+F0s48WNyVgX2XyheuMX+ZTjtfWGjnywBoB3cDKf0FUJRfEh0uuhCRe/6KeSdozPFzgq7/a+a0Y87lawH7ptL410CNf8Nc45maFOVvaGST8q1Q2pmLe28n6o33uwLCgL/Dv7cT/Q5YBN8zpx2Tw+/x7+1Ev2dOO8bovi3gbcY/CKEdpMZ/FEo7c2FxJyOWcElo5yfXmH9Op52fLLTzcwC0g7uBlP4JKMqfiQ4XXYjIPf/CvBM05vgjQde/ljntmHNZK2DfVBpfC9T4r8w1nqlJUf6GRjYpvwmlnTmwuyYc88a7roAw4HVw2gnH1gGL4HfmtGNy+DucdsKx35nTjjG63wp4m/EfQmgHqfE/hdLOHFjc4aglXBLa+cs15r/TaecvC+38HQDt4G4gpf8CivJvosNFFyJyz1mFvDtBY45/EnT9jQppLy7lb2hzLiZG7vum0rg3Tr9rNWau8UxNivI3NLJJyQbqJkjamQ27a+Ipn2TLKSQM2CyOpZ24zgEWQS6wOKlymFuIpp14yr6Vz2HbN8Losgt5m3Ee2IxrB3rPSI03Ae45SNqZDWuI44F9ki3fNeaCwqxUsskv3JB2zH9ETTuzgbSTDxRlQSHN4aILEbnnQuadoDHHJgRdfxFz2jHnUiRg31QaLwJqvJi5xjM1Kcrf0MgmpUQo7czC0U7CG29pIWHApXjaSZQCi6CMOe2YHJbhaSdRxpx2jNGVFPI243IhtIPUeFOhtDMLRztxS7gktNPMNebm6bTTzEI7zQOgnVlA2mkGFGXzQprDRRcics8tmHeCxhybEnT9LZnTjjmXlgL2TaXxlkCNt2Ku8UxNivI3NLJJ2Uwo7czEfZIt7o1380LCgDeH0044vjmwCFozpx2Tw9Zw2gnHWzOnHWN0mxXyNuMthNAOUuNbCqWdmbgPO1VZwiWhna1cY946nXa2stDO1gHQzkwg7WwFFOXWhTSHiy5E5J63Yd4JGnPckqDrb8Ocdsy5tBGwbyqNtwFqvC1zjWdqUpS/oZFNSjuhtDMDdtdEU76Bun0hYcDt4bQTVe2BRdCBOe2YHHaA005UdWBOO8bo2hXyNuOOQmgHqfFOQmlnBox2IoF9A3Vn15i7pNNOZwvtdAmAdmYAaaczUJRdCmkOF12IyD13Zd4JGnPsRND1d2NOO+ZcugnYN5XGuwE13p25xjM1Kcrf0MgmpYdQ2plORDs9CwkD7klAOz2BRdCLOe2YHPYioJ1ezGnHGF2PQt5mvK0Q2kFqfDuhtDNdIO0o15h1Ou0oC+3oAGhnOpB2FFCUWgjtIPccYt4JGnPcjqDrr2BOO+ZcKgTsm0rjFUCNh5lrPFOTovwNjWxSegulnWmwu6Yq5TvZKgsJA66E005VrBJYBBHmtGNyGIHTTlUswpx2jNH1LuRtxlEhtIPUeEwo7UyD0U5VYN/Jtr1rzDuk0872FtrZIQDamQakne2BotyhkOZw0YWI3POOzDtBY44xgq5/J+a0Y85lJwH7ptL4TkCN78xc45maFOVvaGSTsotQ2rkTRzthb7x9CikDxtNOuA+wCPoypx2Tw7542gn3ZU47xuh2KeRtxrsKoR2kxncTSjt34minwhIuCe3s7hrzHum0s7uFdvYIgHbuBNLO7kBR7lFIc7joQkTueU/mnaAxx90Iuv69mNOOOZe9BOybSuN7ATW+N3ONZ2pSlL+hkU3KPkJpZyrut4umvLezbyFhwPvCaScZ2xdYBPsxpx2Tw/3gtJOM7cecdozR7VPI24z3F0I7SI0fIJR2puJ+AWVg7+0c6BrzQem0c6CFdg4KgHamAmnnQKAoDyqkOVx0ISL3fDDzTtCY4wEEXf8hzGnHnMshAvZNpfFDgBo/lLnGMzUpyt/QyCblMKG0MwV21ySqvfEeXkgY8OFw2klUHw4sgiOY047J4RFw2klUH8GcdozRHVbI24yPFEI7SI0fJZR2psBoJ5G0hEtCO0e7xnxMOu0cbaGdYwKgnSlA2jkaKMpjCmkOF12IyD0fy7wTNOZ4FEHXfxxz2jHncpyAfVNp/Digxo9nrvFMTYryNzSySTlBKO1Mht01OuW9nRMLCQM+EU47OnYisAhOYk47JocnwWlHx05iTjvG6E4o5G3G/YTQDlLjVUJpZzKMdnRg7+3EXWNOpNNO3EI7iQBoZzKQduJAUSYKaQ4XXYjIPSeZd4LGHKsIuv5q5rRjzqVawL6pNF4N1HgNc41nalKUv6GRTcrJQmlnEu63i6bQzimFhAGfAqedeOwUYBH0Z047Jof94bQTj/VnTjvG6E4u5G3GA4TQDlLjA4XSziTcbxcNjHYGucY8OJ12BlloZ3AAtDMJSDuDgKIcXEhzuOhCRO75VOadoDHHgQRd/xDmtGPOZYiAfVNpfAhQ40OZazxTk6L8DY1sUoYJpZ2JuG+gjnrjPa2QMODT4LQTjZ4GLILhzGnH5HA4nHai0eHMaccY3bBC3mY8QgjtIDV+ulDamQijnWjEEi4J7ZzhGvPIdNo5w0I7IwOgnYlA2jkDKMqRhTSHiy5E5J7PZN4JGnM8naDrP4s57ZhzOUvAvqk0fhZQ42cz13imJkX5GxrZpJwjlHYmwO6acArtnFtIGPC5cNoJR88FFsF5zGnH5PA8OO2Eo+cxpx1jdOcU8jbjUUJoB6nx84XSzgQY7YQDo50LXGO+MJ12LrDQzoUB0M4EIO1cABTlhTBRhklpB7nni5h3gsYczyfo+i9mTjvmXC4WsG8qjV8M1PglzDWeqUlR/oZGNimXCqWd8bC7Jqa98V5WSBjwZXDaienLgEVwOXPaMTm8HE47sZR9K5/Dtm+E0V1ayNuMRwuhHaTGrxBKO+NhtBNTlnBJaOdK15ivSqedKy20c1UAtDMeSDtXAkV5VSHN4aILEbnnq5l3gsYcryDo+q9hTjvmXK4RsG8qjV8D1Pi1zDWeqUlR/oZGNinXCaWdcbC7JqK88V5fSBjw9XDaiajrgUVwA3PaMTm8AU47EXUDc9oxRnddIW8zvlEI7SA1fpNQ2hkHo53KGku4JLRzs2vMt6TTzs0W2rklANoZB6Sdm4GivKWQ5nDRhYjc863MO0FjjjcRdP1jmNOOOZcxAvZNpfExQI2PZa7xTE2K8jc0skm5TSjt3IH7loKUb6C+vZAw4NvhtBOvvh1YBHcwpx2TwzvgtBOvvoM57Riju62QtxmPE0I7SI2PF0o7d+C+pSCwb6Ce4BrzxHTamWChnYkB0M4dQNqZABTlxEKaw0UXInLPk5h3gsYcxxN0/ZOZ0445l8kC9k2l8clAjU9hrvFMTYryNzSySZkqlHZuh901oZT3du4sJAz4TjjthNSdwCKYxpx2TA6nwWknpKYxpx1jdFMLeZvxdCG0g9T4DKG0czvuG6gDe29npmvMs9JpZ6aFdmYFQDu3A2lnJlCUswppDhddiMg9z2beCRpznEHQ9c9hTjvmXOYI2DeVxucANT6XucYzNSnK39DIJmWeUNq5DXfXJLzxzi8kDHg+nHZUYj6wCO5iTjsmh3fBaUcl7mJOO8bo5hXyNuMFQmgHqfGFQmnnNhjtqLglXBLaWeQa8+J02llkoZ3FAdAO8AbSi4CiXFxIc7joQkTueQnzTtCY40KCrn8pc9ox57JUwL6pNL4UqPFlzDWeqUlR/oZGNinLhdLOWNhdU5nySbYVhYQBr4DTTmX1CmAR3M2cdkwO74bTTmX13cxpxxjd8kLeZrxSCO0gNb5KKO2Mxf3cTmCfZLvHNeZ702nnHgvt3BsA7YwF0s49QFHeW0hzuOhCRO75PuadoDHHVQRd//3Macecy/0C9k2l8fuBGn+AucYzNSnK39DIJuVBobQzBnbX6JTvZHuokDDgh+C0o/VDwCJ4mDntmBw+DKcdnbJv5XPY9o0wugcLeZvxI0JoB6nx1UJpZwzuk2yBfSfbo64xP5ZOO49aaOexAGhnDJB2HgWK8rFCmsNFFyJyz48z7wSNOa4m6PqfYE475lyeELBvKo0/AdT4k8w1nqlJUf6GRjYpTwmlnVtxH8ZI+bmdpwsJA366EL/uM8wJxez7mcL1CQatS0IVxlCeKuRtes8KoQqkLp8jNnrEmTxHoPEgDfUWIkN9vpAw4OcJDPUF5oZq9v3Cf4YKW+tFIYaK1OVLzA3VnMlLwg315gJcPrzxvlxIGPDLBMX6MlBsrzA3Z5PDVwjw/hXmr8dLMPpXhRg9UuOvMX+JxJzJawT18jrzlwGNT7xO1MRR6fJ1oC7fYK7LTH6m/A2N9LM3mWvcnPGbBICG1KFpCJtmrX8rzDvQcW+dRVPnWdA4Q6TvXzby5Lat+/e3nPN825nvOPNdZ77nzPed+YEzP3TmGmd+5MyPnfmJMz915mfO/NyZXzjzS2d+5cyvnfmNM7915nfO/N6ZPzjzR2f+5MyfnfmLM9c681dn/ubMdenvnb7lvk/qffa25dk7lmfvWp69Z3n2vuXZB5ZnH1qerbE8+8jy7GPLs08szz61PPvM8uxzy7MvLM++tDz7yvLsa8uzbyzPvrU8+87y7HvLsx8sz360PPvJ8uxny7NfLM/WWp79ann2m+XZusIN35Nv5/7Zx/1T+RsppuPXLN8CGG/t+/tvg9Yye3wHstY/+XrX/1ohN1/6Pb9rhf/NvX7f31rKc476Az9rhVI0oT9s+FoqTV96TQPXqqzZQKv6o4atFbXoXn/ckLWi1hrSn9R/rUiGetSf1netSMba1p/Vb63QRnxCf16ftSIb9Rz9Rd3XSmzCv/SXdV0rskkv1F/VbS1VB1/VX9dlLVUnj9bfbHqt3nX0e/3tptYK1/nu0N9tdK1wTT3uIf39xtaK1OtO0z9kXitaz/tR/5hhrVhNve9a/ZN9LdWAe1v/bFtLNagH0L9suJZuYD+h16avlWxwb6J/TV2rwkefo3/zrBWq8dUz6XVASA/y3Yt1sF4vmfLTBL8XEgb8eyH6pwmS+nfcAeo/AEmlfPfC5PAP4KuxtTn8A1wEQX0qHFe8ycA+Ff6nW2B/pb+y8Wfhhp8K/6uQ/lPhOCdR+k9gAf0FPly0+EzR/Aksxtp9/yn0RvoNpqNY0hvv34WEAf8Nv5Fiyb+BN1JWEe8byeTQxIi9kWJJ776VzxHkjfQb7OxjCUu4JDdSo6J//mxclJV6+zQq2vBGMv8R9Y30G/BGagQsoMZFNIeLfiMYuefsIqCZZeFvyz9cA0K/EYxEgRygmdlyqPwNbc44pwh/NjlFMjuZX2H+E6/wxptbRBhwbhH8N2xW5AKLP495J2NymAfvZOIVecTFjzDQHOYG2gScw9qBvniRGs8H1l6QHfCvsA44HrKES9IBF7jGXJjeARdYOuDCADrgX4EdcAFQlIVFNIeLLkTknouIO2Dlb2hjjvkE3Vsx867VnEuxgH1TabwYqPES5hrP1KQgmh/UWqXgCzso2lkLu2uiNd54y4oIAy6D0060pgx4gOXMacfksBxOO9Gacua0Y4yutIi3GTcFm3HtQO8ZqfFmQmlnLYx2otWWcElop7lrzC3Saae5hXZaBEA7a4G00xwoyhZFNIeLLkTknlsy7wSNOTYj6PpbMacdcy6tBOybSuOtgBrfjLnGMzUpyt/QyCZlc6Hv7fwCu2tCKd/60LqIMODWcNoJqdbAItiCOe2YHG4Bp52Q2oI57Rij27yItxlvKYR2kBrfSijt/AKjndRfOZ+FjDONdrZ2jXmbdNrZ2kI72wRAO78AaWdroCi3KaI5XHQhIvfchnknaMxxK4Kuvy1z2jHn0lbAvqk03hao8XbMNZ6pSVH+hkY2Ke2F0s7PuJ8SS6GdDkWEAXeA005SdQAWQUfmtGNy2BFOO0nVkTntGKNrX8TbjDsJoR2kxjsLpZ2fYbSTCIx2urjG3DWddrpYaKdrALTzM5B2ugBF2bWI5nDRhYjcczfmnaAxx84EXX935rRjzqW7gH1Tabw7UOM9mGs8U5Oi/A2NbFJ6CqWdn2B3TWXKd2L0KiIMuBecdip1L2ARbMucdkwOt4XTTmXKvpXPYds3wuh6FvE24+2E0A5S40oo7fwEo53KwL5LRbvGHEqnHW2hnVAAtPMTkHY0UJShIprDRRcics8VzDtBY46KoOsPM6cdcy5hAfum0ngYqPHezDWeqUlR/oZGNimVQmnnR9x7O1FvvJEiwoAj+Pd2ohFgEUSZ047JYRT/3k40ypx2jNFVFvE245gQ2kFqfHuhtPMj7ssFI5ZwSWhnB9eYd0ynnR0stLNjALTzI5B2dgCKcscimsNFFyJyzzsx7wSNOW5P0PXvzJx2zLnsLGDfVBrfGajxXZhrPFOTovwNjWxS+gilnR9gd0045o23bxFhwH3htBOO9QUWwa7MacfkcFc47YRjuzKnnf8ZXRFvM95NCO0gNb67UNr5AUY74aglXBLa2cM15j3TaWcPC+3sGQDt/ACknT2AotyziOZw0YWI3PNezDtBY467E3T9ezOnHXMuewvYN5XG9wZqfB/mGs/UpCh/QyOblH2F0s73uG+gTvkk235FhAHvB6eduN4PWAT7M6cdk8P94bQTT9m38jls+0YY3b5FvM34ACG0g9T4gUJp53vcN1AH9km2g1xjPjiddg6y0M7BAdDO90DaOQgoyoOLaA4XXYjIPR/CvBM05nggQdd/KHPaMedyqIB9U2n8UKDGD2Ou8UxNivI3NLJJOVwo7XyHo52EN94jiggDPgJPO4kjgEVwJHPaMTk8Ek87iSOZ044xusOLeJvxUUJoB6nxo4XSznc42olbwiWhnWNcYz42nXaOsdDOsQHQzndA2jkGKMpji2gOF12IyD0fx7wTNOZ4NEHXfzxz2jHncryAfVNp/Higxk9grvFMTYryNzSySTlRKO18i/skW9wb70lFhAGfhP8kW/wkYBH0Y047Jof98J9ki/djTjvG6E4s4m3GVUJoB6nxuFDa+Rb3SbYqS7gktJNwjTmZTjsJC+0kA6Cdb4G0kwCKMllEc7joQkTuuZp5J2jMMU7Q9dcwpx1zLjUC9k2l8Rqgxk9mrvFMTYryNzSySTlFKO18g/vtoinfQN2/iDDg/nDaiar+wCIYwJx2TA4HwGknqgYwpx1jdKcU8TbjgUJoB6nxQUJp5xsY7UQC+wbqwa4xn5pOO4MttHNqALTzDZB2BgNFeWoRzeGiCxG55yHMO0FjjoMIuv6hzGnHnMtQAfum0vhQoMaHMdd4piZF+Rsa2aScJpR2viaineFFhAEPJ6Cd4cAiGMGcdkwORxDQzgjmtGOM7rQi3mZ8uhDaQWr8DKG087VA2hnpGvOZ6bQz0kI7ZwZAO18DaWckUJRnCqEd5J7PYt4JGnM8g6DrP5s57ZhzOVvAvqk0fjZQ4+cw13imJkX5GxrZpJwrlHa+gt01VSnfyXZeEWHA58Fppyp2HrAIRjGnHZPDUXDaqYqNYk47xujOLeJtxucLoR2kxi8QSjtfwWinKrDvZLvQNeaL0mnnQgvtXBQA7XwFpJ0LgaK8qIjmcNGFiNzzxcw7QWOOFxB0/Zcwpx1zLpcI2DeVxi8BavxS5hrP1KQof0Mjm5TLhNLOlzjaCXvjvbyIMODL8bQTvhxYBKOZ047J4Wg87YRHM6cdY3SXFfE24yuE0A5S41cKpZ0vcbRTYQmXhHauco356nTaucpCO1cHQDtfAmnnKqAory6iOVx0ISL3fA3zTtCY45UEXf+1zGnHnMu1AvZNpfFrgRq/jrnGMzUpyt/QyCbleqG08wXut4umvLdzQxFhwDfAaScZuwFYBDcypx2TwxvhtJOM3cicdozRXV/E24xvEkI7SI3fLJR2vsD9dtHA3tu5xTXmW9Np5xYL7dwaAO18AaSdW4CivLWI5nDRhYjc8xjmnaAxx5sJuv6xzGnHnMtYAfum0vhYoMZvY67xTE2K8jc0skm5XSjtfA67axLV3njvKCIM+A447SSq7wAWwTjmtGNyOA5OO4nqccxpxxjd7UW8zXi8ENpBanyCUNr5HEY7iaQlXBLamega86R02plooZ1JAdDO50DamQgU5aQimsNFFyJyz5OZd4LGHCcQdP1TmNOOOZcpAvZNpfEpQI1PZa7xTE2K8jc0skm5UyjtfAa7a3TKezvTiggDnganHR2bBiyC6cxpx+RwOpx2dGw6c9oxRndnEW8zniGEdpAanymUdj6D0Y4O7L2dWa4xz06nnVkW2pkdAO18BqSdWUBRzi6iOVx0ISL3PId5J2jMcSZB1z+XOe2Yc5krYN9UGp8L1Pg85hrP1KQof0Mjm5T5QmnnU9xvF02hnbuKCAO+C0478dhdwCJYwJx2TA4XwGknHlvAnHaM0c0v4m3GC4XQDlLji4TSzqe43y4aGO0sdo15STrtLLbQzpIAaOdTIO0sBopySRHN4aILEbnnpcw7QWOOiwi6/mXMacecyzIB+6bS+DKgxpcz13imJkX5GxrZpKwQSjuf4L6BOuqN9+4iwoDvhtNONHo3sAhWMqcdk8OVcNqJRlcypx1jdCuKeJvxKiG0g9T4PUJp5xMY7UQjlnBJaOde15jvS6edey20c18AtPMJkHbuBYryviKaw0UXInLP9zPvBI053kPQ9T/AnHbMuTwgYN9UGn8AqPEHmWs8U5Oi/A2NbFIeEko7H8PumnAK7TxcRBjww3DaCUcfBhbBI8xpx+TwETjthKOPMKcdY3QPFfE249VCaAep8UeF0s7HMNoJB0Y7j7nG/Hg67TxmoZ3HA6Cdj4G08xhQlI8X0RwuuhCRe36CeSdozPFRgq7/Sea0Y87lSQH7ptL4k0CNP8Vc45maFOVvaGST8rRQ2vkIdtfEtDfeZ4oIA34GTjsx/QywCJ5lTjsmh8/CaSeWsm/lc9j2jTC6p4t4m/FzQmgHqfHnhdLORzDaiSlLuCS084JrzC+m084LFtp5MQDa+QhIOy8ARfliEc3hogsRueeXmHeCxhyfJ+j6X2ZOO+ZcXhawbyqNvwzU+CvMNZ6pSVH+hkY2Ka8KpZ01sLsmorzxvlZEGPBrcNqJqNeARfA6c9oxOXwdTjsR9Tpz2jFG92oRbzN+QwjtIDX+plDaWQOjncoaS7gktPOWa8xvp9POWxbaeTsA2lkDpJ23gKJ8u4jmcNGFiNzzO8w7QWOObxJ0/e8ypx1zLu8K2DeVxt8Favw95hrP1KQof0Mjm5T3hdLOh7hvKUj5BuoPiggD/gBOO/HqD4BF8CFz2jE5/BBOO/HqD5nTjjG694t4m/EaIbSD1PhHQmnnQ9y3FAT2DdQfu8b8STrtfGyhnU8CoJ0PgbTzMVCUnxTRHC66EJF7/pR5J2jM8SOCrv8z5rRjzuUzAfum0vhnQI1/zlzjmZoU5W9oZJPyhVDa+QB214RS3tv5sogw4C/htBNSXwKL4CvmtGNy+BWcdkLqK+a0Y4zuiyLeZvy1ENpBavwbobTzAe4bqAN7b+db15i/S6edby20810AtPMBkHa+BYryuyKaw0UXInLP3zPvBI05fkPQ9f/AnHbMufwgYN9UGv8BqPEfmWs8U5Oi/A2NbFJ+Eko77+PumoQ33p+LCAP+GU47KvEzsAh+YU47Joe/wGlHJX5hTjvG6H4q4m3Ga4XQDlLjvwqlnfdhtKPilnBJaOc315jXpdPObxbaWRcA7QBvIP0bUJTrimgOF12IyD3/zrwTNOb4K0HX/wdz2jHn8oeAfVNp/A+gxv9krvFMTYryNzSySflLKO28B7trKlM+yfZ3EWHAf8Npp7L6b2QRFPOmHZNDEyOWdiqrvftWPodt3wij+6uItxk3Ksaace1A7xmp8cbAPQdJO+/hfm4nsE+yZRf/82dOcVYq2WQXb0g75j+ipp33gLSTDRRlTjHN4aILEbnnXLD5oAvOmGPjYvzFkEd8cSl/Q5tzyROwbyqN5wE13oS5xjM1Kcrf0MgmJR+omyBp513YXaNTvpOtoJgwYLM4lna0LgAWQSFz2jE5LITTjk7Zt/I5bPtGGF1+MW8zLhJCO0iNFwulnXdxn2QL7DvZSlxjLk2nnRIL7ZQGQDvvAmmnBCjK0mKaw0UXInLPZcw7QWOOxQRdfzlz2jHnUi5g31QaLwdqvClzjWdqUpS/oZFNSjOhtPMO7sMYKT+307yYMODmxfh1WzAnFLPvFsXrEwxal4QqjKE0K+Ztei2FUAVSl62IjR5xJq0INB6kob5NZKibFRMGvBmBoW7O3FDNvjf/z1Bha7UWYqhIXW7B3FDNmWwh3FDfKsTlwxvvlsWEAW9JUKxbAsW2FXNzNjncigDvt2L+erwEo99aiNEjNb4N85dIzJlsQ1AvbZi/DGh8og1RE0elyzZAXbZlrstMfqb8DY30s3bMNW7OuB0BoCF1aBrCplnr3wrzDvgHvLJo6jwLGmeI9P3LRp7ctnX/3t45zw7O7OjMTs7s7MwuzuzqzG7O7O7MHs7s6cxeztzWmds5UzlTOzPkzApnhp3Z25mVzow4M+rMmDO3d+YOztzRmTs5c2dn7mI05My+6e+dtnffJ/U+62B51tHyrJPlWWfLsy6WZ10tz7pZnnW3POthedbT8qyX5dm2lmfbWZ4pyzNteRayPKuwPAtbnvW2PKu0PItYnkUtz2KWZ9tbnu1gebaj5dlOlmc7W57tYnnWx/Ksb/GG78m3c//s4/6p/I0U0/Frlu0Bxlv7/n4H0Fpmjx0ha/2Tr07+1wq5+dKd/a4V/jf3uou/tZTnHHVXP2uFUjShuzV8LZWmL929gWtV1mygVd2jYWtFLbrXPRuyVtRaQ7pX/deKZKhHvW1914pkrG29Xf3WCm3EJ7Sqz1qRjXqO1nVfK7EJ/9Khuq4V2aQX6oq6raXq4Ks6XJe1VJ08Wvfe9Fq96+j3unJTa4XrfHfoyEbXCtfU4x7S0Y2tFanXnaZjmdeK1vN+1NtnWCtWU++7Vu9gX0s14N7WO9rWUg3qAfROG66lG9hP6J3T10o2uDfRu6SuVeGjz9F9PGuFanz1TLovENKDfPeiL6zXS6b8NMGuxYQB71qM/mmCpN4Vd4B6N0BSKd+9MDncDfhqbG0OdwMXQVCfCscVbzKwT4Xv7hbYHumvbOxevOGnwvcopv9UOM5JlN4dWEB7gA8XLT5TNLsDi7F237sLvZH6wHQUS3rj3bOYMOA94TdSLLkn8Ebai/mNZHK4F/xGiiX3Enoj9YHFHUtYwiW5kfZ2C2yf9Btpb8uNtE8AN1If4I20N7CA9iE6XPQbwcg97ws0s6ws/G25m2tA6DeCkSiwH9DMbDlU/oY2Z7wfQSezn9BOZheY/8QrvPHuX0wY8P7wTiZesT+w+A9g3smYHB4A72TiFQcQFz/CQPdjbqAHgnNYO9AXL1LjBwFrL8gOeBdY3PGQJVySDvhg15gPSe+AD7Z0wIcE0AHjbiClDwaK8hCiw0UXInLPhxJ3wMrf0MYcDyLo3g5j3rWaczlMwL6pNH4YUOOHM9d4piYF0fyg1joCfGEHRTs7w+6aaI033iOLCQM+Ek470ZojgQd4FHPaMTk8Ck470ZqjmNOOMbojinmb8dFgM64d6D0jNX6MUNrZGRZ3tNoSLgntHOsa83HptHOshXaOC4B2cDeQ0scCRXkc0eGiCxG55+OZd4LGHI8h6PpPYE475lxOELBvKo2fANT4icw1nqlJUf6GRjYpJwl9b2cn2F0TSvnWh37FhAH3g9NOSPUDFkEVc9oxOayC005IVTGnHWN0JxXzNuO4ENpBajwhlHZ2gsWd+ivns5BxptFO0jXm6nTaSVpopzoA2sHdQEongaKsJjpcdCEi91zDvBM05pgg6PpPZk475lxOFrBvKo2fDNT4Kcw1nqlJUf6GRjYp/YXSzo6wuyaZQjsDigkDHgCnnaQaACyCgcxpx+RwIJx2kmogc9oxRte/mLcZDxJCO0iNDxZKOzvC4k4ERjunusY8JJ12TrXQzpAAaAd3Ayl9KlCUQ4gOF12IyD0PZd4JGnMcTND1D2NOO+ZchgnYN5XGhwE1fhpzjWdqUpS/oZFNynChtLMD7K6pTPlOjBHFhAGPgNNOpR4BLILTmdOOyeHpcNqpTNm38jls+0YY3fBi3mZ8hhDaQWp8pFDa2QEWd2Vg36VypmvMZ6XTzpkW2jkrANrB3UBKnwkU5VlEh4suROSez2beCRpzHEnQ9Z/DnHbMuZwjYN9UGj8HqPFzmWs8U5Oi/A2NbFLOE0o72+Pe24l64x1VTBjwKPx7O9FRwCI4nzntmByej39vJ3o+c9oxRndeMW8zvkAI7SA1fqFQ2tkeFncyYgmXhHYuco354nTauchCOxcHQDu4G0jpi4CivJjocNGFiNzzJcw7QWOOFxJ0/Zcypx1zLpcK2DeVxi8Favwy5hrP1KQof0Mjm5TLhdJODHbXhGPeeEcXEwY8Gk474dhoYBFcwZx2TA6vgNNOOHYFc9oxRnd5MW8zvlII7SA1fpVQ2onB4g5HLeGS0M7VrjFfk047V1to55oAaAd3Ayl9NVCU1xAdLroQkXu+lnknaMzxKoKu/zrmtGPO5ToB+6bS+HVAjV/PXOOZmhTlb2hkk3KDUNqJwu6aeMon2W4sJgz4RjjtxPWNwCK4iTntmBzeBKedeMq+lc9h2zfC6G4o5m3GNwuhHaTGbxFKO1FY3PHAPsl2q2vMY9Jp51YL7YwJgHZwN5DStwJFOYbocNGFiNzzWOadoDHHWwi6/tuY0445l9sE7JtK47cBNX47c41nalKUv6GRTcodQmkngqOdhDfeccWEAY/D005iHLAIxjOnHZPD8XjaSYxnTjvG6O4o5m3GE4TQDlLjE4XSTgTXEMct4ZLQziTXmCen084kC+1MDoB2cDeQ0pOAopxMdLjoQkTueQrzTtCY40SCrn8qc9ox5zJVwL6pND4VqPE7mWs8U5Oi/A2NbFKmCaWdStwn2eLeeKcXEwY8Hf9Jtvh0YBHMYE47Jocz8J9ki89gTjvG6KYV8zbjmUJoB6nxWUJppxL3YacqS7gktDPbNeY56bQz20I7cwKgHdwNpPRsoCjnEB0uuhCRe57LvBM05jiLoOufx5x2zLnME7BvKo3PA2p8PnONZ2pSlL+hkU3KXUJppzfsrommfAP1gmLCgBfAaSeqFgCLYCFz2jE5XAinnahayJx2jNHdVczbjBcJoR2kxhcLpZ3esLgjgX0D9RLXmJem084SC+0sDYB2cDeQ0kuAolxKdLjoQkTueRnzTtCY42KCrn85c9ox57JcwL6pNL4cqPEVzDWeqUlR/oZGNil3C6WdMBHtrCwmDHglAe2sBBbBKua0Y3K4ioB2VjGnHWN0dxfzNuN7hNAOUuP3CqWdsEDauc815vvTaec+C+3cHwDt4G4gpe8DivJ+IbSD3PMDzDtBY473EnT9DzKnHXMuDwrYN5XGHwRq/CHmGs/UpCh/QyOblIeF0k4F7K6pSvlOtkeKCQN+BE47VbFHgEWwmjntmByuhtNOVWw1c9oxRvdwMW8zflQI7SA1/phQ2qmAxV0V2HeyPe4a8xPptPO4hXaeCIB2cDeQ0o8DRfkE0eGiCxG55yeZd4LGHB8j6PqfYk475lyeErBvKo0/BdT408w1nqlJUf6GRjYpzwilnRCOdsLeeJ8tJgz4WTzthJ8FFsFzzGnH5PA5PO2En2NOO8boninmbcbPC6EdpMZfEEo7IVxDXGEJl4R2XnSN+aV02nnRQjsvBUA7uBtI6ReBonyJ6HDRhYjc88vMO0Fjji8QdP2vMKcdcy6vCNg3lcZfAWr8VeYaz9SkKH9DI5uU14TSjobdNcmU93ZeLyYM+HU47SRjrwOL4A3mtGNy+AacdpKxN5jTjjG614p5m/GbQmgHqfG3hNKOhsWdDOy9nbddY34nnXbettDOOwHQDu4GUvptoCjfITpcdCEi9/wu807QmONbBF3/e8xpx5zLewL2TaXx94Aaf5+5xjM1Kcrf0Mgm5QOhtKNgd02i2hvvh8WEAX8Ip51E9YfAIljDnHZMDtfAaSdRvYY57Rij+6CYtxl/JIR2kBr/WCjtKFjciaQlXBLa+cQ15k/TaecTC+18GgDt4G4gpT8BivJTosNFFyJyz58x7wSNOX5M0PV/zpx2zLl8LmDfVBr/HKjxL5hrPFOTovwNjWxSvhRKO9vB7hqd8t7OV8WEAX8Fpx0d+wpYBF8zpx2Tw6/htKNjXzOnHWN0XxbzNuNvhNAOUuPfCqWd7WBx68De2/nONebv02nnOwvtfB8A7eBuIKW/A4rye6LDRRcics8/MO8EjTl+S9D1/8icdsy5/Chg31Qa/xGo8Z+YazxTk6L8DY1sUn4WSjvbwu6aeArt/FJMGPAvcNqJx34BFsFa5rRjcrgWTjvx2FrmtGOM7udi3mb8qxDaQWr8N6G0sy0s7nhgtLPONebf02lnnYV2fg+AdnA3kNLrgKL8nehw0YWI3PMfzDtBY46/EXT9fzKnHXMufwrYN5XG/wRq/C/mGs/UpCh/QyOblL+F0k4v2F0TjabEW0IYsFkcSzvRqFkTFWOjEt60Y3JoYgR/A3W0UQntpYEwur+LeZtx4xKsGdcO9J6RGs8G7jlI2ukFM/1oxBIuCe3kuMacW5KVSjY5JRvSjvmPqGmnF5B2coCizC2hOVx0ISL3nAc2H3TBGXPMLsFfDE2ILy7lb2hzLk0E7JtK402AGs9nrvFMTYryNzSySSkA6iZI2ukJu2vCKbRTWEIYcCGcdsLRQmARFDGnHZPDIjjthKNFzGnHGF1BCW8zLhZCO0iNlwilnZ4w2gkHRjulrjGXpdNOqYV2ygKgnZ5A2ikFirKshOZw0YWI3HM5807QmGMJQdfflDntmHNpKmDfVBpvCtR4M+Yaz9SkKH9DI5uU5kJppwfsrolpb7wtSggDbgGnnZhuASyClsxpx+SwJZx2Yin7Vj6Hbd8Io2tewtuMWwmhHaTGNxNKOz1gtBNTlnBJaGdz15hbp9PO5hbaaR0A7fQA0s7mQFG2LqE5XHQhIve8BfNO0JjjZgRd/5bMacecy5YC9k2l8S2BGt+KucYzNSnK39DIJmVrobTTHXbXRJQ33m1KCAPeBk47EbUNsAjaMKcdk8M2cNqJqDbMaccY3dYlvM24rRDaQWq8nVDa6Q6jncoaS7gktNPeNeYO6bTT3kI7HQKgne5A2mkPFGWHEprDRRcics8dmXeCxhzbEXT9nZjTjjmXTgL2TaXxTkCNd2au8UxNivI3NLJJ6SKUdrrhvqUg5Ruou5YQBtwVTjvx6q7AIujGnHZMDrvBaSde3Y057Rij61LC24y7C6EdpMZ7CKWdbrgfZA/sG6h7usbcK512elpop1cAtNMNSDs9gaLsVUJzuOhCRO55W+adoDHHHgRd/3bMacecy3YC9k2l8e2AGlfMNZ6pSVH+hkY2KVoo7XSF3TWhlPd2QiWEAYfgtBNSIWARVDCnHZPDCjjthFQFc9oxRqdLeJtxWAjtIDXeWyjtdMV9SXFg7+1UusYcSaedSgvtRAKgna5A2qkEijJSQnO46EJE7jnKvBM05tiboOuPMacdcy4xAfum0ngMqPHtmWs8U5Oi/A2NbFJ2EEo7XXB3TcIb744lhAHvCKcdldgRWAQ7Macdk8Od4LSjEjsxpx1jdDuU8DbjnYXQDlLjuwilnS64L+KMW8IloZ0+rjH3TaedPhba6RsA7QBvIN0HKMq+JTSHiy5E5J53Zd4JGnPchaDr34057Zhz2U3Avqk0vhtQ47sz13imJkX5GxrZpOwhlHY6w+6aypRPsu1ZQhjwnnDaqazeE1gEezGnHZPDveC0U1m9F3PaMUa3RwlvM95bCO0gNb6PUNrpjPu5ncA+ybava8z7pdPOvhba2S8A2ukMpJ19gaLcr4TmcNGFiNzz/sw7QWOO+xB0/Qcwpx1zLgcI2DeVxg8AavxA5hrP1KQof0Mjm5SDhNJOJ9hdo1O+k+3gEsKAD4bTjtYHA4vgEOa0Y3J4CJx2dMq+lc9h2zfC6A4q4W3GhwqhHaTGDxNKO51wn2QL7DvZDneN+Yh02jncQjtHBEA7nYC0czhQlEeU0BwuuhCRez6SeSdozPEwgq7/KOa0Y87lKAH7ptL4UUCNH81c45maFOVvaGSTcoxQ2ukI/K2o3niPLSEM+NgS/LrHMScUs+/jStYnGLQuCVUYQzmmhLfpHS+EKpC6PIHY6BFncgKBxoM01A5EhnpiCWHAJxIY6knMDdXs+6T/DBW2Vj8hhorUZRVzQzVnUiXcUNsDfyumN954CWHAcYJijQPFlmBuziaHCQK8TzB/PV6C0SeFGD1S49XMXyIxZ1JNUC81zF8GND5RQ9TEUemyBqjLk5nrMpOfKX9DI/3sFOYaN2d8CgGgIXVoGsKmWevfCvMOdNzbZNHUeRY0zhDp+5eNPLlt6/69v3OeA5w50JmDnDnYmac6c4gzhzpzmDNPc+ZwZ45w5unOPMOZI515pjPPcubZzjzHmec68zxnjnLm+c68wJkXOvMiZ17szEuceakzL3Pm5c4cnf7eaX/3fVLvswGWZwMtzwZZng22PDvV8myI5dlQy7NhlmenWZ4NtzwbYXl2uuXZGZZnIy3PzrQ8O8vy7GzLs3Msz861PDvP8myU5dn5lmcXWJ5daHl2keXZxZZnl1ieXWp5dpnl2eWWZ6NLNnxPvp37Zx/3T+VvpJiOX7PsDzDe2vf3B4DWMnscCFnrn3wN8r9WyM2XHux3rfC/uden+ltLec5RD/GzVihFE3pow9dSafrSwxq4VmXNBlrVpzVsrahF93p4Q9aKWmtIj6j/WpEM9ahPr+9akYy1rc+o31qhjfiEHlmftSIb9Rx9Zt3XSmzCv/RZdV0rskkv1GfXbS1VB1/V59RlLVUnj9bnbnqt3nX0e33eptYK1/nu0KM2ula4ph73kD5/Y2tF6nWn6QsyrxWt5/2oL8ywVqym3netvsi+lmrAva0vtq2lGtQD6Es2XEs3sJ/Ql6avlWxwb6IvS12rwkefoy/3rBWq8dUz6dFASA/y3YvRsF4vmfLTBFeUEAZ8RQn6pwmS+grcAeorAUmlfPfC5PBK4KuxtTm8ElwEQX0qHFe8ycA+FX6VW2BXp7+ycVXJhp8Kv7qE/lPhOCdR+ipgAV0NPly0+EzRXAUsxtp9XyX0RrocpqNY0hvvNSWEAV8Dv5FiyWuAN9K1zG8kk8Nr4TdSLHmt0BvpcljcsYQlXJIb6Tq3wK5Pv5Gus9xI1wdwI10OvJGuAxbQ9USHi34jGLnnG4BmlpWFvy2vdA0I/UYwEgVuBJqZLYfK39DmjG8k6GRuFNrJXAbzn3iFN96bSggDvgneycQrbgIW/83MOxmTw5vhnUy84mbi4kcY6I3MDfQWcA5rB/riRWr8VmDtBdkBXwaLOx6yhEvSAY9xjXlsegc8xtIBjw2gA8bdQEqPAYpyLNHhogsRuefbiDtg5W9oY463EnRvtzPvWs253C5g31Qavx2o8TuYazxTk4JoflBrjQNf2EHRzqWwuyZa4413fAlhwOPhtBOtGQ88wAnMacfkcAKcdqI1E5jTjjG6cSW8zXgi2IxrB3rPSI1PEko7l8LijlZbwiWhncmuMU9Jp53JFtqZEgDt4G4gpScDRTmF6HDRhYjc81TmnaAxx0kEXf+dzGnHnMudAvZNpfE7gRqfxlzjmZoU5W9oZJMyXeh7O5fA7ppQyrc+zCghDHgGnHZCagawCGYypx2Tw5lw2gmpmcxpxxjd9BLeZjxLCO0gNT5bKO1cAos79VfOZyHjTKOdOa4xz02nnTkW2pkbAO3gbiCl5wBFOZfocNGFiNzzPOadoDHH2QRd/3zmtGPOZb6AfVNpfD5Q43cx13imJkX5GxrZpCwQSjsXw+6aZArtLCwhDHghnHaSaiGwCBYxpx2Tw0Vw2kmqRcxpxxjdghLeZrxYCO0gNb5EKO1cDIs7ERjtLHWNeVk67Sy10M6yAGgHdwMpvRQoymVEh4suROSelzPvBI05LiHo+lcwpx1zLisE7JtK4yuAGr+bucYzNSnK39DIJmWlUNq5CHbXVKZ8J8aqEsKAV8Fpp1KvAhbBPcxpx+TwHjjtVKbsW/kctn0jjG5lCW8zvlcI7SA1fp9Q2rkIFndlYN+lcr9rzA+k0879Ftp5IADawd1ASt8PFOUDRIeLLkTknh9k3gkac7yPoOt/iDntmHN5SMC+qTT+EFDjDzPXeKYmRfkbGtmkPCKUdi7EvbcT9ca7uoQw4NX493aiq4FF8Chz2jE5fBT/3k70Uea0Y4zukRLeZvyYENpBavxxobRzISzuZMQSLgntPOEa85PptPOEhXaeDIB2cDeQ0k8ARfkk0eGiCxG556eYd4LGHB8n6PqfZk475lyeFrBvKo0/DdT4M8w1nqlJUf6GRjYpzwqlnQtgd0045o33uRLCgJ+D00449hywCJ5nTjsmh8/DaScce5457Rije7aEtxm/IIR2kBp/USjtXACLOxy1hEtCOy+5xvxyOu28ZKGdlwOgHdwNpPRLQFG+THS46EJE7vkV5p2gMccXCbr+V5nTjjmXVwXsm0rjrwI1/hpzjWdqUpS/oZFNyutCaed82F0TT/kk2xslhAG/AaeduH4DWARvMqcdk8M34bQTT9m38jls+0YY3eslvM34LSG0g9T420Jp53xY3PHAPsn2jmvM76bTzjsW2nk3ANrB3UBKvwMU5btEh4suROSe32PeCRpzfJug63+fOe2Yc3lfwL6pNP4+UOMfMNd4piZF+Rsa2aR8KJR2RuFoJ+GNd00JYcBr8LSTWAMsgo+Y047J4Ud42kl8xJx2jNF9WMLbjD8WQjtIjX8ilHZG4RriuCVcEtr51DXmz9Jp51ML7XwWAO3gbiClPwWK8jOiw0UXInLPnzPvBI05fkLQ9X/BnHbMuXwhYN9UGv8CqPEvmWs8U5Oi/A2NbFK+Eko75+E+yRb3xvt1CWHAX+M/yRb/GlgE3zCnHZPDb/CfZIt/w5x2jNF9VcLbjL8VQjtIjX8nlHbOw33YqcoSLgntfO8a8w/ptPO9hXZ+CIB2cDeQ0t8DRfkD0eGiCxG55x+Zd4LGHL8j6Pp/Yk475lx+ErBvKo3/BNT4z8w1nqlJUf6GRjYpvwilnXNhd0005Ruo15YQBrwWTjtRtRZYBL8ypx2Tw1/htBNVvzKnHWN0v5TwNuPfhNAOUuPrhNLOubC4I4F9A/XvrjH/kU47v1to548AaAd3Ayn9O1CUfxAdLroQkXv+k3knaMxxHUHX/xdz2jHn8peAfVNp/C+gxv9mrvFMTYryNzSySckqlUk75xDRTqNSwoDN4mjaaYQ7QN24lDftmByaGNG007iU9tJAGF1WKW8zzi7FmnHtQO8ZqfEc4J6DpJ1zBNJOrmvMeaVZqWSTW7oh7Zj/iJp2zgHSTi5QlHmlNIeLLkTknpuAzQddcMYcc0rxF0M+8cWl/A1tziVfwL6pNJ4P1HgBc41nalKUv6GRTUqhUNo5G3bXVKV8J1tRKWHARXDaqYoVAYugmDntmBwWw2mnKlbMnHaM0RWW8jbjEiG0g9R4qVDaORtGO1WBfSdbmWvM5em0U2ahnfIAaOdsIO2UAUVZXkpzuOhCRO65KfNO0JhjKUHX34w57ZhzaSZg31QabwbUeHPmGs/UpCh/QyOblBZCaecsHO2EvfG2LCUMuCWedsItgUXQijntmBy2wtNOuBVz2jFG16KUtxlvJoR2kBrfXCjtnIWjnQpLuCS009o15i3Saae1hXa2CIB2zgLSTmugKLcopTlcdCEi97wl807QmOPmBF3/Vsxpx5zLVgL2TaXxrYAa35q5xjM1Kcrf0MgmZRuhtHMm7K5Jpry306aUMOA2cNpJxtoAi6Atc9oxOWwLp51krC1z2jFGt00pbzNuJ4R2kBpvL5R2zoTRTjKw93Y6uMbcMZ12Olhop2MAtHMmkHY6AEXZsZTmcNGFiNxzJ+adoDHH9gRdf2fmtGPOpbOAfVNpvDNQ412YazxTk6L8DY1sUroKpZ2RsLsmUe2Nt1spYcDd4LSTqO4GLILuzGnH5LA7nHYS1d2Z044xuq6lvM24hxDaQWq8p1DaGQmjnUTSEi4J7fRyjXnbdNrpZaGdbQOgnZFA2ukFFOW2pTSHiy5E5J63Y94JGnPsSdD1K+a0Y85FCdg3lcYVUOOaucYzNSnK39DIJiUklHbOgN01OuW9nYpSwoAr4LSjYxXAIggzpx2TwzCcdnQszJx2jNGFSnmbcW8htIPUeKVQ2jkDRjs6sPd2Iq4xR9NpJ2KhnWgAtHMGkHYiQFFGS2kOF12IyD3HmHeCxhwrCbr+7ZnTjjmX7QXsm0rj2wM1vgNzjWdqUpS/oZFNyo5Caed02F0TT6GdnUoJA94JTjvx2E7AItiZOe2YHO4Mp514bGfmtGOMbsdS3ma8ixDaQWq8j1DaOR33CygDo52+rjHvmk47fS20s2sAtHM6kHb6AkW5aynN4aILEbnn3Zh3gv8zR4Kuf3fmtGPOZXcB+6bS+O5Aje/BXOOZmhTlb2hkk7KnUNoZgfsG6qg33r1KCQPeC0470ehewCLYmzntmBzuDaedaHRv5rRjjG7PUt5mvI8Q2kFqfF+htDMCRjvRiCVcEtrZzzXm/dNpZz8L7ewfAO2MANLOfkBR7l9Kc7joQkTu+QDmnaAxx30Juv4DmdOOOZcDBeybSuMHAjV+EHONZ2pSlL+hkU3KwUJpZzjsrgmn0M4hpYQBHwKnnXD0EGARHMqcdkwOD4XTTjh6KHPaMUZ3cClvMz5MCO0gNX64UNoZDqOdcGC0c4RrzEem084RFto5MgDaGQ6knSOAojyylOZw0YWI3PNRzDtBY46HE3T9RzOnHXMuRwvYN5XGjwZq/BjmGs/UpCh/QyOblGOF0s5psLsmpr3xHldKGPBxcNqJ6eOARXA8c9oxOTweTjuxlH0rn8O2b4TRHVvK24xPEEI7SI2fKJR2ToPRTkxZwiWhnZNcY+6XTjsnWWinXwC0cxqQdk4CirJfKc3hogsRuecq5p2gMccTCbr+OHPaMecSF7BvKo3HgRpPMNd4piZF+Rsa2aQkhdLOMNhdE1HeeKtLCQOuhtNORFUDi6CGOe2YHNbAaSeiapjTjjG6ZClvMz5ZCO0gNX6KUNoZBqOdyhpLuCS009815gHptNPfQjsDAqCdYUDa6Q8U5YBSmsNFFyJyzwOZd4LGHE8h6PoHMacdcy6DBOybSuODgBofzFzjmZoU5W9oZJNyqlDaGYr7loKUb6AeUkoY8BA47cSrhwCLYChz2jE5HAqnnXj1UOa0Y4zu1FLeZjxMCO0gNX6aUNoZivuWgsC+gXq4a8wj0mlnuIV2RgRAO0OBtDMcKMoRpTSHiy5E5J5PZ94JGnM8jaDrP4M57ZhzOUPAvqk0fgZQ4yOZazxTk6L8DY1sUs4USjtDYHdNKOW9nbNKCQM+C047IXUWsAjOZk47Jodnw2knpM5mTjvG6M4s5W3G5wihHaTGzxVKO0Nw30Ad2Hs757nGPCqdds6z0M6oAGhnCJB2zgOKclQpzeGiCxG55/OZd4LGHM8l6PovYE475lwuELBvKo1fANT4hcw1nqlJUf6GRjYpFwmlnVNxd03CG+/FpYQBXwynHZW4GFgElzCnHZPDS+C0oxKXMKcdY3QXlfI240uF0A5S45cJpZ1TYbSj4pZwSWjncteYR6fTzuUW2hkdAO0AbyB9OVCUo0tpDhddiMg9X8G8EzTmeBlB138lc9ox53KlgH1TafxKoMavYq7xTE2K8jc0skm5WijtDIbdNZUpn2S7ppQw4GvgtFNZfQ2wCK5lTjsmh9fCaaey+lrmtGOM7upS3mZ8nRDaQWr8eqG0Mxj3czuBfZLtBteYb0ynnRsstHNjALQzGEg7NwBFeWMpzeGiCxG555uYd4LGHK8n6PpvZk475lxuFrBvKo3fDNT4Lcw1nqlJUf6GRjYptwqlnUGwu0anfCfbmFLCgMfAaUfrMcAiGMucdkwOx8JpR6fsW/kctn0jjO7WUt5mfJsQ2kFq/HahtDMI90m2wL6T7Q7XmMel084dFtoZFwDtDALSzh1AUY4rpTlcdCEi9zyeeSdozPF2gq5/AnPaMecyQcC+qTQ+Aajxicw1nqlJUf6GRjYpk4TSzkDchzFSfm5ncilhwJNL8etOYU4oZt9TStcnGLQuCVUYQ5lUytv0pgqhCqQu7yQ2esSZ3Emg8SANdQCRoU4rJQx4GoGhTmduqGbf0/8zVNhaM4QYKlKXM5kbqjmTmcINtX8JLh/eeGeVEgY8i6BYZwHFNpu5OZsczibA+9nMX4+XYPRzhBg9UuNzmb9EYs5kLkG9zGP+MqDxiXlETRyVLucBdTmfuS4z+ZnyNzTSz+5irnFzxncRABpSh6YhbJq1/q0w72iTKW6tGjTmNtlgrQau5NRi+loNXsmpxdS1fKzkaLLJRs65nisvyLxWvWNcmGmtBux2kX2tBuVtcZM61EUdV16y6bXqHOPSTa1Vj90u2/ha9crb8rrkq44rr6j7WpuM8e66rlWH3a6s21p1ytuq+uRrEyvfU/+1MsZ4b33X2shu76vfWhvN2/0NyVeGlR9o+FobxPhgQ9ey7Pahhq1lzdvDfvKVtvIj/tf6N8bVftfy7PZRf2ul5O0xRL7cdZ9AreVE+CRmrf/t9SncHuk+S6VCpJ/Tqu15zZ9t3b8vcPrWhc5c5MzFzlzizKXOXObM5c5c4cy7nbnSmauceY8z73Xmfc6835kPOPNBZz7kzIed+YgzVzvzUWc+5szHnfmEM5905lPOfNqZzzjzWWc+l/4ZsQXu58G8zxZani2yPFtsebbE8myp5dkyy7PllmcrLM/utjxbaXm2yvLsHsuzey3P7rM8u9/y7AHLswctzx6yPHvY8uwRy7PVlmePWp49Znn2uOXZE5ZnT1qePWV59rTl2TOWZ89anj1XuuFnD3dx/+zj/uktnoaM/+BK1Wv8B1f1W/k/uKrfyv/BVf1W/g+u6rfyf3BVv5X/g6v6rSsBrvy++L0A8EJ67c9rLAStZfa5CLLWPzlb7H+tkJsvvcTvWuF/c6+X+ltLec5RL/OzVihFE3p5w9dSafrSKxq4VmXNBlrVdzdsrahF93plQ9aKWmtIr6r/WpEM9ajvqe9akYy1re+t31qhjfiEvq8+a0U26jn6/rqvldiEf+kH6rpWZJNeqB+s21qqDr6qH6rLWqpOHq0f3vRavevo9/qRTa0VrvPdoVdvdK1wTT3uIf3oxtaK1OtO049lXitaz/tRP55hrVhNve9a/YR9LdWAe1s/aVtLNagH0E9tuJZuYD+hn05fK9ng3kQ/k7pWhY8+Rz/rWStU46tn0s8BP3QR5KdRn4P1esmUb4d4vpQw4OdL0d8OkdTP4w5QvwBIKuWnUU0OXwB+uq42hy+AiyCon/LHFW8ysJ/yf9EtsJfS38F5sXTDn/J/qZT+p/xxTqL0i8ACegl8uGjxmaJ5EViMtft+UeiN9CxMR7GkN96XSwkDfhl+I8WSLwNvpFeY30gmh6/Ab6RY8hWhN9KzsLhjCUu4JDfSq26BvZZ+I71quZFeC+BGehZ4I70KLKDXiA4XZUC1cSL3/DrQzLKy8LflC64BNQZrEIkCbwDNzJZD5W9oc8ZvEHQybwjtZJ6B+U+8whvvm6WEAb8J72TiFW8Ci/8t5p2MyeFb8E4mXvEWcfEjDPQN5gb6NjiHtQN98SI1/g6w9oLsgJ+BxR0PWcIl6YDfdY35vfQO+F1LB/xeAB0w7gZS+l2gKN8jOlx0ISL3/D5xB6z8DW3M8R2C7u0D5l2rOZcPBOybSuMfADX+IXONZ2pSEM0Paq014As7KNp5GnbXRGu88X5UShjwR3DaidZ8BDzAj5nTjsnhx3DaidZ8zJx2jNGtKeVtxp+Azbh2oPeM1PinQmnnaVjc0WpLuCS085lrzJ+n085nFtr5PADawd1ASn8GFOXnRIeLLkTknr9g3gkac/yUoOv/kjntmHP5UsC+qTT+JVDjXzHXeKYmRfkbGtmkfC30vZ2nYHdNKOVbPL8pJQz4GzjthNQ3wCL4ljntmBx+C6edkPqWOe0Yo/u6lLcZfyeEdpAa/14o7TwFi1vXWMIloZ0fXGP+MZ12frDQzo8B0A7uBlL6B6AofyQ6XHQhIvf8E/NO0Jjj9wRd/8/Macecy88C9k2l8Z+BGv+FucYzNSnK39DIJmWtUNp5EnbXJFNo59dSwoB/hdNOUv0KLILfmNOOyeFvcNpJqt+Y044xurWlvM14nRDaQWr8d6G08yQs7kRgtPOHa8x/ptPOHxba+TMA2sHdQEr/ARTln0SHiy5E5J7/Yt4JGnP8naDr/5s57Zhz+VvAvqk0/jeyoSrjrfFMTYryNzSySWmEy2GgtPME7K6pTPlOjMZlhAGbxbG0U6kbA4sgu4w37ZgcmhixtFOZsm/lc9j2jTC6RmW8zTgHbMb/FiR4z0iN5wL3HCTtPAFrFioD+y6VPNeYm5RlpZJNXtmGtGP+I2raeQJIO3lAUTYpozlcdCEi95zPvBM05phbhr8YCogvLuVvaHMuBQL2TaXxAqDGC5lrPFOTovwNjWxSioTSzuO493ai3niLywgDLobTTjJaDCyCEua0Y3JYAqedZLSEOe0Yoysq423GpUJoB6nxMqG08ziMdpIRS7gktFPuGnPTdNopt9BO0wBo53Eg7ZQDRdm0jOZw0YWI3HMz5p2gMccygq6/OXPaMefSXMC+qTTeHKjxFsw1nqlJUf6GRjYpLYXSzmOwuyYc88bbqoww4FZw2gnHWgGLYDPmtGNyuBmcdsKxzZjTjjG6lmW8zXhzIbSD1HhrobTzGIx2wlFLuCS0s4VrzFum084WFtrZMgDaeQxIO1sARbllGc3hogsRueetmHeCxhxbE3T9WzOnHXMuWwvYN5XGtwZqfBvmGs/UpCh/QyOblDZCaedR2F0TT/kkW9sywoDbwmknrtsCi6Adc9oxOWwHp514yr6Vz2HbN8Lo2pTxNuP2QmgHqfEOQmnnURjtxAP7JFtH15g7pdNORwvtdAqAdh4F0k5HoCg7ldEcLroQkXvuzLwTNObYgaDr78Kcdsy5dBGwbyqNdwFqvCtzjWdqUpS/oZFNSjehtLMaRzsJb7zdywgD7o6nnUR3YBH0YE47Joc98LST6MGcdozRdSvjbcY9hdAOUuO9hNLOahztxC3hktDOtq4xb5dOO9taaGe7AGhnNZB2tgWKcrsymsNFFyJyz4p5J2jMsRdB16+Z0445Fy1g31Qa10CNh5hrPFOTovwNjWxSKoTSziO4T7LFvfGGywgDDuM/yRYPA4ugN3PaMTnsjf8kW7w3c9oxRldRxtuMK4XQDlLjEaG08wjuk2xVlnBJaCfqGnMsnXaiFtqJBUA7jwBpJwoUZayM5nDRhYjc8/bMO0FjjhGCrn8H5rRjzmUHAfum0vgOQI3vyFzjmZoU5W9oZJOyk1DaeRh210RTvoF65zLCgHeG005U7Qwsgl2Y047J4S5w2omqXZjTjjG6ncp4m3EfIbSD1HhfobTzMIx2IoF9A/WurjHvlk47u1poZ7cAaOdhIO3sChTlbmU0h4suROSed2feCRpz7EvQ9e/BnHbMuewhYN9UGt8DqPE9mWs8U5Oi/A2NbFL2Eko7DxHRzt5lhAHvTUA7ewOLYB/mtGNyuA8B7ezDnHaM0e1VxtuM9xVCO0iN7yeUdh4SSDv7u8Z8QDrt7G+hnQMCoJ2HgLSzP1CUBwihHeSeD2TeCRpz3I+g6z+IOe2YczlIwL6pNH4QUOMHM9d4piZF+Rsa2aQcIpR2HoTdNVUp38l2aBlhwIfCaacqdiiwCA5jTjsmh4fBaacqdhhz2jFGd0gZbzM+XAjtIDV+hFDaeRBGO1WBfSfbka4xH5VOO0daaOeoAGjnQSDtHAkU5VFlNIeLLkTkno9m3gkaczyCoOs/hjntmHM5RsC+qTR+DFDjxzLXeKYmRfkbGtmkHCeUdh7A0U7YG+/xZYQBH4+nnfDxwCI4gTntmByegKed8AnMaccY3XFlvM34RCG0g9T4SUJp5wEc7VRYwiWhnX6uMVel004/C+1UBUA7DwBppx9QlFVlNIeLLkTknuPMO0FjjicRdP0J5rRjziUhYN9UGk8ANZ5krvFMTYryNzSySakWSjv34367aMp7OzVlhAHXwGknGasBFsHJzGnH5PBkOO0kYyczpx1jdNVlvM34FCG0g9R4f6G0cz/ut4sG9t7OANeYB6bTzgAL7QwMgHbuB9LOAKAoB5bRHC66EJF7HsS8EzTm2J+g6x/MnHbMuQwWsG8qjQ8GavxU5hrP1KQof0Mjm5QhQmnnPthdk6j2xju0jDDgoXDaSVQPBRbBMOa0Y3I4DE47iephzGnHGN2QMt5mfJoQ2kFqfLhQ2rkPRjuJpCVcEtoZ4Rrz6em0M8JCO6cHQDv3AWlnBFCUp5fRHC66EJF7PoN5J2jMcThB1z+SOe2YcxkpYN9UGh8J1PiZzDWeqUlR/oZGNilnCaWde2F3jU55b+fsMsKAz4bTjo6dDSyCc5jTjsnhOXDa0bFzmNOOMbqzynib8blCaAep8fOE0s69MNrRgb23M8o15vPTaWeUhXbOD4B27gXSziigKM8vozlcdCEi93wB807QmON5BF3/hcxpx5zLhQL2TaXxC4Eav4i5xjM1Kcrf0Mgm5WKhtHMP7reLptDOJWWEAV8Cp5147BJgEVzKnHZMDi+F0048dilz2jFGd3EZbzO+TAjtIDV+uVDauQf320UDo53RrjFfkU47oy20c0UAtHMPkHZGA0V5RRnN4aILEbnnK5l3gsYcLyfo+q9iTjvmXK4SsG8qjV8F1PjVzDWeqUlR/oZGNinXCKWdVbhvoI564722jDDga+G0E41eCyyC65jTjsnhdXDaiUavY047xuiuKeNtxtcLoR2kxm8QSjurYLQTjVjCJaGdG11jvimddm600M5NAdDOKiDt3AgU5U1lNIeLLkTknm9m3gkac7yBoOu/hTntmHO5RcC+qTR+C1DjtzLXeKYmRfkbGtmkjBFKOythd004hXbGlhEGPBZOO+HoWGAR3MacdkwOb4PTTjh6G3PaMUY3poy3Gd8uhHaQGr9DKO2shNFOODDaGeca8/h02hlnoZ3xAdDOSiDtjAOKcnwZzeGiCxG55wnMO0FjjncQdP0TmdOOOZeJAvZNpfGJQI1PYq7xTE2K8jc0skmZLJR27obdNTHtjXdKGWHAU+C0E9NTgEUwlTntmBxOhdNOLGXfyuew7RthdJPLeJvxnUJoB6nxaUJp524Y7cSUJVwS2pnuGvOMdNqZbqGdGQHQzt1A2pkOFOWMMprDRRcics8zmXeCxhynEXT9s5jTjjmXWQL2TaXxWUCNz2au8UxNivI3NLJJmSOUdlbA7pqI8sY7t4ww4Llw2omoucAimMecdkwO58FpJ6LmMacdY3Rzynib8XwhtIPU+F1CaWcFjHYqayzhktDOAteYF6bTzgIL7SwMgHZWAGlnAVCUC8toDhddiMg9L2LeCRpzvIug61/MnHbMuSwWsG8qjS8GanwJc41nalKUv6GRTcpSobSzHPctBSnfQL2sjDDgZXDaiVcvAxbBcua0Y3K4HE478erlzGnHGN3SMt5mvEII7SA1frdQ2lmO+5aCwL6BeqVrzKvSaWelhXZWBUA7y4G0sxIoylVlNIeLLkTknu9h3gkac7yboOu/lzntmHO5V8C+qTR+L1Dj9zHXeKYmRfkbGtmk3C+UdpbB7ppQyns7D5QRBvwAnHZC6gFgETzInHZMDh+E005IPcicdozR3V/G24wfEkI7SI0/LJR2luG+gTqw93YecY15dTrtPGKhndUB0M4yIO08AhTl6jKaw0UXInLPjzLvBI05PkzQ9T/GnHbMuTwmYN9UGn8MqPHHmWs8U5Oi/A2NbFKeEEo7S3F3TcIb75NlhAE/CacdlXgSWARPMacdk8On4LSjEk8xpx1jdE+U8Tbjp4XQDlLjzwilnaUw2lFxS7gktPOsa8zPpdPOsxbaeS4A2gHeQPpZoCifK6M5XHQhIvf8PPNO0JjjMwRd/wvMacecywsC9k2l8ReAGn+RucYzNSnK39DIJuUlobSzBHbXVKZ8ku3lMsKAX4bTTmX1y8AieIU57ZgcvgKnncrqV5jTjjG6l8p4m/GrQmgHqfHXhNLOEtzP7QT2SbbXXWN+I512XrfQzhsB0M4SIO28DhTlG2U0h4suROSe32TeCRpzfI2g63+LOe2Yc3lLwL6pNP4WUONvM9d4piZF+Rsa2aS8I5R2FsPuGp3ynWzvlhEG/C6cdrR+F1gE7zGnHZPD9+C0o1P2rXwO274RRvdOGW8zfl8I7SA1/oFQ2lmM+yRbYN/J9qFrzGvSaedDC+2sCYB2FgNp50OgKNeU0RwuuhCRe/6IeSdozPEDgq7/Y+a0Y87lYwH7ptL4x0CNf8Jc45maFOVvaGST8qlQ2lmE+zBGys/tfFZGGPBnZfh1P2dOKGbfn5etTzBoXRKqMIbyaRlv0/tCCFUgdfklsdEjzuRLAo0HaagLiQz1qzLCgL8iMNSvmRuq2ffX/xkqbK1vhBgqUpffMjdUcybfCjfUBaW4fHjj/a6MMODvCIr1O6DYvmduziaH3xPg/ffMX4+XYPQ/CDF6pMZ/ZP4SiTmTHwnq5SfmLwMan/iJqImj0uVPQF3+zFyXmfxM+Rsa6We/MNe4OeNfCAANqUPTEDbNWv9WmHeg4+6RRVPnWdA4Q6TvXzby5Lat+/e1znn+6szfnLnOmb878w9n/unMv5z5t/HJcuf/x5mNnZntzBxn5jozz5lNnJnvzAJnFjqzyJnFzixxZqkzy5xZ7symzmzmzObObOHMls5sVZ6V+j7pWvd9Uu+zXy3PfrM8W2d59rvl2R+WZ39anv1lefa35ZlJTvqzRpZnjS3Psi3PcizPci3P8izPmlie5VueFVieFVqeFVmeFVuelVielVqelVmelVueNbU8a2Z51tzyrIXlWUvLs1blG74n3879s4/7p/I3UkzHr1muBRhv7fv7v4LWMnv8DbLWP/la53+tkJsv/bvftcL/5l7/4W8t5TlH/aeftUIpmtB/NXwtlaYv/XcD16qs2UCr2nhiA9aKWnSvGzVkrai1hnTj+q8VyVCPOru+a0Uy1rbOqd9aoY34hM6tz1qRjXqOzqv7WolN+JduUte1Ipv0Qp1ft7VUHXxVF9RlLVUnj9aFm16rdx39Xhdtaq1wne8OXbzRtcI19biHdMnG1orU607TpZnXitbzftRlGdaK1dT7rtXl9rVUA+5t3dS2lmpQD6CbbbiWbmA/oZunr5VscG+iW6SuVeGjz9EtPWuFanz1TLpVucx3L1o17P609HrJlJ8m2KycMGCzOOpVr9rgN8MdoN4ckFTKdy9MDk2M2J8mSKbsW/kcQX4qHFe8SWUJF/aqijcXrd0C2yL9lY3W5Rt+KnyLcvpPheOcROnWwALaAny4aPGZomkNLMbafbcWeiO1hOkolvTGu2U5YcBbwm+kWHJL4I20FfMbyeRwK/iNFEtuJfRGagmLO5awhEtyI23tFtg26TfS1pYbaZsAbqSWwBtpa2ABbUN0uOg3gpF7bgM0s6ws/G25uWtA6DeCkSjQFmhmthwqf0ObM25L0Mm0FdrJtID5T7zCG2+7csKA28E7mXhFO2Dxt2feyZgctod3MvGK9sTFjzDQtswNtAM4h7UDffEiNd4RWHtBdsAtYHHHQ5ZwSTrgTq4xd07vgDtZOuDOAXTAuBtI6U5AUXYmOlx0ISL33IW4A1b+hjbm2JGge+vKvGs159JVwL6pNN4VqPFuzDWeqUlBND+otbqDL+ygaKc57K6J1njj7VFOGHAPOO1Ea3oAD7Anc9oxOewJp51oTU/mtGOMrns5bzPuBTbj2oHeM1Lj2wqlneawuKPVlnBJaGc715hVOu1sZ6EdFQDt4G4gpbcDilIRHS66EJF71sw7QWOO2xJ0/SHmtGPOJSRg31QaDwE1XsFc45maFOVvaGSTEhb63k4z2F0TSvnWh97lhAH3htNOSPUGFkElc9oxOayE005IVTKnHWN04XLeZhwRQjtIjUeF0k4zWNypv3I+CxlnGu3EXGPePp12Yhba2T4A2sHdQErHgKLcnuhw0YWI3PMOzDtBY45Rgq5/R+a0Y85lRwH7ptL4jkCN78Rc45maFOVvaGSTsrNQ2mkKu2uSKbSzSzlhwLvAaSepdgEWQR/mtPO/Q4fTTlL1YU47xuh2Ludtxn2F0A5S47sKpZ2msLgTgdHObq4x755OO7tZaGf3AGgHdwMpvRtQlLsTHS66EJF73oN5J2jMcVeCrn9P5rRjzmVPAfum0vieQI3vxVzjmZoU5W9oZJOyt1DaKYfdNZUp34mxTzlhwPvAaadS7wMsgn2Z047J4b5w2qlM2bfyOWz7Rhjd3uW8zXg/IbSD1Pj+QmmnHBZ3pbKES0I7B7jGfGA67RxgoZ0DA6Ad3A2k9AFAUR5IdLjoQkTu+SDmnaAxx/0Juv6DmdOOOZeDBeybSuMHAzV+CHONZ2pSlL+hkU3KoUJppwz33k7UG+9h5YQBH4Z/byd6GLAIDmdOOyaHh+Pf24kezpx2jNEdWs7bjI8QQjtIjR8plHbKYHEnI5ZwSWjnKNeYj06nnaMstHN0ALSDu4GUPgooyqOJDhddiMg9H8O8EzTmeCRB138sc9ox53KsgH1TafxYoMaPY67xTE2K8jc0skk5XijtlMLumnDMG+8J5YQBnwCnnXDsBGARnMicdkwOT4TTTjh2InPaMUZ3fDlvMz5JCO0gNd5PKO2UwuIORy3hktBOlWvM8XTaqbLQTjwA2sHdQEpXAUUZJzpcdCEi95xg3gkac+xH0PUnmdOOOZekgH1TaTwJ1Hg1c41nalKUv6GRTUqNUNopgd018ZRPsp1cThjwyXDaieuTgUVwCnPaMTk8BU478ZR9K5/Dtm+E0dWU8zbj/kJoB6nxAUJppwQWd1xZwiWhnYGuMQ9Kp52BFtoZFADt4G4gpQcCRTmI6HDRhYjc82DmnaAxxwEEXf+pzGnHnMupAvZNpfFTgRofwlzjmZoU5W9oZJMyVCjtFONoJ+GNd1g5YcDD8LSTGAYsgtOY047J4Wl42kmcxpx2jNENLedtxsOF0A5S4yOE0k4xriGOW8IloZ3TXWM+I512TrfQzhkB0A7uBlL6dKAozyA6XHQhIvc8knknaMxxBEHXfyZz2jHncqaAfVNp/Eygxs9irvFMTYryNzSySTlbKO0Uwe6acNwb7znlhAGfA6edcPwcYBGcy5x2TA7PxX+SLX4uc9oxRnd2OW8zPk8I7SA1Pkoo7RThPuxUZQmXhHbOd435gnTaOd9COxcEQDu4G0jp84GivIDocNGFiNzzhcw7QWOOowi6/ouY0445l4sE7JtK4xcBNX4xc41nalKUv6GRTcolQmmnEHbXRFO+gfrScsKAL4XTTlRdCiyCy5jTjsnhZXDaiarLmNOOMbpLynmb8eVCaAep8dFCaacQFncksG+gvsI15ivTaecKC+1cGQDt4G4gpa8AivJKosNFFyJyz1cx7wSNOY4m6PqvZk475lyuFrBvKo1fDdT4Ncw1nqlJUf6GRjYp1wqlnQIi2rmunDDg6who5zpgEVzPnHZMDq8noJ3rmdOOMbpry3mb8Q1CaAep8RuF0k6BQNq5yTXmm9Np5yYL7dwcAO3gbiClbwKK8mYhtIPc8y3MO0FjjjcSdP23Mqcdcy63Ctg3lcZvBWp8DHONZ2pSlL+hkU3KWKG0kw+7a6pSvpPttnLCgG+D005V7DZgEdzOnHZMDm+H005V7HbmtGOMbmw5bzO+QwjtIDU+Tijt5MPirgrsO9nGu8Y8IZ12xltoZ0IAtIO7gZQeDxTlBKLDRRcics8TmXeCxhzHEXT9k5jTjjmXSQL2TaXxSUCNT2au8UxNivI3NLJJmSKUdprgaCfsjXdqOWHAU/G0E54KLII7mdOOyeGdeNoJ38mcdozRTSnnbcbThNAOUuPThdJOE1xDXGEJl4R2ZrjGPDOddmZYaGdmALSDu4GUngEU5Uyiw0UXInLPs5h3gsYcpxN0/bOZ0445l9kC9k2l8dlAjc9hrvFMTYryNzSySZkrlHbyYHdNMuW9nXnlhAHPg9NOMjYPWATzmdOOyeF8OO0kY/OZ044xurnlvM34LiG0g9T4AqG0kweLOxnYezsLXWNelE47Cy20sygA2sHdQEovBIpyEdHhogsRuefFzDtBY44LCLr+Jcxpx5zLEgH7ptL4EqDGlzLXeKYmRfkbGtmkLBNKO7mwuyZR7Y13eTlhwMvhtJOoXg4sghXMacfkcAWcdhLVK5jTjjG6ZeW8zfhuIbSD1PhKobSTC4s7kbSES0I7q1xjvieddlZZaOeeAGgHdwMpvQooynuIDhddiMg938u8EzTmuJKg67+POe2Yc7lPwL6pNH4fUOP3M9d4piZF+Rsa2aQ8IJR2cmB3jU55b+fBcsKAH4TTjo49CCyCh5jTjsnhQ3Da0bGHmNOOMboHynmb8cNCaAep8UeE0k4OLG4d2Hs7q11jfjSddlZbaOfRAGgHdwMpvRooykeJDhddiMg9P8a8EzTm+AhB1/84c9ox5/K4gH1TafxxoMafYK7xTE2K8jc0skl5UijtZMPumngK7TxVThjwU3DaiceeAhbB08xpx+TwaTjtxGNPM6cdY3RPlvM242eE0A5S488KpZ1sWNzxwGjnOdeYn0+nnecstPN8ALSDu4GUfg4oyueJDhddiMg9v8C8EzTm+CxB1/8ic9ox5/KigH1TafxFoMZfYq7xTE2K8jc0skl5WSjtNIbdNdGoN95XygkDfgVOO9HoK8AieJU57ZgcvgqnnWj0Vea0Y4zu5XLeZvyaENpBavx1obTTGBZ3NGIJl4R23nCN+c102nnDQjtvBkA7uBtI6TeAonyT6HDRhYjc81vMO0Fjjq8TdP1vM6cdcy5vC9g3lcbfBmr8HeYaz9SkKH9DI5uUd4XSTiPYXRNOoZ33ygkDfg9OO+Hoe8AieJ857Zgcvg+nnXD0fea0Y4zu3XLeZvyBENpBavxDobTTCBZ3ODDaWeMa80fptLPGQjsfBUA7uBtI6TVAUX5EdLjoQkTu+WPmnaAxxw8Juv5PmNOOOZdPBOybSuOfADX+KXONZ2pSlL+hkU3KZ0JpJwt218S0N97PywkD/hxOOzH9ObAIvmBOOyaHX8BpJ5ayb+Vz2PaNMLrPynmb8ZdCaAep8a+E0k4WLO6YsoRLQjtfu8b8TTrtfG2hnW8CoB3cDaT010BRfkN0uOhCRO75W+adoDHHrwi6/u+Y0445l+8E7JtK498BNf49c41nalKUv6GRTcoPQmnn7zLUXRNR3nh/LCcM+Ec47UTUj8Ai+Ik57Zgc/gSnnYj6iTntGKP7oZy3Gf8shHaQGv9FKO14zVP5GpU1lnBJaGeta8y/ptPOWgvt/BoA7eBuIKXXAkX5aznN4aILEbnn35h3gsYcfyHo+tcxpx1zLusE7JtK4+uAGv+ducYzNSnK39DIJuUPobTzF+yuiad8A/Wf5YQB/wmnnXj1n8Ai+Is57Zgc/gWnnXj1X8xpxxjdH+W8zfhvIbQD1XhTmbTzF4x24oF9A3Wjpq4emmalko35P6TTjvmPqGnnLyDtNGqKE2XjpjSHiy5E5J6zm2LNB/7ygukqmuIvhpymtBeX8je0OZccAfum0ngOUOO5zDWeqUlR/oZGNil5QN0ESTt/wu6aUMp7O02aEgZsFsfSTkg1ARZBPrA4qXKY3xRNOyGVT3xpIIwurylvMy4Am3HtQO8ZqfFCobTzJ4x2dGDv7RS5xlycTjtFFtopDoB2/gTSThFQlMVNaQ4XXYjIPZcw7wSNORYSdP2lzGnHnEupgH1TabwUqPEy5hrP1KQof0Mjm5RyobTzB+6uSXjjbdqUMOCmcNpRiabAImjGnHZMDpvBaUclmjGnHWN05U15m3FzIbSD1HgLobTzB4x2VNwSLgnttHSNuVU67bS00E6rAGgHeAPplkBRtmpKc7joQkTueTPmnaAxxxYEXf/mzGnHnMvmAvZNpfHNgRpvzVzjmZoU5W9oZJOyhVDa+R1211SmfJJty6aEAW8Jp53K6i2BRbAVc9oxOdwKTjuV1Vsxpx1jdFs05W3GWwuhHaTGtxFKO7/jfm4nsE+ytXGNuW067bSx0E7bAGjndyDttAGKsm1TmsNFFyJyz+2Yd4LGHLch6PrbM6cdcy7tBeybSuPtgRrvwFzjmZoU5W9oZJPSUSjtrIPdNTrlO9k6NSUMuBOcdrTuBCyCzsxpx+SwM5x2dMq+lc9h2zfC6Do25W3GXYTQDlLjXYXSzjrcJ9mUJVwS2unmGnP3dNrpZqGd7gHQzjog7XQDirJ7U5rDRRcics89mHeCxhy7EnT9PZnTjjmXngL2TaXxnkCN92Ku8UxNivI3NLJJ2VYo7fyG+zBGys/tbNeUMODtmuLXVcwJxexbNV2fYNC6JFRhDGXbprxNTwuhCqQuQ8RGjziTEIHGgzTUX4kMtaIpYcAVBIYaZm6oZt/h/wwVtlZvIYaK1GUlc0M1Z1Ip3FDXluHy4Y030pQw4AhBsUaAYosyN2eTwygB3keZvx4vwehjQoweqfHtmb9EYs5ke4J62YH5y4DGJ3YgauKodLkDUJc7MtdlJj9T/oZG+tlOzDVuzngnAkBD6tA0hAVZ698KM7G+n5U60PEvLsDXOzrGRQJiXCggxgUCYrxLQIzzBcQ4T0CMcwXEOEdAjLMFxDhLQIwzBcQ4Q0CM0wXEOE1AjHcKiHGqgBinCIhxsoAYJwmIcaKAGCcIiHG8gBjHCYjxDgEx3i4gxtsExDhWQIxjBMR4q4AYbxEQ480CYlxXyD/G3wTE+KuAGNcKiPEXATH+LCDGnwTE+KOAGH8QEOP3AmL8TkCM3wqI8RsBMX4tIMavBMT4pYAYvxAQ4+cCYvxMQIyfCojxEwExfiwgxo8ExLhGQIwfCojxAwExvi8gxvcExPiugBjfERDj2wJifEtAjH2L+cfYR0CMuwiIcWcBMe4kIMYdBcS4g4AYtxcQY0xAjFEBMUYExFgpIMbeAmIMC4ixQkCMIQExagExKgExbicgxm0FxNhLQIw9BcTYQ0CM3QXE2E1AjF0FxNhFQIydBcTYSUCMHQXE2EFAjO0FxDi6hH+MlwuI8TIBMV4qIMZLBMR4sYAYLxIQ44UCYrxAQIznC4hxlIAYzxMQ47kCYjxHQIxnC4jxLAExnikgxpECYjxDQIynC4hxhIAYhwuI8TQBMQ4TEONQATEOERDjqQJiHCwgxkECYhwoIMYBAmLsLyDG50r5x/isgBifERDj0wJifEpAjE8KiPEJATE+LiDGxwTE+KiAGFcLiPERATE+LCDGhwTE+KCAGB8QEOP9AmK8T0CM9wqI8R4BMa4SEONKATHeLSDGFQJiXC4gxmUCYlwqIMYlAmJcLCDGRQJiXCggxgUEMWZhY4zSrJuI0azbu5pm3WgFzboVlTTrqhBRHojOTRHlt4pIv3Gi/IaraNatIdKZJlo3rmnWrSDKb1UNzbqVRH4WJ1q3isrPEjTrJol0FonTrBsm8t9whGbd6t406+owUbxE91AlVX9G5GcRIp1FiPIQ/beO0T16q3L+HNFSQIwtBMTYXECMzQTE2FRAjOUCYiwTEGOpgBhLBMRYLCDGIgExFgqIsUBAjPkCYmwiIMY8ATHmCogxR0CM2QJibCwgxkYCYswSEOPfZfxj/EtAjH8KiPEPATH+LiDGdQJi/E1AjL8KiHEtQYzegVm7mnBtpRp7clvu/n3npllZuzizjzP7OnNXZ+7mzN2duYcz93TmXs7c25n7OHNfZ+7nzP2deUDTf9Y4sKm7aLb7p1m0bdqzXSzP+lie9bU829XybDfLs90tz/awPNvT8mwvy7O9Lc/2sTzb1/JsP8uz/S3PDrA8O9B95h3ZWDHoRahfSKqVWuxZq0JVhsPVkVC1rtBVKhSLR3urcO94ZVRHde9o72QoWlFRHQ1HI7F4LKJiOlxRrWt6xypq3OUOaooTvDenB1ly2hiZU50au988HEyUh4MD0NZC3C+71QcDc3oIUU4PCUBbhwDzcChRHg4NQFsLgNo6FJjTw4hyehi1tpw87Mw0D5Q6mg+8/+4C3n+HE+no8AA86nCgjo4gysMRAXjUPKBHHQHM6ZFEOT0yAG0dCczDUUR5OCoAbc0FausoYE6PJsrp0QHcf7swzQOljmYD7785wPvvGCIdHROARx0D1NGxRHk4NgCPmgX0qGOBOT2OKKfHBaCt44B5OJ4oD8cHoK2ZQG0dD8zpCUQ5PSGA+68P0zxQ6mg68P6bAbz/TiTS0YkBeNSJQB2dRJSHkwLwqGlAjzoJmNN+RDntF4C2+gHzUEWUh6oAtHUnUFtVwJzGiXIaD+D+68s0D5Q6mgK8/6YC778EkY4SAXhUAqijJFEekgF41GSgRyWBOa0myml1ANqqBuahhigPNQFoaxJQWzXAnJ5MlNOTA7j/dmWaB0odTQDefxOB998pRDo6JQCPOgWoo/5EeegfgEeNB3pUf2BOBxDldEAA2hoAzMNAojwMDEBb44DaGgjM6SCinA4K4P7bjWkeKHV0O/D+uwN4/w0m0tHgADxqMFBHpxLl4dQAPOo2oEedCszpEKKcDglAW0OAeRhKlIehAWhrLFBbQ4E5HUaU02EB3H+7M80DpY5uBd5/Y4D332lEOjotAI86Daij4UR5GB6AR90C9KjhwJyOIMrpiAC0NQKYh9OJ8nB6ANq6Gait04E5PYMop2cEcP/twTQPlDr6rRBXm+sKcfkbSaSjkQF41Eigjs4kysOZAXjUr4W4tc4E5vQsopyeFYC2zgLm4WyiPJwdgLbWArV1NjCn5xDl9JwA7r89meaBUkc/A++/X4D337lEOjo3AI86F6ij84jycF4AHvUT0KPOA+Z0FFFORwWgrVHAPJxPlIfzA9DWj0BtnQ/M6QVEOb0ggPtvL6Z5oNTR98D77wfg/XchkY4uDMCjLgTq6CKiPFwUgEd9B/Soi4A5vZgopxcHoK2LgXm4hCgPlwSgrW+B2roEmNNLiXJ6aQD3395M80Cpo6+B9983wPvvMiIdXRaAR10G1NHlRHm4PACP+groUZcDczqaKKejA9DWaGAeriDKwxUBaOtLoLauAOb0SqKcXhnA/bcP0zxQ6uhz4P33BfD+u4pIR1cF4FFXAXV0NVEerg7Aoz4DetTVwJxeQ5TTawLQ1jXAPFxLlIdrA9DWp0BtXQvM6XVEOb0ugPtvX6Z5oNTRx8D77xPg/Xc9kY6uD8Cjrgfq6AaiPNwQgEd9BPSoG4A5vZEopzcGoK0bgXm4iSgPNwWgrTVAbd0EzOnNRDm9OYD7bz+meaDU0QfA++9D4P13C5GObgnAo24B6uhWojzcGoBHvQ/0qFuBOR1DlNMxAWhrDDAPY4nyMDYAbb0H1NZYYE5vI8rpbQHcf/szzQOljt4B3n/vAu+/24l0dHsAHnU7UEd3EOXhjgA86m2gR90BzOk4opyOC0Bb44B5GE+Uh/EBaOstoLbGA3M6gSinEwK4/w5gnIfmWRv+TkXv71L0/g5F7+9O9P7ORO/vSvT+jkTv70b0/k5E7+9C9P4ORO/vPvT+zkPv7zr0/o5D7+827NPEE6fn77t6/r6b5++7e/6+h+fve3r+vpf794nO/84kZ0525hRnTnXmnc6c5szpzsxx/puCrPW1aP5/389KHY3AmlpcgO+D0DEuEhDjQgExLhAQ410CYpwvIMZ5AmKcKyDGOQJinC0gxlkCYpwpIMYZAmKcLiDGaQJivFNAjFMFxDhFQIyTBcQ4SUCMEwXEOEFAjOMFxDhOQIx3CIjxdgEx3iYgxrECYhwjIMZbBcR4i4AYbxYQ47pC/jH+JiDGXwXEuFZAjL8IiPFnATH+JCDGHwXE+IOAGL8XEON3AmL8VkCM3wiI8WsBMX4lIMYvBcT4hYAYPxcQ42cCYvxUQIyfCIjxYwExfiQgxjUCYvxQQIwfCIjxfQExvicgxncFxPiOgBjfFhDjWwJi7FvMP8Y+AmLcRUCMOwuIcScBMe4oIMYdBMS4vYAYYwJijAqIMSIgxkoBMfYWEGNYQIwVAmIMCYhRC4hRCYhxOwExbisgxl4CYvz/2LsOOCmKrN/L7gK7sLCwu4CCipjFML0zuztrxJxzzm6YRcwSRUBGRUVQUQHBnHPOOef86SW9M5359DzvPM8cviqZmn379nVND/Nq6Kf07/dgtqvqX/969d6r6urq7rUEcBwpgOOaAjiuIYDj6gI4riaA46oCOK4igOPKAjiuJIDjCAEcZ1ZFn+OpAjieIoDjyQI4zhDA8SQBHE8UwPEEARzTAjhOF8DxeAEcpwngOFUAxykCOB4ngONkARyPFcBxkgCOEwVwnCCA43gBHMcJ4DhWAMdjBHA8WgDHowRwPFIAxyMEcDxcAMfDBHA8VADHMQI4vtIv+hxfFsDxJQEcXxTA8QUBHJ8XwPE5ARyfFcDxGQEcnxbA8SkBHJ8UwPEJARwfF8DxMQEcHxXA8REBHB8WwPEhARwfFMDxAQEc7xfA8T4BHO8VwPEeARzvFsDxLgEc7xTA8Q4BHG8XwPE2ARxvdcDR4+WYdIPb1uwGtyHlBjcZd4Mbb3SDG6t3pAdH/RZzpN8WR/bb6ki/iRY3uB2O7Mx3hNvqu8GNO9JvS4cb3EZH8azVEW6Lq3jW5ga33ZGdNbW6wU04ir+JJje4qQY3uH7CEV9H41Cjq/mZo3jW5MjOmhzpIZn1Y+45+qDq6F9H1AngWCuAY40AjgMFcBwggGO1AI79BXDsJ4BjlQCOfQVw7COAY6UAjhUCOPYWwLGXAI49BXAsF8CxTADHUgEcewjgWCKAoyeA4y/9o8/xZwEcfxLA8UcBHH8QwPF7ARy/E8DxWwEcv3HAER482CmH2IlYD6Db6szvawZ43rVKrlNyvZIblNyo5CYlNyu5RcmtSm5TcruSO5TcqeQuJXcPWIRxz4AMaGnmfw06HJ27ljh3HXHueuLcDcS5G4lzNxHnbibO3UKcu5U4dxtx7nbi3B3EuTuJc3cR5+4mzt2TOQePUlZjYHyRvR+LwRf3x2ONiUSqqT7lx/2WWH1za7IhlmhobUz6Sb8h2dBen4zHU8lEsqm5tbkp1uwn4im/o6E53pGBu3cAn6NCnd5L6LQHp079rtwL1cN9jvRwXxFsi/EDBP59jDq935FO7y+Cbd3PqIcHHOnhgSLYFuOHI/wHGHX6oCOdPujatpQeromoHlza0QaM49+GjOPfQ47s6KEixKiHGO3oYUd6eLgIMYrxgyf+w4w6fcSRTh8pgm09wqiHRx3p4dEi2Bbjh2r8Rxl1+pgjnT5WhPHv2ojqwaUdJRnHv2bG8e9xR3b0eBFi1OOMdvSEIz08UYQYxfiBJf8JRp0+6UinTxbBtp5k1MNTjvTwVBFsi/HDWP5TjDp92pFOny7C+HddRPXg0o4SjONfA+P494wjO3qmCDHqGUY7etaRHp4tQoxi/KCb/yyjTp9zpNPnimBbzzHq4XlHeni+CLbF+CE+/3lGnb7gSKcvFGH8uz6ienBpRzHG8c9nHP9edGRHLxYhRr3IaEcvOdLDS0WIUYwfkPRfYtTpy450+nIRbOtlRj284kgPrxTBthg//Om/wqjT/3Ok0/8rwvh3Q0T14NKO1mIc/9ZmHP9edWRHrxYhRr3KaEevOdLDa0WIUYwfrPVfY9TpHxzp9A9FsK0/MOrhj4708Mci2Bbjh4b9PzLq9E+OdPqnIox/N0ZUDy7taHXG8W8NxvHvz47s6M9FiFF/ZrSjvzjSw1+KEKMYP5Dt/4VRp6870unrRbCt1xn18IYjPbxRBNti/LC5/wajTv/qSKd/LcL4d1NE9eDSjlZmHP9WYRz//ubIjv5WhBj1N0Y7etORHt4sQoxaiTFGvcmo07cc6fStItjWW4x6eNuRHt4ugm2NYLSttxl1+o4jnb5ThPHv5ojqwaUdnVrF55szq/j0964jO3q3CDHqXUY7+rsjPfy9CDHqFL6PLfp/Z9Tpe450+l4RbOs9Rj2870gP7xfBtk5mtK33GXX6gSOdflCE8e+WiOrBpR2dxDj+zWAc/z50ZEcfFiFGfchoRx850sNHRYhRJzLGqI8YdfqxI51+XATb+phRD5840sMnRbCtExht6xNGnf7DkU7/UYTx79aI6sGlHU1nHP/SjOPfp47s6NMixKhPGe3oM0d6+KwIMep4xhj1GaNO/+lIp/8sgm39k1EPnzvSw+dFsK1pjLb1OaNO/+VIp/8qwvh3W0T14NKOpjCOf1MZx78vHNnRF0WIUV8w2tG/Henh30WIUccxxqh/M+r0P450+p8i2NZ/GPXwpSM9fFkE25rMaFtfMur0v450+t8ijH+3R1QPLu1oEuP4dyzj+PeVIzv6qggx6itGO/qfIz38rwgxaiJjjPofo06/dqTTr4tgW18z6uEbR3r4pgi2NYHRtr5h1Om3jnT6bRHGvzsiqgeXdjSOcfwbzzj+fefIjr4rQoz6jtGOvnekh++LEKPGMsao7xl1+oMjnf5QBNv6gVEPPzrSw49FsK1jGG3rR0ad/uRIpz8VYfy7M6J6cGlHRzGOf0czjn8/O7Kjn4sQo35mtKNfHOnhlyLEqCMZY9QvjDr1BrrRqcYd7ti2IPdC9VDiSA8lA93b1hGMtlXCqNMejnTaY6D78e+uAdHUg0s7Ooxx/DuccfwrdWRHpUWIUaWM/lTmSA9lRYhRhzLGqDJGnZY70ml5EWyrnFEPPR3poWcRbGsMo231ZNRpL0c67VWE8e/uAdHVQ43X/ZuK8FuK8BuK8NuJ8JuJ8FuJ8BuJ8NuI8JuI8FuI8BuI8NuH8JuH8FuH8BuH8NuGl4Dfl4Lfl4Hfl4PfV4DfV4LfV4HfV2d+91Y6r1BSqaSPkr5KqpT0U9JfSZnKU+F1+qIu+67X9Shhtqk7KvjnQdwcbxfA8TYBHG8VwPEWARxvFsDxJgEcbxTA8QYBHK8XwPE6ARyvFcDxGgEcrxbA8SoBHK8UwPEKARwvF8DxMgEcLxXA8RIBHC8WwPEiARwvFMDxAgEczxfA8TwBHBcK4LhAAMdzBXCcL4DjPAEcv6+MPsfvBHD8VgDHbwRw/FoAx/8J4PiVAI7/FcDxSwEc/yOA478FcPxCAMd/CeD4uQCO/xTA8TMBHD8VwPEfAjh+IoDjxwI4fiSA44cCOH4ggOP7Aji+J4Dj3wVwfFcAx3cEcHxbAMe3BHB8UwDHvwnguEnf6HMcJYDjxgI4biSA44YCOG4ggOP6AjiuJ4BjswCOSQEcmwRwbBTAsUEAx4QAjnEBHOsFcPQFcIwJ4LiuAI7rCOC4tgCOawngOFIAxzUFcFxDAMfVBXBcTQDHVQVwXEUAx5UFcFxJAMcRAjjOrIo+x1MFcDxFAMeTBXCcIYDjSQI4niiA4wkCOKYFcJwugOPxAjhOE8BxqgCOUwRwPE4Ax8kCOB4rgOMkARwnCuA4QQDH8QI4jhPAcawAjscI4Hi0AI5HCeB4pACORwjgeLgAjocJ4HioAI5jBHB8pV/0Ob4sgONLAji+KIDjCwI4Pi+A43MCOD4rgOMzAjg+LYDjUwI4PimA4xMCOD4ugONjAjg+KoDjIwI4PiyA40MCOD4ogOMDAjjeL4DjfQI43iuA4z0CON4tgONdAjjeKYDjHQI43i6A420CON7qgKPHyzHpBret2Q1uQ8oNbjLuBjfe6AY3Vu9ID476LeZIvy2O7LfVkX4TLW5wOxzZme8It9V3gxt3pN+WDje4jY7iWasj3BZX8azNDW67IztranWDm3AUfxNNbnBTDW5w/YQjvo7GoUZX8zNH8azJkZ01OdJDMuvH3HP0QdXRv46oE8CxVgDHGgEcBwrgOEAAx2oBHPsL4NhPAMcqARz7CuDYRwDHSgEcKwRw7C2AYy8BHHsK4FgugGOZAI6lAjj2EMCxRABHTwDHX/pHn+PPAjj+JIDjjwI4/iCA4/cCOH4ngOO3Ajh+44AjPHiwUw6xk7EeQLfVmd/VAz1vgJKBSmqU1CqpUzJIyWAlQ5Qso2RZJUOVDFOynJLllawwcBHG8IEZ0FIDrk4MR+cGEOcGEudqiHO1xLk64twg4txg4tzwzDl4lLIqm/FBKT8Wgw+GxWONiUSqqT7lx/2WWH1za7IhlmhobUz6Sb8h2dBen4zHU8lEsqm5tbkp1uwn4im/o6E53pGBW3EgnyNAna5I6LQHp079rtwL1cMIR3oYUQTbYnzAzR/BqNOVHOl0pSLY1kqMeljZkR5WLoJtMT6Y6K/MqNNVHOl0Fde2pW9ARFQPLu3oecbx7wXG8W9VR3a0ahFi1KqMdrSaIz2sVoQYxfhArb8ao05Xd6TT1YtgW6sz6mENR3pYowi2xfggtL8Go07XdKTTNYsw/g2IqB5c2tHTjOPfM4zj30hHdjSyCDFqJKMdreVID2sVIUYxPsDvr8Wo07Ud6XTtItjW2ox6WMeRHtYpgm0xvnjBX4dRp+s60um6RRj/BkZUDy7t6HHG8e8JxvEv5siOYkWIUTFGO/Id6cEvQoxifGGI7zPqtN6RTuuLYFv1jHqIO9JDvAi2xfiiFz/OqNOEI50mijD+1URUDy7t6GHG8e8RxvGvwZEdNRQhRjUw2lGjIz00FiFGMb6gyG9k1GmTI502FcG2mhj1kHSkh2QRbIvxxVJ+klGnzY502lyE8a82onpwaUf3M45/DzCOf+s5sqP1ihCj1mO0o/Ud6WH9IsQoxhei+esz6nQDRzrdoAi2tQGjHjZ0pIcNi2BbjC+y8zdk1OlGjnS6URHGv7qI6sGlHd3NOP7dwzj+bezIjjYuQozamNGORjnSw6gixCjGFzD6oxh1uokjnW5SBNvahFEPmzrSw6ZFsC3GF2f6mzLqdDNHOt2sCOPfoIjqwaUd3c44/t3BOP5t7siONi9CjNqc0Y62cKSHLYoQoxhf+OpvwajTLR3pdMsi2NaWjHrYypEetiqCbTG+qNffilGnWzvS6dZFGP8GR1QPsM0lzG0ewtDmVFO8scVvSrnkuQwDz9bmjvamxg6nPJdl4JloSrS3NsRaXfIcysCzvTmRamtoqHfJcxgDz6Sf8BuaOxpc8lyOgaevTrY2tra45Lk8A89YS6rVb2vxXfJcgSMuNSQbkx1Ja/wsNM5vwxHnk23NDamuL3Tn5rktA894Y6w+2RxzynM7Bp4tydb6REvXF4xz89yegaff2OrHW7q+qJub5w4MPBtTramWxq4vvObmuSMDz3a/qTXR3PXF0dw8d2LgmWrwE6l4o9O4tDNHXGppUthJX3Or8bq/MwO+KwO+IwO+GwO+EwO+CwO+AwO++2Ib8Htb8Hs78Ht78HsH8HtH8Hsn8Htn8Ls3+F0BfleC333A777gdxX43Q/87p/5vYv6f1cluynZXckeSvZUspeSvZWU6Tq9zmtBXfZdr+vBPY7eUcF/HcLN8XYBHG8TwPFWARxvEcDxZgEcbxLA8UYBHG8QwPF6ARyvE8DxWgEcrxHA8WoBHK8SwPFKARyvEMDxcgEcLxPA8VIBHC8RwPFiARwvEsDxQgEcLxDA8XwBHM8TwHGhAI4LBHA8VwDH+QI4zhPA8fvK6HP8TgDHbwVw/EYAx68FcPyfAI5fCeD4XwEcvxTA8T8COP5bAMcvBHD8lwCOnwvg+E8BHD8TwPFTARz/IYDjJwI4fiyA40cCOH4ogOMHAji+L4DjewI4/l0Ax3cFcHxHAMe3BXB8SwDHNwVw/JsAjpv0jT7HUQI4biyA40YCOG4ogOMGAjiuL4DjegI4NgvgmBTAsUkAx0YBHBsEcEwI4BgXwLFeAEdfAMeYAI7rCuC4jgCOawvguJYAjiMFcFxTAMc1BHBcXQDH1QRwXFUAx1UEcFxZAMeVBHAcIYDjzKroczxVAMdTBHA8WQDHGQI4niSA44kCOJ4ggGNaAMfpAjgeL4DjNAEcpwrgOEUAx+MEcJwsgOOxAjhOEsBxogCOEwRwHC+A4zgBHMcK4HiMAI5HC+B4lACORwrgeIQAjocL4HiYAI6HCuA4RgDHV/pFn+PLAji+JIDjiwI4viCA4/MCOD4ngOOzAjg+I4Dj0wI4PiWA45MCOD4hgOPjAjg+JoDjowI4PiKA48MCOD4kgOODAjg+IIDj/QI43ieA470CON4jgOPdAjjeJYDjnQI43iGA4+0CON4mgOOtDjh6vByTbnDbmt3gNqTc4Hb9thsfbrzRUb/VO9KDo36LOdJviyP7bXWk30SLG9wOR3bmO8Jt9d3gxh3pt+s3APlwGx3Fs1ZHuC2u4lmbG9x2R3bW1OoGN+Eo/nb95iIfbqrBDa6fcMTX0TjU6Gp+5iieNTmysyZHekhm/Zh7jj6oOvrXEXUCONYK4FgjgONAARwHCOBYLYBjfwEc+wngWCWAY18BHPsI4FgpgGOFAI69BXDsJYBjTwEcywVwLBPAsVQAxx4COJYI4OgJ4PhL/+hz/FkAx58EcPxRAMcfBHD8XgDH7wRw/FYAx28ccIQHD3bKIXZbrAfQbXXm9z4DPW9fJfsp2V/JAUoOVHKQkoOVtChpVdKmpF1JSkmHktFKDhm4CGPMwAxoaeZ/DTocnduXOLcfcW5/4twBxLkDiXMHEecOJs6NyZyDRymrshkXav1YDC5Mx2ONiUSqqT7lx/2WWH1za7IhlmhobUz6Sb8h2dBen4zHU8lEsqm5tbkp1uwn4im/o6E53pGBO3QgnyNAnR5K6LQHp079rtwL1cNhjvRwWBFsi3GB3T+MUaeHO9Lp4UWwrcMZ9XCEIz0cUQTbYrwx4h/BqNMjHen0SNe2pfSwT0T14NKOBjCOfwMZx7+jHNnRUUWIUUcx2tHRjvRwdBFiFOMNPf9oRp0e40inxxTBto5h1MNYR3oYWwTbYrwR649l1Ok4RzodV4Txb9+I6sGlHVUxjn/9GMe/8Y7saHwRYtR4Rjua4EgPE4oQoxg3EPgTGHU60ZFOJxbBtiYy6mGSIz1MKoJtMW788Ccx6vRYRzo9tgjj334R1YNLO6pgHP8qGce/yY7saHIRYtRkRjs6zpEejitCjGLcsOQfx6jTKY50OqUItjWFUQ9THelhahFsi3GjmT+VUafTHOl0WhHGv/0jqgeXdlTOOP71ZBz/jndkR8cXIUYdz2hH0x3pYXoRYhTjBkl/OqNO0450mi6CbaUZ9XCCIz2cUATbYtzY6p/AqNMTHen0xCKMfwdEVA8u7aiEcfzrwTj+neTIjk4qQow6idGOZjjSw4wixCjGDdn+DEadnuxIpycXwbZOZtTDKY70cEoRbItxI71/CqNOT3Wk01OLMP4dGFE9uLQjtgcJlG/CBycK1d9MR3Y0swgxaiajHZ3mSA+nFSFGMT4A4p/GqNNZjnQ6qwi2NYtRD7Md6WF2EWyL8cEdfzajTk93pNPTizD+HRRRPbi0o+8Yx7/vGce/MxzZ0RlFiFFnMNrRmY70cGYRYhTjA2f+mYw6neNIp3OKYFtzGPVwliM9nFUE22J8UNA/i1GnZzvS6dlFGP8OjqgeYJtLmNvcIoRnqxCebUJ4tgvhmRLCs0MIz9FCeB7CyLPMWzRWlAKu1V7Xg5v/Pg70zM1xXwEc9xPAcX8BHA8QwPFAARwPEsDxYEcxnoNj0hGuK75LcX9buHzY9b477FTMxAQ4VzlH+fVcJfOUzFdyrpIFShYqOU/J+UouUHKhkouUXKzkEiWXKrlsoNf15TLnDOz+wpm5xLl5xLn5xLlziXMLiHMLiXPnEecuJc5dljmnJ3Q1XucCADy4g+n5AyNujP6i/6AuLh+46P8rcKfrhN6IAPfK1PkMqyipRcso/uWMKzJXCLnykcLzAiE8LxTC8yIhPC8WwvMSITw54mVTBgvyxKvjhcZPxhUN/xxHfcPdZsYVEn+ukDYzrrj484S0mXEFx58vpM2MK0L+uULazLjC5C8Q0mbGFSt/oZA2M66A+ecVqc2xxTt88+NSxmulKx3dxYe4zHowh38ZY99fyXItq47mmK/bX+N1f/MwfOMwfNMwfMMwfLMwfKMwfJMwfIPw5b06f19RwG+4CHMZ+L0L+L0r+L0b+L07+L0H+L0n+L0X+L135vfV6v9rlFyr5Dol1yu5QcmNSm4auGjxZ4DXuW4BD+65+dVRX/xZdCScYfuxLiuRZZnfNyu93KLkViW34UWmmzOLTPDcLcS5W4lztw3svkBVzqusLp1aaKC8mStAdMT8W5iwdBtvZVyEu435VnyxnPeapc5LOu/tSi93KLlTyV3YeW8nnPIO4tydxLm7iuC81zA67+2MznsHo/Peyei8dwl13muXOi/pvHcrvdyj5F4l92HnvZtwynuIc/cS5+4rgvNey+i8dzM67z2Mznsvo/PeJ9R5r1vqvKTz3q/08oCSB5U8hJ33fsIpHyDOPUice6gIznsdo/Pez+i8DzA674OMzvuQUOe9fqnzks77sNLLI0oeVfIYdt6HCad8hDj3KHHusSI47/WMzvswo/M+wui8jzI672NCnfeGpc5LOu/jSi9PKHlSyVPYeR8nnPIJ4tyTxLmniuC8NzA67+OMzvsEo/M+yei8Twl13huXOi/pvE8rvTyj5Fklz2HnfZpwymeIc88S554rgvPeyOi8TzM67zOMzvsso/M+J9R5b1rqvKTzPq/08oKSF5W8hJ33ecIpXyDOvUice6kIznsTo/M+z+i8LzA674uMzvsSs/NWesVx3hLPjfOuEMTTjy3WcXN3/S4mUix2C8ZabKRY7NauWAUgxWLW2415It8ejJU3xzuCsBajtXfSWIult1B3eEIi350bKzTHe3Jh5dHae+1Yeektr0X1HMj3h8fKyfGBsFghWvtgOKxQelusdcwA5Ifzxwrk+Ei+WJbWPpofllVvBS0dIeTHFx+rG8cnFheLaO2Ti4dF6o3laj2D/HThWFmOzxSKBVr7bGFYXfTGeIHUZR4ZK+RQDF/kwfq1rZzzSI84CsFuijU1NNY3tjU2N8Z7AMyXBy6al66W+fsV9ff/KXlVyWtK/qDkj0r+pOTPSv6i5HUlbyj5q5K/KXlTyVtK3lbyjpJ3lfxdyXtK3lfygZIPlXyk5GMlnyj5h5JPlXym5J9KPlfyLyVfKPm3kv8o+VLJf5V8peR/+iKsmFfGI73odmbnUd/kDjtWD6+MjYF8rTriGyXfKvlOyfdKflDyo5KflPys5BfdWTWqnJIeSkqVlCkpV9JTSS8lvZVUKKlU0kdJXyVVSvop6a+kWskAJQOV1CipVVKnZJCSwUqGKFlGybJKhioZZnYpmyvtrzOWDc99Q5z7ljj3HXHue+LcD8S5H4lzPxHnfibO/UKc+1WR6FwJca4Hca6UOFdGnCsnzvUkzvUizvUmzlUQ5yqJc32Ic32Jc1XEuX7Euf7EuWri3ADi3EDiXA1xrpY4V0ecG0ScG0ycG0KcW4Y4tyxxbihxblhNZzA0x+qZ/0dl/o8VdnQJjoWuMH3NtsLU0fENH1b7t3xYzd/xYfnfs2Gl/B/YsNr8H9mwkv5PjKuOP3NhpWL+L1xYbTFfx3UWrKRaCeTCUr7dgwkrpbBKmbDaFFYZE1ZSYZUzYelY2JMHK6WxevFgtWms3jxY+tVXfgUP1q9jRyULVupXrD4sWG2/YvVlwfr1TWF+FQvWorG2HwdWahFWfw6stkVY1RxYi16s5g/gwMrMTQYyYLVnsGoYsFozWLUMWOaNGXWFY9Vn5l/+oMKxfIM1uGCsZIfBGlI4VqvBWqZwLDNf9ZctGKspizW0YKyGLNawGt4FC7ygkuUXW6x5vq/vApprchJ3Ma8f/MFFabe/mPx+fUDSRbvrmdttjjLEM5vpN3z3t9C+2KV4ffGbv0tdaF/sWmy/WKwWy7ibXmhf7LYk+iLvFsu4619oX+y+ZPui8/gN7E4otC/2WPJ98ZvZRVFoX+wZFb+wtljGbo9C+2KvKPVFYItl7EoptC/2jmZfdB6Cds8U/BbT6PaFuF0+Bb9dlbkv8JvMf+XXvtj8fn2JErqnGi+gvb++SMl6j7YpP7zbHa2H7F+Mfunkl8xXj3dY9NjckX+/3BmMF1ucfr7LUb8cUNx+6eQXC9fuu3PZ9yK8hrB6vCcMXiJ8v9zrqF8OLHq/JDryscf7wvVLJ16THe/+/PDacvF7wFG/HLSk/EXza8rdLw+G12MsTD8/lG8/G7wkjfewo345eEn2Sye/piA9PrI4emwK7pdH88ert/XzY476pSUa/dLJr75rux9fXPtehBfDenyiALzGju798qSjfmmNTr8kKXt8qrB+6bZP42kevOx9+Wcc9Utb1PxF80t09suzhesxBvv5OaZ+Nvp7wVG/tEexX8A+yhfZ/GXRvrmXEF6ssMN/xVG/pBytvQxBPGOLf3R7+qjQNi/Ht5fEZ9yf4TPuefAZ79n7jPecfcZ7pj7jPT+f8Z6Vz3jPxWe8Z+Azrnn7jGu2PuOao8+4TuYzru34jOsRPuM1tM943eczXqv4jPNrn3FO6DPOY3xXY2+/zP9cPF9hHHuXr+HDgmMv535DzrV6zvVlzjVRznU8zrUnzvUSzmt8zutSzmupKM3/f33O1Ou876r/1nPtnzO/lwe/9ReNzO8dei/6bcqtoPINV7KikhE1XfE449r/Dex8ZhriFqrT8cXZs73Y/HSbV6jhx50Q9T0Viw5/BcYxaCXGa0lGu/Gl9MX/Mc4tVq5x48NR8gsqxq4E4urKIWPsKirfqkpWU7K6wxir37TyrYMYOzHiMVa3eRUHMXaSEL9ehdEX12CMsYx240vpi1cZY+yaNW58OEp+QcXYNUBcXTNkjB2p8q2lZG0l6ziMsfpNVt85iLHHRjzG6jaPdBBjJwvx65GMvrguY4xltBtfSl+8xhhjYzVufDhKfkHF2HVBXI2FjLG+ylevJK4k4TDG6jcFfu8gxh4X8Rir2+w7iLFThPi1z+iLDYwxltFufCl98QfGGNtY48aHo+QXVIxtAHG1MWSMbVL5kkqalaznMMbqN7H+4CDGTo14jNVtbnIQY6cJ8esmRl9cnzHGMtqNL6Uv/sgYYzeocePDUfILKsauD+LqBiFj7IYq30ZKNtY6cxhj9Zuuf3QQY4+PeIzVbd7QQYydLsSvN2T0xU0YYyyj3fhS+uJPjDF20xo3Phwlv6Bi7CYgrm4aMsZupvJtrmQLJVs6jLH6SwI/OYix6YjHWN3mzRzE2BOE+PVmjL64FWOMZbQbX0pf/Jkxxm5d48aHo+QXVIzdCsTVrUPG2G1Uvm2VbKdke4cxVn+p5WcHMfbEiMdY3eZtHMTYk4T49TaMvrgDY4xltBtfSl/8hTHG7ljjxoej5BdUjN0BxNUdQ8bYnVS+nZXsomRXhzFWfwnrFwcxdkbEY6xu804OYuzJQvx6J0Zf3I0xxjLajS+lL17nfEdqjRsfjpJfUDF2NxBXdw8ZY/dQ+fZUspeSvR3GWP2lQc9BrDkl4jFWt3kPB+0+VYhf78Hoi/swxlhGu/Gl9MUbnO9PrHHjw1HyCyrG7gPi6r4hY+x+Kt/+Sg5QcqDDGKu/5FriINbMjHiM1W3ez0G7TxPi1/sx+uJBjDGW0W58KX3xV8YYe3CNGx+Okl9QMfYgEFcPDhljW1S+ViVtStodxlj9peweDmLNrIjHWN3mFgftni3Er1sYfTHFGGMZ7caX0hd/Y4yxHTVufDhKfkHF2BSIqx0hY+xole8QJWOUHOowxr45sPOb5xC3UJ2eHvEYq9s82kG7zxDi16MZffEwxhjLaDe+lL54kzHGHl7jxoej5BdUjD0MxNXDQ8bYI1S+I5UcpeRohzH2LUW2zEGsOTPiMVa3+QgH7Z4jxK+PYPTFYxhjLKPd+FL64i3GGDu2xo0PR8kvqBh7DIirY0PG2HEq33glE5RMdBhj31Zkyx3EmrMiHmN1m8c5aPfZQvx6HKMvTmKMsYx240vpi7cZY+yxNW58OEp+QcXYSSCuHhsyxk5W+Y5TMkXJVIcx9h1FtqeDWHNOxGOsbvNkB+2eK8SvJzP64jTGGMtoN76UvniHMcYeX+PGh6PkF1SMnQbi6vEhY+x0lS+t5AQlJzqMse8qsr0cxJp5EY+xus3THbR7vhC/ns7oiycxxlhGu/Gl9MW7jDF2Ro0bH46SX1Ax9iQQV2eEjLEnq3ynKDlVyUyHMfbvimxvB7Hm3IjHWN3mkx20e4EQvz6Z0RdPY4yxjHbjS+mLvzPG2Fk1bnw4Sn5BxdjTQFydFTLGzlb5TldyhpIzHcbY9xTZCgexZmHEY6xu82wH7T5PiF/PZvTFOYwxltFufCl98R5jjD2rxo0PR8kvqBg7B8TVs0LG2LNVvnOUzFUyz2GMfV+RrXQQa86PeIzVbT7bQbsvEOLXZzP64nzGGMtoN76UvnifMcaeW+PGh6PkF1SMnQ/i6rkhY+wClW+hkvOUnO8wxn6gyPZxEGsujHiM1W1e4KDdFwnx6wWMvngBY4xltBtfSl98wBhjL6xx48NR8gsqxl4A4uqFIWPsRSrfxUouUXKpwxj7oSLb10GsuTjiMVa3+SIH7b5EiF9fxOiLlzHGWEa78aX0xYeMMfbyGjc+HCW/oGLsZSCuXh4yxl6h8l2p5ColVzuMsR8pslUOYs2lEY+xus1XOGj3ZUL8+gpGX7yGMcYy2o0vpS8+Yoyx19a48eEo+QUVY68BcfXakDH2OpXveiU3KLnRYYz9WJHt5yDWXB7xGKvbfJ2Ddl8hxK+vY/TFmxhjLKPd+FL64mPGGHtzjRsfjpJfUDH2JhBXbw4ZY29R+W5VcpuS2x3G2E8U2f4OYs2VEY+xus23OGj3VUL8+hZGX7yDMcYy2o0vpS8+YYyxd9a48eEo+QUVY+8AcfXOkDH2LpXvbiX3KLnXYYz9hyJb7SDWXB3xGKvbfJeDdl8jxK/vYvTF+xhjLKPd+FL64h+MMfb+Gjc+HCW/oGLsfSCu3h8yxj6g8j2o5CElDzuMsZ8qsgMcxJprIx5jdZsfcNDu64T49QOMvvgIY4xltBtfSl98yhhjH61x48NR8gsqxj4C4uqjIWPsYyrf40qeUPKkwxj7mSI70EGsuT7iMVa3+TEH7b5BiF8/xuiLTzHGWEa78aX0xWeMMfbpGjc+HCW/oGLsUyCuPh0yxj6j8j2r5DklzzuMsf9UZGscxJobIx5jdZufcdDum4T49TOMvvgCY4xltBtfSl/8kzHGvljjxoej5BdUjH0BxNUXQ8bYl1S+l5W8ouT/HMbYzxXZWgex5uaIx1jd5pcctPsWIX79EqMvvsoYYxntxpfSF58zxtjXatz4cJT8goqxr4K4+lrIGPsHle+PSv6k5M8OY+y/FNk6B7Hm1ojHWN3mPzho921C/PoPjL74F8YYy2g3vpS++BdjjH29xo0PR8kvqBj7FxBXXw8ZY99Q+f6q5G9K3nQYY79QZAc5iDW3RzzG6ja/4aDddwjx6zcYffEtxhjLaDe+lL74gjHGvl3jxoej5BdUjH0LxNW3Q8bYd1S+d5X8Xcl7DmPsvxXZwQ5izZ0Rj7G6ze84aPddUt4LzeiL7zPGWEa78aX0xb8ZY+wHNW58OEp+QcXY90Fc/SBkjP1Q5ftIycdKPnEYY/+jyA5xEGvujniM1W3+0EG775HyjDyjL/6DMcYy2o0vpS/+wxhjP61x48NR8gsqxv4DxNVPQ8bYz1S+fyr5XMm/HMbYLxXZZRzEmnsjHmN1mz9z0O77pOwXYvTFLxhjLKPd+FL64kvGGPvvGjc+HCW/oGLsFyCu/jtkjP2Pyvelkv8q+cphjP2vIrusg1hzf8RjrG7zfxy0+wEpcydGX/wfY4xltBtfSl/8lzHGfl3jxoej5BdUjP0fiKtfh4yx36h83yr5Tsn3DmPsV4rsUAex5sGIx1jd5m8ctPshIX79DaMv/sAYYxntxpfSF18xxtgfa9z4cJT8goqxP4C4+mPIGPuTzqfkFyVerbsY+z9FdpiDWPNwxGOsbvNPDtr9iBC//onRF0tq+Xgx2o0vpS/+xxhje9S68eEo+QUVY7UNmljaozZcjC3VcVVJuZKeIMaaowfq50J1UMloM6W1bmybOx724uPZAHn2RTxji3/4+p+XGH2wN2M83IUxHu7KiLUbI9bujFh7MGLtyYi1FyPW3oxY+zBi7TtYRkyqKNA/m2JNDY31jW2NzY1xaizqBcaf3uB3Bfj9115dx6JKldZHSV8lVZmxSEsf0H6bTmKFHX6lo/Eke/RgJlxVymcQ/RgDtu6Y0kwHadzhOTqu4Jdb8nEnjbk/MNrVvXATq2pVZoCSgUpqgDEP9IpjzNW1vJNNc9TWOiScBWc0Dq10PVMq9dwrvcQrTvSPFXawGodLni/1cmPEdbUZstjT6wIum+DvP6Bha5AqM1jJECXLhLiEihV2dOm8gm9lMkd9rM/Xgd60mN/LWqYBQ1XaMCXLKVkeRM5yoEspRueS51BGJ+4JeK6QCcLDM/+vmPl/ROb/lWo7R0J9rKz+XkXJqkpWU7K6kjWUrKlkpJK1lKytZB0l6yqJKfGV1CuJK0koaVDSqKRJSVJJs5L1lKyvZAMlGyrZSMnGus1KNlGyqZLNlGyuZAslWyrZSsnWSrZRsq2S7Yyjm+nISpnpSDGH4uGOhuLtax0S3r6WH3cHxsjlqt07EFOQWIFHMY1tRUfGtmOtQ8I7OjC2nSJubLrdOwk3thGOjG3nWoeEd3ZgbLtE3Nh0u3dxYGwuuO6QcQzuVYJda2U62UqOnGy3WoeEd3PgZLtH3Ml0u3cX4mQ6GOzqwMn2YDZWfEE5HFw4rgh+rwR+D0JLcXuqtL2U7K1kH+ICvZRZt4yjor8no83v67hv9gV9sBf4vTf4vU9t177ZT/29v5IDlBxYG7zHp9C2a7/cw4G9H8TY17rtA7zirFSu4GgF0GPlWZ90hx2rLwG6NYsZByu9tChpVdKmpF1JSkmHktFKDlEyRsmhSg5TcriSI5QcqeQoJUcrOUbJWCXjlIxXMkHJRCWTlByrZLKS45RMUTJVyTQlxyuZriSt5AQlJyo5SckMJScrOUXJqXgx4+DazpU1c66FONdKnGsjzrUT51LEuQ7i3Gji3CHEuTHEuUOJc4cR5w4nzh1BnDuSOHcUce5o4twxxLmxxLlxxLnxxLkJxLmJxLlJxLljiXOTiXPHEeemEOemEuemEeeOJ85NJ86liXMnEOdOJM6dRJybQZw7mTh3CnHuVBDczbFG5v9Rmf9jhR1dgmahA8fBDFipjkVHCx9WeysfVnMbH5bfzoaV8lNsWG1+BxtW0h/NhhXzD+HCSsX8MVxYbTH/UC6sZMw/jAtL+fbhTFgphXUEE1abwjqSCSupsI5iwtKx8GgerJTGOoYHq01jjeXBSmqscTxYv44d41mwUr9iTWDBavsVayILVvJXrEksWIvG2mM5sFKLsCZzYLUtwjqOAyu5CGsKB1ZmbjKVAas9gzWNAas1g3U8A1ZTBmt64Vj1mfmXny4cyzdYJxSMlewwWCcWjtVqsE4qHMvMV/0ZBWM1ZbFOLhirIYt1SsFYfhbrVEeLIngHUBSuHQzWTL42+xqDe6FKLxAe5GDh7jTmvube5aV31RzM2De6n09zoMdZAvTIaeMHO9LjbEY9am54cV73k1mEn10bbg/z6SrfGUrOVDKn1t0DuHr3WIsDnf4t4g/g6jaf7qDdbwp56PN0xnHsLEYfZ7QbX0pfrMLYF2fXuvHhKPkFFWPPAnH17JAx9hyVb66SeUrmO4yxenduq4NY81bEY6xu8zkO2v22EL8+h9EXz2WMsYx240vpi1UZ+2JBrRsfjpJfUDH2XBBXF4SMsQtVvvOUnK/kAocxVj/90OYg1rwT8Rir27zQQbvfFeLXCxl98ULGGMtoN76UvliNsS8uqnXjw1HyCyrGXgji6kUhY+zFKt8lSi5VcpnDGKufLmt3EGv+HvEYq9t8sYN2vyfEry9m9MXLGWMso934Uvpidca+uKLWjQ9HyS+oGHs5jKshY+yVKt9VSq5Wco3DGKuf3k05iDXvRzzG6jZf6aDdHwjx6ysZffFaxhjLaDe+lL5Yg7Evrqt148NR8gsqxl4L4up1IWPs9SrfDUpuVHKTwxir347Q4SDWfBjxGKvbfL2Ddn8kxK+vZ/TFmxljLKPd+FL6Yk3Gvril1o0PR8kvqBh7M4irt4SMsbeqfLcpuV3JHQ5jrH77zGgHsebjiMdY3eZbHbT7EyF+fSujL97JGGMZ7caX0hcjGfvirlo3Phwlv6Bi7J0grt4VMsberfLdo+ReJfc5jLH67V6HOIg1/4h4jNVtvttBuz8V4td3M/ri/YwxltFufCl9sRZjXzxQ68aHo+QXVIy9H8TVB0LG2AdVvoeUPKzkEYcxVr89cYyDWPNZxGOsbvODDtr9TyF+/SCjLz7KGGMZ7caX0hdrM/bFY7VufDhKfkHF2EdBXH0sZIx9XOV7QsmTSp5yGGP122kPdRBrPo94jNVtftxBu/8lxK8fZ/TFpxljLKPd+FL6Yh3Gvnim1o0PR8kvqBj7NIirz4SMsc+qfM8peV7JCw5jrH7792EOYs0XEY+xus3POmj3v4X49bOMvvgiY4xltBtfSl+sy9gXL9W68eEo+QUVY18EcfWlkDH2ZZXvFSX/p+RVhzFWf13hcAex5j8Rj7G6zS87aPeXQvz6ZUZffI0xxjLajS+lL2KMffGHWjc+HCW/oGLsayCu/iFkjP2jyvcnJX9W8heHMVZ/veYIB7HmvxGPsbrNf3TQ7q+E+PUfGX3xdcYYy2g3vpS+8Bn74o1aNz4cJb+gYuzrIK6+ETLG/lXl+5uSN5W85TDG6q+DHekg1vwv4jFWt/mvDtr9tRC//iujL77NGGMZ7caX0hf1jH3xTq0bH46SX1Ax9m0QV98JGWPfVfn+ruQ9Je87jLH664tHOYg130Q8xuo2v+ug3d8K8et3GX3xA8YYy2g3vpS+iHM+N1Drxoej5BdUjP0AxNUPQ8bYj1S+j5V8ouQfDmOs/rrt0Q5izXcRj7G6zR85aPf3Qvz6I0Zf/JQxxjLajS+lLxKc+61q3fhwlPyCirGfgrj6WcgY+0+V73Ml/1LyhcMYq78efoyDWPNDxGOsbvM/HbT7RyF+/U9GX/w3Y4xltBtfSl80cN6nqnXjw1HyCyrG/hvE1f+EjLFfqnz/VfKVkv85jLGNtZ3fwYO4her0p4jHWN3mLx20+2chfv0loy9+zRhjGe3Gl9IXjZzX97VufDhKfkHF2K9BXP0mZIz9VuX7Tsn3Sn5wGGObaju/KwpxC9XpLxGPsbrN3zpotzdEhl9/y+iLPzLGWEa78aX0RRNnXKx148NR8gsqxv4I4upPIWPszyrfL0q8OpVe5y7GJms7v9MMcQvVacmQaMdY3eafHbS7hxC//pnRF3vU8fFitBtfSl8kGfuitM6ND0fJL6gYq23QxNLSunAxtkzlK1fSU0kvhzG2ubbzu/cQt+C+jniM1W3WOubGLRPi12WMvtibMcYy2o0vpS+aGWNsRZ0bH46SX1AxtjeIqxUhY2ylytdHSV8lVQ5j7Hqqfyc6iLHlEY+xus2VDmJsTyF+Xcnoi/0YYyyj3fhS+mI9xhjbv86ND0fJL6gY2w/E1f4hY2y1yjdAyUAlNQ5j7Pqqfyc5iLG9Ih5jdZurHcTY3kL8uprRF2sZYyyj3fhS+mJ9xhhbV+fGh6PkF1SMrQVxtS5kjB2k8g1WMkTJMg5j7Aaqf491EGMrIh5jdZsHOYixlUL8ehCjLy7LGGMZ7caX0hcbMMbYoXVufDhKfkHF2GVBXB0aMsYOU/mWU7K8khUcxtgNVf9OdhBj+0Q8xuo2D3MQY/sK8ethjL44nDHGMtqNL6UvNmSMsSvWufHhKPkFFWOHg7i6YsgYO0LlW0nJykpWcRhjN1L9e5yDGFsV8Rir2zzCQYztJ8SvRzD64qqMMZbRbnwpfbERY4xdrc6ND0fJL6gYuyqIq6uFjLGrq3xrKFlTyUiHMXZj1b9THMTY/hGPsbrNqzuIsdVC/Hp1Rl9cizHGMtqNL6UvNmaMsWvXufHhKPkFFWPXAnF17ZAxdh2Vb10lMSW+wxg7SvXvVAcxdkDEY6xu8zoOYuxAIX69DqMv1jPGWEa78aX0xSjGGBuvc+PDUfILKsbWg7gaDxljEypfg5JGJU0OY+wmqn+nOYixNRGPsbrNCQcxtlaIXycYfTHJGGMZ7caX0hebMMbY5jo3Phwlv6BibBLE1eaQMXY9lW99JRso2dBhjN1U9e/xDmJsXcRjrG7zeg5i7CApezIZfXEjxhjLaDe+lL7YlDHGblznxoej5BdUjN0IxNWNQ8bYUSrfJko2VbKZwxi7merf6Q5i7OCIx1jd5lEOYuwQKdenjL64OWOMZbQbX0pfbMYYY7eoc+PDUfILKsZuDuLqFiFj7JYq31ZKtlayjcMYu7nq37SDGLtMxGOsbvOWDmLsskL8ektGX9yWMcYy2o0vpS82Z4yx29W58eEo+QUVY7cFcXW7kDF2e5VvByU7KtnJYYzdQvXvCQ5i7NCIx1jd5u0dxNhhQvx6e0Zf3JkxxjLajS+lL7ZgjLG71Lnx4Sj5BRVjdwZxdZeQMXZXlW83Jbsr2cNhjN1S9e+JDmLschGPsbrNuzqIscsL8etdGX1xT8YYy2g3vpS+2JIxxu5V58aHo+QXVIzdE8TVvULG2L1Vvn2U7KtkP4cxdivVvyc5iLErRDzG6jbv7SDGDhfi13sz+uL+jDGW0W58KX2xFWOMPaDOjQ9HyS+oGLs/iKsHhIyxB6p8Byk5WEmLwxi7terfGQ5i7IoRj7G6zQc6iLEjhPj1gYy+2MoYYxntxpfSF1szxti2Ojc+HCW/oGJsK4irbSFjbLvKl1LSoWS0wxi7jerfkx3E2JUiHmN1m9sdxNiVhfh1O6MvHsIYYxntxpfSF9swxtgxdW58OEp+QcXYQ0BcHRMyxh6q8h2m5HAlRziMsduq/j3FQYxdJeIxVrf5UAcxdlUhfn0ooy8eyRhjGe3Gl9IX2zLG2KPq3PhwlPyCirFHgrh6VMgYe7TKd4ySsUrGOYyx26n+PdVBjF0t4jFWt/loBzF2dSF+fTSjL45njLGMduNL6YvtGGPshDo3Phwlv6Bi7HgQVyeEjLETVb5JSo5VMhnEWHP0YO7nao9PnxPr3Nh2KXObhzLa9nBGrOMY9VeWsccSr/vBPV5z8oZ8p9Q5JDyljh93KmOgc9XuqXWdCmbC/dXYenqdwcmlsQ2tdRNkuHkOr3XjFNOA3fK/zYVx1qS5lWY4GtLaUHp5xYlKnB0ADfv4jANN121y0QHTHESmacxDs6t293DY7oIfrXGsw1hhh68NM+3g8vEE5uHdBAWNm87gcutiuiNdnOhIFydadFHwqw0c6WLNJbuc0paDnzMbGDkk2nFAD3xpB7GUsb99Th3qSYW6iiZnn16eOshlUxDTRfzm0gmcYJ1kmzHGCjv8tKOACEnnydnPVY/mfJKDwLBWRNb28pnIFLy/rS6aAWatIW7scgYYqBe3f3LpnLN/TgZYfjyufKO9ye9o74g3NDXXt/qN8cbGjkRHU2My0d7RkGhpb0r5iZZ4fXOqKdbhJ1OppoZ4W1NjR3N7W2MHDNp+ezyeaG9ubfMb6htbWmPJ9nhLrCPRFK+PtbTHm9rb48nGxpZ4vL0x2ZFsTtbXt3TEk7GGpqbmWGN9vLneVf+cnOmfYl5pDnV0pXlK5krzVCkB3BW/UxwE65mOBq6ZDq9qtC5OdaCL0xzp4jSHVzWu7GKdiF/VuLKBdSN+VTPU0VUNY3/76y69qsGHf4qjq5pZEq9qZjm+qpnlIDDEfodXNbProhlgYo5mzbOFXdWcznhVsy7jVY2r/jkdXNUEDQpRXo5yydPVAHOGxAHmDMcDzBkOBhjf0QBTzsyTM4CdyYjFuWzGOVj5joLhmSEGq0J1OqeOb1DosmwWocHKVf/M+Q0twZ2VWYI7m9rsESvs8IM2PXDu4in42yOMM2EXHW90WCpEh4VinRPx/tAOc46DScJcRxOmuQ6Xa892pIt5jnQxz+FyrSu7SER8udaVDTQIWK49x8FyLWN/+w1Ll2vx8Wv85tIJnPjNd3k1fY6jgDjf4dW05jzfQWBoFLJcew7jpOjcumgGmEZHV1jnFmG5lrN/FjAu1zYwXgG76p8FS+AK2NXjDgszV8DnSQngrvgtdBCsz3c0cJ3v8KpG6+I8B7q4wJEuLnB4VePKLpIRv6pxZQPNArbWu7iqYexvv3npVQ0+/IWOrmoulHhVc6Hjq5oLHQSG9X6HVzUX1UUzwKznaNZ8kbCrmosZr2qaGa9qXPXPxUtgE8pZdW78XsoAc4nEAeYSxwPMJQ4GmPWFbELhDGCXMmJxLptxDlbrOwqGlxZhE8pljJtQGoZEc7By1T+XEf3DvUeAcdOJP4LxPVKXM8b1Yr5H6nJHg+gVdQ4JX1HHj3slY2B21e4r6zoVzIRb1PdIjRDyHqmhjt4jdVWdw/dIXcl46QqjuiH9W9haeHXGga6pc/AeKd0BVzmITFc5vlHD1e4eDttdKMdrI36zSxvmtQ4usa5zdLl5ncObXdc40sX1jnRxvcObXa7sYqOI3+xyZQMbC9jCd62DWMrY3/7GS2924ePX+M2lEzjBusHlWuS1jgLiDQ7XIjXnGxwEhlFCbnZdyzgpurEumgFmlKP1qRuLcLOLs39uYrzZtTHj+qGr/rlpCWzhG+HoSvPmzJXmLVICuCt+NzsI1rc6GrhudXhVo3VxiwNd3OZIF7c5vKpxZRebRvyqxpUNbBbxq5oRjq5qGPvb32zpVQ0+/JsdXdXcLvGq5nbHVzW3OwgMm/8Or2ruqItmgNnc0az5DmFXNXcyXtVsxnhV46p/7lwCW/iurnPj91IGmLskDjB3OR5g7nIwwGwhZAsfZwC7mxGLc9mMc7DawlEwvLsIW/juYdzCt/GQaA5Wrvrnnt/QEty9mSW4+6jNHrHCDj9o0wPnLp5CsRg3jjh5b5HRIfceUVc6LBTr/oj3h3aY+x1MEh5wNGF6wOFy7X2OdPGgI1086HC51pVdbB3x5VpXNrCNgOXa+x0s1zL2t7/N0uVafPwav7l0Aid+D7m8mr7fUUB8yOHVtOb8kIPAsK2Q5dr7GSdFD9dFM8Bs6+gK6+EiLNdy9s8jjMu12zBeAbvqn0eWwBWwq8cdHs1cAT8mJYC74veog2D9uKOB63GHVzVaF4850MUTjnTxhMOrGld2sX3Er2pc2cAOArbWu7iqYexvf4elVzX48B91dFXzpMSrmicdX9U86SAw7Pg7vKp5qi6aAWZHR7Pmp4Rd1TzNeFWzA+NVjav+eXoJbEK5t86N30sZYJ6ROMA843iAecbBALOTkE0onAHsWUYszmUzzsFqJ0fB8NkibEJ5jnETyjZDojlYueqf5xyugOyirgJ3r+WPQc87XgXjiD3PE3stYoUdnOOQ/zxjTHsh4v2h3yn4goOx8EXmPSbc+5v0Kgwnx+EZPI/Xrp2sQK2Y4crd5y8x2nox3z33kqOJ98t1Dgm/XMeP+wpj4HPV7ld+5072f46uZrkDLKctvRrxwWSQ6mtOjrqPXxVi53W1bnxS89QDgLkg+pW3mjX+nPm9htf5e03w+6+9Fv025V5T3P6g5I9K/lS36LyWKq9zEkodo3jaUV/idV/l4u6DNTz+mMDNcU3PTdzi5vmai/iqDa6f17mS47IBdY5ebuox8Uz6zbFkvd8orhMd8Own5EW0pXxYXTYG/TkzcPylLkPaLL3ohOFe14P7hvmfGWcorzOO/lAPrxN64O7cvxTJWQrV8RtsPOtbXfL8KwNPv60pnmpra3bJ82+Lz7MRn6Bma7q/srMy8Ht1r/P33+q6ztbeVH+/peRtJe/UdZ43B/eyIePMyX+TMZ6868gnufXHOKvz32LU39+F6G8kI9bbjPp7j3lJDMeGd0E8+Dv4/R74/Q6KDe+rvz9Q8qGSj8CVXH+vKFdyDZpTuaM6cLznHuNX9/j9YelVbDQ5jvS8osznYoUd/vuOYnT24L5geJ0xwH7s6ILh48wFgw6M1V73CZSLjizxft8Gx83zdSE8OVcFPOrgXqfnbPxajhrP3WZG5/TXFtLmHoxtXkdImxmd0V+3SG2OFXb4MUb99S6VEXR9TwbPeiE840J4JoTwbBDCs1EIzyYhPJNCeDYL4bmeEJ7rC+G5gRCeGwrhuZEQnhsL4TlKCM9NhPDcVAjPzYTw3FwIzy2E8NxSCM+thPDcWgjPbYTw3FYIz+2E8NxeCM8dhPDcUQjPnYTw3FkIz12E8NxVCM/dhPDcXQjPPRzxjPJ9wT2L1OZYYYe/F6P++gq5X7S3J4PnPkJ47iuE535CeO4vhOcBQngeKITnQUJ4HiyEZ4sQnq1CeLYJ4dkuhGdKCM8OITxHC+F5iBCeY4TwPFQIz8OE8DxcCM8jhPA8UgjPo4TwPFoIz2OE8BwrhOc4ITzHC+E5QQjPiUJ4ThLC81ghPCcL4XmcEJ5ThPCcKoTnNCE8jxfCc7oQnmkhPE8QwvNEITxPEsJzhhCeJwvheYoQnqcK4TlTCM/ThPCcJYTnbCE8TxfC8wwhPM8UwnOOEJ5nCeF5thCe5wjhOVcIz3lCeM4XwvNcITwXCOG5UAjP84TwPF8IzwuE8LxQCM+LhPC8WAjPS4TwvFQIz8uE8LxcCM8rhPC8UgjPq4TwvFoIz2uE8LxWCM/rhPC8XgjPG4TwvFEIz5uE8LxZCM9bhPC8VQjP24TwvF0IzzuE8LxTCM+7hPC8WwjPe4TwvFcIz/uE8LxfCM8HhPB8UAjPh4TwfFgIz0eE8HxUCM/HhPB8XAjPJ4TwfFIIz6eE8HxaCM9nhPB8VgjP54TwfF4IzxeE8HxRCM+XhPB8WQjPV4Tw/D8hPF8VwvM1ITz/IITnH4Xw/JMQnn8WwvMvQni+LoTnG0J4/lUIz78J4fmmEJ5vCeH5thCe7wjh+a4Qnn8XwvM9ITzfF8LzAyE8P3TEswczz48AVqHviK+sldHmjxnbXCXkvfifeDJ4/kMIz0+F8PxMCM9/CuH5uRCe/xLC8wshPP8thOd/hPD8UgjP/wrh+ZUQnv8TwvNrITy/EcLzWyE8vxPC83shPH8QwvNHITx/EsLzZyE8fxHCUwNK4FkihGcPITxLhfAsE8KzXAjPnkJ49hLCs7cQnhVCeFYK4dlHCM++QnhWCeHZTwjP/kJ4VgvhOUAIz4FCeNYI4VkrhGedI574Hnmh97VLGNs8qEhtjhV2+INL+PRXVyvDHocwtLkx1djR1J5qdWmPpYxtXkaIPS7LaI+v1cmwx6FC+mYYY9/0E7JvajnGNv9ZiD0uL2ResYIQnsOF8FxRCM8RQniuJITnykJ4riKE56pCeK4mhOfqQniuIYTnmkJ4jhTCcy0hPNcWwnMdITzXFcIzJoSnL4RnvRCecSE8E0J4Ngjh2SiEZ5MQnkkhPJuF8FxPCM/1hfDcQAjPDX+H9wE3+h22eWMhbea8vzZKyD2cTRjvZ7xfJ6PNmzK2+XUh93A2EzImbC6E5xZCeG4phOdWQnhuLYTnNkJ4biuE53ZCeG4vhOcOQnjuKITnTkJ47iyE5y5CeO4qhOduQnjuLoTnHkJ47imE515CeO4thOc+QnjuK4TnfkJ47i+E5wFCeB4ohOdBQngeLIRnixCerUJ4tgnh2S6EZ0oIzw4hPEcL4XmIEJ5jhPA8VAjPw4TwPFwIzyOE8DxSCM+jhPA8WgjPY4TwHCuE5zghPMcL4TlBCM+JQnhOEsLzWCE8JwvheZwQnlOE8JwqhOc0ITyPF8JzuhCeaSE8TxDC80QhPE8SwnOGEJ4nC+F5ihCepwrhOVMIz9OE8JwlhOdsITxPF8LzDCE8zxTCc44QnmcJ4Xm2EJ7nCOE5VwjPeUJ4zhfC81whPBcI4blQCM/zhPA8XwjPC4TwvFAIz4uE8LxYCM9LhPC8VAjPy4TwvFwIzyuE8LxSCM+rhPC8WgjPa4TwvFYIz+uE8LxeCM8bhPC8UQjPm4TwvFkIz1uE8LxVCM/bhPC8XQjPO4TwvFMIz7uE8LxbCM97hPC8VwjP+4TwvF8IzweE8HxQCM+HhPB8WAjPR4TwfFQIz8eE8HxcCM8nhPB8UgjPp4TwfFoIz2eE8HxWCM/nhPB8XgjPF4TwfFEIz5eE8HxZCM9XhPD8PyE8XxXC8zUhPP8ghOcfhfD8kxCefxbC8y9CeL4uhOcbQnj+VQjPvwnh+aYQnm8J4fm2EJ7vCOH5rhCefxfC8z0hPN8XwvMDITw/FMLzIyE8PxbC8xMhPP8hhOenQnh+JoTnP4Xw/FwIz38J4fmFEJ7/FsLzP0J4fimE53+F8PxKCM//CeH5tRCe3wjh+a0Qnt8J4fm9EJ4/COH5oxCePwnh+bMQnr8I4en1kMGzRAjPHkJ4lgrhWSaEZ7kQnj2F8OwlhGdvITwrhPCsFMKzjxCefYXwrBLCs58Qnv2F8KwWwnOAEJ4DhfCsEcKzVgjPOiE8BwnhOVgIzyFCeC4jhOeyQngOFcJzmBCeywnhubwQnisI4TlcCM8VhfAcIYTnSkJ4riyE5ypCeK4qhOdqQniuLoTnGkJ4rimE50ghPNcSwnNtITzXEcJzXSE8Y0J4+kJ41gvhGRfCMyGEZ4MQno1CeDYJ4ZkUwrNZCM/1hPBcXwjPDYTw3FAIz42E8NxYCM9RQnhuIoTnpkJ4biaE5+ZCeG4hhOeWQnhuJYTn1kJ4biOE57ZCeG4nhOf2QnjuIITnjkJ47iSE585CeO4ihOeuQnjuJoTn7kJ47iGE555CeO4lhOfeQnjuI4TnvkJ47ieE5/5CeB4ghOeBQngeJITnwUJ4tgjh2SqEZ5sQnu1CeKaE8OwQwnO0EJ6HCOE5RgjPQ4XwPEwIz8OF8DxCCM8jhfA8SgjPo4XwPEYIz7FCeI4TwnO8EJ4ThPCcKITnJCE8jxXCc7IQnscJ4TlFCM+pQnhOE8LzeCE8pwvhmRbC8wQhPE8UwvMkITxnCOF5shCepwjheaoQnjOF8DxNCM9ZQnjOFsLzdCE8zxDC80whPOcI4XmWEJ5nC+F5jhCec4XwnCeE53whPM8VwnOBEJ4LhfA8TwjP84XwvEAIzwuF8LxICM+LhfC8RAjPS4XwvEwIz8uF8LxCCM8rhfC8SgjPq4XwvEYIz2uF8LxOCM/rhfC8QQjPG4XwvEkIz5uF8LxFCM9bhfC8TQjP24XwvEMIzzuF8LxLCM+7hfC8RwjPe4XwvE8Iz/uF8HxACM8HhfB8SAjPh4XwfEQIz0eF8HxMCM/HhfB8QgjPJ4XwfEoIz6eF8HxGCM9nhfB8TgjP54XwfEEIzxeF8HxJCM+XhfB8RQjP/xPC81UhPF8TwvMPQnj+UQjPPwnh+WchPP8ihOfrQni+IYTnXx3x7IF4xmONiUSqqT7lx/2WWH1za7IhlmhobUz6Sb8h2dBen4zHU8lEsqm5tbkp1uwn4im/o6E53pHBXo2xzX8rUptjhR3+mz349PdxnYx+LmPU31tCbLucsc1vC2lzT8Y2vyOkzb0Y2/yukDb3Zmzz34W0uYKxze8JaXMlY5vfF9LmPoxt/kBIm/sytvlDIW2uYmzzR0La3I+xzR8LaXN/xjZ/IqTN1Yxt/oeQNg9gbPOnQto8kLHNnwlpcw1jm/8ppM21jG3+XEib6xjb/C8hbR7E2OYvhLR5MGOb/y2kzUMY2/wfIW1ehrHNXwpp87KMbf6vkDYPZWzzV0LaPIyxzf8T0ublGNv8tZA2L8/Y5m+EtHkFxjZ/K6TNwxnb/J2QNq/I2ObvhbR5BGObfxDS5pUY2/yjkDavzNjmn4S0eRXGNv8spM2rMrb5F8Y2l3qL9vj8MdPgtZSsrWQdJetqfCW+knqtAyUJJQ1KGpU0KUkqaVaynpL1lWygZEMlGynZONPmTZRsqmQzJZsr2ULJlkq2UrK1km2UbKtkOyXbK9lByY5KdlKys5JdlOyqZDcluyvZQ8meSvZSsreSfZTsq2Q/JfsrOUDJgUoOUnKwkhYlrUralLQrSSnpUDJaySFKxig5VMlhSg5XcoSSI5UcpeRoJccoGatknJLxSiYomahkkpJjlUxWcpySKUqmKpmm5Hgl05WklZyg5EQlJymZoeRkJacoOVXJTCWnKZmlZLaS05WcoeRMJXOUnKXkbCXnKJmrZJ6S+UrOVbJAyUIl5yk5X8kFSi5UcpGSi5VcouRSJZcpuVzJFUquVHKVkquVXKPkWiXXKbleyQ1KblRyk5Kbldyi5FYltym5XckdSu5UcpeSu5Xco+ReJfcpuV/JA0oeVPKQkoeVPKLkUSWPKXlcyRNKnlTylJKnlTyj5Fklzyl5XskLSl5U8pKSl5W8ouT/lLyq5DUlf1DyRyV/UvJnJX9R8rqSN5T8VcnflLyp5C0lbyt5R8m7Sv6u5D0l7yv5QMmHSj5S8rGST5T8Q8mnSj5T8k8lnyv5l5IvlPxbyX+UfKnkv0q+UvI/JV8r+UbJt0q+U/K9kh+U/KjkJyU/K/lFiXauEiU9lJQqKVNSrqSnkl5KeiupUFKppI+SvkqqlPRT0l9JtZIBSgYqqVFSq6ROySAlg5UMUbKMkmWVDFUyTMlySpZXsoKS4UpWVDJCyUpKVlayipJVlaymZHUlayhZU8lIJWspWVvJOkrWVRJT4iupVxJXklDSoKRRSZOSpJJmJespWV/JBko2VLKRko2VjFKyiZJNlWymZHMlWyjZUslWSrZWso2SbZVsp2R7JTso2VHJTkp2VrKLkl2V7KZkdyV7KNlTyV5K9layj5J9leynZH8lByg5UMlBSg5W0qKkVUmbknYlKSUdSkYrOUTJGCWHKjlMyeFKjlBypJKjlByt5BglY5WMUzJeyQQlE5VMUnKskslKjlMyRclUJdOUHK9kupK0khOUnKjkJCUzlJys5BQlpyqZqeQ0JbOUzFZyupIzlJypZI6Ss5ScreQcJXOVzFMyX8m5ShYoWajkPCXnK7lAyYVKLlJysZJLlFyq5DIllyu5QsmVSq5ScrWSa5Rcq+Q6JdcruUHJjUpuUnKzkluU3KrkNiW3K7lDyZ1K7lJyt5J7lNyr5D4l9yt5QMmDSh5S8rCSR5Q8quQxJY8reULJk0qeUvK0kmeUPKvkOSXPK3lByYtKXlLyspJXlPyfkleVvKbkD0r+qORPSv6s5C9KXlfyhpK/KvmbkjeVvKXkbSXvKHlXyd+VvKfkfSUfKPlQyUdKPlbyiZJ/KPlUyWdK/qnkcyX/UvKFkn8r+Y+SL5X8V8lXSv6n5Gsl3yj5Vsl3Sr5X8oOSH5X8pORnJb8o0ROJEiU9lJQqKVNSrqSnkl5KeiupUFKppI+SvkqqlPRT0l9JtZIBSgYqqVFSq6ROySAlg5UMUbKMkmWVDFUyTMlySpZXsoKS4UpWVDJCyUpKVlayipJVlaymZHUlayhZU8lIJWspWVvJOkrWVRJT4iupVxJXklDSoKRRSZOSpJJmJespWV/JBko2VLKRko31PEXJJko2VbKZks2VbKFkSyVbKdlayTZKtlWynZLtleygZEclOynZWckuSnZVspuS3ZXsoWRPJXsp2VvJPkr2VbKfkv2V6G/N6++462+kH6xEf9tbfzdbf5Naf+9Zf0tZf6dYfwNYf19Xf7tWfxdWf3NVf89UfytUf4dTf+NSfz9Sf5tRf/dQf1NQf69PfwtPf2dOf8NNfx9Nf3tMf9dLfzNLf49Kf+tJf0dJf6MorUR/W0d/t0Z/E0Z/b0V/y0R/J0R/g0N/30J/O0J/l0F/80B/T0C/q1+/B1+/Y16/v12/G12/d1y/01u/L1u/i1q/51m/Q1m/n1i/+1e/V1e/s1a/D1a/a1W/x1S/I/RSJfrdlvq9kfqdjPp9h/pdgvo9ffodePr9cvrdbfq9aPqdY/p9XvpdWfo9VPodT/r9SfrdRPq9P/qdOvp9NfpdMPo9K/odJvr9IPrdG/q9FvqdEfp9DPpdB/o9AvoZ/UeV6GfL9XPb+plo/byxfpZXPyern0HVz3fqZyf1c4n6mT/9PJ1+Vk0/B6afsdLPL+lng/RzN/qZFj1P1c9i6Occ9DMEen++3vuu95XrfdZ6D7Peh6v3pep9mu8q0fv49L42vc9L73vS+4D0vhi9T0Tvm9D7CPR9dX2fWd931fch9X05fZ9K37fR9zH0ur5e59brvnodVK8L6nUyvW6k11H0uoK+ztbXnfo6TF+X6Hl6j0VTAE/vM9bHWl7nkQkPXmkmXe/L1ftU9b5NvY9R7+vT+9z0vi+9D0rvC9L7ZPS+Eb2PQu8r0PfZ9X1nfR9W35fU9+n0fSt9H0ff19Dr/HrdW68D63VRvU6o182GK1lRyQgl+rpbX4fq6zJ9naL3vq+uZA0layoZ6XU/dLw2R535/4NNljnm+Wu2gPkGW9KWyfx/yXXL3zX0gx77wrTJ5cHlpmTSXpj3ytPXzmxph2nTLOWmW8qdYCk3w5J2igVzpqXcLEu50y3l5ljSzrZgzrWUm28pt8BS7nxL2oUWzIst5S61lLvcUu4qS9o1FszrLOVusJS7yVLuVkva7RbMOy3l7raUu9dS7gFL2kMWzEcs5R6zlHvCUu5pS9qzFsznLeVetJR72VLuVUvaHyyYf7KU+4ul3BuWcm9a0t62YL5rKfeepdwHlnIfW9L+YcH8zFLuc0u5LyzlvrSkfWXB/NpS7ltLue8t5X6ypP1iwSzpGVyutGdwuXJLud6WtEoLZl9LuX6WctWWcjWWtDoL5mBLuWUs5YZaysUtaQ0WzCZLuWZLufUt5TaypI2yYG5qKbe5pdyWlnLbWNK2s2DuYCm3k6XcLpZyu1vS9rRg7m0pt6+l3P6WcgdZ0losmG2WcilLudGWcoda0g63YB5pKXe0pdxYS7kJlrRJFszJlnJTLOWmWcqlLWknWjBnWMqdYik301JutiXtDAvmHEu5sy3l5lrKPWAp16f3ov+nbL5hfO7r10+HaXWZNOqaa7AlbQVL2oqWtJUtaata0taxpMUsaQ2WtCZL2vqWtA0taVtY0raypG1rSdvekra7JW1PS9p+lrQDLGmjLWljLGnHWNLGWdImWtKOtaSlLWknWtJOtaSdZkk7w5I2x5K2wJJ2niXtQkvaxZa0qy1p11rSbrKk3WJJuyOTdv9TU3647I1HD4Np92fSHkg+te3r1/QfBNMeyKS9tOsFf9xz4KRqmDa6ZtH/VBwck0mj4uBhlnJHWModZSk31pI23oI50VLuWEu54yzlplnSplswT7CUO8lS7mRLuZmWtFkWzNMt5c60lDvLUm6uJW2+BXOBpdx5lnIXWMpdbEm71IJ5uaXclZZyV1vKXWdJu8GCeZOl3C2WcrdZyt1pSbvbgnmvpdz9lnIPWso9Ykl7zIL5hKXcU5Zyz1jKPW9Je9GC+bKl3P9Zyr1mKfcnS9pfLJhvWMr9zVLuLUu5dy1p71kwP7CU+8hS7hNLuc8saZ9bML+wlPuPpdx/LeW+tqR9a8H83lLuR0u5ny3lSmqD00prgzHLLeV6WcpVWMr1taT1s2BWW8oNtJSrtZRb05K2lgVzHUu5mKVcvaVcgyWtyYLZbCm3vqXchpZyoyxpm1owN7eU29JSbmtLue0saTtYMHeylNvFUm43S7k9LWl7WzD3tZTb31LuQEu5FktamwUzZSk32lJujKXc4Za0Iy2YR1vKjbWUG28pN8mSNtmCOcVSbpql3HRLuRMtaTMsmKdYys20lJtlKXeGJW2OBfNsS7m5lnLzLeUWWtLOt2BeaCl3saXcpZZyV1jSrrJgXmMpd52l3A2Wcjdb0m61YN5uKXenpdzdlnL3WdIesGA+ZCn3iKXcY5ZyT1rSnrZgPmsp97yl3IuWcq9Y0l61YP7BUu5PlnJ/sZT70JL2sQXzH5Zyn1nKfW4p929L2pcWzK8s5b62lPvWUu4HS9pPFsxfLOVK6oLLldYFl+tpSettway0lOtrKdfPUm6AJa3GgllnKTfYUm4ZS7lhlrTlLZjDLeVGWMqtbCm3miVtDQvmSEu5tS3l1rWUq7ekJSyYjZZySUu59Szl9rak7WvB3N9S7kBLuYMt5dosaSkL5mhLuTGWcodZyh1pSTvagjnWUm68pdxES7nJlrQpFsxplnLTLeVOsJSbYUk7xYI501JulqXc6ZZycyxpZ1sw51rKzbeUW2Apd74l7UIL5sWWcpdayl1uKXeVJe0aC+Z1lnI3WMrdZCn3J0u5iswG5Umrb3rvj8989gVMqx4cjFmbSbto4MT0akfqXeedxwpDFv1P3X9fI5NG3TsbaUmLW9IaLGlJS9p6lrRNLWmbW9K2saRtZ0nbyZK2iyVtH0vafpa0Ay1pB1vSDrGkHWpJO8qSdowlbYolbZol7WRL2qmWtFmWtNMtafMsaeda0i6wpF1kSbvMknaFJe0GS9pNlrRbLWm3W9Lut6Q9aEl7zJL2hCXtmUwadf/95Uwadf/9lUwadf/9T5k0Kg7+PSAtc4njDVt+0f8Vmb9NoNSPj+jnXkZl/o4VdvgVAJcbPxlrqa/wuh7M/OMVANMBfr3BL3OD/+u75vVxaborvofqrcr8DR4fypYxaXAwvSyT1juTbn6bQbUC4bnod8iJW281BP8eoG362Cztou76NoO/eQbf64Ltx5ON8fpkY319eyrW0t7Y1NEcb4rFWxvizW2tfizeUJ9sb2qJx2KpeKotEWtvbG5oT7U0N8Q7WluaGw32FiR2PNWqoBpaGpOtfkdLY0esNdGUjLd0NDW1t7Q3J1JNDbF2v63Rb6v3O5LJloaGlraGZt/vSDU3dCSz2Fs60Uss6+tbOcGPNxj8rQF+CRt+Im7wt3HCv77V4G+b9oi+zevw8QmDvR3gXubx+ZvB394NfnYc2sENftY2d3TSt538d0p7hfZtt8Ng7+yEu58w+Lu40U3Wb3d1w7/J4O/mhn82Luzuhn+2f/dwwz/bv3sCfL642amfvdzgZ31rbzf42diwjxv9dxj8fZnxG1tizanGxqz978eM39ra2NSSSmb9d39m/HhbY6oj3pTV/wHM+C0NiY6OhniLwT+QGb/Bj6Ua6puy/XsQM35za6yhMZnMzjcPZsZXc8R4e3NLdl7Swq2f1lSsrd1vNtcfrRl8U4c+TN1tzHVnjuYSVJ/ndb2+8lD9lYgr9zyhBNUH+UD9mGsZo7v2dHeu1UQajDE4rZQ4Z+qhsPZjxNqfEesARqwDGbEOYsQ6mBHL+LVbX0tk5zHtTvDjSYOfAm0z2H4yXl/fFNfvkEy2qzlte1t9Ul2BtyZibbGWtvpUc8Jv7kjUJ+Jt7W2tyUSyxe+IdbS0NXckF6Eb7A433LNzsNFO8GMpg38IwOebI8Wzawdj0t11n6OwnwvdYB/qQjd+J/5h+XPPdWTnRocHYy+2aRrsIwjs+pZ4W6y5Q81xki1Nao6mTCCmfrQmUx2N9S2tamGpvt33/VRC/VOfak80t7Y3+q2Nqab6hlZVXVYnR7rQeczPzlmOAviMes/yPxrglzjAP8aJfjrxx7rRT/aaaVwG3wX2eDe6z8bKCW50n41lE93gZ6/HJrnRT3YcPNYN/yz+ZDf4zQb/ODf42eu9KW7ws9dLU93gZ2PnNDf47Qb/eCf4flY/0wE+n/3XZ2Nn2gl+PIt/ghv8bPw80Ql+Iot/khv8bHye4QY/O6c62Q1+Nv6f4gY/Oxc/1Ql+Q3ZeONMJfmPWfk5zg59dL57lBj9rn7Pd4Gft83Q3+Fn7PMMNfnZ+cqYb/Oz8YY4b/Oz84Sw3+Nnx62w3+Nnx/Rw3+Nnxfa4b/Gx8m+cGPxvf5jvBb8qO7+e6wc/ez1jgBj8bPxe6wc/Gz/Pc4Gfj5/lu8LPx8wI3+Nn4dqEb/Gx8u8gNfja+XewGPxt/Lsnge4uPHccn9Du99T621oGL8Kj9f4xzrZjZW1fW2ZQu967073JwnvE6qj3MvStYfyXi6uLeFazP8MH6gfeudFpPgms1kYb7sCdRT0+inmoiDc/9CsE6lxHrdEaseYxYnG08hxFrDiPWXEasMxixpjNiceqe04cWRBRrJiMWp01w6p7TvmYxYnH6NqdNnMaIxRmjz2fEiur4aObUbudWscYqom5zmLReoG44p8JHKfob8tZz1UMGduLifObo63Xuzxg3+ci2HY8anxrnWQroY/M0fT5qyitBab1DtMHzcit2agjF4gk85FaFMGHZEgKrlDiHjRnqvCyAA8QwfYUnwqMyf8cKOvx4mHbA+ot1EUEFCeoiwuinlxv91JcgfMinF6EfbMO470q8TkcuB1gwfy/QRpgf/jbl4bm3M/9Xe939yDx4UEKklRLnjH4199dR22DfYDt10w8JP6ydmvorPZd+02mnlF1Qg1mF172fOTfXhelXKrZVEGkGy2x2hXYK8/cGbYT54W9THp77Z+b/aq+7TWM7rSDaA89BO/0o87sioD2jMn/HCjqamqhxCvsB1BPnxqmwfmDqr/Rc2l2nH1D9RMUTo7tKgms1kYYXfSqJeiqJeqqJNDwRLQRrHiPWaYxYsxmxFkQUaw4j1lxGrDMYsaYzYp3NiMVp91HUl20czBdLH5y2upAR60xGLE5b5WzjTEasqPr2RYxYaUYsc/MQzzMNvud1zpXweD8q83esoGPRtRusz7QDnoP1VyKuvHw650qUXqk5rdFPHzf6yfLpQ/DpQ+jH9GVfIs1gmbUWeM0A8/cBbYT54W9THp5rzHRYNcLUB75m6Eu0B56D1wyxkq5tg32D7dRlP8D6DG94DtZf6bn0m5jVLij/r/C69zOjfmJh+hXyNX1ZRaQZrH6Zv6Gdwvx9QRthfvjblIfnNkd2Cm0a22kV0R54DtrpRshOYd9gO3XSD35HaDs19Vd6Lv2m004pu+hD6LHC697PjPqJhelXyNf0ZT8izWD1z/wN7RTmrwJthPnhb1MentsV2Sm0afzQVD+iPfActNPtM7gVAe0Zlfk7VtDRkKD6kg+/ya8i2on9DOqaz67jof3M1F/pdbcLF37WH/EJsgOju2qCazWRhm2kmqinmqinmkjD1zWFYM1mxJrOiHUaI9bZjFgzGbHmMGKdw4jFaROzGLFOZcRawIRFxedCeJ3LxEsfCxmxOH37IkYszljI6Y9zGbE4+/FiRixOm+DUPZdve8xt5LSJeYxYUY0TnLx+D3OmpWPaktM9pz+ezojF2cYLIsqLcz7B2UZ8fwBeW5Zk/q/wuvse43V2qgTVZ9oBz8H6KxFXXj6d19mUXvsTejW6G0BwrSbS8HX2AKKeAUQ91UQaHjMKwZrNiDWdEYuzjXMYseYyYi1kxOLU/UWMWEv7MT+sixmxOG1iFiPWPEYszvi1gBGLU/ectsqp+6jGL05b5bSvcxixOPuR0744fYjTvs5lxJrJiMXZxqjO5TjbyDmfiGo/RnUudwEjVlTnOZxzzKXzid+GD3HGCU5eXPalf+N11UJ4ncfESx+cuuecA5ixFu93M/j6cLuGVh96jy1eQ3OyByvHGhq1t67C626HjPrxw/Qz5Gv6ciCRZrBqMn/DPWEw/wDQRpgf/jbl4bktM0qpRpj6wHvCBhLtgeeMfvWesFE9urYN9g22U5f9AOszvOE5WH+l59JvYla7oNbQK7zu/cyon1iYfoV8TV/WEGkGy3ysFNopzD8QtBHmh79NeXhud2Sn0KaxndYQ7YHnoJ3uiOwU9g22Uzf9EH4vuKm/0nPpN512StkFNU5VeN37mVE/sTD9Cvmavqwl0gxW5jvmXewU5q8BbYT54W9THp5rRXYKbRrbaS3RHngO2un+mT/6e8H+mW+cpuZjWIewHPYHJ/3tp2Jh/cHUX+m59M9Of6gJqVejn1on+mnvCGM/kK/pyzoizWCZL1hDf4D5a0EbYX7425SH58Yhf4C+g/2hjmgPPAf94QgUt2HfYDt10g+xWEdYOzX1V3ou42SnnVJ2QY1/FV73fmbkkwrTr5Cv6ctBRJrBGpz5G9opzF8H2gjzw9+mPDx3ArJTaNP4GZ5BRHvgOWinUzJ/VAS0Z1Tm71hBR8qn+pIPvyVWQeiaD7++uYLoLz781qTBH+IGv9HgL+MEP5nt32Wd4Ddk9TPUDX67wR/mxn6y/Jdzgh+PG/zlneCnsvxXcIKfyOIPd4LfmvXfFZ3gN2ftf4QT/I4Gg7+SG/5Z+1nZDf9sfF4V4HOuFRj81Z3gx+JGH6t5nUcp0SZTv5krrALylwT8b7BwmqmrEmG5mpdRbYP88XXZaoAP1EEQ1mp5YlUQaS76dFVLu2H9VRauuB36wO+uWFyd6GMWI9YpjFjnMmFRc89CeJ3AyKuOiRc1Py0EazAjVikTlj5mpPl4DWHiRc19o4K1LCPWUEasYYxYyzFiLc+ItQITlj7wx1UK4TWckdf8NB+vFRl5bZ3m48U1dujfIxixVmLEWpkJSx94bTMqWHtlsNyuRyWa3a5HxVvcrkcl2t2uRzXE3a5HJZrcrkcl2sxc3YyHpg5oW3B847uuSIR+hsvUX4m48vLpvL4bhvhg/Ri/NLpbjuBaTaRhH12OqGc5op5qIg3vwSsE63xGrJmMWGczYs1hxJrFiDWdEescRqzZjFgLIorFaatnMGJx6Z4at6Niq5z+uJARK6r+eB4jFqcPRVX3ZzJiccYJzrGWM0Zz6p5TX1G1L865CWc/cur+9xAnLmLC0r/xNWwhvGak+XgNZuLFiaWPE9N8vIYw8pqR5sM6lRGLi5f+jdfSC8EqZcLSB5dN6OMURqyTGLFmMGJx8uKy1SjHwr6MvDhtlbMfOeNqVPXFaat4bTUqvs0Zvy5mxOKcf53OiMW5psA5J+e8VuBcezTze7OOvSxIK8n87/YeQGyx7wEs64aP9R7AsoReqf2qjHzaw/Qz5Gv6cnkizWCZe/lw7z3MvxxoI8wPf5vy8NzZmY6rRpj6wHvvlyfaA88Z/eq997NLu7YN9g22Uzf9EP7bjab+Ss+p3/g2uxhG6JGyC1O2mkjDc/qw/UX1Pd77VgjWPEas0xixZjNiLYgo1hxGrLmMWGcwYk1nxJrPiMXpQ5z9eD4j1kxGrIWMWJy+zWlfnD7EGVd/D7o/hxGLM0abWEg958Q4/4hRzyEx4mefOVjBogtYP96LY9Kp/w0WTjN1VSIs5rb5trbZrt3gPBzv7aWwVsgTi3p2zUWfLm9pN6zf7bN6DfVun9VraHT7rF6iw9j8ikCfJUh3I5z0ZTL0u05M/ZWIqyufGoH4YP3g66GVCK7VRBreu7cSUc9KRD3VRBoetwvBOp8RayYj1tmMWHMYsWYxYk1nxJrPiHUuIxan7qNqqwsZsWYzYnHaF2fMmceI9XvQ/TmMWJxtXBBRLE7fPoMRi0v3+jfelxsVW43qHIATa+m4vXTcljJ2LB23l47bS8ft36buo2qr5zFiceqLM+Zw6v5MRixOH+Ict6Mao6M6n+BsI+fcl7MfOXX/e4gTFzFhlXjd9+cUgrU8IxbXOrn+vQITlj7w3uNCePVl5DUjzYd1KiPWKUxY+vdwjw/rt657/Rs/O1EI1mBGrCFMWPrgtNWtmbA4bVUfnD4UVbuPaht/67GQk5c+fuv6+r2M2yczYenfnHseZqT5eC3DyOskRl5cY60+uGyCW18z0nxYnPHrYkYszmu+0xmxOO/pcK4DcK5PcO7Pwc+3jQBpJZn/qffF63pGZf6OFXa0l6D6TDvgOVh/JeLKzMe36XUEoVfqffeMfNpKED7kszKhH9OXqxJpBsu8JxM+3wbzrwzaCPPD36Y8PPevskX/VyNMfeDn26h3pcNzRr/6+bZPyrq2DfYNtlM3/VAf+vk2U3+l59RvfJtdUP5P2YUpS/UXHvfD9heFNYcRawEj1mmMWPMYsc5nxJrNiHVuRHnNYsSazoh1ESNWmhHrYkYsTn3NZcTi9MeFjFicds8ZCzn78XRGLM6Yw2kT5zBicep+ZkR5zWfE4rQJzrkJ57jN2Y9RjV+c9sXpj1GN0ZxYnPZ1BiOW0b25XoHXNyWZ/x1/Ay5Rguoz7YDnYP2ViCsvn85rPUqvKxN6zef7Yoar+Q3TYD3F/o6XPuYxYp3GiDWbEWtBRLHmMGLNZcQ6gxFrOiMW17eR9DGTEYvTHxcyYnHaF6e+zmbE4rQvTh/ijKucNsEZV6Pq25z+yOlD5zNicfrj78G+zmHE4pwDmLG2fyYNzrfh+0hgGqzHNueH5U2+KqJcSeZ/t9/wbQ79vg5TfyWhExdz/tVC6tXobnWCazWRhveurE7UszpRTzWRhsemQrDOZ8SayYh1NiPWHEasWYxY0xmx5jNincuIxan7qNrqQkas2YxYnPbFGXPmMWL9HnR/DiMWZxsXRBSL07fPYMTi0r3+jd/XERVbjeocgBMrquM2p+455wCcMZpzPhFVW106bi+5MW3pnDw/rKVz8iVnX0vnhUvOvqI4L9QHp76iaqvnMWJx6osz5nDq/kxGLE4f4hw7ohqjozqmcbaRc+7L2Y+cuv89xImLmLBKvO57nArhdWKaj9fyTLz0776MWJz3hzj1tQwjr1PTfFinMGHp38M9Piwum9DHjDQfFpfuOX2b2x+5fEj/XoEJSx+c/vh7sC/8vqFCsAYzYg1hwtIHZyzcmgmLMxbqgzNGR9Xuo9rG3/pYy8lLH0vnJvLHDn2czISlf3POyWek+XhxzslPYuTFNdbqg3M+wamvGWk+LM74dTEjFueawumMWJz3rTjXmTjXvzj3F+L3DfUFaSWZ/80+XxjrdD2jMn/HCjr80O8bMvVXet3HKj4+nft8a73ueu1L6NXoro7gWk2k4WvjOqKeOqKeaiIN3/MtBGseI9ZpjFizGbEWRBRrDiPWXEasMxixpjNizWfE4vQhzn48nxFrJiPWQkYsTt/mtC9OXpz9yMmLM05w2gRnP57DiMUZ7/E3z/GcYFTm71hBR0ODmZvAuYyZU1V49NyEp24/WYLq8zx6Xmfqr0Rcefl0zuuofoP6wfO6QQTXaiIN9+Egop5BRD3VRBr2zUKwzmLE4uQ1jwlL/+7l8WBxt3E6I9Y5jFgLGLHOYMTi1NdCRqwLGbHmM2LNZsTi1P0cRqxZjFicbbyIESvNiGXW+fDcQh+jMv+r4TCebIzXJxvr69tTsZb2xqaO5nhTLN7aEG9ua/Vj8Yb6ZHtTSzwWS8VTbYlYe2NzQ3uqpbkh3tHa0tzkdu7Q0Fzh0eMrD77vG/zBbvDrDf4QN/hxg7+MG/wGg7+8G/xGg7+CG/ykwR/uBr/Z7bsP/BaDv7ob/HaDv4Yb/JTBX9MNfofBH+kEvz5m8Ndyg5+NP2u7wc/Gn3Xc4Gfjz7pu8BMGP+YGPxvffDf42fhW7wY/O/7G3eBn42fCDX42fja4wc/Gz0Y3+Nn42eQGPxs/k27ws/Gz2Ql+PBs/13ODn42f67vBz8bPDdzgZ+Pnhm7ws/FnIzf42fizsRv8bHwY5QY/Gx82cYPfavA3dYPfZvA3c4OfjW+bu8HPxrct3OBn49uWTvAT2fizlRv8bPzZ2g1+Nv5s4wY/O3/b1g1+dv62nRv8bPzc3g1+Nn7u4AY/O3/b0Q1+Nj7v5AY/G593doOfjc+7uMHPxudd3eBn4/NubvCz8Xl3N/jZ+LyHE/yG7PxzTzf42fi/lxv8bPzf2w1+Nv7v4wY/G//3dYOfjf/7ucHPxv/93eBn4/8BbvCz8f9Ar/PoxI6nWtVSf0NLY7LV72hp7Ii1JpqS8ZaOpqb2lvbmRKqpIdbutzX6bfV+RzLZ0tDQ0tbQ7PsdqeaGjmSW+0EkdiFH57r8wS704ndk40ILwC9h45/M4rc66ddO/DYn+mnPxuV27r71Y7GeCmNC5ka9eX9xCrSjHPVJR+Zv801MfRyT7syTAukw/z2Vi/7X9U3O1FcFdOWBevRh2lzmQqfqXkEJqs/z6H0wpv5KxJWXT+c+mDLEB+sH74MpJ7hWozR94Pui5UQ95UQ9FNbFjFjTGbHmM2LNZsSay4g1ixFrDiMWZxvPYMSKqn3NZMQ6lxFrISMWp31x6utsRixO++L0oXmMWJw2wRlXzX65Cq/7WMg4b+8wYy2cW5vDpB3sdW0XTGsB+bdId+bDRyn6G7apt5LTB3bi4nyYD5w3HQzwg+YM+jB67AnSOec4Br/CDX7c6L6311WnuE0VAboy6dT/Bgunmboqve56dzE/pNoG+WN/6Q34QB0EYfXOE6uCSHPRpz0t7Yb1V1m4Uu3A1zdUPKLm3yZ/hYUXzN+fqNuUNTqsBGmMOqy36RD6oqm/L+DZnmqdMHr7o0Z76ChFejB6G4Ly7Zju1AO2wd4BWB76ewg6Vwrw4OH2mnHJjgOmTfmOA1C3B6O0xY17+sCxAetcH7qv/4LWFkqJNmEbClpbKAXpMP+bvTrr+1vmdx9QZ19LnVWIN8yvjx3TXfP3A20rJfL0RRxN/r9neOn+uzDTf5TuDJ8KVP63ZMumTfnaMuzHgxE3g2lsB/dtUL98DvrlkoGdnHF9VZZ2mL8PJOoz3KtRXs/r7OMB4DzjGlfob3WZ+isRV+ZxKDuHGYD4YP2Y2KJ12Cfz+/CjWto3azl63ITDUz2QKvuD3xC+GsGZPDAvPKoBJS8gH+52feye7l4OH0aV/b3ubl2N6oL4pcQ5HHqrCW7GzI1uajJjrQ5b36PlV2zG+qjwuuuW0RTawpqmqb/ScxkOO02zP+ITpHujH0eu0lridXeLUqJOw9f05QAizWBloluXEAnzQ3+B+eFvUx6e652xrWqvu3vvlO7KgXJ9eM7oV9tpjwxuf6I9/VDbqH7rT+BWE+WxDqEfH5XumlZOtM2k9bSk9bakVRDtMmmVoNwxqFwfAlNzOKh3J16QbqBdmekLFZuCYmsQ1pYIC5YfgLAG5sDaDWHB8gMRVk0OrD0QFixfg7Bqc2DtgrBgefzqsbocWBMQFiyPPxU1KAfWRIQFy+NXcw7OgXUswoLl8evChuTAmoywYHn8as5lcmAdh7Bgefy6sGVzYE1BWLD8sghraA6sqQgLlh+KsIblwJqGsGD5YQhruRxYoxEWLG/KVhFYeB7g5pGz8PMAU38l4upqHrC8112vUD/4NuwKBNdqIg3HrRWIelYg6qGwahixahmx6hixBjFiDWbEGsKItQwj1rKMWEMZsXDcyjVe75Ne9L9tvDbloO3CfKUgDzVGQ4yg+QC8ZoPnlwvRHngO62a5gPqC+EHdmOtN2/yjPypHca7OUY+Ns8lHzZnHprumwSV2PL+Fy8F4Hg6XygegtAqiXXjODPsVz5mh3uCcuRy1pzVz3u1yXCwG7S9IV3hdgvrf88It11JL7q7r6VGkenB7+jHWA7G2SHetp/hLfLFUmHbA+l0v8Rld1Fh04eZVUonQy534laU1jnRhbDHXdRu+pUhdm1FjCVweHZ0ar27SbTp595bRvUBWGFYxnSqUbwD6e2AArVEoH36LmZn+YR4QCx6Yh235laqfCiPmdzlxXh/UZS1ehs33bS+w/CBLPTUF1lND1OP2zSmdOzfcvNmk8y4/tZQA22Tqx2+BM+nU/wYLp5m6Kr3ufeQiDFBts/UzvMQIs+QyJE8st2/D6ezTwZZ2w/qrLFypdsC7xTDOlWfmhnpaN6d3V2wqVrjdPRZvDGuPpv5i7TQPu9OFmqqbstUoTR8npzvz4bRS4lwPC9Y8RqzzGLHmMmLNYsSazojF2UbOfuRs42mMWJxtPIcRaz4j1tmMWLMZsRYyYs1hxOK0CU5/5PQhTpvg1NcZjFgLGLE4dX86Ixan7s9lxOLUF2csnMmIxamvqMZCTn1xxpzfw5yJ0yY4x20u3evf+G3jUbF7Tt2fyYjFafecbeSME5xzAE59XcSIFeZpbOq63uSnnmCh1qV+L0+wNKB8HE+wNKBzpR79BIvG/gvanoufftGH2/XYeH0Jqg+30UP1VyKuzP2fXbOitodR655Gd8sSXKtRmj7wl5iprWPLEvVQWPMYsc5hxJrPiHU2I9ZsRqyFjFhzGLE4bWIuI9Z0RixOm+DU1xmMWJz6Op0Ri1Nf5zFicdrqLEas30M/nsuIxakvznFoJiMWp76iOg5x6osz3nPaF2fM4fRHTpvgnDNx6V7/xmswUbF7Tt2fyYjFafecbeSME1Gdf13EiHVxBot6lAg/wkBdwy5jqQeWXyYEFnU9bPJTjx7Z1nqoR4/M2oOjR3Dqbf1BPb60OGs9Rm8+yofXemBsGxqA5aG/fXQuaK0H71s6NrOQ5fYra/RWc7xfEe4ZrUbty/dRW1i+v6WemgLrqSHqcavL/N+iUY3SWkAafsShFWDBt6DgoxT9Ddur/eLyPN6wAfvj4ADMciJvCUozeWdVdPK4OcPD7b7D4vXJlunOfPig+sS0V+vitgL7hPoKsuFNPS4d5jFu6jH8aqL8AEs9IwqsZwRRTxVRriTgf1MPPofroTjb1tsXtx6IZXzY7dp9/vaP9QztH+/NbQVp+C16bSAN3gfCB+UbRhfaN/4Xwjfc3m8qng7xI29Qh9C38UHp0OgirA77e911iH27P9EOyu8hxuL4PcUhauNEDUqDfVyL0mAf16E02Mf4flU7SCtBaSmQ1hOldYA0/CbE0SCtEqUdAtJgX+Mj13i2Uk0nLs7noTqh3RyM0qjxjHqFisF1+0hZPB4m7sP6KxFXXj6d90GpR4SpN3ca3dURXKtRmj5OSnfmw2mlxLkeFqw5jFgLGLFOY8Sax4h1PiPWbEascyPKaxYj1nRGrIsYsdKMWBczYnHqay4jFqc/LmTE4rR7zljI2Y+nM2Jx9iNn/OLU13xGrJmMWJz64vQhzvkEp77OZsRaGleXXFzl0r3+je+DRsXuOXV/JiMWp91ztpEzTpzBiBXV+eoJjFhmvmrKwWt8eM/S8XsMsl/9XNYNfvY9CbZ7ubB+fE1v0qn/DRZOw/u269y0zbpv22YHcG08zCtCl8kTa0m+zwTqGr/PhOJKtaOWUSdhvoBCrS3l27e2V7Y69rHsnoJai55g/YU8P1KP8pn7hD287n03JADLQ3/Xo3NBewr6e937tCKAp6kXn8O2AsuXW+qpLLCeypD1VBdYT3XIemoKrKcmZD1L+6drPUuyf0wchu8sOia96H99z6Wlkq4TvlIfvqsJ75kw+ReCr+G2Vwa3sRS1H8YJ8ypCt1/gyv8+GdZlC9GeEgKLusdk2pTvl2LgM3oHg98QM+hLMT1BOsx/TGUnl4qhNGYJwITPKuKvCBmf7el1thvmwRxM/gmAg/mKEMYsC2hX7wDM2cAWj62kMT0Ck2pXJWoX5lCBOJj8U0G7+oJ3rcM85m9oJ+PSXbn1IeryAs7hmNYnIM1Wb66y+jf8ihBOw7aC9QXLB+kU24rJf7LFVnoSHGB7cb9iDjhPZQCH0wgO8LWVbUcdPTnzVR8PHfjjZOXob9yVuAt6EjhBh1GDLjO7ksaB+cyBzQ8Oxb2JOioDOMKyWj2me9tTh6fGpwIU1AOBlQdU1sOjD7df+3QzblD7K2DsxQc1ppj26nL9h3bi4nzmgM9kL51XLd68CmNR8yV9tKU702H+K0EcWX4ojdkjANN8RsY2plF7k0x+6prRNueG9oiv06m6oS5x3K3Lk2uu9YYKxJW6Fg3Ldcsicy3Pk2slUTcce1RwHTMxNXbHo8Zn36LtETQ89BuPOzgPHi96B1Dti/L1R3/j1yrj8D4Q/d2H4EcdmDPFpdTLfRgXNbq6E7joigEu6nm0ixqzx5dfsCy8/DImcRSRz9R5NGoPzA/rNPmPAfVQU5yjULtN/geJKU41wcnwqUDleYfdpnqjw7Fe98OkjfO6th2mjQf5N0935sMHNbSaNmldTM3jcg32I+ZmMOGQAfs2qF+eBf2CP+wJ6zvaC26H+buUqA/r0qTrw/TxeIQxKvN3rKCjoaUE1ed5HrnMb+qv9Lrr1sUy/3jEB+uHCsOWD3uOBb8h/D4IzuSBeeGxD6DkBeSjur2OKIcPo8pyxPkf4Kr6NRS2oOvj7xFDDqXEOTzbKiP4U/X0LLCeniHrkdwevNNaH/gDkB1EW/FOa30cg8odAtLwByDHeN3bZdIOtWAeZsE83JJ2hCXtSCJNc+ro28kRDy+Uq+OPSsK+C/LrIKwtERYsPx5hTciBhT8qCctPQFgTc2Dhj0rC8hMR1qQcWLsgLFh+EsI6NgcW/qgkLH8swpqcAwt/VBKWn4ywjsuBhT8qCcsfh7Cm5MDCH5WE5acgrKk5sPBHJWH5qQhrWg4s/FFJWH4awjo+Bxb+qCQsfzzCmp4DC39UEpafjrDSObBGIyxYPo2wTsiBhT/0BsufgLBOzIG1O8KC5U9EWCdZsPRv/EQ0LH8SwpqRA2swwoLlTdkqAqsk87+ZTp4MzvNN3/zQT7mY+isRV14+ndPJk73ueoX6wU+5nEJwrSbS4FgE02A9pxD1UFhjGbHGM2JNYMSayIg1iRHrWEasyYxYxzFiTWHEmsqINY0R63hGrOmMWGlGrBMYsU5kxMJjmW1er3/jp4Cpeb0pB+MZXu4qRWVgfogRdN1Q6tHXAzNCtAeew7qZEVBfED84/9g5vej/Qq9T9G+zK63Q6xT9e3mEVch1yq7prliLe52if6+AeC3udYr+PRxhLe51iv69GsIq5Drl+HRXrEKuU45EWIt7naJ/r+51xVrc6xT9ew2EtbjXKfr3mghrca9T9O+RCGtxr1P077UQFiyPY/uJObDWRliwfL7XKesgLNt1ysk5sNZFWLD8yQjrlBxYMYQFy5+CsE7NgeUjLFj+VIQ1MwdWPcKC5WcirNNyYMURFix/GsKalQMrgbBg+VkIa3YOrAaEBcvPRlinW7D0sU26KxYsfzrCOiMH1mYIC5Y/A2Gd6dnb2Oh1xYLlz0RYc3JgNSEsWH4OwjorB1YSYcHyZyGss3NgNSMsWP5shHVODqz1EBYsfw7CmpsDa32EBcvPRVjzcmBtgLBg+XkIa74FSx8d6a5YsPx8hHVuDqytEBYsfy7CWuDZ27ih1xULll+AsBbmwNoIYcHyCxHWeRYsfbSnu2LB8uchrPNz8NoY8YLlz0dYF+TAGoWwYPkLENaFObA2QViw/IUI66IcWJsiLFj+IoR1cQ6szRAWLH8xwrokB9bmCAuWvwRhXZoDawuEBctfirAus2Dpw+zm6k+UvwxhXZ6D15aIFyx/OcK6IgfWVggLlr8CYV2ZA2trhAXLX4mwrsqBtQ3CguWvQlhX58DaFmHB8lcjrGtyYG2HsGD5axDWtTmwtkdYsPy1COu6HFg7ICxY/jqEdX0OrB0RFix/PcK6IQfWTggLlr8BYd2YA2tnhAXL34iwbsqBtQvCguVvQlg358DaFWHB8jcjrFtyYO2GsGD5WxDWrTmwdkdYsPytCOu2HFh7ICxY/jaEdXsOrD0RFix/O8K6IwfWXggLlr8DYd2ZA2tvhAXL34mw7sqBtQ/CguVN2SoCqyTzv7nPdTc4z3dfKeGXoPpMO+A5WH8l4srLp/M+191ed71C/eD7XPcQXKuJNLzmeA9Rzz1EPRTWBEasiYxYkxixjmXEmsyIdRwj1hRGrKmMWNMYsY5nxJrOiJVmxDqBEetERqyTGLFOZsQ6hRHrVEasmYxYpzFizWLEms2IdToj1hmMWGcyYs1hxDqLEetsRqxzGLHmMmLNY8Saz4h1LiPWAkashYxY5zFinc+IdQEj1oWMWBcxYl3MiHUJI9aljFiXMWJdzoh1BSPWlYxYVzFiXc2IdQ0j1rWMWNcxYl3PiHUDI9aNjFg3MWLdzIh1CyPWrYxYtzFi3c6IdQcjFl5zzLVPbt/Mb9s+OVMOrjvhRzNLURmYH2IE7cMr9ej9dXeFaA88h3VzV0B9QfygbvbL/C5035/+vT/CKmTf3wEIC5bPd99fHcKi9v31J8rhfaLjLPXow7ZPdJylnrsKrOcuoh7qOcWx6a5pHV73tlJfhMHPPsIvwoxFaWOIduHnFKGP4OcUoQ3i5xShTeHnFKGN4OcUYZ/39DqfUzTP4xodjcmcr0BtM747KvN3rMCD+roi1iPst5KA/z2v+70JfWD7SIE8JUWqp0eR6sHtGctYD8TaPL3of8p/8es78vVfWH5cAJZ5tYE+zDO+0E/LUf4pGVvW2CujV21Qe9Q7wLkdLW01ZY2P4PFtVObvWGGHb/AnucGP28ZH2CYcU6Du8rEvWFclwuLWna1tkD+2Qzheh5lHTMwTq4JIc9GnEyztpsYQiivVjiDfhPXY3oI8ycIL5rfNn4wO4RyGUYf1Nh1Sc7DFeQuy0dtQlA9/WZmai2IsD/09FJ0r9exvQYZ9WhHA09SbK47D8ngeNg7xov439eBzuB6Ks6kHvs8CvpX2PPRuBmN38JU58Dkq/FZak3/ngZ2YF2Ywqee8gnylBNQHDQW/asnUF/SqpdEB/C4D4x5+o+Voos2DLJwNJnzfCORs3vuBOVyN5pGOxkhyHmnq6o/44v7BbaH6BNvdMYQegnSrDzhPgfMYmP/GPOcp0L7xPAVyMmWpa378NkaqHts4WUnUU+j8gKqH4oyv3fQB/fxu5OfGHqDNw7LmfQjlKP9GwM/vs/g53j+E5zQ49mE/N/UF+Tm2G5P/YYufU3Pm3dPBnA0m9HPIGfu5yf8E8nNH8xrSz01d1DiG/TzfcYyK41Q9fQqspw9Rj+vxsg+qZwJjPRALv4cpyF9fRf5q+pXyVzxuw/wVwF//iPwV2rutP/HYMYGoF/uM54Vbo7Q9m4xjlD5sY4fJ/6Zl7LBdA+jDdo1rWxOG+WAe27ppqaUOaE/wvJmzwjFtNMo7EeWdYMkbdD2nf5u3L7u95m5KGl+Aa7/mMGmTCc4mDT6TnUp35sNHKfobtknbymoh3uhMXRtODsDEOtXHuHTXvKbNPQjcSQgXxgCsL/O+Nez/P2Z8Qfv/f/rSeNhO9HFYBs/tdWVTM+5feOD+xfrBB9W/hrfu3z3z6F/Yh8ehNBiz8Tv+4BhpMLTue2YqjaovLY6/7Fmgv1D6xPcioD4NBtRnOcJYo6ozT++qrpxMHjxe6MP4j/FZo78yorw+8Nwvu+6RqVPr5/KhdP02f/M8Oi5APeB3jU72aC5Um03eVZE9Qh/js8eEb/pxCuIM657qqO4w8zVYfxXBx/CuJNLKCuDa4Dc11Tcm2hs6WhuTDQ2pEoRvuOJzeO2QeldHfyK/0fXxTnQdbzeuVpruxJ8G9KqPMpA2FaWVgzTDUfvQVUO78p/miH8Y/cP6q4n8W6Y78+XTl9VEPfharRCsCYuJNdDr6gPUWAjnNngshPMX+D7YLQLicphYZ2IbjvuwnTgObopiHRz/GG0oQc1Hcayb4qjusLHO1F/lBfdtJZFWSKxrb0j4iY7mhtb2jniqvamjxOs+JpQS53Cso+y2H5HfcayIUbEOx7MykDYFpcFYZzhSsc7NuBiPhdE/rL+ayI9jXdi+rCbqwbGuEKwJi4llYh2cB+F5Kox1eJ46iWgPjHX4umxrFJPcfNKBXiPEMRXy1Ucq3Zk2CegJ6xfjwHNw3gzL4DUbk39nMG/foYrmZ9qwE8GP2rsE27VrVXC+SUQ+fals5lGjU+N3O6RlbKp9t1Tb2NT4Uo+mh5uIm48vpzyUTx/4y2WHo7/x8k0HwjFDcNgvl5n/IRbVdRAbD717gkueW1EIG43qGpX5P1bgQV064qHWze21+tCXFab+Sq+7ybnY1kEtbUL94OHRzW2J+tgAr/stA30cmu6uG8zD2At16w7qD/tCmNuUHUQ91OcXSgL+N/Xgc7geirP52xZqg0LjRBAaR1d15sexJsyWrTC34uE5mL8FpcFbdCUWfLzccgSIF33REhKcUpl2ZD9OCtI4/VnzuAPwwHYLp2tBfkZ9LsTkt20l04e5pWHbWkTZFrQlYyNUP9t8ysWtf6qeqgLrqSLqce27VaieoFt1Jwb4ZNCtupEgHeb/fkAn5smoP4Ni16/tSnemFcln6vP1GSpO2Xwm16MbRofULdZD0l3TKHvHetVHa7orhw6CAzWeVhPlTb4w8xTIj6+P/NDzFFN/seYpo0Pq1ehnnBv9xGy2OY7QD94agPsOxm7o+9TlD3W7D44T+HLxkoyz27YU2HyHugX/6/Y/dFnkeh6EfQs+PrUWwDKfR3K97QPGS9wfjLafMO2eZGk3rl8LvA1EbbfF+fE1D8bHj0iZ8vDD75RtYXu8A8xJb6qiMT3PPifFOunp0eMlvu1t8t9GzCOpPoa3De9A4yrUJd5qNJHQw69b6UKM99RtfDzePwzG+/sQLyr+UPMqPIfPd15F1YOxwm4RNPkfBf2CP7ic67NoYbbGQ90aPpRugrZhGN/Qh4kz2HeC7BL6xh6o/Sb/M6D9F6Kvh0L/C9oOFPRIY6lnt68SJHjpTh+T0t3rp26LaBmV+TtW4IFjWRmoYzKhD3z75jXkb2b5tpRoK6XX44h64RKw0Uk5yv8a6MfnkB0bbn287n5G9Qnelo59YXy6a7rJ/zqIs39GY3XQlv63q+i6Kz3aDoP8BHKFfjg93TXd5H8T6OvFgGsDyIfiSvnobunOc/n66G6Iq8n/nsVHbbZEzenwVh7KRzHvEnQ+rF2Y/J8Cu/jEMoeDdvEt0jXeUqgPW3zAc4dRmb9jBR64L6GfUvES9+WXqF3Gf0uJtlJ9OpmoF97CxfFhMqqXig/wkT7DoxXUG2TH5QRnfWCfM/m/tvjcaKLNlB1QY6ztkQ74yDSVH7fF5P8x5LqfmQ+4XcPwyXU/6Dvl6a7tpj4TTM2tsJ68AD2ZuUu1lzsmw21c1PVSe7ozHeYfkLk//uuWuX5d22pbk3B0O7K5BNVndAPPwfqLtSaRb9+OI/ib9R8qP+Vj1JqHviTAa7jVAMvUCx8Nn4TOUesUeD0q6Nqmrl9X3tQaGLQ7cy2H69RHa5quE+LCOqm1axwn8/1UN3W72u26UlMTtf3JHHh7LrQzansufiQZbk+A1/X4oLbuQtt5JY+tu7A/DO9i3UvgXJeirq2rEed8H1WifNP1mlU1qmciUY/j1ySEjuOm/kqvewxwEcdtcxmoV9sYPcGSn3qlEPW6AxjHDSdoK/CxBA9hm3NUPMRz13zjISx/DEqj5ou57n2t14/mE7RmZD7jju9xnwPWwjZE4wG13mW7z7m4urHdJ4L1DCiwngFEPdQ1faExg+JMxUDcnnxjICxfrBg4ANUTZJ87Iftc3MeexwH73NVinza7sT1iiW033z4YHbKeYj0C/Ftrz2/ZRw5h8pEW4COHIR+h7oHaHrFdXD2Hree30J8TGeuhrgdz2c1xyG7guk8YuzH5twF2My2E3VC6CXo9E6y3WPZmw7LNLal7Y7a5KzXXpa6v8DWnwdCH20diwu9BMfVXIq68fDqvE6jPeB9L6K6v13mN3JIa59cnN0+1jZ189HjcGQaw2uuq5MkI0OT30N+4nCZVhvKMI+rQB3yHCTQkfHGLL0QwfhhOufLmSqec8NiAdnpeOCeE5YOcMOgdEvjZWZP/nEwgCvsOCWg8+bxDIiiAlBJtqPToQAJv2lADOOREtdnkP8/S5ok52rwlanPQO9rg3zgfdcOmt9fdBiAGpWP4zMvi2BMsX6zBfSCqJ2jQvQoNurneC9MG0mH+RjDoXosG3bDvhcHvfslXz1Q9rvWM3/810dKefN9tSb1L0tZPbSBP0A3BMgJTH/hhHJP/nkxfOn4fJPlcmamLesYKPixwH5MNrw5s+EFkw9QmesqGcT/la8Nh6wnylRJv8X2lWO2xYVH+UII4w/yiJ7R+KhYmBsH6xU9o3ynpquSwE1pczjahxXlxMDSGVOiEluIUlDffCS1cscIT2nzvhFF3B93ema/vthse7mSCzoRX3MaDNlATtaC7giUB+DhQwgeKKd3hHcom/xtgMjtr2KLfVF/VBPDzvHB9BcsX68mkGlSPi7sG+sBPFuSyjZGIV9Ak9kM0AaBeOgwnAPAiDuZ/vboT8xM0AQi7gzrMij22Rc8Ld6fH5gdh7RrrqIzA1EfQS4fLMk+xu30quiG25O5GN4QelPHLAqidnpVEWkEvemrq8GONjU3xjvqWZKqhEY9dhis+F+ZO9VAiv9sVvQT5oic48ddHGUibhNLKQRq8441ffuJmwpRoD6N/WH81kT/oCRYKSx89HGCZF5bYdhnju/H6gHEF70o3+XtlYkbYl2+PI9pjeyl0KfobxzIcq/QxKvN/rh7uyHF4SG+9CC54V7bJ2w/o5YxhXdtC7TQzsaPUUodHnCvxgnWH66AWBLdNd02bGIIbtWAHMYJ25WkM6qJ7WdSWfBdTliX4VHnBY0yYMYCqh+Kca/6yXP/OMtA/g+58TUt3psP8T4P5y/AMJvXEd9BFfYlHzx1wTIG7v6kFYRwHTP5VgL3n+mgCbCfmCDHDfjTB5F8TzV8c7WgjF7RMXcV6GwnGKvM6n0qA8XG7dFddmfz/zehK93Osf36Y2wdgHgAw43li7hCAuSPAbLTYfa3Xtb58nsjH5fGTvm6euu/8QNUYN/jZjxkdQugCtsnUb9vtHyZmwrqKtRufaputn+GHB7EvUViH5IlVQaS56FPbmxFg/VUWrlQ78LyCqqeW0InJf6iFF8xvfBjavilrdAg/6Miow3pbf8MPTJr6F+cDVSbDYJQPf6AK6n5MAJaH/h6MzpV69Aeqfn0LVGbeQI1LfQM4Gw65xiVYHtu/m5jZ1EA9PWIO6ukRyBEfpehvyFv39yEDO3FxPoiB7Tjoo79UzA3CoNY+c/m9PuDivfHTceOPGpvaeeyYiS3jU1tMTB05nrDf3qh92O7w2wXHoLz4TUMmDd+cPQT9fQT6+0iCDz6wTuBRReQLOnL5x8rg9+L4ByxvW1dcrsB6liPqsWGtTGDZ4vdyRP7fS/xeCeUz13aFxO+V0Lmg+I25wOsns4kG+hieO09H10Nu5iTN8Sqve0wzbTF1H+qo7hJUn+fR81JTfxXBx/CuJNIKWc+tT8Z9P6luBadiiVhLe8zmY/Ac9snDiPyrEvmNro/wnOiafJn1YUCv+igDaYeitHKQZjhS67lu4kZzKP3D+quJ/Hi9JGxfUlhbLiaWWc+Fsdf4tltfz3/+hZ8mtr1FCd63gGvP+KDmbaa9v35MJcS8zfbmA7fX5cXTIbRVfFA6NO3NV4fQ1rAO3fhy8XQIfRQflA5Ne7UOb8tDh9DW8Bo2jE34I85R0W8JSoP3obZId+bDRy4dnp6HDql18FKvu546CCx8HXIgwce080ivK3/Yf/rA97Vg+SMR1jE5sPBmaVg+zBNtEGs3hGXbvzAhB9YeCMv2pMzEHFi7ICzbG3gm5cCagLBsbz87NgfWRIQV9LY1LZNzYB2LsGB5/Da143JgTUZYsPxxCGtKDqzjEBYsPwVhTc2BNQVhUR8IodY64BynijhnfN3tx078vD8CRl0vuFjjpvROzQuN7qYRXKuJNDhuwzRYzzSiHgprNCPWeEaswxixjmTEOoYRaxwj1gRGrImMWJMYsY5lxJrMiHUcI9YURqwxjFhmHZlaBz0U1ZPvOigsH2YdlIqhfb3Oewa/rptv1nL0uAmHpzx0wHmrqQP+fURA/dVEec+CBcvY2mJ7a7KJ80FvTcZ7Okz+T8Gejr5ojcbNfd2mOPVQlzlMGh4fYBqct26R7ppGfT2mhKiHuiYx7dW66B/ijVjUvQVoE8NQG45A9eNz2NZheZOPqme5AutZjqjHhjWMwDL5qWsK270Fah+Z47evZ+8tUNd41HXJ4txbMHobivLhewvUtR7G8tDfQ9G5XPcWDJegB4DxvQWTvy5j2xUEV77+SMZtzy243aeeDH1vAX9kntrfWUmkFXJvoSNZH2uLd6RiDfHW1rZYu83H8n2TxIpEfrd76pLkvQW4DqaPMpA2AaWVgzT4lkt8b8FN3EjGwugf1k99nQOP22H7khPL3FuAsdf4tltfj+69BbgnIZ91cThe4pcQQB2OAL9hmuGDz+F+H0FwrSLKlQT8b+rB53A9FGfq+TW4/3nV6s4y0K7g/mdYdmq6Mx3mvxPsf17DsmcDX6NjW4W2oQ/sJ/BLaWHGQ5N/nQwnav8z9WzF1HQwZ1NH2Oe3TP44GpPdjIv0/mdTV7Hetui2jU2N1PMD5qDiDd5DC9cY8N4DuGZwGEqDawB4XQ9f08M0uCZ6BEqj1tZM2vEgDT+TOh2kQRvFBxUz4UtZVqrpxMX5PFQn9XZ4fE0I9UvtQ1oJ/IZphis+h+0Nlh8TUA7HEcd7nnzHPp3dV0w9swXbhOe61Dp9mPEF1lWsdXSqbba9GnCdAa8jU1jj88SqINJc9OlhlnZTMYHiSrUDrwtSfrYSoROTf4KFF8xPvWyo2OsBlA651gOM3kaifHivOLTB8QFYHvp7JDoXtB5AxdHRATxNvbniaNhnTOB8sa2arjPs8/4m/wVgvtgBfuM1OYiVQrpIgbSxmd+O91f51HqHh3Q3FtSNr4HGEe0JO2bDPVRTF3MPFeQGMWH/HQ3yBK09jwfz6YqhNGaJR19D4Dm9sYmwzzSa/Mda5vQmT1lAuw4JwDwT2OKUAFv3CEyqXYeidmEOYxAHk386aFdfsGCI4y+0IX2MS3fldhhRlxdwDo85hwWk2erNVVb/Pgr8xmnYVrC+tJj7U0E6xbZi8s+02Ar1LIdtTynmgPMcGsDhdIKDHo/6ZNLbjjp6csDtrDLwG4dnqitxF4wmcIIOowbdvDOraRzzt838qO2vsOyhARxhWfiOq/bU4anxQff7eiCwjoDKenj04fa5qMZmag++Oah9hHjcgL6cQmmHgzQYe/FBjSnweaqw980m9Fr0u1hzkjBzDX20pTvTYf7LgN/hr5iOATwoTPjFQuxYtrURkz/X9Zqp3+iSmvfb6qb2NZr8E/LkSt1rgHPowxBX20syc3Hdsshcx+TJldrHAGO1CkZjJqbG7njU+BR0D0zDQ78r0DmcB29zPTSAal+UDy8j41eM4PEBP+Z3OMGPOjBnikupl/vA7yu+DbjoigEu6nn27RTUNmM4tWxDlxbULRSbOYZ5LQf1sXh94NeGmPz3WUJT2A/NmfzUdlm4BIqXgKEb4Nc+wdt8cElXH2UgjfFSvp36iCPUQXk6fHsp/VBbgKnXM1aj/FBX1K0WvAwKhzD4rtxVkf3ZPk5Ltc22hQi+B7yUwBid7kyH+V+w2B+1zZl636zJT21lhsvleEkY6teUpewPPlKhjzKQxmh/Kcr+oA6w/dnaS+mH2iYMbxngj4jCWwaTURq0F1MnFf/gB17Nq46o27glAf8brvic7db2Tumu9bj6uIm5zYbjJTWV07/NUpuZ6kPdc95+w/4DlyCmEHzwx8o/QssO04B+qLg+0uuafypRL7zF1IHqnYrqhR9BxkvO+oDLgZ8grscBbLzsbmtz2YBOzM9QnKSmmfjVmP8C3M8aFlwej4FwroZfARD0qjWof9hOaJs43pr8XwGeczM8qZgHl8/1UQbSGG21I98xlxoTbGNurjEBj6vQP/DlD3UpBXUedPnTk8gP8fBc9Bdi+Y26PJ2EuB+TJ/ewc9jxoB34dbu2/qB4TAFYVH7ovzB/74x/Qp1gTOgLsI8nB2D2AZgr54nZFoDZD2Di+Qw1/lLvVcdxF+aHY7LhQz1ONQ2lQe543J0K6sd521H91ONfHlGvZ+GLx+xcfHHMNWmrgJi9TOZ3hdd9vHFxy5Tqy1WI9oTty/GW9mMsOL5ie6V8aCqhr+EDaMzyPDFXAvZuxj1qrjQ23Vn3KqhuKobAeIVj03iCF5wLUNc3+Dag4TaS8Ncldg3gp2LUeAj1iMdD6jrN9h2NXNeg+BoA5j863TXN9q0Qanks7HgDXzF6X4hvsZg6besV+vcglN+0G8Z4aDMHg3SYf31LjKf0S237sNk+vC7Frw2FfQWvu34tn+5Mg69Z0EcZSHNtr7b5G6WfSQXoB9srdb1P2St+XJDLXq9C9krFIKovsf+E9VOsp54B+fEcyOTfKcS8CnKwPSoQdn2BGuOmenTd0DehTsx3CvH8a48oxfOY71P+AfWK/cOmQ33kO0fE6zbU46SUf0xBadRabZi4qw+b75iy8COwtg+25uuvmCN1vUzFepO/wxLrqbHXFutz+TR+BADGDlN2yV2r07YMdRAm1tuudwqJ9fhamNoKnCt2H2Kxv6D1F8h1tKVtue6N4NgY9t7Ikuz7Yt4bCZqXYl1BnUAsKjZQ6yZ4vrW48019mDEK6yRovonXJk3+k/Ocb9rsUPR8czHsMGrzTSoGwXXCnSwxCG9toezPNj/jiEGlBC84FlOPgepjVOb/WIGH7Z6O4++UNpSg+ow+4DlYfyWhR0Y+vq1fqTUAt59ziiV0mKLuxx2a7q6boLiDY7i5l6aPPQAO3p5GfWpO+9PlaK2JmgfCsqYOPA+8FqydXYUwqcfVws5/4eOE64W4drT1uW2+MhnUQ+WHYxPMf5Pl+pCKlba1p1z3YvDn86j787huar8BNZaa/HdE6vqw3l/S9/zxmGW7doQ2iF9FRI1F0C+wD1BzLuiv1PVFScD/pk58Dt+7D3rEG7YV3ruHtmziQhTu3UM+2L6fQ7GJunc/mcDB9hJ07x7fi5mK6qXu3cM9OzA2vxBwHwD69LgQbX4bxOaXM7/DfLoTxhe8pkHN1aE94PUnk/8PIeOL4RW1a/aw334OG9Nt99fxq9FyfRMcX7fB+TC+xqeu27R93F2Vm/9koiz2j54B+eG6Jcz/nmUchffeqBi9VgDmx8DuP0RxE/ajuW+j830xgKfuTy3XpNSapG0r9fFEfupVdf297mOUKYvbjfvqCxQXqDEQ66TSo2PvpHRXrtR90hKQHuRXU4k2Yh329Oz3/stR/q8JO6sm2onH71x7LfH4Tc0FYEy3xV9Tp+3TkPrAdkLNMajXvVDXzvjTscWPxfX1+d7btbWX0k/Y63vKHvBrPalYbFtDo16TT13vwFh8YqYz8D35PplH06h9OdQ+d2rNrdvnVgFmmHV8mx2GXauk1lEmW8pR6yiwrlGZ/3N/mDbcZ2uN3/YiuATdLxwE9Gg+W0utK3TlW9hhuxao8Oi4y1N3fejPgZv6KwlduljzCTtPc3u94nfANR9ov3DNJ+iV4fCeFo538DphOHpclooBMM6tCdJh/lUHdmKuFIDpeYXd/3+1b1dc7ntgtvsTeD8gNY+17Qc0HHLtfTwYpMP864DYYNtbbHi53ZvSscTvveP767ZXX1P2B20h6Hmbnp79uguv5zWDPsLzQ9v9/wl5cqc+S4/9HPuO8XNq/jY+RJ2F3P8fBNJh/s2KOG9Yev+/e/7Fvf8P7SXs/f+7M7Gbem4jzOdPqPVO25gF7XswSIf597DYX1SezzR6cmx/9Ut6D4Lp3zDPZ9ru/VKvrdb2d17G/lzqsSkZy85pTR/C107Cowykw/yjMzZZCdph/i/olcVNLX5HvKWjpaGlvT3R1oJfI6kP02f6MXhtD60DO3Vm9MStM30Y/HI3+NnnCuD7UUqJNpn6jS3h145Q/3sefc1i6qpEWMxt821tg/zx/ZoyxMf8DsIqyxOrIiBtFE+7s31aamk3rj8oP+UD5nxPCz7Mb+I6tOGeSBe93Oii3tZvPUGdpv7FeU2e+XsYyodfmw/1XR6A5aG/h6FzpR79mjwcl6q87u02ZRzHlPqwccDUX+k59YdsHChHfIJ8F77u5PCjWtozb17CIQ93HVQnhMPNxl2XHRbROWwO+A1OZqpHDaGYZwmBQakAfyGwhKifCiWlAfV6Xqe54vCRC8v8LrVwCcIoQRhVFoylrrPUdYhjqeuEcx3u2Xh9MtnYXN8aSzS1t3W0J+K5ZuPc9be1NrYmUq1tjX6iMZ6ItedzNYBnG/Cqu5TQXznKf7XlDlQPC6Y+8JuWTP7rLFfy1KyIameYMAD59Pe62xW+giiWPTW1JFub25oTLYnGWFusqXFx+pNqN9S9+cCoyW9mlj09+9VUOcp/N7FKijHhVfO0dHdMzBn2D5yx4481mPz3Aw7ngtV0rAc8JMLZNOMQ1FaC6vM8ekg09Vd6TodoH/eH4YP1g++EObrCaS1B+JBPL0I/pi97E2kGy6wEwVgD8/cCbYT54W9THp57NmNb1QhTH+btSSVEWilxzuhXc38cTd1g35QE/G9w8Tl8BQ91g2MYjJ/wzuFLAfED6hOWNfED++I74M7h/6G7FJTt47he4uWeJ8D6guIVHq9M/j+BWIFfLozHK9hOzBHWV0bUqw8cr0z+v6KVOEd+T35cxtRFjXclHq0Pzwu3CkWNj1VEPUZffTz7SostTthWvIzP9QzIb/DKUf4PLGNZb1CmlOCF5zIm/8eWuUwF0S7Kr835SiJ/BdGu/l73+GfKUncljO4dv8GqjborAXVYns6tn14F6MfYQDXKD3VFxdBeqJ5cl5b4Li61igZjLpy/9Sfqx+2k/KEn0U6bP1Dtw7b7Q55zO/ghrl4BHMLO7Uz+XwCH8yxzOziWldTYueJ4A699YP7eNZ2YZZnfpn+oVVAqDpaiNNiXRkcwDvYkcCl/xjZB+QrMj+faxvZ7BuSH8ymYv19GD5RNVIIy1PwSzxlM/gEAE8fIPl73dsHrGKyHvkT+Pl53PfT3useAvh5dN2wP1DP+wJ7JP5hoDxV34R0FfZSBNMa4S76tF+oVx12bDvWBdV5F5Ie6NO2rRvmh/inf6YPSYL29EYdc1zY4JlPzDRg7qOVVqAPDs4JoL1/ftfklqD7TPngO1l/pdbd5F9eSYW3E6KfKjX5iNhusIvRj+PRzwieW/chyNVG34ZrZ+N8lrsD8VUCHMD/8bcrDc0nwcUB9vj8oZ/CrUZo+8HUsTCslzvVYQljVBBbUm+lT7cdrI13gN99T/xtcfA5zhP1pbN4WIxa3Hohl5jeUP2kZlfk7VtARrzft6Ee0w9QN7YrPdxqawsY6U3+l59SXfZsNQ/3ga91qgmu1192GT0x35stl37AeCmthRLFmM2Kdw4g1nxGLU19zGLHmMmKdwYg1nRGLs43zGLE4eZ3GiMXpj5z9OIsRi9OHFjBicfYjp62ez4jFaV/nMmJdyIjFafdRjTmcbbyIESvNiHUxIxanvjjnJpz2FdV5IafdR3UuN5MR62xGrN/DXC6qds85N1k6puWHFdW5XFRjIedcjjMWcvYjp76iOv86gRErqvOv0xmxOH2b04c49cU5DnH6UFR1zxm/ONfloro2xGlfnHNfTvv6rY8d+je+Z8UxdlD3euEexQqCB+f9XoM/0BG+0dUAi65g/fjer0mn/jdYOM3UVYmwmNvm29pmu0cM74dDHQRhDcgTq4JIc9Gn1ZZ2w/qrLFypdlQx6qScEQvvbaP2bFD3VU3+gUR+yk76E3WbsqZva0AaY9/W2/oWxghT/+I8vW30tifKt1u6Uw/YNwYEYHno7z3RuVKAB4/+Xndb6x3A09SLz2FbgeWrEA/zt9nzAvfAmn0i1N4eLaMyf8cKOhrrbbHV7TjTGA8bu039xYrdthimD7w3IkwM08eMdGe+QuKOPi5gxJrPiDWbEes0RqyFjFicbZzFiDWdEYvTJmYyYnHaxFmMWL8Hm5jLiDWPESuqvs2pe059nc6IxdnGsxmxOPuR0+7PYMTitPszGbE4beIiRixOm1g6//ptxGjOsfZURqzfQyy8mBGLK+bo3/hauxBe56X5sDh9iDNGc45pUZ0XRnVMi+q1FafuOX2IU1+cMXrp2CF/7NAH57UVZyw8lxFr6ZrCkvMhTt1ztvFCRqz5jFhR1f0cRqyorhdyznOWxoklN59YGieWnO6jGifCzL/gewLxe3mp+/gGa2AOrC0RFiw/EGHV5MDaDWFR+xlMudqAeuA7L+AejFqibgrfYFD7OLSMyvwdK+hoaqkg2sGHX99u7ofXgXaXZP43dQ8C5/nu3SdCv5/U1F+JuPLy6dxLMAjxwfrBewkGE1yrUZo+Tkl35sNppcS5HhaseYxYCxmxZjNiTWfEOpMRayYj1gJGLE59cbaRixcVZ6Niq+cyYnH6NqdNzGXEWhq/lsYvl23k1P1pjFicdn8eIxanb0fVHzljdFTHWs5+nMWI9XsYh34PbeTkxRlXozhu69/4uj0q9sWprwsYseYwYnHOTaI6pi31xyXXxqiO21EdOzh9iDNG471jv0W7n8+IFdW1jvMZsVzEaPxcoD5GZf6PFXTEE2YtGt47KfG61gvnIozr5qkSVJ/RETwH669EXJn5ZNfxqXs5UD89kH7c3OeItZcgfMhnEKEf6r4CnkcOyfwN72PB/INAG2F++NuUh+dOz9zo4IyT+nnrUzK4efhAfVuHH29INTXEGlsSDe2N8fr2+qZYe6Khw/eTfn1zIhmPd7Qlku3J+nhHfVN9W5XXvd+xDzjq40RYH8D3shz5pPVeVi3RR/neyxqX7swXpfHXfL8nzPvj3dhCvHVxbcH1++MpW7C9Pz6sLZyc7sxXaP9xzqk5ryXPZsTinFtEdY2Oc64f1TW6qN4XOIcRi/O6gfN+xe/hnl8U78Hr4/ewvrD0PnB+WL+H+8CnM2Jx2n1U72sujRNLTvecbbyQEYtzPhFV3V/EiLXUh/LDOpURa6kPLTndc167c14jm2co8BqSPkZl/o8VdtRXEPUyYScM9hB+7Ow7aJcpHLsdnzDYy/Lz7jDYQ9mx4w1mLQ1+Ex5+I3yZjAEZ28x8WrzLuj78NnQPkA7zTx7UiTks87sK4HoAQx8VCK/E41xzrI+VoPo8j14DNfVXIq68fDrXQHsgPlg/eA20lOBajdL0cVK6Mx9OKyXO2bDmMGItYMQ6jRFrHiPW+YxYsxmxzo0or1mMWNMZsWZGlNdCRixOu+fkxan7sxmxOPuRU/enM2JxtvEiRqw0I9bFjFic+prLiBVV3+YcO8x8wjx7DeeP5nv0/b3uc6c+qL4ykAbxzby0J0oflfk7VtjhG/zebvCz31ToRegYtsnUb+aZ5SB/ScD/BgunmboqERa37mxtg/yx/fQCfPC3FyisXnliVRBpLvq0p6XdsP4qC1eqHWVIJ2VEPSWETsz53hZeMH9/om5T1uiwAqQx6rDepkPoi6b+xfkehdHbCiifeY9FD6+7DfYKwPLQ3yugc6UADx74mhvGyCqve8w09er4aPpnOZCOv2WxHKirlDiH/QWWXy4Ai1pr0EdbujMd5p+eWV/Q2MsP7Yq5PMHPZrsrEPmXB3kMH0o3pmwVUXc+MRTyqiY4lBapnrIi1dO7SPVUFKmenkWqB8f3FRjrWQHkKUf1DGesZzjI0xfVsyJjPSuCPHjuNwKkwXhjeKxE8DDj08rgPOP4FHr/rqm/EnFl5pOda62M+GD94LFlFYJrNZEG977CNFjPKkQ9FFYpI5axjf5ed1tZCdUzgqhnhKWelYh6jF2thtozKvN3rKCjPmn6ZXWv+2HS1gDnLkl38sBHKfob8tYx/cJhnbg4H64T6nUNlAZ9bE2UBvtqJEpbFaStlfnd3+uuX1g3TDNtxOdwP8Lyq1nqWbnAelYm6qkiyhUaKynd4H7iqAfqbWVUz8qM9UC9rYLqWYWxHmiLq6J6hoFy8H7b8+h+mykH58Cw7G7pznSY/7tlOzFfymCaWLIG4MUYS1pM29b0uh8mbSSoG9vsWiAN29naIA3bxjogDeocH1R8MrrQ8emhPOLT6iDNtMn0gSn/Frjn+Qa65wn7ED8TAsfPnVDaqkSaxj9nmU4+UA96zm7spgKUxXZj8n+DbMXNuNPYRI0teC61pqO6w/gzNbZAPoZ3JZFWVgDXjrZkLB5rbGxPNSZaGxIdJV53nyolzuHr1pFEfup7g0bXa7nRdb3xhdJ0Jz4cl/VRBtLWRGnlIM1w1L561dCu/Ec64h9G/7D+aiL/bqAN+fSlSywYDziwei0m1kCv+5hkYo7juW8zFYPMQfl8NUqDNjcApUF/wt+chmMZXOvDR6759J/zGK/guLhmAKYZC+C1gBljylHeXpnNX5p/2eCudcE54Z7prmlw7mXq0RjLD+48D+uBa81mnNTH2ABeQzM4buc6iXZqroPHr5GO6g47fuHrH8jH8K4k0goZv1r9jngq1tqaqG9tb2hsbLSNR/AcHr/WIvJT77g1ul7bja5bqfFrLaBXfZSBNDy2wfHLcKTGLzfjb6I1jP5h/dVE/mNAG/LpSxPbqXkTFSuOTndNg9d8cK67PPJxN/PE+lbsN/Cg4jweH6BN4vEBXrPg8WFdkJbv+GB0ke/4AOMkbBPELAPnqBhfjvKvDcaIkWiMgGO6qVvnuwrlG0nwdusz4ddaTf1UDHWx1krFRMrvKPvD/g3TBoPfMA3WszZRD4VVzohl7KK/191GR6J61iDqWcNSz0iiHmNX0P/4+jEeM/0S87ofJs0H5/JdazW8811rhXr1URr0sXqUBvsqjtJgfEtkfvf3uusX1g3TTBvxOdyPsPy6lnrWKrCetYh6qohyJQH/m3rwOVwPpRvbWsni1kPFe9znHPVAva2N6lmbsR5oi+ugeuAcHa617oOuOUw5uNZKXXuXo/z/AGut+6O5CfSDJRVLKJutB2nYzuIgDdtGAqRBneODik9GF/mutcJYDdsEuYedm5j8h6J+cjSXiA1E7aJ0alsDjdocx831tH2OQ43j+c5x4PvFcOzJd16yMiOWse3+nhc4LylBabCekZZ6qPnS73WOQ8WQYs1x8Fw137kHLP9bm+MErVFx1EOtb/ze5jjnMs1x3gBznPOKsv7CO8fBduZqjgPXXx5iugbLtVZSguoOmgvtnV70P16nuR6s01w7OJjXaqDuEUO65lu6TvP7Xaex7XHCY1++e5yo/SK/1zkM1Gux5zCwbphm2phrbgHL/9bmMMXae/d7ncP8mWkO8xyYw7whcJ0G25mkdRp4Pz/M3MTk/zhC6zQjiPa73aMSfo5j6q9EXF3NcahxnNrbTo1PpiwVe/A6DTWXWouoh8JamRELr9NA7BGoHuqZiJUt9VD7nt3ua6hP4fEfHtR4me8cB+51yGeOA/WKYyH0sRhKy3d9p7/XXb+FruvB8mtb6lmtwHpWI+pxPVYXaz9+seZSS2rdKWiOUzOkswwsF3aOY/LfB+Y4gzKYjvfJ5BVLKJuNgTRsZ3AegW2DWt8JG58Wd50Gxmocn+BaiclHrZVQvuN4HhH6Gzh4HuHoeUbrPIIaK/t6nc+6jk6N33lC6+Fj2rZLTR63yZHtO7eMHT+m5fBN2tvHpsaNg63BVoNbi60F5zG/q4nzEGPNHK0wT/hTKyRrIqyRObC2RFjULnQcRYKwdkNYVOTCIxLlbXg2BfNDPmvn4LNHOpjP2ghrnRxYuyAs6srTYK2bA2sCwoLl10XlYgH1wDwwGsaIuil8bLd+Ds4T0105Q1746qw+B9axCAuWr0dY8RxYkxEWLB9H5RIB9cA88Co4AeopIc5RfI5LB/NJIKyGHFhTEBYs34CwGnNgTUVYsHwjKtcUUA/M0wjON4F6SohzFJ9p6WA+pmyYEQ5yZRxRQu+KN/UXa4TLpVd8pZwkuFYTafgqIknUkyTqobDWZMRaixFrJCPW2oxY6zJixRixfEasOCNWPSNWghHLxETqTkQNqiffOxGwfLHuRNSgeuCKHLzaPBpdbRobhFebsKwZi8pR/mvA1ea4DCa1Qma744NXXfLVM1WPGWugDTOu6jca/cIx3BwmDY5zy4Df+KCuTg3vfFfPoF7xmAzjTBKlwbjRjNKg766X+d3f665fHBOpeSA8Z7PjuKWeWIH1xIh6qohyhfolpRvX/o9XRWOM9VDXD9h+OOqhri1yxbP5KJ6ZckHxzMxly1H+BSCeLUSrZ9APlmQswTZLzUtMWjNIw7axHkiDOscHFZ+MLvJdPYOxGscnyicqvO62tyTurpn6K73uPufimoFaE6DGQCp+m7KUPy0LfmO/LSXO2XxzZUYscy1pmzuUoDRYj+3uGjXXcDw/SOC78PCoQm3WR7531xZ3fgD12oDSoI81ojTYV9hvYVw0sYgat7G95Dtuw/K/tflBse6u/V7nBy/nOT/Ad9dM/lPB/OBVND+A62FRnR9gO3M1PzC6yHd+AK/tmwA+ti+YD/YhZeseca6EwME+5wfUr48x6UX/U2vrtagOaiyH57B91xJ8bf7qdixb9HZxWJ9pBzwH668kdOJijhQPqVfKtuJI55QdYBuB9SSIeigsHAdt6+K+G32FnuOa+ou1Lk7NF2sJvRbDvoP6OWbh4ybed76JPtf9IcNHv1mkp9fdhqj7Ypg3vI9kzgX1je1+tu3eYq77gfh+dlAbgvrIdj+b0kE5ShucWZzTOvxpSNc85j5sf5DnF7SbA/YT9mlH97pC+zS+19Xoho/1XhfUD7TZXp7ddmDfBe0DWIdoK7bltXNwwrac754DiIVt2bbnIJYDC9syLI/nBTBW451t1E5wfA0K8X/djbZMMH7Mgu9b8OMWfGoHLLWmnUBp8NqzAeAPteCPtOCvbcFfh8DHmCZuVIO0ESjN5F0+g6HnyPOWo/kaDH24fatc+Jhi6i/WTnNqP5Rtpzm1T8n21JotTth24UKsNRmxzP1ztzvA43FqTcMc1PpVsXaAw37B/g71jNevoF/g9Su4J8GME8XamU3VU6i9rEnUU0WUKwn439SDz4V5yhP3E0c91H5I3Occ9VB7JbH9cNRj2wEO56twjWor9AZvagc4NdfFO8AngTWqbTOYbp+e4t0Bju0MzgmxbRSyAxy+TfqhAp9Q0buTzdPZo1Pjt0tN3rPl8DHtLePHHHXkrqljJqTGjS9DsNh9sJmPDKALcTwLXX30QGkro3TzUs0eHn2EWbZwMzyFn46Y+ou1bJFrCzOejqxDcK0m0oaC39iVSolzPSxYazBi4Q+lQGy8VJbvSxhXJjgvfQnj0pcwBtWz9CWMi1dPFB7uD7o1dwKa9sCX0Ye5NWfyjwbTnhlo2uNmTJD5Ekaji0IefMPxCX7MxryY36StBMrhjy3BD3LBB+bMx2yo7SDmIbD+6G/923yksBzxug7ZA/yYIaM9ZD8KQH1Eyu0DfvHQjz8EXcZB3pVEWiEfBahPtbY1trR0xNs6Ym0tHSns64YrPtcD1I9jr8nfj8jv+MVkLcZf4EcBoP/qowyk4UcQy0EafBAVfxTAzcs24y1h9A/rryby7wjakE9fUpf8i/shPPOBAfhxE/zRXRibsC+6iQPhr11M/ZWIKzOf7LUL9THjYYReqUtdU5aau+MXk+W7RY+K7xxYZuyhxophqB7qw9DLW+oZRnCO0geL9FGsj3VCveIlGuhjeMkN9hWe40CfxkupUL/YXvKNQ7C87UV2KxRYzwpEPa6XUpdH9bj68DSOua4+PL2kPgoadO3yp4CPLoa9djH59wLXLq+juSr+kPGozN+xgo78P36GbRYut2I7g9eb2Dbg9QrUOT6o+GR0Uci1C45PlE9EdX6wvBs+1vkBNQbmOz8YAn5jv813TF+dEcvYRX+ve3/jcYXSzQqWeqj4+HudH0C9Yv+zbc3gmB+4GLepekYUWM8Ioh7X84NijdsjUD0jGOuxbR0q1vwg6GPe/ZbtLBM0P7B9zNvk3wrMDwZkfptY4mZM4J0fYDvL90PfYeOT0UW+8wN4LbdmAGY5kXc5lGbyLg/6a/PM7/5E+eFe17TlQNqKKI26dqXGLYgB64A2B/28Ld21DSb/KhneWpdzh9GYPQIwjR1T62TwWlkfZSCNz37bfM37jqGdPKBOf21vumubYEwqJfLjtUhq3gFj0fDM7zBzGGrtYTg4Z9baKH0ajktCn8MBxzD6hPnz1afRkW2dp8Tr3m/UPNamz+GZc0tCn5BjGH1Sc/MSpBOYH+rT6Kja667DVRHWcAIL+jteCzbYPYn8OCbB/JuAmNN3aFd+1HqbSVuOwIaxtwRhwHZUEu2oQmmwrMZdZlBXXOq+hK1vqNcFrkHUZeI79fFut/cI6luo6wVzUGM8Hv/DrgHg8R/uWbBtBYc6wQc1NzB60ra1AGy3xvngb1iPwcV2hG1mGMGRmguukQM3X5vB17LSbQavKUGbwfYkwWZg/MY2M4LgSK0v5nrNKLYZaus8nLNjm6FekCzpI0+F7qEwafCxFagTfFA2A+/n5mMzuV6ob7MZ+GEmvJ9mnRy42GaoPVmUfxmbofZkuf2oRn1HFcHVHNieqP4N+1JpvFZFPZJG2RPUCT4om4Ef3MjHZnK93hfbDLWeRm09px6zpPblmfzUa1GhPnCcoR7bqiDKMcaZhiqCqzlMGnw8Eu+lhI9y4jGGep2jSYOvWMD7puArFvDrbeFB2YzRU742Q73qN2ycMWWpV2rkejQX2wz1eHNYmzFlHdtMpF7NZdLWB2nSbGY+ekUkjNH4NU9+yDpN/lyPmWP7o+wVxneb/eFXkJpycI0N8sevmzP5bwHXu8uDtYBfOaU76zB6crsmEUtRaxJQr+Xpru226VAf+fq80Vm11z0e16M06nWRtr2q1GtPuedGZr7wW5kb4XEu7MfIojo3gtdPOGatSXCkPsxCPbZPfdzTFseg/rHNQLswZd2+BjHuVxFczUH1PR7LYN9ju6D6nrrOwnYIfR9/RgEelM0YPeVrM1Q8CGsz8PUA+IOFlM1Qz0X9Xm0mTLz4rdvMuSFsZmmc6UzDaz2/R5vZB9nM6gTuSuBcmOcp4L1JfB8C3hfCz2vCclHdh4DvNVAfi6TWm/F+D2gnUCf4oGzG6Clfm1kV4cL+0YftPoQpq23m+cy9q0pUl/6/oGd82ttTfsJvak6mEon25gb8QVV9GPvr46D+RENLU1tLk+83J/xUws9Zv9Z/68Cu+iwDZWDfVRHnDK6x/3JUdtRitgOrtQTV53n0XlFTfyXiyswnu1e0HPHB+sF7RXsSXKuJNNMH/b3gPilBaZBDGcGhmihfFgKLak/fjOhj3PijxqY2azl63ITDUx46sK1gn+4RUH8JUd6zYMEyLvyqraGxtU05Vyzl/2qPxfbrhvbWZKypvqW5va2xPd7QVuz6U62J5qbW5raGWHus2W+O5xNXqrzutlUS8L8+Si3Y1QTWuPSi/00Mgn7EGYMMfi/Ejwk/Oy8sJ/Rk6u7tpG0dHWHjq6m/0nMa77PxtTfig/WDn3WtcKOflH5Vo7E9GLN6ErrBPHohjpWOOFJrpoaTSSsDaYaHzvPqcl059nDE0a2PdrRTcxS4F3mDoZ31wr6Ba9bQ7nuAdJh/k6GdmBtnfvf3uo5LME71Aem9iHTzt+mvHkRe+Bv/bbhjvcL8xiZ7BrS1J2qryb9Vpn2/Pu8wkMaE+oO8egRgbgswl0d9Avei2Xze5O9D5Ic+Zvj097r7Zh9UDnKv8Loe8BzVPyUoLx6DzTgFywX9XUHgBHHoTeDgcRJj4jqpuR6+liol6oE+Bcf8CqJ+xvGhgRorzUHNtUtQGmz74enOfPigrl1Nm3R7V0P3q2A+zIfyNc65kTlfDs7jevF8vCfKC8dzrLNyBo7VRD09EW4vC/8ShFNGlKvyaH+k/g/Lt4Tga7seXtx6INYR6a71wH7u8hlDFD9hHC8lyh6f7kyH+SeAMW1cyDENxxLYhiPTnedwzMbzWOyT+L42HrtwHjiOw/zHEWMXjg8QS5+bGmKOQM378BzhQqDP6Uif1Bygv9ddN9iGK1BdcH5sxhesg1MBjxlDg+syeq2ytFGfO20onQ9ygPkwBjV2GgzKr025/gQv7Hs4dvS01EGNZ1Qd5Sit0P6hxm0416DmMFQ6HM9hPfhcDyJ/rvlHZQA2hduTwKHifG+UVkKk4RgG2wtjGJ6bUNdkMDZSfhfUd7a5N8U9zLyqp4U7pT8Yh7jXcmLJmB9ra2ro6PDbG1taE7nWcsz5Xumu7fr1f3CuHLRLH71hfpRWAdLK0l3rr8z8XQbqgViGRznKfwvoa330BGVM+Wqi/p6o/i68iXPQ1jBWKXHO5Nd9em2Go4s1uvqG5mRLc2vMr++or48nG3P1K6UnuHagD6Nr2Bc9ibaVo/z3gDHnPjRHLifq0/meteQrCfj/VwziXFm66zmqj6Dtmvym7sp0d44mrQ9IK0f19M38DfUFsQyPcpT/KWS70N5M+Wqi/t6o/i68iXPYdvsQ+fsQ+XX/PIziEWw799rfr3UifHgOc3vWoV81Jhr9ZLIl2dbY1tGcaGst9tp7W3NjR3M83urHm9tTzX5jVNbe4Tjo+hrRpFHzsxL0m5o79LTUA8ubfNRaP6ONJ0y9vQFPPM+h5itwjlLqdZ879QrQRUkAftDcpSxAd+a6E1/rVGdutOu876LrJ1sb9bFHmm4j9HuYB/e98beeAZz3QJxN/g8t65rUNTScB++OME3+T/Jc16Ts35zPta5puy7C65p9QBrucwob5i8NwKlEOLidZh6tj0np7tjGx6oQzqjM37ECD4Nn7lOXgTqqiLaWo/xfo/7rj3Rq05mWfkS9BgPqpBzl/xrY0HOIg+HWx6PXInCf4DV9bFfj013TTf4fwfzte3S9D69v4DpUj2F03ZWAa18L1z4EV+gz09Nd07PtyNSr9fViAFfIB3Kl7pkZm3X7nIFPvvsAxq1yxImKH9S4lm/8qPa626/tPgKOv7ZrddsY0zMgP7ZZk78f6Gf8XgRqPVn/b8Yl27pOCfobxjtqHKHWHMpBnbXDaNyg9djR6a7tNfmngDF1cACmmQfo49h0Z57sdajX3Q8Y5zExbANw3kCtCeM4swJql7EV2AflBI7J35uoF66VGZ2Uo/wrAFsyMZa6Jwrns9S9a49Rl2H2fzjqx+YSVJ/RBzwH6y/W/g9qLc22/8PN/phYEu7/gGvOh6a76wbzwPeLgu7jrIl8AfoMFTe2THemw/xxEDfWRvEPxix83wH7FsWlxOvuJ55nv6bC9xVgGl5nhPl7ePbrBSqm42tTbD/6MPEW6wP2G7UfRB9B8aQZxBM876fW7m37Gahxnromou5H4DkVVTd1jx/XHbRHBN/fMPlHEWMzxiz3wsVok38zi06puY1Np32J/NQ1UX+vux77IqxcOjV+ibmG1anJv61Fp3CuHEanJv8OFp1SOrLptIrI35doV3+vu77xNV8unZp36WGuYXVq8u9u0SkVb206Nfn3WoI6hW2uQuWo+4MwfsPzlR7dZnONSmFWBmBS8Stob2RQX1IxDfdli6UvqXZVhmxXH6Z29cmzXSb/aEftKg1oV2me7arM0S481zf5jwjRLmofoT7wepvJfzThe9Q1PVzX1UdZuivfUZnzsYIO+poerhuWp7u2m4p7MH++cwN83Y59FKZReyxsNhH2/nv2Xo3XOac18QpeL+C5Wq59S0FrrtND2oCpO2rrOrn2CwTNUWF+as9tNZH/GFQ39fwS1c+2daCw6yHsz6Qk4q0dfkdzU2u8IxZP+kV/JqclVp9K+K2tDX6qpbm5o+jP5Pi+39GYaE02ttXHOtqL/kxQoqOppbGjKdZQ355I1be3FLv+lqZUc6IxXt8W72huScaSxa6/tb2xLdYc99tbWppiTY3JxbkvC33NlDNrGXi8HrWYPNER+rsb5lylR8f4UTx8/LBjjvmN72nbxjZ9mO87lxBppcS5HkXGoubyOOZTurGtv1DjcZjnd13t1w9rc6b+Yj2/G/Z5V7w2C8viexD6wHZCjbPUdaAULFNeH9Qek6PSXdNgH2OdhrVVM3fBsTSfuSU8X07wxXPLJzJzF9f3UfDYAety/Gx9IzVHNQd1HxX3O7x2wH1LXX+aNDge4+e+4VGK/oa60HV/EOL9EZSNlKC0nkQ7qH3DeKwpIXjZnhW17T+nxgnzLeEShOl59PWCmbNTz27kmo/gZ3H0UYy9ULA+0y7Po/2h0uveX8W690Rdl1F+gPuTemagBKXBeqg1AAorzLVhWKwy1B7YH9gWHM0FQ88TTP2VXnedurAFyudKCL1Sc1PbHBA+E4rT8p1PRh3Lds0Tpt+perD9w3rg+A7vs36F7rOacnDdCZbF36My+U9crhPzG7TORfW/7R6szc56WNpP1VNBlBuV+T+W35HAJ9y+ZyHWgucG8DBpfYg2lxD5qXmD4Z3vt/vgvKEPSoPjUF+UBsfMKpQGY6/Z+0fZCJ6z5Gsjtn3U1Pxkceuh5k+ufb4c1eP6GWXbPGlx66Ge/6L2WhZaD7U/hRrrYaxcdrnOMrAcjJWwLN5rbfKPBbFyOfSuEUd7dprxNQg8qGsQbLMwzmA7g/dksW3Ae9v4XUHwoOKT0YX+P59v98FxoBLgY38pJcra1oMcXXOGnvP/Ft7npg88n8r3GRXbHqdCsGzjQSmqJ9/xgFrPdHwtmaTuuZqDigf5fvvX8M53/gD1WoHSKN9d3HkHtV6B58jUdS08Zxtve1nqybX3Llc9tnd5uBoHizVPwdfWrp7HW1LzoaD5w+5o/kDd44dl8bWWyd8K5g97ofmDozEhr1hC2WzYuQW2DTi3gDrHBxWfzLl85w/QJkyb4J5cal2JGhdLvO4xltojZOqj1l5N2ajND3H/UtehVB/i/oXzQ+yv/UAafs4AHrnmjvm8U5maP8B8eK9PCcGR8nXKBqg1I5M/194mbDPUXrqork/YfJuyCxxfoV1gO+wP0qBO8JFrPSQfm6HiQVibge8SMteXtnsV5jy1BllO1GnjaNtXlStm4fcAUe8KxHXDcQ7yD7pOnpXRR669bEZPbveyxRqW9H5GfI+disfUfAuvb1D3huFaMPfeoKb6toaWeENzrC3V0NTS2JTP3iDbe67CzLvhM3FYV/rA97pN/ovRvMpRDCXvdef7HgI8TzT57wXzxMtQbMHrmzCNuiawvSONepco7gfquZfeljaY/NeGjAHF2dMcS1AxAPotjgG25471gWNArmdz8HPKQfNjPB5QOsdjBJy/2GI+vh65A/QRfhYZ2nUl4k5dS1PrJXgtiXqPq+byf8hnHd0Tb6Kuw81B3c8oQWnQT/CciNqjbrtOKiE4UHMbo4t894hwxAk45/+VX7o7ryXht3B8xn5rG4s9r7vf5vJzsw5AvV8A2zc1FuTjM/qw7VWHc07jM31AXT3TnXkZ+yD73RKj61LAuSzdyd3Ub+wFvv/L5MteF7vhGjNczfvCzLgF64Rt6YHy49/4/Xzvg+tD2EbYj7b37FHvKoPvcDMcqffa9Unnh9UbYfUqAMvwot7f1msxeVFYPRFWBYEFzxn9ap/4E/AJal9Y0F6Kj0Os79n2Upj8P4N526do3sa5Zy9XrMYxL6tLjx6rRmX+jhV2hN73ZOqv9LqPqy7uh4V954zRTx83fBK2uSI1Run3NfTzuvcZ5AffC2UO27sF8DVKvvfdYHm8FxT2sW0PKR4bw+whhfbex7NfX5YgLMqPqTkSpQtqbQZfr5Uuv+j/X9eCMr9t7+ql/Bf7ve1dCUF7joNsy7Z2ketZbbxeZHv+ncLqZam7H5G/ylI35AXL4rqDfISaxxrdLIk1KDj3xPNY2/WkPsLokurHapQf6o7yY9v6VB+UBv0P+zh1fxj6C7XGBa9rzRi9ZYYcfIek5/GPHdD/uPGTsdYUvl/DzD/u9lmoxkbHe2tixu62SnfiU/eIS1E+XAba5dYgz9YBebYBebYJyLMtyLNtQJ7tQJ7tAvJsD/JsH5BnB5Bnh4A8O4I8Owbk2Qnk2Skgz84gz84BeXYBeXYJyLMryLNrQJ7dQJ7dAvLsDvLsHpBnD5Bnj4A8e4I8ewbk2Qvk2Ssgz94gz94BefYBefYJyLMvyLNvQJ79QJ79AvLsD/LsH5DnAJDngIA8B4I8BwbkOQjkOSggz8Egz8EBeVpAnpaAPK0gT2tAnjaQpy0gTzvI0x6QJwXypALydIA8HQF5RoM8owPyHALyHBKQZwzIMyYgz6Egz6EBeQ4DeQ4LyHM4yHN4QJ4jQJ4jAvIcCfIcGZDnKJDnqIA8R4M8RwfkOQbkOSYgz1iQZ2xAnnEgz7iAPONBnvEBeSaAPBMC8kwEeSYG5JkE8kwKyHMsyHNsQJ7JIM/kgDzHgTzHBeSZAvJMCcgzFeSZGpBnGsgzLSDP8SDP8QF5poM80wPypEGedECeE0CeEwLynAjynBiQ5ySQ56SAPDNAnhkBeU4GeU4OyHMKyHNKQJ5TQZ5TA/LMBHlmBuQ5DeQ5LSDPLJBnVkCe/2/vTKAjK8o9XrdvOpkkM1km7Pum4IKnu9PJdHy845xHMiPv4Tuc9zyH8zwHtJN0huAwAzMZZBFsREXWYd/3ZYaBQRZZFNlVFFEBcUERXHBDEBdUVBTfVLhf97+//r6bm0lXL2PXOX36Lr/71VfLrapb9VXV6cCcrjBnAHOGwpwJzJkKcxYwZynMWmDWKszZwJytMOcAc47CnAvMuQpzHjDnKcz5wJyvMBcAc4HCXAjMhQpzETAXKczFwFysMJcAc4nCXArMpQpzGTCXKczlwFyuMFcAc4XCXAnMlQpzFTBXKczVwFytMNcAc43CXAvMtQpzHTDXKcz1wFyvMDcAc4PCrANmncKsB2a9wtwIzI0KswGYDQpzEzA3KczNwNwMjA/MRmA2MqYdZOL1xcF5Yg4uk0gvcvv9PJgOs9F2O84+GHkcANfWR10rq09xHEDq35VsOcNs1eheS748HHQvDvdwjYdTgON5i4/foA0/5V9prhPlWyv/XPDrIlOqOz7jM/+NKR8DcZEWmUR23G2+TyaktPMhbq1rgXvcxiFK2ll3P3A87nzHcefmPUkm+wT9ub1KW94UnM/iGuNPsgGoxv555wTn9bx/3mnBMdpu7J8vyqtk2Ufyh53ITyZI/ogb/dMkf4kT+ekE2QrsEiSk637tsLnXbucVJpNR6+V6XaPG7VyaZGEfkLD1Z1DfsPlTJCts3XiUG2M8HtPzeG198C+Ny3NbE8meXbI3mLY3ZmFzNWdRG3uX1s3FOonb3DwAut/CZM403wvLFIwTbT32eUwH4m8P/u39vTxZphYuTebdoMudwbFUdlAY7LX7jBHD75nwOI0a/pii672mGP69PVlX1Ad15d8p+Iz9fyiEiwucx3T1jdzWp/oqrDze3Hwu2XM5no+Q5uWNFG7uv/11Qhh8U14GaXOCPEU+3z+uYFdh5LKU26YT/1Twb+PycUUHY8rztXXYltLydZR38IngH99rKY0xX5Peko0P2kxzGdYtDv4Tc3NJt3ltMC3ZEXqV0z8h2eFVUH6Gf2PzsuQZ5i/Z0UQtw4l/HmQ+GxxLcwR5e0Kac99pyudYGjP3skqytyL9uuAZ6T2jMpTSqweer2SbmfShbzosS3oEfeKMf5GFayHEj8/CinKI7xX8xflfvF7sZf7a/PF2Vi9Ktlk2n7zEdO0G2T57NizMb4DMV4JjyY6Or4XRBfc0+z7pPbBuOF+qC/GvmmI87AvxYB3205Be1djbIMHSA9+peL403LjfqS/w3BavR+BxfjN/B/G96WKyJDtAqa6T2tiko1Su4H41z0TQv0t4lr8frQpP8vj7EQvSQGo398Iz/F3HcpHLbPOKusRZGmMaoA1in+I3ht8XwsPLE63d3Mt0Jb4zJPw9Qvh7QWY7k0l8F8jc15P1xHB5cI3n4z6BXyiEq9uUxws9K8U9cRj3kgxe/pB/uG8Q8ny/aLyH/mPYpXe7V9A1LK17BX94Wu8gpLVUB3cz/yT9sEyg91+qVwp9oKZYr7gsWxdlivOvqFzH+VfoWuA+8nsGAio9l31iUTY50Z+dyA5kx8fTY1Xf5yM9kF00ll2UTA6lk7l0cqDa/qcymcGh1OimkcfxsYnxdH+1/R9MDyYzmWxmbHBsYig9Nlpt/8cGBkfHNiVCIpecjo6Z/JfGD7CtYh2NQeAYBfLYLkQ+DXXUINRR06zgn+VGQjhP+Z+WIVxryZdek8YucEyHePK7I1+uI93DuXzYjrJufnCO8YWySI844/8D6gjrcByGnpfmEuLcTO6X5H+UuZqdAm/T599YuYVhr3Sf+bSfTD5e47pR3rH5mgQ09vyJwbHGnj+RTFVr/sR/5ovyw+ZPEMef8YHR5jQgo81pQEab04CMNqcBGW1OAzLanAZktDkNyGhzGpDR5jQgo81pQEab04CMNqcBGW1OAzLanAZktDkNyGhzGpDR5jTY+47trbLVsDvBd8xAWNzaW0Uf1/1Xs7dKAcfzVpi9FeVfyd6K8q2V/+/g14gp1R3lhX1ru7UZGhhzXI+J9lY8XVvypX7jPUy7FojPFIsfF+0UjB8X8W/jp0/Rn46to+8CY+T2N8VRrWyq9gvO69mmaiA4roJNVcqtTVWx7TziRn6/W5uqok3YUjf6F2zC3utGfmFu9gEu5G/qfiCbs1b4ptfaDlHqduv4mAJfFwL9cbWeNt0LW4MsrG0Qtu6I1I5xay9XtKmYB3pK47/c5gu/rSWbhzYlLjxFfnt1wltm/yatW4n+S3YGxlS2HLQyHdkZZPjaoacH/zas/8f8xLEFnkbWYVlnf/NZGnGGvxsLwG/pfaBn+djqocH/9BqOXqlMyaYO1xBZwmQSnwWZ3Z6spzHh7Vq63iXwON5B+khlRhd7LmwMUpKNvK/I4WNMPJwxuNYhyJZsHyqYR0XbB0/wk/ThdgArmV5o++CZ8Dizv17BX+w772D+9jJ/bR5ayPIQ6dZp5PKl0JY18ruyODhPzM2leTzGTXm+5e8R8kcH//b+VHAsrSPaBtwJLCz4TS7ZCvC46HISF6myfIZxIeUPns+OD/5tuLf29LhoFeIi7Pu/GrYg2zF9sdyNM52k8k9qt8y2/JPWZeJrBks2sp6gg9SG4OUl2ixKPM/zxJ8a/Nvzd3ml+mlrN1G9KpXx2trHWF5L9eBMNnxrFbma7RJ9S8QZ/xrIpPl1jvvuMzxNsR3J/UR9HK1bGNou7BT04XnmMlOaFoX33cjlv8/4+YK/kt0it78kf7EO8gU/MH9Jc0xMBeMyyvwfR+k45DH/KD7wGvpfrfk/0hrMYfN/5rvRJ2PbLtKazNgPIK0riPlFKpew/l8H1/k7I5VL1IcVZ/ytIHNDcBy2N2+3kd8tSRfPlL8nxoR/k2O/Lr+HdhXcL822mMr52ewVYUAu9g3xOpnSMG7k8oCXJ8TfFfxL30WSnWZYu2CmdTdJnyjrbkp+Y7oN52W/NXtFtHdHnubsYN3PZcaV8MQVmQ+CTB6nUtspLE4lWznpm7HblMcjt7ubKU75HBPyJ2qcEv+oKYb/XUr4o8Yp8Y+BTB6nUhyFxelMtsw8TiW736hxOpKXdY0ap8Q/aYrh53EqlbdhcUr80yCz2nGKYe5hz6HuvN3Ay7sO5bmOEJkLFJlS+aXVjVpaSmUaT8vngn8pLaVwLYgYrq4KhatrluEi/gVH4fKVcPmzDNeCGcLF2/rEvxghXPjuYd3N+yOJfxlk0rsn9Rlgv7R1LflSfRcH1xNzcnKfQSXXcp6pbcD7Bfg7ivfC5mZKeUKazyO1aelZbNNKex1o+zxr7V2tT/r14H+mPEB+11u/kTRnNayOkL6JpPXipX1p+PhSXJAlpXNYP1PU/pZ6n19Ac262tPkFtbbvn619/RY3v2BocGKov3802T80nhtKDtZyfsFOgQD7Xu7Cysq44J/l9g3hPOV/WoZwrSVfeq3e5xfQ3Nx6nl/A50Vh2CvdJzftJ5OP17hulHfqYd7UZHDc2PMbBqq2P4TvRH4y69butDi/YThfKt8wf33G8WfwuRFgRhRmCTBLFGYpMEsVprkXRekxZ5p7UZQec6aR9qJwPLcj7djGfUiaB1Bo25jSb6FKl6Me88+Y8jYX+t9hXJbrxTE76ZtSGiua7dyOOLuH7RycH7AfcFLess7x3AHH67EmkrXLd8U9X7ekfBc2L2Vz853UJ2a5pXB8QHDsthx8s83oKr9b1yfoz79p6BvUGPlbj+K1VnNZlgTn9TyX5T3BcTXWB6a5CGOkk3FariR5u8E3xfcY321u8+HI5r2f9JHs5zAO+BptmztXA/2qt3mY0tqG3D5vtvM2JFm1TFOMa95PLq1DHBPCFjb2NJf5qvsxfWKCPp6gT5j+UjpLdph8ToebNZbfbFdo9TimB/k/H47Hc6Nrlh24cplhzmfxQOHcnnFUhsZMed5uVWQZdr49u+aDPHRYdrfkS/nFwfXEHFwlxkIOC85rPRbyzuC4sfvs0pnGXpOkKN/1miTD+aL8sDVJtL42e59/96Fc3ja3boTdw/eEZNtyhtp+0zbDpviMdbwvzzq335jFfYJcfVeFzU+vVttzz0CeVEdjOrUL1yqlS9jcWLfrd0T/1ubtRtdt9LA2sXWUZ2wdTfYHq6dWrsouy/1PLjuOqvPo4/+8+qRz3szmVXKMnXPeF+SEubCmFwadXglpOecYe44308htTnaeiOgMi482o7/mccbuEfzbV/NtwXEjNGf2Cc63NNOOgWwitWnoc3R0IJnLDg1NzOT/u4Pjxm5OLepv7CHQRKpRhkDn0pyyZcQOpni8oyk+Yx0fIsV72Jzin9Z8aQ+8h0OhfPs2HALlXRf1sM3QpibdqLRsQuXyRSoz2+6JeexeHO6RjlgXuOy+2RQ/g267IFLjfUbvbqAmaRriBO8Tj/HgKB0jT9cj/zucxluxWdjO9OHxg83CrYLjZbmpg9aMLp8cG85OZQ+enFqRW72aT4Hkw1y8Lceb5vx5bRkWahcgP5MjfXiZiPJ421Nrm8YEueTChi/5pyrGAf9c4e84b+vx5e7CTHylrW06Qcd6H+LpD87reYiHurwaoV09FJzXul1NXa8N3k24qNmuDXdR27VzabPSNKzp6SQgzzqpzeq4m2+wlt181ObB7T7wfqsxah9HWP3VCGXbdsF5rcu2XYPjZtkW6vodm7gkHb+HYtkmvZNhZRsvv3rgGetGQDb/5l4i+Ot2CeL0gOP6IhW2bTkfwjDR/U3O5DGVm9Qu8QU98D2Tpjzy7wGjyJDKXu6HL8jj2wNJuoUt2RFm5tYI5fsuwXmty/fdg+Nm+R7qmm1X02y7Mhep7Ur9zjye40Yv2/i41zbB//S2dIq8KG1hX3kOv1+5DFPB+Aor61GPRm+77xac17psfyS40dBle7I/29jmS7mqbamE41Zh5kvE8WfwPWtOAyw95kxzGmDpMWcaaRogMYcAc4jCHArMoQrzQWA+qDAfAuZDCpMFJqswo8CMKswYMGMKMw7MuMLkgMkpzAQwEwqzDJhlCnMYMIcpzCQwkwpzODCHK8yHgfmwwiwHZrnCHAHMEQqzApgVCrMSmJUKcyQwRyrMUcAcpTCrgFmlMKuBWa0wU8BMKcwaYNYozNHAHK0wHwHmIwpzTL7IHKMwxwJzrMIcB8xxCnM8MMcrzEeB+ajCnADMCQpzIjAnKszHgPmYwuSBySvMScCcpDAfB+bjCnMyMCcrzCeA+YTCfBKYTyrMp4D5lMKcAswpCvNpYD6tMKcCc6rCnAbMaQpzOjCnK8wZwJyhMGcCc6bCnAXMWQqzFpi1CnM2MGcrzDnAnKMw5wJzrsKcB8x5CnM+MOcrzAXAXKAwFwJzocJcBMxFCnMxMBcrzCXAXKIwlwJzqcJcBsxlCnM5MJcrzBXAXKEwVwJzpcJcBcxVCnM1MFcrzDXAXKMw1wJzrcJcB8x1CnM9MNcrzA3A3KAw64BZpzDrgVmvMDcCc6PCbABmg8LcBMxNCnMzMDcrzEZgNirMLcDcojCfAeYzCnMrMLcqzG3A3KYwtwNzu8LcAcwdCvNZYD6rMHcCc6fC3AXMXQpzNzB3K8w9wNyjMJ8D5nMK83lgPq8w9wJzr8J8AZgvKMx9wNynMPcDc7/CPADMAwrzIDAPKsxDwDykMA8D87DCPALMIwrzRWC+qDBfAuZLCvNlYL6sMI8C86jCfAWYryjMV4H5qsI8BsxjCvM1YL6mMI8D87jCfB2YryvMN4D5hsJ8E5hvKswTwDyhME8C86TCPAXMUwrzLWC+pTBPA/O0wnwbmG8rzHeA+Y7CfBeY7yrM94D5nsI8A8wzCvN9YL6vMD8A5gcK8ywwzyrMD4H5ocI8B8xzCvM8MM8rzI+A+ZHC/BiYHyvMT4D5icL8FJifKswLwLygMD8D5mcK83Ngfq4wvwDmFwrzS2B+qTC/AuZXCvMiMC8qzK+B+bXCvATMSwrzMjAvK8xvgPmNwrwCzCsK81tgfqswvwPmdwrze2B+rzB/AOYPCvMqMK8qzB+B+aPC/AmYPynMn4H5s8K8BsxrCvMXYP6iMH8F5q8K8zdg/qYwrwPzusL8HZi/K8w/gPmHwrwBzBsK809g/qkw5qQiQ8ec8YDxFCYGTExhfGB8hWkBpkVh4sDEFaYVmFaFaQOmTWHmATNPYdqBaVeYDmA6FKYTmE6FmQ/MfIVZAMwChekCpkthuoHpVpgeYHoUpheYXoVZCMxChekDpk9htgJmK4XZGpitFWYbYLZRmG2B2VZhtgNmO4XZHpjtFWYHYHZQmB2B2VFhdgJmJ4XZGZidFWYXYHZRmF2B2VVhdgNmN4XZHZjdFWYPYPZQmD2B2VNh9gJmL4V5CzBvUZi3AvNWhdkbmL2B8YHZB5h9GCPZ6djri4PzxBwcLu3hxl4hlwhbqsztkha5pMf8MwbqO/iv16XQZrtsadQlvnyvyPG8xW0D0f6P8q+0fA3l22nbQK943OeV6o7P+Mx/Y8rtwV2kRSaZGnK8ZG5CSrtC3R38t8A9Poc8StpZNwTlRVVs6SHuHC11nAyzpae80pY3BVdoe8I1ir9azf9cEAio5/mfrcFD1Vjik+QPO5GfTJD8ETf6p0n+Eify04V5HJcGaeLajpDPsyY/0G83S2MmI9fL5H+1tgCuh7U5bF72mHzUZ54QP5SW7cI9klXYsgVkIT8Pwog8HtPzeI22hOkRZPK1T6Q1G/Aalk07szYKpo2n/JNcfo3k9pjyuNG2sJ9pnhTfGu7dXlH3t7E2j5SO2A7i8yUoTrQtR+cxHYjfF9pdV3uyTC1cmswUhCvB0qRVCIO9llHC75nwOI0a/pii6yCE/zpFV9QHdQ1bk8L+7xfCxQXOY7r6Rm7rU30VVh5vbj7HMPOyy816MYk0L2+kcHP/7a8TwuCb8jKI81KeCttmsjCPxMhlKd9yl/j3Qf5fGuG9xu8lvj2zlK+jvIP/JbzXUhpjvia9u4Ww0jPS97d1i4P/xNxc0m1eyyVIPuYTr3L6F+R3upGfkea1YlnyfpbfcKvpKPmH+A9AHj6Y5QssW6Ks3dMJ9+n7yZi5l1ULgOHthi54RnrPqAyl9MItvyvZZiZ96JsOy5IeQR++jXSOpedCiB+fhRXlEN8r+Ivzwni92Mv8tfljHavHpG3HbT5ZxnTtBtk+ezYszMdB3juc5T30m/KetIU75g08l94D64bzpboQvxLiYQPEg3XYT0N6uZx7SNv3bmTpge9UPF8abmmLd+TxfeV50mcyMM56TPl708VkSdtHS3Wd1MYmHaVyheRK5Z2kf5fwLH8/WhWe5PH340ShfuUyMa9hPLUoMk+GfH8SS2NMgw7Qea3iN4bfF8LDyxOt3dzLdCX+lJDw9wjh7wWZ7Uwm8acJ7xrXE8PlwTWej/sEfqEQrm5THi/0rBT3xGHcSzJ4+UP+dRg5T3QyXfEe+o9hl97tXkHXsLTuFfzhaX2hkNZSHdzN/JP0wzKBr/ExX5CF9Uq9z+u+KhCwpa3jPNutbLe0LcJrvkX3LLcod7lF921QR90BddQ0K/hnuYdDOE/5n5YhXGvJl16Txi7qaYvuB6COsK4et+i+h5VbGPZK95lP+8nk4zWuG+Udm69TwfXGXotocKKx16uon+12Nnctopm20qH1dOzxtuCXdUvzRT0wf3B50vdOVewUgu2c3KVPapErO4XdWfw4sUUA+yU370cqE2aLQGO274Q4wXggHuPBzRhmKhOlzkX/63H7HtrDYVlu6sDk+1cemHpf7ojR3KrVh00eGazWHmMxi6mOvu3NpBvGodsbtNM4/vZjjpC+KtDNxsoKY6eRVjt/R3Bez9YuewXHjbCqWDI4r/XXJ9WeDb5i5EBzReBwV6kVganXZ56B8saUl3+VTluHcR+64Ti1AKhss+Gnd2bFyqnJiWP3X5XLTuXG/3vN8uWTE5O5VYY5XstI9Tj5VO+l1tbBea1LLSrpG7zUam7lOoNrbuU6O/evspUrrbct2QVhOrUL1yqlS+2+BZtbuZry6pPOG3kr10ZoAuwZnNe6CUDbRTWbAKHOdRMgXW9NAOL4MzM1ARxXywOO4ynldkpHoj9KEY/+h00L3dzqq16mbUqmudykUZLVOktZtUxTjGu+rSsOJcTYvRa4F3W66m7A8XeQd6RiXUXNayvjHSCPuusdd0xkatkxQdfqveP47cF5PXccU5um0xQ7fPpBnvaOSMOF1L7D8oCb4zt6n1Oka4ugK5Yv5L9thlOXjm2G5w5YMXJMbmzN1OTKFftnxw7LGea0EZSY0StmDKgkw4fnJdcIjeJMcF7rRvEhwXGDN4rHqtUodvR9PuD4RS80ikfyRfnSCx6lX4wYbY8QZA4ABvcIsU5qXJN+Uv/aEnZPqtilRuR72T0sZ0gnW4BTwWaPtwMdreN7l+A93LOE24A4snHI1tPehS4+TKwbdiO/0Cf4HkhHXmF7pjQdXTao0T9j5A+bep33bhsEZE8/ll2+/KBVk0dvGtxasmbFmG0TYBBQbEwIIq/OieHNAo+da0YYdM6/J+OCXO15fo38lvrk+LRxnqT8Wtj3XFgR6Sn/5I+ZwR9JZ6m43Vx/XA9M9zBd0S/HxeKAVIUYFodh6YjFCH8HjBC/BhgKky26RkAu57g+mA6tIB/DIaWX9F0fZzpqVQRdd9yHNSgV3Tz8fNkLvIdToGebHtgfMZv00PpJ+LvJDSykPo5G+NQZDs5r/amDVX63Kc+7vGzHdIoxDusQqd+Pmkaup9PHmT4HBv82rAcznaX+CF+IqyhNAAyv1H/RFsFvjK/hvOx3q5HLIVySBfn/Df5t+D8QHEv1ns/uxQTZ0juJhpi1ngZU62lgW8h42miDj6ctao6nzeyqMJ42UI1PRa0sbY6nNcfTajGeRt1iNRpPG22OpxX55njam645nsYiAAMqyWiOp+luth+ZOwbHTSOzUOfaDjzteLxObBRLBc5sxtOWArMUGOtc2KJLDUQ0kKG1Y9BOfUs2kKGKhwpkWzjvFhy/OXNnZMVRa3JrcuMHrRldPjlGgxz7bxr3MMzN1qhYG7QIMyrG5zwIQ72X1TSnt9ZlNeVvXK+q0vFlHa7x6UB+oS5w9ZGCHYGG+YXxJg0K8XKincV5hXXNFhrloIPP/OQ6IiO9bzF23sKu+xFYqW1F9wqN75Dn+DrZ/Br/0DMCX2jIB/9xRVYb3Ee+jbGu0rBP0MlT/Kay2tU7tZUb+Qnpndoajslf3o40FdSB5FEekAY1+SB84cOP6edVXr8k10UqX8hRntkKrqE9D+qK9Y4Lu5VON/LFPIPr8Heye5R2UpnmKecx9h/GeiFypXKIZFJaob4Ujv8HExNxTdsDIAA=",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "storage_read",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_to_radix",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "withdraw_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "withdrawNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "burnNonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "withdraw_public"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "register_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "name_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol_len",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "decimals",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "8998099065237381256": {
            "error_kind": "string",
            "string": "Expected address did not match supplized token address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17288131482828810359": {
            "error_kind": "string",
            "string": "Message not in state"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18159344801564042747": {
            "error_kind": "string",
            "string": "Token already registered"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "debug_log_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "debug_log_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "storage_read",
        "debug_log_oracle_wrapper",
        "storage_read",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "get_l1_to_l2_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_claim_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_claim_public"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7069518359247663558": {
            "error_kind": "string",
            "string": "Function _claim_public can only be called internally"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8459146718181593566": {
            "error_kind": "string",
            "string": "L1 portal address cannot be zero"
          },
          "8606784891595333955": {
            "error_kind": "string",
            "string": "Token contract class cannot be zero"
          },
          "11430482739715627628": {
            "error_kind": "string",
            "string": "Function _log_claim can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14788743618517749904": {
            "error_kind": "string",
            "string": "Function _register_public can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "get_l1_portal",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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udPyudO2hZ1yCI/Tnt668XHai/dxHZ7mzp3mz532QrfyeP/IVKL7ctoLkiUv7yFxbpq+kHzx2oSj017s4n94mj81txd7Zx+e9uIP55ZmPw1y/nLafO60eO60dO60bblvh5bHaf5ZgL+ekKtc8CUvNmCs/CXuz3/J7rre7Sv8+78ivP8r5KdfcT9tPndaPHdaOnX1yecukfncJbKcu0S+WC88PM2fOy2cO03OnTafOy2eOc29WP5J83phTen5J59brZlP0/q0TvL+y1e493+Ff/9XhPd/hbz/K+b3f0V8/1ek939Ffv9XlLd/hXv/X7d7/1+3e/9ft3v/X7d7/1+3e/9ft3v/X7d7/1+3e/9ft3v/X7f/8V/3/TR37jR/7rRw7jQ5d9p87rR47rR07rR87rRy6rRwrkrCuSoJ56oknKuScK5KwrkqCeeqJJyrknCuSsK5KpFzVSLnqkTOVYmcqxI5VyVyrkrkXJXIuSqRc1Ui56pkPlcl87kqmc9VyXyuSuZzVTKfq5L5XJXM56pkPlcl87kqieeqJJ6rkniuSuK5KonnqiSeq5J4rkriuSqJ56oknquSdK5K0rkqSeeqJJ2rknSuStK5KknnqiSdq5J0rkrSuSrJ56okn6uSfK5K8rkqyeeqJJ+rknyuSvK5KsnnqiSfq5JyrkrKuSop56qknKuScq5KyrkqKeeqpJyrknKuSsqpKvHTdO40d+40f+60cO40OXfafO60eO60dO60fO60c1XizlWJO1cl7lyVuHNV4s5ViTtXJe5clbhzVeLOVYk7VyXnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/Lnv157JXfy579eeyV38ue/Xnsld/LnsN57LXcC57Deey13Auew0vsteyPrx3y/DdxmkvqiSl9bTiP522teNspfdZ3IYTbQ0n2RpOtjWcYmo4rzJzreE4W8PxtoYTbA1HbA3H1lXZ2boqO1tXZWfrquxsXZW9rauyt3VV9rauyv7qq/Luq5hu4xFj45mNjScaG08yNp5sbDw/vjb/Pi1M505z507bvCZ5l5ctPLx38wE0F1NY3+4bU3xsrLO108EtP1s2kbmZ7XDw2XGa1g2wpvC0A9bkPiYQjE9gnhYF4m20GxOQ1icwtz6B2PoEUusTyK1PoDQ+ge0nQlqagGt9AtbvxIcTaP1OLK3fiaX1O7G0fieW1u/E0vqdWFq/E8+t34nn1u/Ec+t34rn1O/Hc+p14bv1OPLd+J55bvxPPrd+J59bvxLH1O3Fs/U4cW78Tx9bvxLH1O3Fs/U4cW78Tx9bvxLH1O3Fs/U6cWr8Tp9bvxKn1O3Fq/U6cWr8Tp9bvxKn1O3Fq/U6cWr8Tp9bvxLn1O3Fu/U6cW78T59bvxLn1O3Fu/U6cW78T59bvxLn1O3Fu/U5cWr8Tl9bvxKX1O3Fp/U5cWr8Tl9bvxKX1O3Fp/U5cWr8Tl8bvxDI1fieWqfE7sUyN34llavxOLFPjd2KZGr8Ty9T4nVimxu/EMjV+J5ap9Tuxa/1O7Fq/E7vW78Su9Tuxa/1O7Fq/E7vW78Su9Tuxa/1O7Fq/E/vW78S+9Tuxb/1O7Fu/E/vW78S+9Tuxb/1O7Fu/E/vW78S+9TtxaP1OHFq/E5vfY+twAq3fiVvfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9jS1rfY0ta32NLWt9ja259j6259T225tb32Jpb32Nrnhq/E8+t77E1t77H1tz6Hltz63tsza3vsTW3vsfW3PoeW3Pre2zNre+xNbe+x9bc+h5bc+t7bM2t77E1t77H1tz6Hltz63tsza3vsTW3vsfW3PoeW3Pre2zNre+xNbe+x9bc+h5bc+t7bM2t77E1t77H1tz6Hltz63tsza3vsTW3vsfWbH6PrcdHx1TcpwlsHb0MO+b4OLbIx2St37WrTtb6Hb7qZK13A1Una71zqDlZ8/uHVZ2s8Y5kLnN+TNYfTFZSWQYiOeT16DClzXG7tA47yONoyR9wjHc7unCMd1K6cMQ2nHSr7Y+jU5ziAZwQloODPI3ab1GP8zLmOU1PB8vW0b6U9ZOnKX86+s7ReLPYDEfjfWgzHI23uM1wNN49N8PReGPeCkfrOxU2w9G4nWiGo3Hn0QxH4yalGY4Cxyoc8TN1OOJn6nDEz9ThiJ+pwxE/U4Wj9f1em+GIn6nDET9ThyN+pg5HgWMVjviZOhzxM3U44mfqcMTP1OGIn6nC0fqu2c1wxM/U4YifqcMRP1OHo8CxCkf8TB2O+Jk6HPEzdTjiZ+pwxM9U4Wj93QPNcMTP1OGIn6nDET9Th6PAsQpH/EwdjviZOhzxM3U44mfqcMTPVOFo/Q0uzXDEz9ThiJ+pwxE/U4ejwLEKR/xMHY74mToc8TN1OOJn6nDEz9TgGK2/B6sZjviZOhzxM3U44mfqcBQ4VuGIn6nDET9ThyN+pg5H/EwdjviZKhytv02wGY74mToc8TN1OOJn6nAUOFbhiJ+pwxE/U4cjfqYOR/xMHY74mSocrb+TtRmO+Jk6HPEzdTjiZ+pwFDhW4YifqcMRP1OHI36mDkf8TB2O+JkqHK2/2boZjviZOhzxM3U44mfqcBQ4VuGIn6nDET9ThyN+pg5H/EwdjviZKhwFP1OHI36mDkf8TB2O+Jk6HAWOVTjiZ+pwxM/U4YifqcMRP1OHI36mCscZP1OHI36mDkf8TB2O+Jk6HAWOVTjiZ+pwxM/U4YifqcMRP1OHI36mCseIn6nDET9ThyN+pg5H/EwdjgLHKhzxM3U44mfqcMTP1OGIn6nDET9ThWPCz9ThiJ+pwxE/U4cjfqYOR4FjFY74mToc8TN1OOJn6nDEz9ThiJ+pwjHjZ+pwxM/U4YifqcMRP1OHo8CxCkf8TB2O+Jk6HPEzdTjiZ+pwxM9U4VjwM3U44mfqcMTP1OGIn6nDUeBYhSN+pg5H/EwdjviZOhzxM3U44mdqcEwTfqYOR+N+Zi5zXjhmV/7rgGPKy9EhP407lK2jbxCWkThJD41K2vpol6flo115HOzT1rDDFNx69JweA/k1hS9HZxeXgWQ/PSbpS9g4WtIUPo6W9KtGls+O84emxr0Vmp7Q1LjPQ9MTmgqadqepcf+Lpic0Ne7F0fSEpsZzATQ9oanxjAJNT2hqPC9B059r6oxnN2h6QlNypP40JUfqT1NypP40FTTtTlNypP40JUf6pqbiyvLRkv2BpvPk1hXRSR6auviBnahHBTtpjAp2AhMN7J5MQwU7sYMKdpIBFeyYdxXsAnYN7FhgFey4VBXsuFQV7KZc6n1Iphzc7yEFU+7mPiRTnf99SKa64vuQTHWM9yGJvSGZ6jTuQzJ1F74PydQd6j4ke1fvYO/qLfau3mLv6i32rt5i7+ot9q7etl5Bfx+Svau3rRej34dk7+pt63Xdv4dk683X9yHZu3rbeh/zfUj2rt623hJ8H5K9q7etd9feh2Tv6m3rjar3Idm7ett6z+d9SPau3rbePnkfkr2rt613It6HZO/qbetNffch2bt623p/3H1I9q7ett5qdh+Svau3rXdt3Ydk7+pt6w1Q9yHZu3rbei/RfUj2rt623pZzH5K9q7etd7jch2Tv6m3rzSL3Idm7ett638V9SPau3rbewnAfkr2rt613A9yHZO/qbWvH+vuQ7F29be2jfh+Svau3rd2970Oyd/W2tef0fUj2rt62dkK+D8nc1Tvb2p/3PiRzV+9sa6fW+5DMXb3zZO7qnW1t83gfkrmrd7a1yd59SOau3tnWFme/h2Rrh677kOxdvW3tj3Qfkr2rt63dae5Dsnf1trU3yH1I9q7etvaUuA/J3tXb1l4E9yHZu3rb+g37fUj2rt62fvt8H5K9q7et38zeh2Tv6m3vt5bZ3m8ts73fWmZ7v7XM9n5rme391jLb+61ltvdby2zvt5bZ3m8ts73fWmZ7v7XM9n5rme391jLb+61ltvdby2zvt5bZ3m8ts73fWmZ7v7XM9n5rmSv9pmlKjyG59DSk31/y89/f3E9z507z504L506Tc6fN506L505L507L504rp05L56oknauSdK5K0rkqSeeqJJ2rknSuStK5KknnqiSdq5J8rkryuSrJ56okn6uSfK5K8rkqyeeqJJ+rknyuSvK5KinnqqScq5JyrkrKuSop56qknKuScq5KyrkqKeeqpJyqkjJN505z507z504L506Tc6fN506L505L507L5047VyXuXJW4c1XizlWJO1cl7lyVuHNV4s5ViTtXJe5clbhzVeLPVYk/VyX+XJX4c1Xiz1WJP1cl/lyV+HNV4s9VyfaalcT1tE9vn1lP215Xkugep/npv/btdp7k4+Bb9roe64vfOLbkJSso5fOx9+E4W8PxtoYTbA1HbA1ntjWcaGs4ydZwsq3hFFPDEVtXZbF1VRZbV2WxdVWWq6/KcTnWTZPfGM9sbDzR2HiSsfFkY+MptsZTaQPH3QWqUmlLxoMvma/4kjoLseIeXzKXpy/52YLkfUjJ3pCyvSGVq4ckriyvBxH/tZIqbZpYcUDO2oAuf4Dm6GJ5/X6JhyMScyOazY0omhtRMjeibG5ExdqIrt8o8XBEztyIzF2zk7lrdjJ3zU7mrtnJ3DU7mbtmJ3PX7GTump3NXbOzuWt2NnfNzuau2dncNTubu2Znc9fsbO6anc1dsxV2RZynafnsWcrRZ98yt+WjbxfPpwmE+wQU9lD82QRyCcvRU/g8gY1s18XlFwXZT+XgaMlrXCn5KTcO8eOBCIXdHBuC44HzGk4Azms4ApzXcGbgvIYTgfMaTgLOazgZOK/hWO9i9eDEaaJD3oEzTId8n+4wPe99usN0sffpSlfTvQ12ne7sD45ORZajUynh4OiQlmFLkMex09YUH8PwPoTng+/Q++p3G4HeVx/dCPS++vNGoPfV9zcCvS8/0QZ015dPaQR6X/6nEeh9ubBGoPflBRuBLkC/HjqOVAE6jlQBOo5UATqOVAE6jvR66B5HqgAdR6oAHUeqAB1HqgBdgH49dBypAnQcqQJ0HKkCdBypAnQc6fXQA45UATqOVAG6AP0N0OcH9Bi/Qqd7eQP0JOsU0yxfodO9KECne7keutC9KECne1GATp6uAJ08XQG6AP166OTpCtDJ06+HPpt6Z/XXo+O8/sA4zk8xhpvcxwSk9QmYeh/2mQmYenv2mQmYetf2mQmYejP3mQmUxicQp9Yn4FqfgG99Aq3fia/fLL/2BFq/E8fW78Sx9TtxbP1OHFu/E6fW78Sp9Ttxav1OnFq/E1//CoTaE2j9TpxavxOn1u/EqfU7cTJ+J/71HrplAjltTCAbvxMfT8D4nfh4AsbvxMcTMH4nPp6A8Tvx8QSM34mPJ2D8Tnw8AeN34uMJGL8TH0/A+J34tq7nP45ONwf/aQIbi4dhOTjI06i33m48x/XlIHOang6WraN9KesnT1P+dPRvjsX4tcQIxzCVsnzyJyCbR6d1yI83vMrHfrXF+LWvP+DGr9X9ATd+b+kPOPfCS4G7ybiL7g+4cdffH3DjKUV/wI2nKv0BF4BfCxyneTFwnObFwHGaFwPHaV4MHKd5LXCH07wYOE7zYuA4zYuB4zQvBi4Avxa49bbQ57iO/umdltvA3Q3dMpAUn46Wrc+ep+X3sLNMn469o7HewOmh8dZbLUU01psiRTTW2xdFNNYbDUU0AppXaKzHxIporAe6imisR6+KaEbuhqMsaEo+OFb8vHAUn+WT//gNMgx8P8vrwZ+ext081ge/brgqcrgnj4uPPXmeRr19tOT1FzqS/aPaQ/yodoUtdBHpxyINfI9vR6SBu412RBq472lHpIE7sHZEGjgZbUYkGTijbUekgdPidkQaOLduRyQShwZEEkS6VqQ7djIEFeykAirY8fnvwG7lDWW7r4VzQn4wsPjkEuOKP5N3DCw+OcrA4pPPDCw+uc/A4gvijys+qdbA4pOtDSw+Cd/A4pPwDSw+Cd+44lt/SSHiv1N8Er6BxSfhG1h8Er6BxRfEH1d8Er6BxSfhG1h8Er6BxSfhG1h8Er5xxbf+8nPEf6f4JHwDi0/CN7D4JHwDiy+IP674+PyexZ8f4sf4RfxMt9+x+EmWY32a5av4dPsDi0+3P7D4dPsDiy+IP674rOcPLD7r+QOLj88fWHzW8wcWn/X8ccUvAyd8xS+TLPN8cOw8pfXlK256LpWP96mUgdOyuiAHTp7qghw4xakLUga+QeblNVJuen6b7vYd8rHx520tMR3dIevuXFxGji7aUWnkjKEdlUYOA9pRaWTX3o5KI9vrVlTy08hPurSj0siPpLSj0sjPjrSj0sgPebSjkqBSAyqRPVyt0p07aYIOd/IBHe44/rdwb+KnOLeKQP1x1XckFCOrT/IxsvokKiOrT1IzsvqC+gOrT7I0svrkWyOrT8o2svpkfSOrT9Y3sPqerG9k9cn6RlafrG9k9cn6RlZfUH9g9cn6RlafrG9k9cn6RlafrG9k9cn6BlY/kPWNrD5Z38jqk/WNrD5Z38jqC+oPrD5Z38jq4/e7Vn/3rUpe6Pl7Vn9/x10v9Pwjq0/PP7L6gvoDq0/PP7L6rO+PrD7r+yOrj98fWX3W9wdWf2Z9f2T1+/L7t4vZqn46FLRMy9G+zOHgaJmmpVhkkufK8h8o+7qJ/ghlmCa3jiQfgv/Zm8rq7oU693W361Wm2NdtqVuZ+lor6lamvhZ1upVp4G6sJZkEmVqQqa/1jG5l6mvhoVuZ+loh6FYmUogmZCKFuFym3+ATuYISeJICJfB4//eAb+NZ/kSmMLT8gvwjy08GMrT8ZCtDy09mM7T8ZEFDy0/GNLL8maRraPnJ24aWn9RvaPlJ/YaWX5B/ZPlJ/YaWn9RvaPlJ/YaWn9RvaPlJ/UaWv5D6DS0/qd/Q8pP6DS0/qd/Q8gvyjyw/qd/Q8pP6DS0/qd/Q8pP6DS0/qd/A8ocJ39+3/LtvbAkTnX/X8u9v4hkmOv+h5afzH1p+Ov+h5afzH1l+x3r/0PKz3j+0/Pj+oeVnvX9o+QX5R5Z/5NTPTXkZiZvTwdGSyjISyTI9He0/UI6coFVGOXIaVRnlyMlOZZQjpyQurSi9P0L5w9ecVd0WOfiR04yGZBo5dWhIppHTgYZkGtnFNySTIFMLMg3tituRaWjH3Y5MQ7v5dmQaOiloRyZSiBZkCqQQl8t0B0+uoASepEAJPN7/PeDb+N1OEOQfWX6yiqHlJwMZWn6ylaHlJ7MZWn6yoJHlFzKmoeUn6RpafvK2oeUn9RtafkH+keUn9RtaflK/oeUn9RtaflK/oeUn9RtZ/pnUb2j5Sf2Glp/Ub2j5Sf2Gll+Qf2T5Sf2Glp/Ub2j5Sf2Glp/Ub2j5Sf1Glj+S+g0tP76/b/n3X84U6fy7lv9gl95I5z+0/HT+Q8tP5z+y/InOf2j5We8fWn7W+4eWH98/tPyC/CPLz3r/0PIb9/1zmReJUnZH8t+mswqan8YdymaxhLBssOluh69Hl7Rx8I30wjw/AZnLB0fjBroVjtm4E22Go3FL1wxH496oGY7GTUYzHAWO3+I4z8sU57jF0Xjb2wxH46vGdjiuPfucygZH48uvzXDEz3yTY1nuM3EKGxzxM1U4FvzMjzk6t8ERP1OHI37mexxjWojEPG1wxM/U4Shw/B7HvIw6FtngiJ+pwxE/8z2Ot7WYZRwub3DEz9ThiJ/5MUcfNzjiZ2pwlAk/U4cjfuabHMu6jD7JBkf8TB2O+Jnvcczr33XeuF/LJHCswhE/802OISwcxW9wxM/U4Yif+THHedrgiJ+pwxE/8z2OxS3Hlq0+3OFn6nDEz3yTY1iIFHEbHPEzdTjiZ77JcX2+p8Stv2uBYxWO+Jkfc0wbOYXDz9ThiJ/5Hkc3zcsDZ26KG524w9HUIjmypxG/jMTJ0w/XNkkGlxeSwZWnrZzS1rDDlGSdZH5kbeHXFDaG7RbjGdKT8/x19G+V/MiOqR2VRvZj7ag0sttrR6WRvWQ7KgkqNaDSyD64HZVGdtntqDSyh29HpZHzgXZUIntoQKVA9tCCSmQPLahE9tCCSmQPLagkqNSASmQPLahE9tCCSmQPLahE9tCCSmQPDagkZA8tqET20IJKZA8tqET20IJKgkoNqET20IJKZA8tqET20IJKZA/vUWn94WNwczpQKT/eWZP909tztt8rI2laNJXkHrsghDh/aEpS0Z2mM7lGf5qSgvSnKZlJf5qSsPSnKR6yPU3XzRFv/4wbmtL3Nqdpnpafpkv201dNI32vbU3vKtHJtqASvWkLKtFtGlDJyHuhH8PwPoTng++1ItQKtfLNWmFtk1r5bq3gjqmV79YK67zUyndrhdVmauW7tUKaR618s1YSKSG18t1aIaukVr5bKySm1Mp3a4Xcllr5bq0ItUKtfLNWyG2ple/WCrkttfLdWiG3pVa+WyvkttTKd2uF3JZa+WatZHJbauW7tUJuS618t1bIbamV79YKuS218t1aEWqFWvlmrZDbUivfrRVyW2rlu7VCbkutfLdWyG2ple/WCrkttfLNWinkttTKd2uFfIVaWWtlftRKjF9rBR9ErSzKJFmOvc1KvtYKPoha+W6t4IOole/WCj6IWvlercwTPoha+W6t8PwKtfLdWuH5FWrlu7VCvkKtfLdWhFqhVr5ZKzy/Qq18t1bIbb9ZK94v+12H8PT2pu1aqbuX9jyRmLagElllCyqREjagkiOfa0ElkrEWVCKTakEl0qAWVBJUakAlEpAWVCJ7aEElsoerVbpzJ03Q4U4+oMLd4/jfwr2J3xrMniRhZPVJKEZWn+RjZPUF9QdWn6RmZPVJgEZWn2RpZPXJt0ZWn5RtYPUDWd/I6pP1jaw+Wd/I6pP1jay+oP7A6pP1jaw+Wd/I6pP1jaw+Wd/I6pP1Day+kPWNrD5Z38jqk/WNrD5Z38jqC+oPrD5Z38jqk/WNrD5Z38Dqz/j9rtXffQ/MPNPz96z+wW6Ss6D+wOrT84+sPj3/yOrT84+sPuv7I6vP+v7A6kf8/sjqs74/svqs74+sPlnfN9WXsKov2R2oH9y6I2dw8gRwi4hLstB2KT4dvDWOKPJxbJzD86F3OQU5e5KTNK4xOVdl4tMdYpWTeK01OZebZ5o2/jrJy74rpysPOf2BnPPkFiLzJOlZzjt2gioV7CREGtgT0YwKdjIRFeyEESrYSQFUsAvYNbDjqlWw435VsONSVbDjUlWw41LfgV1KySv2uexHbDKXJdSWKNMXjTKW1r5G+F/7GmGW7WuEs7avkaCReY3w7PY1wuDb14g0wL5GRAf2NSJnMKZR+KJRIWewrxE5g32NyBnsa0TOYF8jQSPzGtHXndEoHmjkZH1E20nI+xrFSZaPjlOZ9g92tyOWo2//nuMfJY0TbWB3ktI1dicpTWZ3ktKTdiepIGlvkrKy1rak5aukLMR1Jynrdt1JyjJfd5KSHvUmqSM96k1SP/S9dMovJL2zGfqmdMBm6Kv7PpvQ12Uyz7KySdMRG/e44Dj/2GMt/PqeL0fLuoucyGNnmzBtHRvcYxsc/+nYO/S+YvBGoPcVVDcCva8ouRHoAvTrofcVxzYCva/AtBHofdmwRqD35e8agd6XcWwDuuBIFaDjSL8L3fkVuhxA13oPaBS8bldy4qK7klOQsyc5cf5dyUmm0JWcpBVdyUkO0pWcJCw9yTmT3XQlJ6lQV3KSCnUlJ6lQV3IKcvYkJ6lQV3KSCnUlJ6lQV3KSCnUlJ6lQT3JGUqGu5CQV6kpOUqGu5CQV6kpOQc6e5CQV6kpOUqGu5CQV6kpOUqGe5Ez4zrbknB9yxvhVTkHOluRMshzr0yxf5aSz7UpOOtuu5KSz7UpOOtuu5GS9syc5M+udXcmJ7+xKTtY7u5KT9c6u5JS+5CzrZ5dngTblDOtHy9M4tjft3jzUzfmDYl9hTAnrux+neEQxu7iMJPupHJSu5HU/c8n+6Q8uzh8o+wpCVFH2FUKoouwrAFBF2Zf51kRZ+jK+qij7Mp2qKPsyfKoo+zJbqigFlLVQ4naqocTtbKK8w8G/7MDBkezAGdljPB7ry372B1coracL0zSyd2lEopE9USMSjey1GpFoZA/XiESCRNYlGtlzNiLRyF62EYlGdtSNSDSyr29EItIF6xI50gXzEpEumJeIdMG8RKQL5iUSJLIuEemCeYlIF8xLRLpgXiLSBfMSkS5Yl8iTLpiXiHTBvESkC+YlIl0wL5EgkXWJSBfMS0S6YF4ifJG+RLtbjKZAR6cu0f5+HynQ0ZmXSJDIukR0dOYloqMzLxHrReYlYr3IvET4IusSCetF5iVivci8RKY6uvuQTHUw9yHp3rHDUSG7vJamy5LXo8V/jL+0Pf55anz8rvHx+8bHHxofvzQ+/rnx8cfGx58aH3/j99+58ftvbPz+Gxu//8bG77+x8fuv8gvM//z4G7//xsbvv7Hx+29s/P4bL7//BheW3CW4Mh18tg9+fQZExB3EP3W3S01pAs5rOA44r+F44LyGE4DzGo4A5zWcGTiv4UTgvIaTgPMaTgbOazh0yK/h5GE65Pt0h+l579Mdpou9T7evvrSN39lc/0ZQoKfcVx/dCPS++vNGoPfV9zcCvS8/0Qj0vnxKG9BLX/6nEeh9ubBGoPflBRuBjiNVgC5Avx46jlQBOo5UATqOVAE6jlQBOo70cuh5wpEqQMeRKkDHkSpAx5EqQBegXw8dR6oAHUeqAB1HqgAdR6oAHUd6PXSHI1WATp/+Dui7G1JnR/fyBuj7+3RlR/eiAJ3uRQE63cv10D3diwJ08nQF6OTpCtDp0xWgC9Cvh06ergD9ekd6iyMW6D77I+iP32TezktH0Kv+eDn7BJzXcDJwXsMpwHkJJ0zAeQ3HAec1HA+c13ACcF7DEeC8hjMD5zUcOuQdOMN0yPfpDtPz3qc7TBf7e7rSV1/axnMI0le/2wj0vvroRqD31Z83Al2Afj30vvxEI9D78imNQO/L/zQCvS8X1gj0vrxgG9BnHKkCdBypAnQcqQJ0HKkCdAH69dBxpArQcaQK0HGkCtBxpArQcaTXQ484UgXoOFIF6DhSBeg4UgXoAvTroeNIFaDjSBWg40ivh57o098BfX97n0T38gboB79gVXgfOtAT3YsCdLoXBeh0LwrQydMVoJOnXw8906crQCdPV4BOnq4AXcGRluXgEJ52Sfr12fchRXtDSvaGdHkHJFNYPlum+eivZe/o+wRK4xO4/s3NP5vArycJP46+9W7u6ZPvw3dtD9+3PfxgfPhlWm5Isfj0ZfjS9vDntocf2x5+anv4xu+8R8M3ft/dH36ZrN91D4Zv/a57MHzrd92D4Td91y1T03fdMjV91y1T03fdMjV91y1T03fdMrV913Vt33Vd23dd1/Zd17V913Vt33Vd23dd1/Zd15m/68oaU5X56/DN33X3h2/+rrs7fG/+rrs/fPN33f3hm7/r7g//zbet+5fw8NOvoyuv2Qa/bKrsQ5ifD75D5+EnBeg8/HQ99M5eBGIFugsrdB+/QufhJwXoPPykAJ2f4yhAF6BfD52f4yhA5+c4CtBxpArQcaQK0HGk10PnFUAa0HnF+fXZi8KLUYAuvOJcAXoE+vXX9AT066FnoF8PvQD9cugKL0YBusKLUYCu8GIUoM84UgXoAvTroeNIFaDjSBWgX96n+xyWqYbJhYPPnsucFzDZPV5P7ya3Bea20L6QmeIDTSiu3aTm+pdLINFPJXJIZF0ij0TG70XXv+YCiX4qkSCRdYlmJLIuUUQi6xIlJLIuUUYi6xKRLliXKJEumJeIdMG8RKQL5iXqyxc9dtoNOU0HEjk3lWXYzj8J+ut7vhwtzi/Q5enYqVjK81JfHmp4OfvyW8PL2Zc361/Og3tnXz5udDlzX55veDn78ofDy9mXlxxezr5WtYeXU5CzJzlJhbqSk1SoKzlJhbqSk1SoJzlLX74z5bzK+TTuF3LK+mMQJ+nBpqStj/ZrWhpCzg+QaWvYjTxQXfqyqaj/M/X7crWo/zP1BfV7Vv/gvt+XZ0b9n6nfl8VG/Z+p35cjR/2fqd+XgUf9n6nf11MgqP8D9dM09fXQCOr/TH2yvpHVJ+sbWX2yvpHVF9QfWH38/jfVd/lpL7l4oH54vPQ2uKfX2G6vBjexKnCrFdIBauW7tUKWQK18s1YcyQO18s1+xZFTUCvfrRVSDWrlu7VCBkKtfLdWhFqhVr5ZKzxLRa18t1Z48opa+W6tkNtSK9+tFXJbauW7tUJuS618s1Y8uS218t1aIV8xUCsuPmplKgfqSyrL0bd/PkYS4vyhqaBpa5pmt+78+4zkoSl5RXua+rBqGvyGpuQK/WmK/+9PU3x6f5rip7vTNOB7+9OU54ra03RKq6Z+2tCU53/605QcqT9NBU2705QcqT9NyZH605QcqT9NyZG601SM+9Pk8/LRKU1Hmrrol2Uol55UcrIJ3qW1ArxPB0f7B3jvQzoA38hP5MS4lUX+98pv3PUi/3vlF+TvWv79Z6fEuJdG/vfKb9x2I/975Tfu0JH/vfIbN/PI/175jT8/gvxvlX82/qgJ8r9XflK/oeUn9RtaflK/oeUX5B9Z/pF9/zStS61TPjr6hm+VX8S1Iv9+5j+P7PuRfx7Z9yN/HNn3jyD//r0/juz7kT+O7PuRP47s+5E/CvKPLP/IT/sgfxz5aR/kj6R+Q8tP6je0/KR+I8ufSP2Glr8v339bxFjlj+VA0JwXNG6aDtXv8Uc+SVB/YPX7cv2o/zP1+zL9qP+z+35fnh/1f6Z+X5Yf9X+mfl+OH/V/pH7uy/Cj/s/U7+spH9T/mfp9PeSD+j9Tn6xvZPUF9QdWn6xvZPXJ+kZWf2S/vx6cUzgSv8df9ZSR7f7w4o/s9ocXf2Sz37/4+/f8MrLXH158QfxxxR/Z6Q8v/shGf3jxR36mZ3jxR36kZ3jxSfiGFf+WaiP+uOKT8A0sPgnfwOJf7/PnaRm9n6UcfXYu6/in0Eem7qYI9OuhJ6BfDz0D/fpregH65dDdBPTroTugXw/dA/166AHo10MXoF8PHUeqAB1HqgAdR6oAHUd6PXS/CV2mJTsQ/xi6+4XoK5ZQltcqOXEPLOF29P0rytu/Ikzv/wr3/q/w7/+K8P6vkPd/xfz+r4g/+4r7SenMSfnMSdt/U2G9LqT89SSZTpy0/b5ISctVVvLzReXjqrL9lsGjk+TMSZulMLvlnjH78OmkrSWvx0/Ccn6Ugssf3xDf/g3p7d+Q3/4N5d3fsP36oqrf4N7+Df7t3xDe/g3y9m94+990fPvfdHz733TariVZ9sedJX29XG5vCTmn5aQo08ZJ6cw3bV9y5uW2O0fZOGn7KpL9clIJX0/a3vDo6CR35iR/5qRw5iQ5c9J85qTtP4U8rSdt6JTTmZPymZPK/klx2pjT9m9i51TWk/LGSZsVEd1CL4aycZI/+Katv6ft324d/BFu/+bn6KQzf+7bD5s6Py+Tcj5+ReG3H1M8Ps2dO82fOy2cO03OnTafOy2eOy2dOy2fO+1FleS0nlb819PcdHxa3DjNnTvNnzstnDttu0rCtFxCbv/MG6fN506L505L507L504rp07z07nT3LnTXugWV7lDChunbZN89Hg3R7vxF+BfICnr35tM89fTwnR82safaXDnTvPnTgvnTovnTtsmKevDoE6eY9rltO0Y5Pi0bZISp/W0uHFREHlx2mNuado47cXc5rWUJW/U5DydO82dO227SqSs7+iYp425badDx6fJudPmc6fFF3/dq26z3/gzndO50/K5QZZTp8Xp3Gnu3Gn+1HVyO8k4Pk3OnTafOy2funLFc1eudO7KldyZ08J2yn4z+6vtf76XfpwTT5yTTpyTT5xTfn7O9r3i4Bx34hx/4pxw4hw5cc6JOpAXqcIaf2X/9Zx04px84pyybfTn1eiHL+ds31cPznEnzvEnzgknzpET58wnzoknzkknzsknzjlRB/FEHcQTdfDinY1J1ucV0ixfz9q+rcT8eGfa9PXv4cVd5egsd+osf+qs7VYgldWgZRe/niWnzppPnRVPnZVOnZVPnVXOnLWdrR+e5U6d5U+ddao28qnayKdqI5+qjXyqNvKp2tgO2W859bqzapGvZ22n7IdnbT8unV1eF7viw0SEsvVL0vz4vWcOT6Z7+2jJj2cpsn/67Dh/DEnsDWm2N6Rob0jJ3pCyvSEVa0OSF1taqA7J2RuStzckc1dvmWpcvf26SJ7FpaOjH5uI30b0FO9sPqx7i3eXG6Ik5zcmMLc+gdj6BFLrE8itT6A0PgE3tT4B1/oEfOsTCK1PoPU7sWv9TuxavxO71u/ErvU7sWv9TuzN3wfKvE7g6TGyxwSsX4WOHJk3dRW6D8nUdeU+JFNXivuQrv/bN/Ir2ccwvP+6HCdhAsw2GAeYbTAeMNtgAmC2wQhgtsHMgNkGEwGzDSYBZhtMBsw2GDrfbTBC5/sCDJ3vCzB0vi/A0Pm+ACOA2QZD5/sCDJ3vCzB0vi/A0Pm+AEPnuw1mpvN9AYbO9wUYOt8XYOh8X4ARwGyDofN9AYbO9wUYOt9tMHHcPmZ+gInxK5hh70r7PyOWOOxd6QjMsHelIzDD3pWOwAx7VzoCM2wecwRm2DzmAEwato85AjNsHnMEZtg85gjMZucbpmnZtSxMT3s6bU/Vubi+Web2b3+Ext/+72FTHlvgBZGPQUmNQc2PLQtdfNo1/ZIH37f3jmlrCrH9KaT2p5Dbn0Jpfgrbmx+1NQXX/hR8+1MI7U+h/btzNnZ3vg/K2P32Pihjd9D7oDTuiW1E/LmA5gWaMoHmFRoHmldoPGheoQmgeYVGQPMKzQyaV2giaF6hSaB5hYZu+CUauuEXaOaJbvglGrrhl2johl+ioRt+iUZA8woN3fBLNHTDL9HQDb9EQzf8Eg3d8Cs0jm74JRq64Zdo6IZfoqEbfolGQPMKDd3wSzQj9zW7v96a/cB3qP3He2c/8B3qCM3Ad6gjNAPfoY7QDHyHOkIzcF5zhGbgvOYIzcB9zRGagfOaAzRh4LzmCM3ALV/wy3PfNws1f0UzcMt3hEZA8wrNwC1fWH/YeaP01XmHgVu+IzQDt3xHaAZu+Y7QDNzyHaCRgVu+IzQDB6BHaEbuhg/QjNwNH6AR0LxCQzf8Es2wG1kdOKhxNxY/ADPuxuJHYIbdyOrgGjPuxuJHYIbdwvUIjABmG8ywW7gegRl2C9cjMMNu4XoEZtzO9wDMuJ3vPphxt6I/AkPn+wKMXA7mZ5uOpbIcffvnY/zLpmOzwpbxP9w1zckygezKxgSi9Qn4sE4g+I0JpNYnkFufQGl8Agpbj1eegGt9At76BPY3n5xTaH0C1u/EhxMwfyc+moD5O/HRBMzfiY8mYP5OfDQB83figwlsb5frpvXpWDfl8sVFbO9ne3jWptq3ZcylYXYu+a9nlTNnbW9TeniWO3WW3z4rx+WsT0ItZ21ePp14t5wlfuO74qmz0qmz8qmzyomz4vZGWodnuVNnbes1y6ryrb/7elY4dZacOms+dVY8dVY6dVY+ddZ2bcxlffFJdOHLWdvbShye5U6d5U+dFU6dJafOmk+dFU+dta1yCOtZYf769+XKmbP8dOosd+osf+qscOosOXXWfOqseOqsdOqsU7XhT9VGeFEbMa9n5a9Xm+BOneVPnRVOnSWnzppPnRVPnXWmc4ghnzrrVOcgpzqH7Rj5dodaUvkoX8/ZnFWJS+mWFL+eU35+znY6dnCOO3GOP9HFx+3g5fAsOXXWfOqseOqsdOqsfOqscuas7dcnHZ7lTp11qjbyqdrIp2ojn6qNU343bjvX/avFtm8tfnHvRb6eU0785W+/P+Dge+TEOfOJc+KJc9IJBieuzOXnV+a07VJLXurg01Luco47cY4/cU44mM/WOXKCwXzinHjinHTinHzinBN14KYT57gT5/gT54QT5/ywDv7r9t/+33/497/9wz/+/V/+43bGr//x//zrP/3n3/7tXz/+63/+f/97+V/+8d//9ve//+1//Y///e//9k//8s//59//5X/8/d/+6df/9pfp4z/+e/LF/TUF52+j+YXpdj0Nf701T+7238Pv/z2lvyaf06///dcJUqbw19t/5F//j99nhNtF5fYf6Ta22/j+fw==",
      "brillig_names": [
        "get_l1_portal"
      ]
    },
    {
      "name": "is_registered_l2",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "is_registered_l2"
      ]
    },
    {
      "name": "get_l1_token",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "aztec_token",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_l1_token"
      ]
    },
    {
      "name": "get_l2_token",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "eth_token",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_l2_token"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Beacon"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "target",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "overrides",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "minter",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shielded_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Portal"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l1_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "l2_tokens",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "token_contract_class_id",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "aztec_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Register"
        },
        {
          "fields": [
            {
              "name": "eth_token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "recipient",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            },
            {
              "name": "message_leaf_index",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Deposit"
        },
        {
          "fields": [
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::Withdraw"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "name_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol_len",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "decimals",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::register_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::register_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "l1_portal",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "token_contract_class",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "aztec_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_register_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_register_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::_log_claim_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::_log_claim_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "withdrawNonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "burnNonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::withdraw_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::withdraw_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "eth_token",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Portal::claim_shielded_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Portal::claim_shielded_abi"
        }
      ]
    }
  },
  "file_map": {
    "101": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "102": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "103": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/events.nr",
      "source": "use super::utils::{compute_event_selector, get_trait_impl_method};\nuse protocol_types::meta::generate_serialize_to_fields;\n\ncomptime fn generate_event_interface(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let (serialization_fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let content_len = serialization_fields.len();\n\n    let event_type_id = compute_event_selector(s);\n\n    let from_field = get_trait_impl_method(\n        quote { crate::protocol_types::abis::event_selector::EventSelector }.as_type(),\n        quote { crate::protocol_types::traits::FromField },\n        quote { from_field },\n    );\n\n    quote {\n        impl aztec::event::event_interface::EventInterface<$content_len> for $name {\n            fn get_event_type_id() -> aztec::protocol_types::abis::event_selector::EventSelector {\n                $from_field($event_type_id)\n            }\n\n            fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n                _emit(self);\n            }\n        }\n    }\n}\n\npub comptime fn event(s: TypeDefinition) -> Quoted {\n    let event_interface = generate_event_interface(s);\n    s.add_attribute(\"abi(events)\");\n    quote {\n        $event_interface\n    }\n}\n"
    },
    "105": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "106": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "109": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "111": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "112": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "113": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n"
    },
    "114": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "115": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "116": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "118": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "119": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "121": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "132": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/messaging.nr",
      "source": "use crate::{\n    hash::{compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\n};\n\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    merkle_tree::root::root_from_sibling_path,\n};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    leaf_index: Field,\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_l1_to_l2_message_hash(\n        portal_contract_address,\n        chain_id,\n        contract_address,\n        version,\n        content,\n        secret_hash,\n        leaf_index,\n    );\n\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\n    // get from an oracle.\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let (_leaf_index, sibling_path) =\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\n\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert_eq(root, l1_to_l2_root, \"Message not in state\");\n\n    compute_l1_to_l2_message_nullifier(message_hash, secret)\n}\n"
    },
    "142": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "145": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "148": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "149": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "150": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "151": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "152": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "153": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "154": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT};\n\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\n/// its existence.\npub unconstrained fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {}\n"
    },
    "157": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "158": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "159": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "161": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "163": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "165": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "166": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "168": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "176": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "190": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr",
      "source": "use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse protocol_types::traits::ToField;\n\nfn emit<Event, let N: u32>(context: &mut PublicContext, event: Event)\nwhere\n    Event: EventInterface<N>,\n{\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; N + 1];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_public_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32>(\n    context: &mut PublicContext,\n) -> fn[(&mut PublicContext,)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| { emit(context, e); }\n}\n"
    },
    "191": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "194": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "195": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "197": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "198": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "200": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "202": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "206": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "230": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "232": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "275": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "276": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "278": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "280": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
      "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "284": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/contract_class_id.nr",
      "source": "use crate::constants::GENERATOR_INDEX__CONTRACT_LEAF;\nuse crate::traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField};\n\npub struct ContractClassId {\n    pub inner: Field,\n}\n\nimpl Eq for ContractClassId {\n    fn eq(self, other: ContractClassId) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl ToField for ContractClassId {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for ContractClassId {\n    fn from_field(value: Field) -> Self {\n        Self { inner: value }\n    }\n}\n\nimpl Serialize<1> for ContractClassId {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<1> for ContractClassId {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] }\n    }\n}\n\nimpl Empty for ContractClassId {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n// Implement the Packable trait so ContractClassId can be stored in contract's storage.\nimpl Packable<1> for ContractClassId {\n    fn pack(self) -> [Field; 1] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; 1]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl ContractClassId {\n    pub fn compute(\n        artifact_hash: Field,\n        private_functions_root: Field,\n        public_bytecode_commitment: Field,\n    ) -> Self {\n        let hash = crate::hash::poseidon2_hash_with_separator(\n            [artifact_hash, private_functions_root, public_bytecode_commitment],\n            GENERATOR_INDEX__CONTRACT_LEAF,\n        ); // TODO(@spalladino): Update generator index\n        ContractClassId::from_field(hash)\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "290": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "292": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "293": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "303": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "307": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "309": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "310": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "319": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "330": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "344": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "348": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "349": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "365": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "366": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "368": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "374": {
      "path": "/home/vscode/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "391": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "46": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n"
    },
    "51": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/deposit.nr",
      "source": "use aztec::{\n    protocol_types::{\n        address::{AztecAddress, EthAddress},\n        hash::sha256_to_field,\n        traits::{FromField, ToField},\n    },\n};\n\n// bytes4(keccak256(\"deposit(address,bytes32,uint256)\")) = 0xeb2243f8\nglobal DEPOSIT_SIGNATURE: [u8; 4] = [0xeb, 0x22, 0x43, 0xf8];\n\npub fn deposit_content_hash(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> Field {\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_deposit(\n    eth_token: EthAddress,\n    recipient: AztecAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(DEPOSIT_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = DEPOSIT_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n// For testing purposes, enables printing the ABI-encoded data\npub unconstrained fn field_from_encoded_bytes(encoded: [u8; 100], offset: u32) -> Field {\n    let mut arr = [0; 31];\n    for i in 0..31 {\n        if offset + i >= 100 {\n            break;\n        }\n        arr[i] = encoded[offset + i];\n    }\n    aztec::protocol_types::utils::field::field_from_bytes(arr, true)\n}\n\n#[test]\nfn test_abi_encode_deposit() {\n    let eth_token = EthAddress::from_field(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F);\n    let recipient = AztecAddress::from_field(\n        0x1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863,\n    );\n    let amount = 0x1234567890abcdef1234567890abcdef;\n    let encoded = abi_encode_deposit(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"deposit(address,bytes32,uint256)\", address(0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F), bytes32(hex\"1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863\"), 0x1234567890abcdef1234567890abcdef) =\n    // 0xeb2243f80000000000000000000000002458675deb5e0691da2d2ba8dcaf58cfd2c2651f1e571fd19f8f3aab48fd795e1b39f72dd61f44735c88a7576721be8a5065f863000000000000000000000000000000001234567890abcdef1234567890abcdef\n    let expected: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_deposit: got: {encoded}\");\n        std::println(f\"test_abi_encode_deposit: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nfn test_deposit_content_hash() {\n    let content: [u8; 100] = [\n        0xeb, 0x22, 0x43, 0xf8, // Function selector - deposit(address,bytes32,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x2458675Deb5E0691da2D2bA8dCaF58CFD2C2651F\n        0x24, 0x58, 0x67, 0x5d, 0xeb, 0x5e, 0x06, 0x91, 0xda, 0x2d, 0x2b, 0xa8, 0xdc, 0xaf, 0x58,\n        0xcf, 0xd2, 0xc2, 0x65, 0x1f,\n        // Aztec Recipient Address\n        0x1e, 0x57, 0x1f, 0xd1, 0x9f, 0x8f, 0x3a, 0xab, 0x48, 0xfd, 0x79, 0x5e, 0x1b, 0x39, 0xf7,\n        0x2d, 0xd6, 0x1f, 0x44, 0x73, 0x5c, 0x88, 0xa7, 0x57, 0x67, 0x21, 0xbe, 0x8a, 0x50, 0x65,\n        0xf8, 0x63,\n        // Amount\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    // sha256(content) = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883aa8\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x5a05320993a46599dc6c5605c5f2bf139d6fb5f3709e23c5af2b530f1e883a;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_deposit_content_hash: got: {content_hash}\");\n        std::println(f\"test_deposit_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "53": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/register.nr",
      "source": "use aztec::{\n    protocol_types::{\n        address::EthAddress,\n        hash::sha256_to_field,\n        traits::ToField,\n    },\n};\n\n// bytes4(keccak256(register(address,string,string,uint8))) = 0x611a7a19\ncomptime global REGISTER_SIGNATURE: [u8; 4] = [0x61, 0x1a, 0x7a, 0x19];\n\npub fn register_content_hash(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> Field {\n    let encoded = abi_encode_register(eth_token, name, name_len, symbol, symbol_len, decimals);\n    let content_hash = sha256_to_field(encoded);\n\n    // Debug log the ABI-encoded data\n    // let field_array: [Field; 9] = aztec::utils::bytes::bytes_to_fields::<260, 9>(encoded);\n    // dep::aztec::oracle::debug_log::debug_log_format(\"ABI Encoded: {}\", field_array);\n    content_hash\n}\n\npub fn abi_encode_register(\n    eth_token: EthAddress,\n    name: str<31>,\n    name_len: u8,\n    symbol: str<31>,\n    symbol_len: u8,\n    decimals: u8,\n) -> [u8; 260] {\n    // abi.encodeWithSignature(REGISTER_SIGNATURE, tokenAddr, token.name(), token.symbol(), token.decimals())\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the name offset\n    // 0x44 - 32 bytes for the symbol offset\n    // 0x64 - 32 bytes for the decimals\n    // 0x84 - 32 bytes for the name length\n    // 0xa4 - 32 bytes for the name // Limited to 31 bytes\n    // 0xc4 - 32 bytes for the symbol length\n    // 0xe4 - 32 bytes for the symbol // Limited to 31 bytes\n    // Total: 260 bytes\n    let mut encoded = [0; 260];\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let decimals_bytes: [u8; 32] = decimals.to_field().to_be_bytes();\n\n    let name_len_bytes: [u8; 32] = name_len.to_field().to_be_bytes();\n    let symbol_len_bytes: [u8; 32] = symbol_len.to_field().to_be_bytes();\n\n    // Fixed offsets for name and symbol\n    // Offset for the name is 0x80 per the ABI encoding, but 0x84 in the raw data\n    let name_offset_bytes: [u8; 32] = 0x80.to_field().to_be_bytes();\n    // Offset for the symbol is 0xc0 per the ABI encoding, but 0xc4 in the raw data\n    let symbol_offset_bytes: [u8; 32] = 0xc0.to_field().to_be_bytes();\n\n    let name_bytes: [u8; 31] = name.as_bytes();\n    let symbol_bytes: [u8; 31] = symbol.as_bytes();\n\n    for i in 0..32 {\n        // First 4 bytes are the function signature\n        if i < 4 {\n            encoded[i] = REGISTER_SIGNATURE[i];\n        }\n\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = name_offset_bytes[i];\n        encoded[i + 0x44] = symbol_offset_bytes[i];\n        encoded[i + 0x64] = decimals_bytes[i];\n        encoded[i + 0x84] = name_len_bytes[i];\n        encoded[i + 0xc4] = symbol_len_bytes[i];\n\n        // Copy name & symbol\n        if i < name_len {\n            encoded[i + 0xa4] = name_bytes[i];\n        }\n        if i < symbol_len {\n            encoded[i + 0xe4] = symbol_bytes[i];\n        }\n    }\n\n    encoded\n}\n\nunconstrained fn pad_31<let N: u32>(s: str<N>) -> str<31> {\n    let mut padded = [0; 31];\n    let s = s.as_bytes();\n    for i in 0..31 {\n        if i < N {\n            padded[i] = s[i];\n        }\n    }\n    padded.as_str_unchecked()\n}\n\n#[test]\nunconstrained fn test_abi_encode_register() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let name = pad_31(\"Test Token\");\n    let symbol = pad_31(\"TT\");\n    let decimals = 18;\n    let encoded = abi_encode_register(eth_token, name, 10, symbol, 2, decimals);\n\n    // abi.encodeWithSignature(\"register(address,string,string,uint8)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), \"Test Token\", \"TT\", 18) =\n    // 0x611a7a19000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5465737420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025454000000000000000000000000000000000000000000000000000000000000\n    let expected: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n\n    if encoded != expected {\n        std::println(f\"test_abi_encode_register: got: {encoded}\");\n        std::println(f\"test_abi_encode_register: expected: {expected}\");\n    }\n    assert_eq(encoded, expected);\n}\n\n#[test]\nunconstrained fn test_register_content_hash() {\n    let content: [u8; 260] = [\n        0x61, 0x1a, 0x7a, 0x19, // Function selector - register(address,string,string,uint8)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Name Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x80,\n        // Symbol Offset\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0xc0,\n        // Decimals: 18\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x12,\n        // Name Length: 10\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x0a,\n        // Name: Test Token\n        0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n        // Symbol Length: 2\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x02,\n        // Symbol: TT\n        0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    // sha256(content) = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9f4\n    // sha256_to_field uses the first 31 bytes of the hash\n    let expected: Field = 0x0448b4e27885c9528619c3ccd291634a7aa4f66d562d479904429803f535d9;\n    let content_hash = sha256_to_field(content);\n    if content_hash != expected {\n        std::println(f\"test_register_content_hash: got: {content_hash}\");\n        std::println(f\"test_register_content_hash: expected: {expected}\");\n    }\n    assert_eq(content_hash, expected);\n}\n"
    },
    "54": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/encoding/withdraw.nr",
      "source": "use aztec::protocol_types::{\n    address::EthAddress,\n    hash::sha256_to_field,\n    traits::ToField,\n};\n\n// bytes4(keccak256(\"withdraw(address,address,uint256)\")) = 0xd9caed12\nglobal WITHDRAW_SIGNATURE: [u8; 4] = [0xd9, 0xca, 0xed, 0x12];\n\npub fn withdraw_content_hash(eth_token: EthAddress, recipient: EthAddress, amount: Field) -> Field {\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n    let content_hash = sha256_to_field(encoded);\n    content_hash\n}\n\npub fn abi_encode_withdraw(\n    eth_token: EthAddress,\n    recipient: EthAddress,\n    amount: Field,\n) -> [u8; 100] {\n    // abi.encodeWithSignature(WITHDRAW_SIGNATURE, tokenAddr, recipient, amount)\n    // This encodes the following data:\n    // offset - data\n    // 0x00 - 4 bytes for the signature\n    // 0x04 - 32 bytes for the token address\n    // 0x24 - 32 bytes for the recipient\n    // 0x44 - 32 bytes for the amount\n    // Total: 100 bytes\n    let mut encoded = [0; 100];\n    for i in 0..4 {\n        encoded[i] = WITHDRAW_SIGNATURE[i];\n    }\n\n    let eth_token_bytes: [u8; 32] = eth_token.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        encoded[i + 0x4] = eth_token_bytes[i];\n        encoded[i + 0x24] = recipient_bytes[i];\n        encoded[i + 0x44] = amount_bytes[i];\n    }\n\n    encoded\n}\n\n#[test]\nfn test_abi_encode_withdraw() {\n    let eth_token = EthAddress::from_field(0xbbEda607223492F9dce036A21C459fE1dcab56c7);\n    let recipient = EthAddress::from_field(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439);\n    let amount = 0x1234567890abcdef;\n    let encoded = abi_encode_withdraw(eth_token, recipient, amount);\n\n    // abi.encodeWithSignature(\"withdraw(address,address,uint256)\", address(0xbbEda607223492F9dce036A21C459fE1dcab56c7), address(0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439), 0x1234567890abcdef) =\n    // 0xd9caed12000000000000000000000000bbeda607223492f9dce036a21c459fe1dcab56c700000000000000000000000052b1d2cebf3c80813f82dc4b5f56fcb4e04ac4390000000000000000000000000000000000000000000000001234567890abcdef\n    let expected: [u8; 100] = [\n        0xd9, 0xca, 0xed, 0x12, // Function selector - withdraw(address,address,uint256)\n        // Eth Token Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0xbbEda607223492F9dce036A21C459fE1dcab56c7\n        0xbb, 0xed, 0xa6, 0x07, 0x22, 0x34, 0x92, 0xf9, 0xdc, 0xe0, 0x36, 0xa2, 0x1c, 0x45, 0x9f,\n        0xe1, 0xdc, 0xab, 0x56, 0xc7,\n        // Recipient Address\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding\n        // Address: 0x52b1D2CEBF3C80813f82dC4B5F56fCB4e04aC439\n        0x52, 0xb1, 0xd2, 0xce, 0xbf, 0x3c, 0x80, 0x81, 0x3f, 0x82, 0xdc, 0x4b, 0x5f, 0x56, 0xfc,\n        0xb4, 0xe0, 0x4a, 0xc4, 0x39,\n        // Amount: 0x1234567890abcdef\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab,\n        0xcd, 0xef,\n    ];\n\n    assert_eq(encoded, expected);\n}\n"
    },
    "55": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/portal/src/main.nr",
      "source": "mod constants;\nmod encoding;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract Portal {\n    use std::meta::derive;\n\n    use aztec::{\n        event::event_interface::EventInterface,\n        hash::hash_args,\n        macros::{\n            events::event,\n            functions::{\n                initialization_utils::compute_initialization_hash, initializer, internal, private,\n                public, utility,\n            },\n            storage::storage,\n        },\n        protocol_types::{\n            address::{AztecAddress, EthAddress, PartialAddress},\n            contract_class_id::ContractClassId,\n            public_keys::PublicKeys,\n            traits::{FromField, Serialize, ToField},\n        },\n        state_vars::{Map, PublicImmutable},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n    };\n\n    use authwit::auth::assert_current_call_valid_authwit_public;\n\n    use token::Token;\n\n    use crate::{\n        constants::PUBLIC_NOT_SECRET_SECRET,\n        encoding::{\n            deposit::deposit_content_hash, register::register_content_hash,\n            withdraw::withdraw_content_hash,\n        },\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        l1_portal: PublicImmutable<EthAddress, Context>,\n        l1_tokens: Map<EthAddress, PublicImmutable<AztecAddress, Context>, Context>,\n        l2_tokens: Map<AztecAddress, PublicImmutable<EthAddress, Context>, Context>,\n        token_contract_class_id: PublicImmutable<ContractClassId, Context>,\n        shield_gateway_beacon: PublicImmutable<AztecAddress, Context>,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Register {\n        eth_token: EthAddress,\n        aztec_token: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Deposit {\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Withdraw {\n        token: EthAddress,\n        from: AztecAddress,\n        to: EthAddress,\n        amount: u128,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(\n        l1_portal: Field,\n        token_contract_class: Field,\n        shield_gateway_beacon: AztecAddress,\n    ) {\n        assert(l1_portal != 0, \"L1 portal address cannot be zero\");\n        assert(token_contract_class != 0, \"Token contract class cannot be zero\");\n\n        storage.l1_portal.initialize(EthAddress::from_field(l1_portal));\n        storage.token_contract_class_id.initialize(ContractClassId::from_field(\n            token_contract_class,\n        ));\n        storage.shield_gateway_beacon.initialize(shield_gateway_beacon);\n    }\n\n    #[private]\n    fn register_private(\n        eth_token: Field,\n        aztec_token: AztecAddress,\n        name: str<31>,\n        name_len: u8,\n        symbol: str<31>,\n        symbol_len: u8,\n        decimals: u8,\n        message_leaf_index: Field,\n    ) {\n        aztec::oracle::debug_log::debug_log_format(\n            \"Registering L1 token {0} as L2 token {1}\",\n            [eth_token, aztec_token.to_field()],\n        );\n\n        let eth_token = EthAddress::from_field(eth_token);\n\n        assert(storage.l1_tokens.at(eth_token).read().is_zero(), \"Token already registered\");\n\n        // L1->L2 message content hash from token name, symbol, decimals\n        let content_hash =\n            register_content_hash(eth_token, name, name_len, symbol, symbol_len, decimals);\n        aztec::oracle::debug_log::debug_log_format(\"Register content hash: {0}\", [content_hash]);\n\n        // Set the shield gateway beacon\n        Token::at(aztec_token)\n            .set_shield_gateway_beacon(storage.shield_gateway_beacon.read())\n            .enqueue(&mut context);\n\n        // Ensure the supplied token address matches the expected address. This ensures its deployed with\n        // the correct code and initialization parameters.\n        let initializer = Token::interface().init(context.this_address(), name, symbol, decimals);\n        let args_hash = hash_args(initializer.args);\n        let init_hash = compute_initialization_hash(initializer.selector, args_hash);\n        let partial_address = PartialAddress::compute(\n            storage.token_contract_class_id.read(),\n            0x9876543210, // salt, hardcoded\n            init_hash,\n            AztecAddress::from_field(0),\n        );\n\n        let computed_address = AztecAddress::compute(PublicKeys::default(), partial_address);\n        // aztec::oracle::debug_log::debug_log_format(\n        //     \"Supplied Address: {0}, Computed address: {1}\",\n        //     [aztec_token.to_field(), computed_address.to_field()]\n        // );\n        // aztec::oracle::debug_log::debug_log_format(\"Gas left 4: {0}\", [context.l2_gas_left()]);\n        assert(\n            computed_address == aztec_token,\n            \"Expected address did not match supplized token address\",\n        );\n\n        // Consume the message\n        aztec::oracle::debug_log::debug_log_format(\n            \"Consuming message with leaf index {0}\",\n            [message_leaf_index],\n        );\n\n        let l1Portal = storage.l1_portal.read();\n        aztec::oracle::debug_log::debug_log_format(\"L1 Portal: {0}\", [l1Portal.to_field()]);\n\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())._register_public(aztec_token, eth_token).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _register_public(aztec_token: AztecAddress, eth_token: EthAddress) {\n        // Initialize the token mappings\n        storage.l1_tokens.at(eth_token).initialize(aztec_token);\n        storage.l2_tokens.at(aztec_token).initialize(eth_token);\n        Register { eth_token, aztec_token }.emit(encode_event(&mut context));\n    }\n\n    #[private]\n    fn claim_public(\n        eth_token: Field,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let eth_token = EthAddress::from_field(eth_token);\n\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Portal::at(context.this_address())\n            ._claim_public(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _claim_public(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_to_public(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .call(&mut context);\n    }\n\n    #[private]\n    fn claim_shielded(\n        eth_token: Field,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        let eth_token = EthAddress::from_field(eth_token);\n\n        let content_hash = deposit_content_hash(eth_token, recipient, amount.to_field());\n        aztec::oracle::debug_log::debug_log_format(\"Deposit content hash: {0}\", [content_hash]);\n\n        // Consume the message\n        context.consume_l1_to_l2_message(\n            content_hash,\n            PUBLIC_NOT_SECRET_SECRET,\n            storage.l1_portal.read(),\n            message_leaf_index,\n        );\n\n        Token::at(storage.l1_tokens.at(eth_token).read()).mint_shielded(recipient, amount).call(\n            &mut context,\n        );\n\n        Portal::at(context.this_address())\n            ._log_claim(eth_token, recipient, amount, message_leaf_index)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _log_claim(\n        eth_token: EthAddress,\n        recipient: AztecAddress,\n        amount: u128,\n        message_leaf_index: Field,\n    ) {\n        Deposit { eth_token, recipient, amount, message_leaf_index }.emit(encode_event(\n            &mut context,\n        ));\n    }\n\n    #[public]\n    fn withdraw_public(\n        eth_token: EthAddress,\n        from: AztecAddress,\n        recipient: EthAddress,\n        amount: u128,\n        withdrawNonce: Field,\n        burnNonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(withdrawNonce == 0, \"Invalid nonce\");\n        }\n\n        // Burn the tokens\n        Token::at(storage.l1_tokens.at(eth_token).read()).burn_public(from, amount, burnNonce).call(\n            &mut context,\n        );\n\n        // Message the L1 Portal\n        let content_hash = withdraw_content_hash(eth_token, recipient, amount.to_field());\n        context.message_portal(storage.l1_portal.read(), content_hash);\n\n        aztec::oracle::debug_log::debug_log_format(\"Withdraw L2ToL1 Message {0}\", [content_hash]);\n\n        Withdraw { token: eth_token, from, to: recipient, amount }.emit(encode_event(&mut context));\n    }\n\n    #[utility]\n    unconstrained fn is_registered_l1(eth_token: Field) -> pub bool {\n        let eth_token = EthAddress::from_field(eth_token);\n        !storage.l1_tokens.at(eth_token).read().is_zero()\n    }\n\n    #[utility]\n    unconstrained fn is_registered_l2(aztec_token: AztecAddress) -> pub bool {\n        !storage.l2_tokens.at(aztec_token).read().is_zero()\n    }\n\n    #[utility]\n    unconstrained fn get_l2_token(eth_token: Field) -> pub AztecAddress {\n        let eth_token = EthAddress::from_field(eth_token);\n        storage.l1_tokens.at(eth_token).read()\n    }\n\n    #[utility]\n    unconstrained fn get_l1_token(aztec_token: AztecAddress) -> pub EthAddress {\n        storage.l2_tokens.at(aztec_token).read()\n    }\n\n    #[utility]\n    unconstrained fn get_l1_portal() -> pub EthAddress {\n        storage.l1_portal.read()\n    }\n}\n"
    },
    "57": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "65": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "66": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "73": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "74": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "75": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "76": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "80": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "92": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "97": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.11/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    }
  }
}
