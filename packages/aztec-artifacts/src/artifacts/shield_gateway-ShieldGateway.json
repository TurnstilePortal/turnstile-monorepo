{
  "transpiled": true,
  "noir_version": "1.0.0-beta.11+5b65f9637e85a4177692c3190cb35ea678fb15e9-aztec",
  "name": "ShieldGateway",
  "functions": [
    {
      "name": "_log_transfer",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "serial",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "binnedAmount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13434471300436635949": {
            "error_kind": "string",
            "string": "Function _log_transfer can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBHJwAABAMnAgQEAycCBQQAHwoABAAFgEQdAIBGgEYGLgiARAABLgiARQACLgiARgADJQAAAFglAAAAWSgCAAEEgEcnAgIEADsOAAIAASYlAAABAx4CAAQBHgIABQAKKgQFBiQCAAYAAAB6JQAAASwcCgMEACkCAAMARzWU8ycCBgQEJwIIBAMAKgYIBy0IAQUACAEHAScDBQQBACIFAgctDgYHACIHAgctDgYHJwIHBAMAKgUHBi0KBgctDgEHACIHAgctDgIHACIHAgctDgQHACIHAgctDgMHJwIBBAQAIgUCBC0LBAMnAgYEAgAqBAYCNwsAAgADJigAgAQEeAANAAAAgASAAyQAgAMAAAErKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW6cNR4B7SxLTwEAgEm",
      "debug_symbols": "nZTBjusgDEX/hXUWYGPA+ZVRVaVtOooUpVUmedJTlX8f6OCmWRCNZlMuphy4xvFDXdrT/HnshuvtS9UfD3Uau77vPo/97dxM3W2I0YfS6YetqrFSzKp2lTI6Tn0a+Wc0/mcEULUxScSAiRsMuiysESERkghRFk6LkIiXiLciOIuAIkIWLBHOp4M2IvKhYLQIEpGBAFZEAlIUiCIkYkGEz4KekWWplGTtOI1tm5L2lsaY3HsztsOk6mHu+0r9a/r5+aevezM8x6kZ46quVDtc4hiB165vk1qqdbcub43ZDyFvN4DavRBGhw3E7ECYEATCZNd7eNgwoMxAQE+ZETUXGbtm0MBqBqFoxu5APAcnEM9MpYvQrhkdVjNg/2Rm8zJoi2Z2IGAcZkYs1RVB2wIJZUJgLeUV2LwlgzYELhMcWZ8Jzun1XRFxW2B7PsD5l4/wxnD4WyMcv+eMYAAuGTE7NWqRpLwsBld61H0EuhXBRcROgSISv74UdLC9xyHOmnM3bvrxkmhj15z6Nk+v83B+W53+32VF+vl9vJ3byzy2ibQ29dQLP8hU5A6ph6eJr4gPSzr6Gw=="
    },
    {
      "name": "binned",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "check_transfer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "sender",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                          "fields": [
                            {
                              "name": "request",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                "fields": [
                                  {
                                    "name": "pk_m",
                                    "type": {
                                      "kind": "struct",
                                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                      "fields": [
                                        {
                                          "name": "x",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "y",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "is_infinite",
                                          "type": {
                                            "kind": "boolean"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "sk_app",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app_generator",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "note_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                          "fields": [
                            {
                              "name": "call_context",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::call_context::CallContext",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "function_selector",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "returns_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "start_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "end_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  },
                                  {
                                    "name": "calldata_hash",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                "fields": [
                                  {
                                    "name": "recipient",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "content",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                          "fields": [
                            {
                              "name": "log",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log::Log",
                                "fields": [
                                  {
                                    "name": "fields",
                                    "type": {
                                      "kind": "array",
                                      "length": 18,
                                      "type": {
                                        "kind": "field"
                                      }
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "note_hash_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log_hash::LogHash",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "verification_key": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJpAAAAAAAAAAAAAAAAAAAAfrdY\nAc4JkrVMhv6AnelxmBsAAAAAAAAAAAAAAAAAAAAAACEhWTiD200wu6AqaPgwLwAAAAAAAAAAAAAA\nAAAAAJD8mQXD+5vydEs5tmshrGcXAAAAAAAAAAAAAAAAAAAAAAAqWteETAnplY9KAiorIksAAAAA\nAAAAAAAAAAAAAADkPFCYYrrb7SW4CHEMLdtNzQAAAAAAAAAAAAAAAAAAAAAAFF2kIk71pLcNNwWp\nHIaUAAAAAAAAAAAAAAAAAAAAH80mLqBSGV0kNNPsk4jNgecAAAAAAAAAAAAAAAAAAAAAAA67Igd5\nM44cujDuizf9lAAAAAAAAAAAAAAAAAAAACnlqGO6APlWoT6N8JXYdNF1AAAAAAAAAAAAAAAAAAAA\nAAAIsM/f0dcYuJcJkzkOVjwAAAAAAAAAAAAAAAAAAAAlD3U/kHFPjIICTdYbY7CkqgAAAAAAAAAA\nAAAAAAAAAAAAB9uOu86iJrgNImrmjSMJAAAAAAAAAAAAAAAAAAAA6xLdX9L70deV2l6L3idxIHwA\nAAAAAAAAAAAAAAAAAAAAAAw3+KexDU/Yk3nZao4C8gAAAAAAAAAAAAAAAAAAAMFBtbD8uQ/4Ffov\nPaIkkZ/VAAAAAAAAAAAAAAAAAAAAAAAf+AIZmNYepeVZYKy5OgkAAAAAAAAAAAAAAAAAAABwyGeh\nIOrTJgYUeUUlstlcIwAAAAAAAAAAAAAAAAAAAAAAKwalS+Dbf0IJNtAtX7toAAAAAAAAAAAAAAAA\nAAAAI1koCAebY9rjled8jAlhQGgAAAAAAAAAAAAAAAAAAAAAAB01+1H2C7Ncut0XPDnOGQAAAAAA\nAAAAAAAAAAAAAMPnxtzhFxJBd+nNpzLV1utBAAAAAAAAAAAAAAAAAAAAAAAYghjugd438AKju5uO\nKaAAAAAAAAAAAAAAAAAAAAB9REOh7C6kvg0cR79R46p9lgAAAAAAAAAAAAAAAAAAAAAAJIOV5knW\nGgNvfiXt/f0+AAAAAAAAAAAAAAAAAAAAmgwq91f09SFJVigyejeFCvQAAAAAAAAAAAAAAAAAAAAA\nAAixVKJ/wMLrF0uVfVziuwAAAAAAAAAAAAAAAAAAAO0Qp7bTwCDWKpI7W9OWGR0TAAAAAAAAAAAA\nAAAAAAAAAAAiqKqwFC76lCbUvzIesCEAAAAAAAAAAAAAAAAAAACpYO0E7RgiavfiNMUPto6zLAAA\nAAAAAAAAAAAAAAAAAAAAH5TAAP1cwiS/0+cpUCw4AAAAAAAAAAAAAAAAAAAAf2bfOy4Wx90Wkg6C\np3acxZEAAAAAAAAAAAAAAAAAAAAAAAhRWG4qQOBJrmhi9vWEmgAAAAAAAAAAAAAAAAAAAIpCo1Qj\n9Zz8qKT9T0INeWQbAAAAAAAAAAAAAAAAAAAAAAATej0LRtDBCrzLJzRh8ngAAAAAAAAAAAAAAAAA\nAADIYSDnE4ymqGeVwEZrdfuRTQAAAAAAAAAAAAAAAAAAAAAALZ4vQZQjYBz49ukroZ17AAAAAAAA\nAAAAAAAAAAAAQLcBCzMjOr736XVyrdH2sB0AAAAAAAAAAAAAAAAAAAAAADBGfHeSetBaUC8vxlVZ\nzAAAAAAAAAAAAAAAAAAAANgKRUoi4jt05yjmEIrg064xAAAAAAAAAAAAAAAAAAAAAAAvTyFWW8hq\nRF+Y6RWejQQAAAAAAAAAAAAAAAAAAAD823syZBzNWnGGjnzT1yMg5AAAAAAAAAAAAAAAAAAAAAAA\nATDBDUq0HRHSx0+PInBuAAAAAAAAAAAAAAAAAAAAbGP6UV+RTMDMVJE9AtswcMAAAAAAAAAAAAAA\nAAAAAAAAAC8fAcvKUFeoLDHLV9S0EgAAAAAAAAAAAAAAAAAAACrCljqPxfDWxGjF4PGy/xrkAAAA\nAAAAAAAAAAAAAAAAAAAB+kqemFNv8lr9ZUhc1wsAAAAAAAAAAAAAAAAAAAA7RkR36Oe65E/1gWtv\nf7smZQAAAAAAAAAAAAAAAAAAAAAAHNq8fTDuve6Z/iP8f+D/AAAAAAAAAAAAAAAAAAAAu40KrxWt\nUHMUKc6dUA+L7eAAAAAAAAAAAAAAAAAAAAAAAAPZA6T2tVbVMvVGftb3XQAAAAAAAAAAAAAAAAAA\nAPxWP3hhvjWZAnc1CUBivFIAAAAAAAAAAAAAAAAAAAAAAAAfgzJHCuZ1H66fvaGxUxUAAAAAAAAA\nAAAAAAAAAAAMY7IjfOvtVyjeTIDniT72LgAAAAAAAAAAAAAAAAAAAAAAHFU92ldQqa8bpqenUn0n\nAAAAAAAAAAAAAAAAAAAA2s7dDzhaLYxjgvBMcskSqPoAAAAAAAAAAAAAAAAAAAAAACwkSwEk+X7A\nn66frBtBtQAAAAAAAAAAAAAAAAAAAAJIVtJiJAvWahQLKIzi79yHAAAAAAAAAAAAAAAAAAAAAAAL\nabvJPF5AB/U93yLX7r4AAAAAAAAAAAAAAAAAAABoUPj5QoYdXjbSZj8AnZmYQwAAAAAAAAAAAAAA\nAAAAAAAAAFka3hphCnd1Rr+yOHPpAAAAAAAAAAAAAAAAAAAAPEORwOvcUGyszhhyLD7GxJQAAAAA\nAAAAAAAAAAAAAAAAAAZyJNqOjF5vGhNh4t5vqwAAAAAAAAAAAAAAAAAAAKIEF+aKTl0ml3j+emTc\nghmIAAAAAAAAAAAAAAAAAAAAAAAQDjM8Cx8tYbt7hFYZqbYAAAAAAAAAAAAAAAAAAACSgjpAR3jK\nG+OrEnbR3G2gAgAAAAAAAAAAAAAAAAAAAAAAGQnpkZiaJ62ao7Qjaba5AAAAAAAAAAAAAAAAAAAA\nL6HF+LiESJdVZjTF3imKn1IAAAAAAAAAAAAAAAAAAAAAACGGdh8T950oo+6XT2w1FwAAAAAAAAAA\nAAAAAAAAANZvKzaUIyluDj+Rz57Ie0hDAAAAAAAAAAAAAAAAAAAAAAAV/lVB31Ysr7/AIVVfn6wA\nAAAAAAAAAAAAAAAAAACXlOeGum5lbuFLDbEptApO8wAAAAAAAAAAAAAAAAAAAAAAEUcJYow6NzlC\nRYA6wwHfAAAAAAAAAAAAAAAAAAAAg1XjUushtu7XbXBWAy17qZAAAAAAAAAAAAAAAAAAAAAAAAhW\ntBSfwOCxr8izvQOEYAAAAAAAAAAAAAAAAAAAAECby/V/2PRggsvuPxmr8dBqAAAAAAAAAAAAAAAA\nAAAAAAAABwgFoHMGXvCjNgqsVGYAAAAAAAAAAAAAAAAAAAAuxulxRTKgN8CIDKY5CQcYCQAAAAAA\nAAAAAAAAAAAAAAAABipixGGXoC5ZMjRtTa8OAAAAAAAAAAAAAAAAAAAARVW2bVDmIazQ4aHfCofy\n/QgAAAAAAAAAAAAAAAAAAAAAABXR7a8fopQZMLViWVUdOwAAAAAAAAAAAAAAAAAAAOJJjtvsd2/O\n6cm+bw+csTFpAAAAAAAAAAAAAAAAAAAAAAASykzNIS3eP1lQ44O+s1cAAAAAAAAAAAAAAAAAAADQ\njXQVcq1lVf4BzWXMWPY+PQAAAAAAAAAAAAAAAAAAAAAACqBIr/6AWBkKfdN/Ti1iAAAAAAAAAAAA\nAAAAAAAAh/Q32ep0myUJ7wuDzZvaE6MAAAAAAAAAAAAAAAAAAAAAABIQtybr6VkmFCwcyI/kXAAA\nAAAAAAAAAAAAAAAAANGEC5zhrL0kP3tfgSbjW6O3AAAAAAAAAAAAAAAAAAAAAAAYu8GVgnL1lFLZ\n0JVlZHIAAAAAAAAAAAAAAAAAAACttiWSF2W7gjiL0XAhEuMbagAAAAAAAAAAAAAAAAAAAAAAKj/e\nimCSKqiuKwgEKDcEAAAAAAAAAAAAAAAAAAAAGzOweqRnxLZwF7jNjHlsf9UAAAAAAAAAAAAAAAAA\nAAAAABALS4M9z+tiHsrN87GCeAAAAAAAAAAAAAAAAAAAAFizPZI63otdBEhBnUg0Xl+BAAAAAAAA\nAAAAAAAAAAAAAAAorT+MiWPqoo2xOyPO9TIAAAAAAAAAAAAAAAAAAACe1XxR9U4oXDTtSWep/t/5\nwAAAAAAAAAAAAAAAAAAAAAAAHhXa0jS1bGGnpVJQqKzmAAAAAAAAAAAAAAAAAAAAYx8/ayUS6OK6\nwi4J3r8TDiwAAAAAAAAAAAAAAAAAAAAAACGqgNoJupA1TkV9PQbJGAAAAAAAAAAAAAAAAAAAAHTR\n02JqV4LjEinXD7AjqxONAAAAAAAAAAAAAAAAAAAAAAAgveQqOWlou79Of2EQxiYAAAAAAAAAAAAA\nAAAAAAC/cOMgV5JmbRB4Lfgky4mDBQAAAAAAAAAAAAAAAAAAAAAALT7USRibmwMGX6XBt0h+AAAA\nAAAAAAAAAAAAAAAA70JLLYunou4TQHZUN+vS/1cAAAAAAAAAAAAAAAAAAAAAACKwd3QIwJ0gm8XB\nZkrCzQAAAAAAAAAAAAAAAAAAAGBSsDFWpMNlG2T75KQkCAAIAAAAAAAAAAAAAAAAAAAAAAAXpSn4\nAHnnpj3rkDGPgS8AAAAAAAAAAAAAAAAAAAAUkC2e5eP8MdkMvIKIdhOBegAAAAAAAAAAAAAAAAAA\nAAAAAZxwvhZxJTvWaKHUbFbrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkXCH0nULMptGe\nJpq+0TRHtAAAAAAAAAAAAAAAAAAAAAAAHvHE8S35WyMpZ23B2K6qAAAAAAAAAAAAAAAAAAAAH00y\nD6RLMFzngRJ4Zcx9VXEAAAAAAAAAAAAAAAAAAAAAAATgmWlfYqWJw3cu4+eSEQAAAAAAAAAAAAAA\nAAAAAGvMegX/lalrKJQkxfczZw2WAAAAAAAAAAAAAAAAAAAAAAAAxDcm91tv2g3iLODg36sAAAAA\nAAAAAAAAAAAAAAAdCgnXF47JO614WPluZPC0jQAAAAAAAAAAAAAAAAAAAAAAL5tuC04sAZaN5cMk\ngqp9AAAAAAAAAAAAAAAAAAAAs8PPbbWlw3xztOqrx8K9tdUAAAAAAAAAAAAAAAAAAAAAAAGaqh23\nOphDKX3dUwWgOQAAAAAAAAAAAAAAAAAAAPMofO4kQhdTybsV1xRQMcptAAAAAAAAAAAAAAAAAAAA\nAAAFiSRi70jt/BTMpcaOrm4="
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/+x9CZgdR3Vu3VlkXXk0V6Ndsmzd0WrLli3vNsZGsrzvWLZxzCpbwgiMBbYMGAiM2UPAKzsYjzD7FghkIe/lBXAC2XgQSEIgrFlJCATCko0XHi33mfnvf/+uW91dPbqyur/P1p2uqv9UnTrn1KlTSzfcw08r/fdZt+y+Yeettz75mb/43/Ybd179i1eNNGko/feQ9N/k/ZjrfCxv2wU9jRx5OwvloNFw1dMYcNXTGHTV0xhy1dMYdtXTmOWqp3GIq57GbFc9jaarnsYcVz2NQ131NEZc9TTmuuppjLrqabRc9TTmufw0itAZczNDZ3543n3Ym8W7PPQWuOr7aKGrnsYiVz2Nxa56Gktc9TSWuuppLHPV01juqqdxmKuexgpXPY3DXfU0jnDV01jpqqfRdtXTGHfV01jlqqex2lVPY42rnsZaVz2Nda56Gutd9TSOdNXTOMpVT2ODq57G0a56Gse46mlsdNXTONZVT+M4Vz2NTa56Gse76mmc4KqncaKrnsZJrnoaJ7vqaZziqqdxqquexmmuehqnu+ppPMpVT+MMVz2NR7vqaZzpqqdxlquexmNc9TQ2u+ppbHHV0zjbVU9jq6uexjmuehrnuuppnOeqp3G+q57GBa56Ghe66mlc5KqncbGrnsYlrnoal7rqaVzmqqdxuauexhWuehqPddXTuNLlp1GEzjY3M3SucjND52pXgM41RDDZ0JBsOEg2BCQL9smCerLgnSxIJwvGyYJusuCaLIgmC5bJgmKy4JcsyCWLZclCVrK4lCz+JIszyeJJsriRLD4kiwNJ8D4JrifB7yQ4nQSPLbg7/ov/kuBlElxMgn9JcC4JniXBrST4lASHkuBNElxJgh9JcCIJHiST+2TynUyOk8lrMrlMJn/J5CyZPCWTm2TykUwOEuc9ca4T5zdxThPnMXHuNv/iv8Q5SpyXxLlIBv9kcE4Gz2RwSwafZHBIjHdiXBPjlxinxHgkyp0oX6IcifAmgpV0+tUu+7HOzdh/8/+uffj17DR5AIrl2A/SmE3k8pWf+OhsBsxV3g3OTsvMLlb+GivfLFZ+n/gmz+MnpstjXQx3MP33ponpsjdNdNK0PB+GPB+mPFbfgvx+fMn2jo24zjYahoO6zSmGPR/bZM8gvUP8pivV940G4Rk9bp/pxojlmZim16C0oYnuelraMKQZ/xPTtwHycd/OpjSrS/KY/FjaIKQ9M02zPhkCzBzycnNJedlcobxsORDlZYjShia665lXXrBvWV6G3fRjtsTSZkHar1HaIZD2kYlp2idDPS5Lf5e0SR+18gXHoH0uAdNHrH31nZjObzIyCO+M18b72Zif0pqQNjTRSWdO+vcQ0EGsQyAd85+U/j2a/jsLylj5lqA/i+h31Fu8Y740Rf6myJ/I0Uars5uWs60T03h59nha+XMmCpWf8jvOnShUfsDKnzcx/bLtgp4p2udPiLI/vvXL7/6T137s99+75z3vesPYV+e++dBj5rz45S//18O+v+ItP3j5g1b2AlX2rN8avO5pH/2v3Yee/9Jfe+5Xv3LZbXNXbP/0yle967o/uGflPz35FVb2QlX2O69564tbv3bvZPvoz/1k1vl3/cuTf3Th8Glf/dwLlz30kp/90w/us7IXqbJfvO5nX/94677nP++1n3jBaUcu2P7B+778w3/+7J98uPWjb3/o2V8+2cpenJYt6iNeMlGo/Dwrf+mE6677He9879e3vPZzm/72Z3Nefen2lz3vxF/90uO+9/yl71n790//0IoPjlnZy1TZv9mz9Z49S555yvdmf/61x+897PBv/vg9H//Hn96+87R/+cfv/Ob4j6zs5apsj8fKXjHRXXbpCetPf9abvrDwa0eu+uvNn/zgsa9b9uM1j/7ab1+w9wf/9Uf/AWUfK8pmPA2me+XEdEIOXk/pxbaJQuWHrPxVE4XKD1r5qyemyzdcflm7ZqJQ+Sn6j5soVH6Kf9dOTL9su6Bn2Mr+0kR32Q2Pbv7gXa9+0cvdt97z3Tt/uuF/b944dsSWsWP//K1/edjNtzx+2Q+s7HUT0/XOwfcViU1PxvTfSueFyRR8TZp4255dN+3ac/uWW2/decuerbuf+azte3Zdf9POy2/ZfsNNO6/Zecutu3bfzIAN+vu8Cf0+obOok875O/ecfdPuG55x2W3PvH7nLQ0CnS0IWGOdAF/QBX7Vrl/Mgfdsf+azGKKZAT2UAb2sC3rr7pv3/IIre7bs2HHLL+bZDDRHEHAZ4GNd4CmnGfTQUqBbn7Z9180X7mDQkUBQcxfnUnn1b/IMinfmYrQICzlmLuIopOVQyyusfKtY+Z1Wfl6x8rdY+bFi5Z9q5ecXK7/byi8oVv6ZVn5hsfK7rPyiYuWnpqGLi5W/0covKVa+beWXFit/q5VfVqz8diu/vFj5HVb+sGLlb7DyK4qVf46VP7xY+dvNzhwBL82GGPZKeJ9j6Ds8xE4hfpPqkpPeVBhhJdHj9mEYAXmFZVsizWcjB8W7AQ9WKyLWvIhYYxGx5kfEitnGBRGxFkbEWhQRa3FErCURsWLyPqYOLe1TrGURsWLKREzex5Sv5RGxYup2TJk4LCJWTBu9IiJWv46P5mfNFml5QutWflWx8oPWlnF8Kepk+ObroG/UyPjXsDjNaDUJK2fdG766Y/24H8aBXht+Z2GN58SaLdKK9EnbZbcL8cvKkK/tyt+1/Gs89cP8o2naaii/huq+tljdB6wuq0Rd1gCm4SdBFrMJaZDlnJ3X33bjJbtvZGwUXWTPCsiDbB9w3aq4OgPL0d+MOQh4+CTVX9xZ/fN27rnhaVdtv/HGnTt+0YhbqUAXgq2J8PsR1y0ElqekkRkINQyG33SlFKjhEwqlzAlXbQBLuXrJ7u07tm5/1q233bQTV/RRJZhKg1DxHfc7pg3SuzmUD1exksdWeQZd9mMcM7qrIU1xwjBNVbNkmHvlCEHX3g2I/KsIa5UoZ3Uf9JRHDCzHEuOT6hCptHYkjzL5Rjsk/FFQexYW1Z6y4Q8fr5PH+GLtW12M3gKfjCImuyBrRJphmbkfdno4WA1twPz4O3mG6N2X039bhJk8tgrpGx7xHa7c/xm1DXnPclSGz4hn9cJ3iN90peS24etXbB/L0Zpi9OaH8B3rY7xeK9IMa136N8oR5l8DbcD8+Dt5hujd36f/tly3zLEcrRXtwXcoR9+ktiHvWY4K8jl4V5fhN10puW34+hXbx3JU0KXcHMJ3rI/xep1IM6z16d8oR5h/LbQB8+Pv5Bmidz9K/225bpljOVon2oPvUI6+l/6endGetgt6blJ9kaP8c2e7bl7lKL/Hyq8vVv5pVv7IYuVfYOWPKlZ+k5XfUKz8L5tsHg0v2Q4cA+/z7EgItQOG36S6FLUDxxA9bh8vy2wUdWmJNF6W2SjobBR0FNa8iFjzI2IdFhGrFRFraZ9iLYyItSgi1uKIWEsiYq2JiBVT7vuVX2sjYsWU1XURsdZHxIrJ+5htXBYRq19l9ciIWEdFxOLTFugfNNJ/Z4tyeeeWiGf1xHeI36S65KTX8PEF28dznmOL0RtrUHmkh5hWH+P1cSLNsDalf+OcB/MfC23A/Pg7eYbo3daU4S3CTB6e8xwn2oPvcM5zZoo7KtrD8aW88orlmYdYjuW1TH8intUT3yF+05XSj4ZPfhRfrH3HFaM3L6R/sT7G600izbCOT/9GecX8x0EbMD/+Tp4hencVySvKNsvrJtEefIfyelmjs23Ie5ajgnw+N1SODL/pSsltw9ev2D6Wo03F6J0Twnesj/H6eJFmWCekf6McYf5N0AbMj7+TZ4jeXU9yhDLHcnS8aA++Qzl6Qoo7O6M9bRf2sI4ZBmIjH8L7qfHDUDk0/KYrJRcNHx+VPlr7TihEr/EDlh2kh5hWH+P1iSLNsOzEIsoh5j8B2oD58XfyDNG7Z5McIibLzomiPfgO5fAZZM+Q9yxHxfjszg6VI8NvujJyOy1Hql+VPlr7TixGb0sI37E+xuuTRJph2YlilCPMfyK0AfPj7+QZoncvJjlCmWN7dpJoD75DObqd7Bm2J3naLuhpqL7IUb6Lt4hh2MirHP3881A5Nvym6+63InJ8MtHL6gdr+ymiLi2RhjzGNKRziqBTY9VYNVaNVWPVWDXWgY11Qo31iMA6GOSr1qG6H2s7UevjgYpVy1ctqwejrNb+RM2vuo017w9UrFpWa5k4GPlVy1fdjwcjVq1DtUwcjLyv7WqtQzW/aqxeWPXcqm5jbaNrWT1QsWr5qutVY9X6OJNtrLFqm1OPQ3Ub6zbWNqfmV92PtXwduFh1rKNuY21zajtRY9VyX+tQzftah2qsfpbV2p+oZaLmfc37mcSqx6GaX7UO1Vi9sPpdJuxeWrwzbDXRUfdzneyhg+Ut34go10j/nS3ql9Bpu6An+N4yw2+67jbnoNfw8V/xxdp+qqhLS6RxP58q6Jwq6NRY5bFO7FOsuo2PDH4dDPWqsR4Z+ljbiRqrltXa3s9kvep+rNtYy1c9dhyo9aplouZXLV91P9ZYtQ7VMnFw8r62q7UO1fyqsXph1XOruo21ja5l9UDFquWrrleNVevjTLaxxqptTj0O1W2s21jbnJpfdT/W8nXgYtWxjrqNtc2p7USNVct9rUM172sdqrH6WVZrf6KWiZr3Ne9nEqseh2p+1TpUY/XCqmWixqqxaqwaq8aqsWqsRzqWujMs+a/tgp6rZgvsHOWfbOVPK1b+2Vb+9GLln2d3ij0KXjbSfw37DHg/GI59fIPwXFoe3yF+k+qSk97UfWpnED1un8mFtf3Roi4tkcYy8mhB59GCjsJaHxGrFRFrSUSswyJirYmItSwi1sKIWAsiYsWUieURsU6NiLU0ItZpEbHmRcRaFxErpm4fGRErpi2MqY+LImLF7McNEbFiykRM3sfU7ZhtjCkT8yNi9audiFmvg8Fnqse0/cf7mPo4FhErZhtP79N6xfQnYrbRxlo1F07+a7ug5zaeaxoGYp8J73PMe89qEJ5zep5t+E3X3c4i8+wziV4WX63tZ4m6tEQaz7PPEnTOEnQU1vqIWK2IWEv6tI0LI2Itioi1LiJWTN4fGRGr7sd8WBsiYsWUieURseZHxIppv5ZGxIrJ+5iyGpP3/Wq/YspqTPlaEBErZj/GlK+YOhRTvuZFxFrWp23sV18uZhtj+hP92o/96sudHhGrX/2cmD5m7U88MnQopp2IWa+Y8nVaRKwzImLF5H1MH8DGWosDnQblGum/JWNg4w3Cs3riO8Rvuu6+jBUDw/YZX6x9ZxWj1w7pB6yP8foxIs2wNqd/DwMW5j8L2oD58XfyDNG7X5718L8tgXkc1eExrrs9+G4A6vjcFHdUtId1UvXLmQK3JcozD7Ecy2vB/hwMlVfDb7pS+tHwyY/ii5IfK6v6lfkf2q8+LI4bW3ryzBblcvBjKJT/ht90pfq74eOLsqPW9s2iLi3XrYOXT0zn47RB8W5ghrG4v5Kn7byPdUcXL6xuiLsF3ufol+FQOTD8puvulyJysIXoZfHU2n62qEuL0pKH++5sQedsQedAwUIZMt4gL1kusFyOfhoLlQvDb7pSctjw8QXbx/7E1mL05jWoPNJDTKuP8fockWZY56Z/oz+B+bdCGzA//k6eIXr3EfInEJP9iXNEe/Ad+hPvJ39C6VhRecXyzEMsx/JasD+D7ZjhN10p/Wj45EfxRcmPlVX9yvwP7dcDEcvkb6uHjk9PFR0sv9VD56ySdM4KpLO5JJ3Ngs6IKMf6hPwOl+/Gt0L1yfCbrpT+NnzypPhi7Tu3EL3GN9lmIz3EtPoYr88TaYZ1fvo32n/Mfy60AfPj7+QZondfJvuPmGz/zxPtwXdo//+M7D+2h+czefUcyzMPsRzLa7H+dK1QeTX8piujH9PyquRH8cXad14xeqMh/Yv1MV6fL9IM64L0b5RXzH8etAHz4+/kGaJ33yF5RdlmP/h80R58h/L6Nynu7Iz2tF3Qc5nqixzlvz3bdfMqR/njrfwFxcpPWvkLi5U/yspfVKz8b1v5i4uVP9fKX1Ks/G9a+UuLlb/Dyl9WrPy1Vv7yYuWfaOWvKFb+SCv/2GLlT7TyVxYr/x0rv61Y+Qus/FXFyn/Cyl9drPyzrPw1xcrfY+UfV6z8Vit/bbHyP7Hyv1Ss/H1W/rpi5X9g5Z8A5fPE8q38k4qVH7T6PhFfijoZvo2Fj4f8jYx/DYvTjFaTsHLWveGrO9aP/aknAj1sYxbWE3NizRZpRfrkCS67XYg/4qmLqudR8Ltsm5dHxDo3Ita8iFjnRcQ6PyLWBRGxLoyIdVFErNGIWBdHxLokItalfYp1WUSsyyNiXRER67ERsa6MiLUtItbhEbGuioh1dUSsayJiPS4iVsyx49qIWL8UEeu6iFjH9SFW8lw98fC/JeMdF5aMVzyqZLzi0pLxim0l4w1bSsYbzi8ZLzinZLzgEvO1HwsvG+m/KhaQw++/rEF4zun5k+E3qS456U3Nn64ketw+XnfbJurSEmmsI9sEnW2CjsJaFBFrRUSsZRGx1kTEWhgRa3lErCURsRZExGpFxFrap1gxZXVxRKyYvL8gIlZMWY2pj+v6tI0x9fGMiFgxdahfeb8+IlZMOxFzrI1pJ2LyPia/+lW+YvomMfsxJu8PBjtxZESsCyNiXRwR66I+xbokItalEbFi8v7UPq3XZRGxRiNixZSJcyNiXR4RK2Y/xqxXTFntV1t4SkSsmLIasx9j1qtf+RVTVq+IiBVTVmParw0RsWL6X2MRsWLGFGL65DHnCjFjj+bfWxz7MijXSP8tGcMfbRCe1RPfIX6T6pKTnjeGj+3jvdPbitGbG9IPWB/j9VUizbBs7Rb3TmP+bdAGzI+/k2eI3v38kIf/bRFm8vDe6atEe/Ad7p3+z0M624a8ZzkqyOcVoXJk+E1XSm4bvn7F9vFakOqnlkhjnzmU3wprXkSs+RGxDouI1YqItbRPsRZGxFoUEWtxRKwlEbGujogVU4di9uOKiFjLImKti4gVU7djyldMHYppVw8G3i+IiBXTRpsttHON6M+sJDp5fXMsb/lKnoe5suR5mGtKnme5vOR5lPPMr/oleNlI/1VnTXL4eHc0CM857VMafpPqkpPelE95HdHj9rFP+QRRl5ZI4/1F6rzEEwQdhbUoItaKiFjLImKtiYi1MCLW8ohYSyJiXR0Ra15ErJi871dZXRcRqxURK6Z8xbQ58yNiHQy8X9CnbVzap1gxdXtxRKyYvL8gIlZMWe1XHyAmVj1u58NaERGrHrfzYdXj9v7jfT1u7z/d7tdxOya/+lVWz4iIFZNfMW1OTN6vj4gVU4dWRMTqVxvdr/5EzDbG9H1j9mNM3h8MduLIiFijEbG2RcSKGSe/KiLWJRGxTomIdXFErFMjYp0bEeuaiFgHA+8vjIh1UUSsSyNixeTX4yJixZTVmDrUr3Lfr208GGxhzHrVY8cjY+y4NiJWTF8uJr+uiIh1eUSsmGNtTJmIya9+HTs2RMSKOecbi4gVc00nZhwgZnwi5v4cPoODe8Ma6b8l70Se2yA8qye+Q/wm1SUnvYaPL9g+40vJ+4FHGlQe6ak7gI3XTxJphvXk9G88g4P5nwhtwPz4O3mG6N1VzYf/bRFm8vAZnCeJ9uC7AajjZc3OtiHvWY4K8nlNqBzxfdYF5dZ7n7XSL9WvVrYl0jg+FcpvhTUvItb8iFiHRcRqRcRa2qdYCyNiLYqItTgi1pKIWFdHxFoWESumPq6LiBVTvmLya01ErJjyFVOHYtrVmDIR0672q27H1MeYOrQiIlZMfTwY5GtBRKyYPgCf8UJ/mc945b1DG8tnfa/E0pOn5Pds7mkQntUT3yF+03W3uYjPrviv+GJtf7KoS0ukcbzvyYLOkwUdhbUoItaKiFjLImKtiYi1MCLW8ohYSyJiXR0Ra15ErJi871dZXRcRqxURK6Z8xbQ58yNiHQy8X9CnbVzap1gxdXtxRKyYvL8gIlZMWe1XHyAmVr+O2zF5H9MHiGmjY/oT/Sqr9bi9/+xq7ZPnw6p98v0nX7VfuP/kq1/9wpj86ldZPSMiVkx+xbQ5MXm/PiJWTB2KOXb0q43u1zEtZhtj+r4x+zEm7w8GO3FkRKzRiFiXRMTaFhHrlIhYMdeHYvLriohYp0bEOjci1jURsWLKxMURsWLyPqZux9THmDp0VUSsmPp4MMjXhRGxLoqIdWlErJj8elxErJi2MKaN7le579c2Hgxjbcx61b7JI2PsuDYiVkx/Iia/Yvrkl0fEijnWxpSJmPzq17FjQ0SsmDGFsYhYMdetYsaZYsa/Yu4v5DOauLe1kf47W5RL6LRd0DPSIDyrJ75D/CbVJSe9ho8vap+0te8pxegd2qDySA8xrT7G6+0izbCuT//GM5qY/ynQBsyPv5NniN79xZyH/20RZvLwGc3toj34bgDq+Pk5nW1D3rMcPQXe5+Dzp0Ll6Cnp76YrJbcNX78q/bL2bS9G75MhfMf6GL3ri9EbtL7aIbCtLjvTv1EOMb/Va4Dy4+/kGaJ3/0TycgOUM/wWpSUPyyimDYp3A/sJa4fAQr6hfn8j5YXSj+S/tgt6TmC7YhiIXVBWHheqe4bfdKV0ocF20Ohl2SAlR1a2JdI43la075Pf6/oUqxURa0FErKsjYsXk18KIWIsiYi2OiLWkT9s4v0/rdVhErJj6GLMfl0fEiqlDSyNixezHmLK6IiJWTPmaFxHr8IhYMeW+X21OzDYeGRHrqIhYGyJixeRXTN8kpnz1q18YU+771ZdbFhFrTUSsg8GX61e5j+mb1GNaPqx+9eX61RbG9OVi2sKY/RiTX/3qf50fEatf/a+xiFgxdTumDsXkV8xxKKYO9SvvY9qvmHG5fo0NxZSvmL5vv/qY/Tp2PCUilo0dI4Rt6clTcr3p8AbhWT3xHeI3XXc7c9Dzrjc9Bd4VXW/i/fD9Yg9j6lG/xspj2rCYWPV6Uz6smLG5mDoUsx9jrgfE9HX6NQ4TU75i1qtf13X6NUYRsx9j7lWIae/57lX0jVYSHeWHXO+hg+Ut34go10j/nS3ql8NfenmD8Kye+A7xm667zUX8M8V/xRe1t83KtkQa7+P37d9COgprUUSsFRGxlkXEWhMRa2FErOURsZZExLo6Ita8iFgxed+vsrouIlYrIlZM+YpZr5j9GLNeMe1qTJmI2Y8LImLF5P3SPsWKaScWR8SKyfsLImLFlNV+9SdiYtU+wP4bO2ofYP/Vq/YB9l8/1j7A/rMT/eoDxORXv8rqGRGxYvKrX+3E+ohYMXWoX8eOfvV9+1W+1kTEitmPMXl/MNiJIyNijUbE2hYRK2b8/qqIWJdExDolItbFEbFO7dN6xezHmPU6NyJWTJmI2Y8XRsS6KCLWpRGxYvLrcRGxromI1a+yWuvj/mtjv8pXPQ7Vcs9Y10bEiuljxuzHKyJiXR4RK+a4HVMmYvKrX/VxQ0SsmHPRsYhYMdetYsYn1kTEirmfyWIdtv8Q5/JnEZ1RQWfUQwfLW77ZolzbBT1n2P69U+Blg3DRHg+GYw81CM+l5fEd4jepLjnpTe1dPI/ocfuMp9b2C0RdWiKNYzIXCDoXCDotkcb32MXAUv2V/Nd2Qc/Vs113m3OUf4bx80J4ybKEY1WOvl0aKkuG36S6FJWli4get49l6VJRl5ZI4z66VNC5VNBRWIsiYl3Qp/WaHxFrbUSsmG1cEhFrQUSspRGxFkfEismvdRGxDo+IdXVErFZErJi8XxgRa3mftvHIiFhHRcSy+Yv5qjgusa+q/KrzPHSw/HkeOptL0tks6IyIco3035K+yDENwrN64jvEb7ruNsfyRRRf8voiHLvpl3H6jIhYMcfpfrUxKyJiLYuItSYi1sEwVvSr3xyzXodFxIrp18T0dWPKxFhErJgyMS8iVkx+xbRf/TrPiNmPMevVr2NHzH6MyfuYun0wzVn6jV/9Om7H1O0qxlqbr+D8ppH+O1uUq2KuZvhNqktOeg0fX7B9PFe7QtSlJdIuh9+YhnSuEHQU1sKIWEsjYh0WEWt+RKwVEbFaEbHm9Wm9lkfEWhIR68iIWEdFxNoQESsmvxZFxIqpj+siYsWU+5i2MGY/jkXEmhcRK6ZMLIiIFZP3y/q0XldHxIopEzF9k5jjdsx+7Ff7FVO+Yupjv9romFgx5WtxRCzjva3f4XzsOqKTd06I5S2fmvcl/7Vd0HM9z6sMA7HxXFyOOd4NDcJzTs8pDb/puvlZZE65jehl9Z+1/SpRl5ZI4721Vwk6Vwk6Cuv0iFhXR8RqRcQ6LCLWuj5t4/KIWEsiYsWUiWURsWLKxAURsQ4GmVgUEWt+RKx+1e2YvI/Jr7E+beOaiFgx+zGm3C+OiBVT7tdHxIopE0dGxIopE7X/9ciw0THH2lMjYh0MtnBDRKyYNufSiFhnRMSKqUMx+RVzTOtXv7Bfx7R+nVvF5H1MHYrJr5g2uh47HhljR8y5VUxbOC8iVh1T2H86FJP3Mdt4eESsfp0PxeT9wohY/RovjOnn1HYiH1ZMf6K2E/uP9/1qJ/ibuXhPRiP919Z/cd0zx3rscIPwrJ74DvGbVJec9KbWfy8metw+Xv/dJurSorTkOW9iOh+nDYp3Ax6sy/scy/YvYN9f5jrpKD5f7KGD5S3fiCjH8ldw/8EZofLH+w8Kyrt3/4HiS979B3z+uF/m0TFtXL/OffvVR4s5tsf0q2K2MWZcK2YbF0TEiukL9WvMul/ncjFtYR1beWTIRMz19JjytbRP21jHYGs7cTDaiTq2sv94X8cn918/1vHJRwbvF0bEqiI+OSrazPftnSronOqhg+VP9dDZXJLO5kA6VbRntijXdt5nyH5wXNSwERf7qoqYsOE3qS456TV8sqhiotb2a0RdWpSWPBx7vUbQuUbQOVCwlOxi33NMOK/OY/mrPHTOKknnrEA6m0vS2XwQtEfZgOS/tgt6nm/lrylWfqPp6A3wku0Tfmcgh724JNQ+GX6T6lLUPqnvKGD72D7tFHVpiTT+hsdOQWenoKOw5kfEWhcRqxURa0lErPURsZZFxFoaESsmv2K2MWa9roqIFVNW50XEiqnbMXm/qE/bWNuvR4b9itnGmLw/LCJWTLk/IyJWTN3uV32MaaP7dayN2Y/LI2IdDOPQwdDGmPWKaVf7ddy+pk/rFZNfp0fEWhgRK6Zv0q9jWq2P+6+N/TpuHwzztJgycWlErH6V+6sjYvVrrGNFRKwqbLStCeB4yfdmnS7onO6hg+VP99A5qySdswLpbCtJZ1uftWdzSTqb6/Y8ItpzXUk61wXSqeWgf9ozW5Rru6DnJFsbPBdeNgi34L6N0QbhORe2b+PcYvS8+zawfbwuukPUpSXSeP5Y9Dv2ycN7LWqsGqvGKoY1U/a8gJ2daz/43KZhI27B/SfB++N4/0lBu+7df6L2BeXZf5I8LCNF5zT9inWQ+yIDn1/wpNtmvfOJN2xcP/fcHy6d/7qXPub3X/uSx6w/hsdjw0Zc5GEOmR0K1RHDb7pSOtnwyYiyb9b2p4q6tCgtec6bmM7HaYPi3UAGFstEWawT09/1nOEA1tMf3/rld//Jaz/2++/d8553vWHsq3PffOgxc1788pf/62HfX/GWH7z8nSV18XFW/qnFyi+w8jcWKz/fyj+tWPkxK7+rWPlzrPzTi5XfYuWfUah8Y6rvb4K37aCy021/5hRarrpvtvI3Fyu/0srvLlb+f6z8swqVb/zAyj+7UHn3/6z8LfCybT/O+q3B65720f/afej5L/215371K5fdNnfF9k+vfNW7rvuDe1b+05NfaWVvLUZ7xMrvKVb+UCt/W7Hyh1n558DLdlBRN2Blnwu0B8LLz7byzytW/hQrf3ux8qda+edD+Ry8a1v5FxQrP9X+FxYq3/imlf9lrFT675q//J1D/v39dw39+l/9YPdzf7Lhvj8+/7X/5wOPvvdzG8+a2Pa3b/j+pVb2RYVou7lW/sWCdo96T9m6iak3+WJYVv6O3LTdoJV9Sf6yQ1b2parsd17z1he3fu3eyfbRn/vJrPPv+pcn/+jC4dO++rkXLnvoJT/7px+8zsq+TJX94nU/+/rHW/c9/3mv/cQLTjtywfYP3vflH/7zZ//kw60ffftDz/7ylJy/PM2ek18LrfwripUftvKvLFZ+lpV/VbHyh1j5XylWvmnlX12s/Bwr/6vwsh1U1LWs7GtE2QXHuy+v/ObJtx+9+JTdlz/nZd+86kMvWvjgUf/YWvr92x79nP/82m4r+1pRtsdz8vAv/veudLHV/NfZaWLyexx+J/8107+Tcua/tiGPlR2i/L/ymOly70vpjVAZw3Bu2sdtwvscfbGsQXjO6Tmj4Tddd9uLzBmbRI/bx3PGQ0VdWiLtSPiNaUjnUEFHYW2IiLUkItbVEbFaEbEWRcRaHhFrYZ+2cXFErH6Vr2URseZFxFoXESumfMXk15qIWDHlK6YOzY+IFVMmYtpV2zs7Iso10n/NDxiB9znG5YEG4Vk98R3iN0U9i/gBI0Qviy/JO+vr2/bsumnXntsv2b19x9btz7r1tpt2DiC06/SGmCuIiu8arrP1mDZI7+ZQvgsmOv++eKK7nBPYg0D3CEhTnDBM8z6xTUdklENeOPFuQOQfIawRUc7qPugpnzwlpbJh5ceLlR/08RbrZPimYcizRsa/hsVpRqvpNM/aLuhp+OqO9WPLcQTQwzZmYR2RE2u2SCvSJyOediH+iKcuqp4oi6xDvpmG5R/31AvzjwraVtZ4tArS8lrjLB6hLhh+0kYbcVLreM7O62+78ZLdNzI2iiyyZynlM3Mz4PzmBrEc/b2U3g0CHj6+CW6I2lk9k6dFWMnvNtGpB9B6AD0wBlBlGFliRsV73iKb1/28TtBTdJ5Uks6TBJ3Zolzbftzxzvd+fctrP7fpb38259WXbn/Z80781S897nvPX/qetX//9A+t+OD8JGy2eKyzvsj/2VRf63cM06n+GqL8f3HWdLnlKb2kvjZNSjXs7NtuesaVO/fcsmvnc3b+whbf6ujppRaXTnT+fdlEdzn1+PwYZm9Vhs7wY/lBSrTUuJzP0LFAIFcQFd81XHFDZz1oTxFD5zMQiKkUdiSjHPLCiXcDLtsQKSPG8WGfIXOuHpqLS+zBPDSHSGzo0JwlsVlDM5cbdtkSPkR5T02HjJKS3XEjONexHgMefuox4EAZAwZFOZaYshEaa0fytFx2+2e7bn607cff7Nl6z54lzzzle7M//9rj9x52+Dd//J6P/+NPb9952r/843d+c/zHJbXrmpJW4erEEl1MTjBGKXhyN57+nbVWzZGYVUCMLcrRxeo8N9SiGH6T6lLUohxN9Lh9JivWvmOK0RtpUHmkh5hWH+P1RpFmWMemf2O/Yf5joA2YH38nzxC9e3wqOy3CTJ7LJzrrsFG0B98NQB2vHuukZ3J304bpPE+EydTaND214Ndsv2nXju17dp5787Nv23nbzh2X7d6z89YtN+849zk7b96Te2p14UTn3xdNdJdTjykUKtFcSpsDaTxgzKE68js2Tg3RBsbKUlzDGqL8O1MmH/KL/3732k5MZZBRKXlgwTr5IgXMh7yRgoagU+GkYSzUIO2vSYO1b24xevMaVB7pISa7ky2RZli2QI/yiPnnQhswP/5OniF69zwySC3IywapJdqD79Ag3TLW2TbkfSPjX8PldyyvyBuWVxWbTurzy2OdbTkU0tg5Sp5LJh7+d4jyXwcGdYIcAaTN/ceyizYkeUz3WVZnuWmeYB62P5b/5WB/Pkn2Z4DajO1UNmUEaDDd5PeJGXV4NU3BCuqRnIIZ1ojr5mEc+9T4YVH7NFCInt8+Yfvi2KfGDw4k+/SmDPuU/D6O6pDHPt07Q/aJN1sORKSD8tZOf5stwn7kSbiv3xUdLM/61xB1SPj74JimifKBZTmcY/lXgb19d4C9Vf4RLysj35g32D8+HVS8GcjAyvIhuc2W/8M5fUgct9iHHBD0Ghn0Of9x0OYsLCfeWX70X+dQ3hHKe6gnb9a4lPy+Kf1dpR4njx2Y7SX3v5NT7nenv1nu54Lc/y7JvbLD/LeyidYGS58H7Q7FHaayyXM54bYIF2Xl2jQv+wxr50/j/z7Z5nlUF/Vv8oT0KWJxnyLv2m66Pn9EfToGaSrczX1q+edBG/+U+hR9HatjzPbb+/nwnumOUd4FlBc3hLaojvOprPq3Vx1bgs4Cwl3oqX+LcOaJciNOt1X9G1rfMVHfEafrr/4NpYNYvzTRSSdLdr9BsrsQ0pTs2uHMIcr/92PT5b7t2QXAsottPZHSlK+Z4J83v7POuKnZ+HTdRHdZy7+Y8iNG8vBcy3YWZM21rOwQ5f9nMdeyti0U9JK2/cuYbhv2B256X0y0Lf8csCX/Sv2B/LL+GHXdvGEdWAJ1wbzJY7aSefDvIBc/HsumxXqh2phg/OeYzod1wHyMYXYBeWAYyi5YuVFRL9bdRURjoYfGAlFO0WB7jDxbAvRNNpb2SF8i2ubEuwGRf1FGe52gvbgH7kKBo+z7YkobE2lsu7C96KeYnimbiHbvGx59ydIJJVeLPHXnQx2LRN0Xeuqu+If2w+c32N8hY31D/G31eza8Yxtr8j3L6XHEyg5R/sVppVR8agG0c1DUa3cG5jLAfIgwlcycDO94zubrJ6zPqMvWc1V3tCX8zufLOFGH5DFbqGQ2y49jfqg6zBc4ym4iJtPMq5voT/9Rn/n+G+brdub1/f/jqOlyG1PMA9X355h7P/j+hxJO7fs79xiS3aK+/+dAds8m2Q31/U+gtF6+v6UZfwdEublUX6P3NPCNLyS8BtBCuUkeXu+aD/hOtInXPyz/pTAefeZaP31l87k9O1O82a5bR3KsM2zxyaVhLyyIHSLXSheVv90UaUMBdXno49f+0m0/fuuzWd6tLvwuZOx/tMhvvOJ5ZtsFPWdObRKbmC5vtKfW3CBtIaUNQ5rVIZG1DVS/RQXrF8I/xG+JtOfA7zx9obDmRsQ6tCDWmOuUUdRDZYc51qHipYkNeGkP+6TGOLYPE2QfMI6bo99P8o3nhr2gIHaofcgaQ7FeTZEWYh/m/vCK1ee/4lnnNFy3HRwU79g+KFl5lMhfUv82KfvANmAI0hZQGtoHq4OyDwVt/aYQ/iG+iomwfQjtC4U1NyLWoQWxzD74YuRoH9gfmifag/aB10teQTpfcG+U3GPBe77s71npv1dMTKfxGtKIB4dtmBNleF+L5b8TfLpfJZuJepo8l4v6KZ8U12fvnp+db57Il9TLxt50E+X5O/dse9r2W3bu2Lbzhlt27uFdkswNXmGzXsdy/FithujdIfQ3r6A26O8TBU4vmswZTJtNdJPfOaRwvEF4zunRwfCbrruXiuy4UTtGsQ5s0QuOrO0GlUd6iGn1UVaBd6iqSATm51XYrNk+RyoeSCVczaSPozrME+3Bd6hhb6aZY9U7eUec1oXkKdmfg6HyavhNV0o/Gj75UXxR8uNbHWX+h/arD8tnL0L4p+jMcD8HX/t+IPRz8nCEo2g/V4XFOw0NP3lmu+625uBt8GcuDL/pSslOw8cXtSuRo5NYlqONycP8VxH4MUHnQMFKfqc3dk6NGb7xMK/8Yfl5HjqtknRago4vum9yzitybRf0BPtSht90pfSq4etnxZeSUcx2g8ojPbV6pSIJvPqpIuMq8uBb+U8ejpx/lXwpxGRfKnSmmdTxz2m2onYCJ/m+RisAajcirhJdOdHZDsv/X+uny30zwI8LmSsUnLEGnx7iA9KNYvS8B6SxDizfxU4fTJ8eUqcBfCdf5oo0wzIbhP2uVmDUTlAcq4bo3fdJvhGT5Tt013lSx++QjB3Ap92C/Y79ddrNtyKn+pX5n/c0wYGEVfUcpj5teXCdtmylA3rs00zNFFetymednkDcEYHbEuWZh1l+x8IFmmao32H5PwJ+xxJqoy9+pMYEnD/zKRmlkz5+zRF1910HovqlEUDH1y+NQDpV9P9Mtcen29gHV01k14vteq/YyjbCwvJWVskg1zlvDBPLz/HQmVuSztxAOjPVntkl6cwWdCqMCQaPp/srJlgyTjaPx0Ckp+IiKm7FMRObP2ft7OVVRJzH4zyfd1ptpfEUMXk8DY1DJXU8c0Fn21Q8MkQOEFeN+SyvWePpBTSeqttJcDzl2wss/9thPL3YM55y31YQjw3Wo/0Vjy0Zh5sXIndYH959w7xN/lM75FXMa4Dy4+/k4R3015EeISbrkS/uZrStjleRHlWxmztUXmPoa5voZOnr9aSvaq3Wp6+W/xWgrzs9+srrBCpOzu1BunnHGJ8uzfXk73VKgGMSFexEC7Y7vBu1YLx6yu6o3WNKbw6FvOnOki07bz3+hNPO2XnDLbc/a0/WrjTWrQWEa/kd/c3lkrrxjueWoJE8LD/zKB/3u71XO6p71alX3l7pSm/4Ezd5fU8sn/cGMesfHqOfmyao2x/UnApliOe1yp9XsWT2TbkNczLKvcDp+lmbsU6qzZb/RZ42z+3RZp5/q7mfLx7Ebbb3s123DCBGyByj4A093wq1UYYfa47Ra54dZz9U45u+8UbF2Xy7JH1jbIz9UHeTbxRrP9SryTdC3jcy/jVcfhcyx+/ls7w+xxwj+W2fAmb7dSv4LG8in8V3k5DSo6Lt98UXZot24WeNs2JPQxmYfArI8u9N214y3iB36LK/OyDqv+8WJupT1XZfn1r+ndCn7/b0adYY6ICe7wNByv4c6smv7IeSi+r2W4Tb6tj7LdQ8TNmavP6k4X4TGoT17+VPcjnlT87JoJGle+zjsT/ay59UdcrKm9efxD7msiwTWfLp20fJ12XnlJc283zQ6ThE1lXtA077QZy/QfVjfF6HwM80DwqMNqRj/t8BX/GP6NYV7i/nSvOvFarfhh9rv8lsopclOyX33o+yfCA91d+8Vq1kQa33qRve1KkRnOPwPOEPyRfznd4N3ReS1PHT5ItV9bU0y1f1voJ2+tsXKwrpd0XHtwezl415fvq7ly/65+S3qNt6B0Q9+NTQIvBbvuyJn1kfKZ+mQWkNT/u5z3rZe98adgPaNCjq1ab86mQVYrKfavl/RH5qwX0mV/jmMSV94CtCdALx1R4PnitjWsjp0Xd86ZSHNu9+wj0NKm914XchsdLHivwl1x0uVadHcY0heYYgrUVpw5BmdVCnRwv6r5eG8A/xVdwab7/J0xcK6+KCWHbiU8WU9petyIo1oq+F+f/TE3eLsYdGjf3YRrY5zmXL0c/pMTzj/yGC1pS8U16bECVl/vTazrpm7WkZymjPCNVTYSjeMA3lC/2y66zb3IC6qfgnYjQy6plgqD0vLHd591X6YqcVjBWj2D6sJ75D/KbrbnOs/RmKLyXt51zfeNJv+zOWpnoW85xQUsf5CzvbVtV6b9bXBtC+JvU5fGFnW3znLJLfL0p/s10aBH+1nWKqm7y5/9T6jboVnOuXdePp7Iz6rQW7ybf3qdjii6BeWXYkb1x1Q1qHKuOq3KYh1z12Js/WCSfblDUOh5xZw30BPMYq/4ixstbeeI5kbbtuyXS540mOh3q0/5yJTkzLv3XxNOZJOTHPzcC8fOE05qmkG9iHF7pOeqz//I71n8snj8ka6mCeMWI2tSVn+cEGlJl6Kepk+GXjC0grVjxL1d3XD1gnnksprMGcWLNFWpE+GRB1UXwc8dRF1ZN9SEXnQnjHPBr21Avzmw6hbFpZ49Esak/bBT0Dvv4aBkzDT3xjs3HpWsU5O6+/7cZLdt/I2MgqZM8SymcmcMB1s3goA8vR30vo3SDg4bMvdJXekqzY+hTCHaL28DsWj6eIuis6K0vSWSno+LCeIrAsvwpjrxT5rR0oavzF0IKhqQGfSqiPyJQQQ2PPCsjTgKoOuGzp7yWGjJklhkrD+DQXiwGzZ1RghFgYfMdiNSBo8Qmp28i7G6Z6t13Q80qztrPgpfGp5IrQK9G626NGUF4xQXpWr6ZIC4lG/mtr45d+ae25f+pTM99Ku4ruXC/yl1S9l6loJJ56TJ4hSJtNacOQZu9UNLLgacWXhfAP8VsiP0cjQ/tCYV1cEMuikWg+TXdmSpd9WCpy2KA6zxL5la2w/C+E2ejnKYqn+ODEuwHXbSceO/HwvxXakOBT4byqXNAT864qY/t4x4xa5Y25+nqgYKHMjLhuuWpk/Gt0+B3zOcaKM/dZDKyRiFgVRHsL39A1U9FetXPVyqoV9VH4jWlIZ3/e0GVpaPPnUjnl5yjdvJgw0cew6J+aFvDYNUu0a5anXQOifhwxSf5tp7+Ttr5noaaJkT4sy9E2y/+1RdPl3r8wu40hu1Axf1a09NfIn0b5yiH3MlpqWL1499EcvEseO83NvPs94N3HPbxjv0d9C3XUdfODv7GuVgJ8+u9bcVanyCs8XdlXt935VsEK7nIYMnpqF6zqh3lO8xTp8/celK1je4a2ju06+g6jlIb6fQL8zrJnasfCqKd+M203lY8cIoOKDtZ5FdHJsjFfIBujVqOw7K3pb14N+RDYmC95VuCwjvx3yJzH6GWtwGWt1vxVzhW4Wz11RhrOdcszjymW/+s0phSce3vvHg85XVWQ7kCobeQb5Mqeruq1owZ37JstSsOPl+zevmPr9mfdettNO3EdgHuMuYKo+A61gdMG6V2T8l000fm3Se2gy35QK9D6OefXFt+dOipSMFvQtXcDIr9vnxLP7Ac95REj6zzMYEa55O+XiTIxz0XN9GyuoJe5IFQzDT/WbG6U6HH7uO0tURe1f6QJvzEN6YTsU0x+D0XCSh6eGdZYNVaNVWPNBJalqX2hPDtKHj7fj3aQZzR5F7p9e2f4GyvJU+5cf/jeVD6rUHDfkPdcv+JLyfF7rm88RUzeV+mLtPS6i3MU2oD58Xfy8Erz0elML6bcJ3Vcu6izbVWd6/dtAKlSL7Du7fR30u4TF2maoTNwy/92mIGfsqizzmoGnsUDlLF9GBPdbZra3wlpefQ5mYV/kc6gYr2GJ6Zxs/QCZ+W2X7blunXGJwuhUewt1Ecot6qPeJ+y5X8l9NE56W+1FzNkD5uixzI0KyP/ANXP8l+Y1glXhkPO5CiZRZm7MYPepUDvIZCHfe2c6KSRPCXlboGSO9RnljsV6VP67xsvVCRRySLvBmgILLXHuUHlZzndB4Y3RPmvFX0eKufcr5b/8YH9GsmeyH5FXnG/qp0WmD8k4sv9lTwqEsu70wYFFvY192svXTY81q2nevrVymO/Yj25Xy3/rsB+Rb9oH85EZ33bLuiR/Yq84n5V4zXmD9m9wz5j8qgVjUMozXfOUNlvlIOQPsf+ybLft4k+57mBsgu+8cW5zgir3UWWRli37dl9y840xOro8YVEG677eKORmS/KOyrboHd8JZ0yn74NY0Z7ltMhSTaflv+FguU+85s8IdduYHdXEaS3dzN9TIGHXaVmPpd8P4hq8lj0viGqxeUdYTXEu+RR294Rl71An3VTrOLTapwfTxRh/td4Rg6fh+NEHXwRYqyPav8opflO11peHNFQjHhEs/z3BY5oRruKEQ15xCOamkFjfua375Zm5AnvVULeqxGN91f1UkMzr2pmhV4lz6yUvPg8Mx9/lHyhTLQoLSvSsg97YjrN8lUxC8b2sCyE3sBt+X1flkPetCi/khO1DyfELiWPTxZw5siRkF43OfEQrm67wSGcZ+WW/6PCBhimWnH1yaOyj2jHeR8VukBzKQ3LYaRiH/bEdBrevLqvfZCWJwqp5BHbw/IYuvqXV1c5soh8UjMsjoqifOHeji/M8N43Hr9VRBbrargccf0MRI2+QjqidNzXB2rfF3/VEduD9mJ+AJbPF1BfapzvoY31wrJMm+uJX7DcR2tiOi3SOD6sdAXtM+tK6Fc+fbxS/dSi/MgbNWv17cPjm4NC9+GZzCv5VJGTBrzzjQ243/WjpLuonyE22HfTCpbH/cJYh2/DGME3/vTa0/yiDMy/84w7qg2+cSevn422z+dns11E28d2UdlrZUfYLppco2+G+Xk/neX/15R/NmUu+KUBuZ+O7RLemKp8L957PWXr4UaHf1ukMYdzYv5kZucsQ1Xbul5jkvGk5br7Jms/KWIhT9lnVHPklsDnObJL+1VF2tDesk1Fe8s29VBBV9lb04eEzuq0HuyvJb/bkO+QxZ3tVvNltDkse5Z/HcjznPR3TLvBN8HFPOOD5Wfgi+LBZwlm4oviKmZQ0m5OnSVQvorqBzxLoM4PIBaunu/DnZjOU6Vd88VievHVbIuaT7M+o41gOxDikyl6WT7ZatL9WD7Ze8gnQ/1i/UcdZ/1HeWe/AXnIfoO6fQ1tEI7ZmH8j2LDNxBsly74Yi/o6EfriPKdHWV8YgOWL9S0S+Rd6aGO9sCzTztJJpYvGmyrmU+gXsC765pLJE8Ir1U8tyo+8yau7PA/D8Z31GmUbv8iyOWPcxnbguM26O1fUFf0Bkw0cl57gOmmqpR18x+Mslrd8is7KknRWCjo+rCcILJ9N9F23o+bUJe82mLpuR8VT1fU+Ja7bsb9XQ54GVHWAqoJNZixHfzPmIODho0RiIKOeRreXSAwQXYU1DL9tk2ySzkfHLM/TUlUpeRndfb7rD0peGHYfDtH2KFcz6/gh1ktdmRFytc4X/+2OVz3+hr//ik+lfOFBFe5/oshf8mqdu9UwxtfnDEEah95xKPJdrVPQDNwdwj/Eb4n8501M58vTFwrryoJYdrUOmkrefFu17vO0/Zkwbf/da/dPXWzov0XUxTcEYPiPN/dj3ffXBmffxv+C15GNhNo1tl1lN/77NoYlD9uignb70FBd5yt0Zos0w5qyU04vg86CNrAdxeXOIXr38lRe2dVNHt74H3r9VlLHF1MIK8b1QMpVD92Q/2pyuXttyN+T/ubNeOfDBcGvJXcb9Yj7j2U3+RcPs7I95o2/nIf9Gst/L9gfPhI/LNq8B+rFhyoxTKraxSF8y/9G8q0KjpkyhM/XCFZwHVnwbrv9dR1ZviPxLInIFUTFd6gNnDZI73hT3QUTnX/b5HXQZT+oFawZihOG6fvsos/iOvFuQOSfTVhZFnrQ+b05xFCTTMNQ5ZK/bxFlYl42MlPH60seGQz+XDkfGSw4q/AeGcT2cdvVpjO1YMGzWd9RQaSjsFoRsQ6NhJU87EXUWDVWjbX/sdSmuxEqh+OBLR7P1Mx6RJTjcaTgpUdzQ8cRvvRosBg976VHii8lo2EjDSqP9BCTL5iaK9JY5rIW5kagDTyeoPzx5oNv0wwUx1qW+9BNYEkd/5pmoHzNkPrXcPkdyyvLnXMzrxdY93b6O2n3Py3WNENnupb/NJjp/svizjqriFEWD/iCc4zQWr4qNjn7jgArvcBZrh3H9x2zU7IQGo34d+qjXkdy+XoAyz8OffRfFI3A8nywxnfQA+mxDIUePbf8PxcbqlT9ZmXQU0fPk+eSCU1vcMk0vRk4ej6m5A71meVORWaV/vvGCxX5VbLIR1l9x5cbgo7vWLo6ysp1d647etaC/uENdiGf9MT6Kb5FPso6O6Ma80R5R2Ub9G5eBpbhJH9jeCLkKKs6rc4mYrFgua/Lkqc+ynrAHWW1qFtDVIvLO8JqiHfJ0+soK2usj8WKVWatQi9BsPzrhEiHWEwn6qA8AfZ8s9rP21rVVl+moy5nSB4e0Sz/xsARzWhXMaIhj3hEC42MWf5eRxpY1XAWkbWejTRD1TD0KCt7arGPDrJ8oSn0HR30edUHw9FBlhN15DLU9PtkAT3Rf8pYQ8zCzdpjkXWcPetI0cXCBhimWmHwyaOSX/7cVvKoI0Vs79S6YIUXAo0oecT2szz62po8RXWVIxXIJ7VGzW5krKPVr6YZH9K5kmjm/QzXlaL+is7KknRWCjo+rCsFluVXW/l92z3R1ljZkscnBnyyp45HlNjuaew5DPI0oKpqK8hoBpajvxlz0Pm3eyoTUlQk1A38ik7IVkMfnQFBh7dz3ZGa3pJbCl4asig6WhAbzYM9akZl+GqR0urVFGkh20S/+okz/s+CO/58tEHlrS78LkR1f0nkL6meE2p44pPlQ5A2Smk4xFgd1DbRgqfLJkL4h/hqgYe3iZZZLLq4IJZtE/XdkjFTumzD9CvAjeJtolXXRbkrrP8FF3uCF7NYxwvasoZviFN8KbnpY2oxy7f4g/Xx2TfDUqe01aaNAcqPv5OHx4s3pjIWcxE3qeM9SzrbpsaREDlAXLW4wfKKmG2oz9uWdLYFb2QJWcCw/D9cN13ugRTTF2pheg2g5/vCkJUP/cKQ5X8n2AzeTjlHtBkXTtidHQEaTDf5fWJGHd5HPkhBPZLbKTnEgPVhO6g25akv9ig7GPIdl5J28FNF7WDZLxkpO6j4UrL/PpnXDpb0Kwetr/Ke1sX8bEfRb8OTnXya95Nk79RNQHzbXfJU8ZXPKrCUv4t8w80WvzFDtr+Kby2pxb12+ttsDsrudvjdS9YVHSw/10NnqCQddbe+0kVc0TN9LHgTxGDJuc+gT/bUjWDsR1m6+tewOI1vwShoi3LfgqFua+AVWJ8OhmKVnO8N+myLmu+NeOqi6smh8DJtbkbE4s3KSv+2CywedzC/kgN144SVtb7DGwOKhPpU36mbFkqE+ow911A+25OppiljGViO/r6G3vUK9VV9SdtMmWu1omVtLuk6BX+I3fD316f71EVMB6Jb5RuqSg67hT8eXXao8w0JycN9GTIkJE8eVxTpHChYye/HpL9Zzi09eR5JF4EpfeELd7AsX7qXPBw2VkOsuoxHYV3e51jKLSjrKmF5y6fojJakMxpIp4r2jIhyrE8FpyfB+mT4TVdKfxs+eVJ8sbb7LuXFC6xYbtXlVgsEnQMFK/l9avrb5A/7nuUvr95i+fkeOqMl6YwG0nmktWdeSTrzAunMFN/GStIZ67P21HJ98LVnRJTj8bVguCJ4mdjwm667zUXG19BLHa19C4vRm1omVhduIiZefJn8vUikGVa6wa5jeUNdIjlA+fF38gzRu8enu+r5Ysrk4fFZXXKJ73CZ+Grara8uw/T1i2/cx/KWT9EZLUlnNJDOI60955akc24gnZni21Ul6VzVZ+2ZKTnYUZLOjkA6tT3on/b02m7zyqWaZtZ2G1t2HKL8n142Xe7VNFZgjPw810kv742CWN53cyGfKMBd83MobZbAbFAa1s93EyaWn5VRDuuTPCXvnGiU3P4xtVTY68Qar28UXcZHWjO9VUZtT+BTeb67LUKxSm45muqTQz3tQvwRT11UPUM+hHIevAtZj1P8VifM8IMMbLeKLJMqHqmLzEsskxp7jqZ8ttNvwHWL0kgGlqO/j6Z3vZZJqzZXis5FJelcFEhnptozpySdOYKOD+sigVWrUsezv1VpIKOeRreXSGD5mRbxkDtLC46wo6EjuuHHurO0102dHN0pc2NXlugjJm9iVBscWaXRi1Yj84DrVjE0B3zQ5HMU3UGvhKM7oV5MUsfPLu3Mh+3Bgxe9ZhNfoNlEr837PJuw/H+xdLrcl+C33RmR1M90C/uIddjXp8gDpcP8aSF1G1NROkOCDmNl8eyZ6W++u+IbKW/UWW6UN8ZMHtvtxfKL7fHddeHbHaR4qQ6O+mirz1hZ/nk569prkyrvFlOr4qF1vXKG63qoqGuFO1WCr9zZXztV8t1nnbWvoUGo+I41CdMG6R3frHPhROffJtmDLvsxjhldtTY0T2D6tqv6JMuJd732hDIdjksMesojhvo4m2GocsnfLxVlfBoQIsHJk7X3KQbWAoFVcs1qUahmGn6T6lJUM30fuEsebrvvw2mYxlvEQ9euFFYrItZIJKzkKbo+V2PVWDVWjdUvWGof1wIqh+Mn3/+t7sRtUBrWzxebx/K8JuSLh+elo26zqvpYJUeZcOxmvuVdS8TyvJaIx8/b6e9ktnr6Mk0z68tSt6a/eS3xY7CW+Ohl2W1EPu9r10R3nUveDDaqbgZDH2d4Yho3S3/Qh7Ob2JQvMYfSsK8No1cfnEd9oG6HnC3qw1cDvA364ELqA/XRWp/eKHosI7My8o9Q/Sz/ZWmd1P3PWH5eBr2syNzLM+hdCfR8t2Ua7ZJyt0jJHeory12o3x0qp9Y2JaccsVHX2KAcZF31M8vpPuBrdiz/E0Wfh8o596vlf0pgv0ayJ4vy3oKqImtqHPLJAfYXfwUU+zwrEolY2Nch/Tpb4HO/PsPTryqCjPXkfrX8Nwf2K15psQ8H0sr2q+8GSdWvvhsk1fiN/cpr/TyPRyzfPo/kCelXtTrH/Xq7p19VlNtnhy3/C/vADiOvQvpVrQSE9ivbYexXvocfxzrW5Zmy0a8Sfc4+P9uFrPopvkW+h38soxoLRXlHZRv0bmEGluEk7zCsyixXl5ZjCJRZbvnvEixXaqoW8iq4NS54UWB/3RrHx/OVmvk+V9RrWKxAVJPHVgsaolpc3hFWQ7zDNCWqWMZEVa3/4gj9Bdr5iSLEMwVl+ZTnb/nNA83yLgxviPLv9YxCPi84edhaLxb50TPmiyixDYspDcvNy6CDoyNafh4dLf97A0dHo13F6Ig84tFxCaQNivzM76Ui/xLIw1GlpZDGKo08Xkx0epkOln8lp2r2rbzxAU97e83KWL5QJhZRmprNKVmwfFVESrA9LAs+XUoe5o1PdpA3LddbTlAvFxEdn11KHp8sYHThdIqaYH+EzNqUHVLROcun6AyVpDMk6DBW6D4Vy/8nwkb55N+3P6KXPbb6KN5YWSWrjYx/jQ6/860QstuxOCIdJf9GZ0lEOqhLLaKzNCIdtN/8BcllEeksgzxNorM8Ip3lkIdXBQ6LSOcwyMNfKV8BaYhh9Thc1MOmAEfA+xxjQfAtVYbfpLrkpDc1BTiC6HH7WBdXirq0RNpz4DemIR31PQiFNSsilvXtqOvua97NtELQWeGhMzeQzmhJOqOCzogoV1ZHFG+MzhER6aDOjBKdlRHpoBy0ic54RDrjkOdEorNA1GGfP7B8+n3y3ypMo7LJYyvAQ5T/3nXT5WalmCaDaCuwjlge/ZfDRTuY3qEpDbN/q6FMDnskL8Q2rF68m0u8OxzSQnhn+W8D3s0j3mG7WLfXQNoRlLYW0lZS2jpIQwxMc9AGfMcyh+Ut34gox+PVenifo7+Cb4gy/KbrbnOR8Wo90cO2Jw+fcTiyGL0ho3eUoKf6YZ7TPEX6hjX1BVbXbWdXUxraxnWUhvZsLaWNQ9oJ8Bsxs9rEO2CxfizfWD+eT6NPz7Ec9MOXUBr6zkspDdvM/q21eZhwksd22gxR3k3Lp8sck/5W9obt+OEC29JWibQE/5wjOtuCNgX5iGnJMyje+cbQ1RlYQ07HDdgeWv5LybajjcmhSzcaX9bCS7ZDBe3CjaF2KMsmYr2UjQr54NLrjvz+/Pff8N9fyWu7fTbtCpG/pE27XsWyjPbUiiSkraO0YUizOqgPLhUcU64P4R/it0TaHfA7T1+0RBqf8SmKxbawLNaSglj2ISj0SdjvUDFDHC94bFjkqdfqHlhXEhaWZxu2pgcW74hcLdrI/gLnGxbYTHvEdbeNbVlBOxkcAzD8pmhDEZ9K8VaNNWzHsWxLpLHMrxV01go6CmtJRCyOY8aILyoZ5jUqpVtLPHXG8ksobbGgw3PZ5Hc7/Z3I9tOW6/qg3I9DfdgvsPw3wDzpGTRPQto+n49jLSourda5VKzFR2esJJ0xQafquDTHWtZEpIO2ic87ro1IB/WtTXTWRaSD4yL76EtEHRKZnSA9WA9pSi+3TTz87xDlHwI9eKlHD7COHeXh/bhoB9N7FfnjBf1AGWsxrF68ezXxbhzSFO/Yhlj+f1w7Xe61OWwI+pZrKA35sZbSjoI0xMA0B23AdyxzWN7yjYhyxl/rrw3wvopYi+E3XXebi/gFG4getj15eF5ydDF6U7GWYwQ91Q8Ya0GeIn3D4lgL2tlxSkPbeBSloT07ktJQvznWYjSy2sT+tKqfL0a9v3zO8WL0vD4ntq+Iz5k8501M5+O0on5iDCyOm+0PX2i0JJ1RQeeR4gvxutPB4gt9MqcvxOP5lG8C4/lDM+AL/WEf+EJ/HMkXegbw7nPEO6TNuo18Yl8IfRT2hZBXiIFpDtqA73xrncw3LMfjVUHfJNgXMvymKyUfU+OV8hHH4R37QgV9vSlf6GhBT/UD+kLIU+UX+Xwhji+gbWR/B+2ZLxbLvtCSHm3y+UK8NwtjF8nfuO+B13os7+NAz/6O1noQ/5qJzjSU8RVA9x9JV5Evq+E3pjkX5jtgecsXc2xSa9Acr8obo8byvFa5VtDhMZ3t678t1/VB+4r+ANtXy38u9PtPqM+QNttJrDP7aHn7c24gnbGSdMYEnap9GvbRqvJpOF61PiIdHC/bROfIiHRwHGIfbbWoQyKzcw6bfo92HvUA4/Ucr7L8/7BmutzcFFPpAdYRy6OPtka0g+nNT2mUHBOlj2ZYvXi3kHi3BtIU79iGWP4/At4t8fDOF3daR2nIj/WUhrEMxMA0B23AdyxzWN7yjYhyxl/rr2PgfRU+muE3XXebi/hoofEja9/GYvSmfLRjBT3VD+ijIU+RvmGxj+aLe6BtPJrS0J5toDTUb/bR1vZoE/toSvYr3O8RHK8y/Kbr5mMR2VK+kBqHeWzCstw3ycPxKrUXRMVcVT/zWn4ZLN8+L/aF1H6yIzx05gbSGS1JZ1TQqXr/8v6KV1Xlc7WJTlU+V6gvdBGN50dCWsh4bvmfDuP5pTSeq/kt00NfaK1oB9O7knyhgvEP6QvxGlQW764i3q2FtBDeWf5LgXeP8/COdRvHHY5XhfpJ7JuqNSp85/O/2YfEcjxeFfRNgn0hw2+67jYXGa9C40clfb0pX2ijoKf6AX0htV6HWOwLoZ3l/c5oG9nfQXvG63qo3+wLrenRJvaF1J4xxhqCdyrmxPOOZ6X6lejazelvpedGO8n3U8pX+2GdZVXfvwR+YxrSCfWdVkbEqv2waTr8Lo8fVpV/xH7YIy0mlRWbvSsgJuWLzVr+76+eLnevx5cIiUn5/DDL/8YZjEll8e7NAX6Yj3eW/8+Ad2/L4YfVManpeuI7xK9jUtkxKZ8f1g8xKVU/xgr1wyz/x8luFPSbpN3gs0m1v9ZZVsnPHfAb05BOqI81HhGr9tem6fC72l+LQ6eIv/alSP7aLeBz/OUM+Gt/3Qf+2tcj+WtXA+++5VlD9N0hwP6a2teufDkeB/PGzbD8wRY3U+PVgRo3860hsk+mzjmE+Gsx4mahMS6mmeXXPW6iM93y/zfE1/6T4mbqTH2S744Vnflqf62z7IEUX7N+VfdLsL+W996puaLOis5oSTqjgk7V9yexv7Y6Ih3U+Uf6OmeWz7F8xfR7tLehPofl/+mq6XKHp5hVrnOuSmnMxDpnFu/WEO+K+mtfAd6t9/COdRvHRrYv9Trnw0+9zpntr/nudULbGGudc3WPNrG/hvVbnYEV6odZ/seQ3Sjox0i7wfvS1D2vJe+vC/bXDL9JdSkq/6rv1J0S6hyllVVzvDvgN6YhHd8+dMQaj4jl86Nqf62Tjs9fG49IB/uX/bWq/MI20anqbEOov/Yk8jmKnlV5Pvgc28nnUHttmV7oHn3L/1SyuwXv7pJ2F+8WY1vXTn8n7Xwa8U7t0fedo7T8TwTePYN4h7RZt5FP45SGYyr7cjH33mJ55puai5Q89xrsrxl+05WSj6nxSp0vRb1gf63g/GHKXwu9wwL9NXVnJ2L5/DU+RzkOaXxWEu2Z77wc+2sre7SJ/TUl+yrGhWcqOcalxqXZoo05+mg0VAYNv+m6+V1EBseJHrfPZCK5T9/6If0c0fk791xx2/U37brh4p2337rl5h1XbL9lz67tN23ZseOWnbfeipVGQuhYYDo+nMd+LxLvEWN1j8awMGBnsfO+pgcWX9iH5dkAru2BxRf2qcGN/x523fW0w74DATioaFn12kb1UosvPiOPwvkK14mlLrH0GUbEeiVhqUuG+e9h111P5pcPJ8uAYr1eRfXKOoSe/Hd0D6wXEFbW5T7Jf8f0wPoVwlKTcP572HXXk/nlw0n+29ijXq+memVtvkn+O7YH1h7CUpt3DOu4Hli3EhaWx7L497Drrifzy4eT/LepR71eRPU6DtI2URqW44+n5Z2kYfmZmqTNJzqbItLZBHnaUC75+3hIU5edqkNMNvifBO+rCJgYfpPqkpPe1OB/EtHj9nHA5GRRl5ZIG4ffmIZ0ThZ0FNbqiFjHU3syLwKiSdg4pIVMwiz/eTAJe4gmYcijTdRG5ceMC3oNatcskR/xhij/H6Z1OsR1f251kyivsHE8DbkQGPWrCh0x/FgXAh9P9Lh9rCMnibq0RBoHLZQuniToKKx1EbHGqT1ZOvLlSDpyHOjIV/tQR74ZQUfQhwrRkTKXRyKe1QffIX4sHVG+rE9Hjhd1aYk03livdPF4QUdhbYiIFaoj34+kI0tBR35YoY4Yv0N1xPL/NIKOoN8coiNlgmGIZ/XBd4gfS0fUpWk+Hdkg6tISaThnwjSk41scR6yNEbFCdWT48E6aRXWkAToyO8XsJx2Zm9YpVEdU3auYe6n41bnwO4tHSnZbojwvrK4UdHrJyJLDdX2UjCS/bf7OC+v/Oj5dbrlHRvphYfWqknSuEnQeKRvhriI6R0Wkg+NKm+hsiEgHbWXoBbXHkR4cDWlKDyxeNET57x6fLneCRw+yYpa4sDou2sH0Tk1plNx4JBdWDasX706PNM7cCrx7dA4bgj4923jkx1GUhmMyx31VfBXfscxhecs3IsoZf62/MG5ZxcKq4Tddd5uL+FqhBz+tfZuK0ZtaWFVzCdUPuLCKPEX6huVbWB2nNLSNGykN7dkxlIb6HXJZP7bJtxHOyvo22OyvTWbjxeh5N5lh+9iPP0rURfXNr8JvTEM6vg9xINbKiFi2xlBvMut+14+HAg4WX2h3Dl8oeXg8t/wLx6fL3TIDvtBz+8AXuj2SL/Tv7elyL6x9Id9zwPhCxxWjN+ULqTXsPL6QWtN+JPhCg6J+mA91D3UHxw0nMLLoMY0BUfY1rrPemLaDaOSNAe0Q9a0wrjsYql8HSlwXZQDTkE5oLDbE5ym5gTHYHzf8Kjcw7oB3kTbRDvr6YbWHXsG1vAGj59vbhfQSezrLdfdhrw+hIA3sryydL7qf8qgeWL79lLwOuKEHFu+nzNq4jGmfTv2XxA7/+uGdeWwv4G9Cno+nv1mnkA/79pJQPt+HgMp8KAfxnNO6xx9FLPshINUPWR/mOcT5ZQT7KGufqbo0K0RmfR/WUfXJ26dqU3mS7/c9+daKfIpW8rf6sDj74p+F9aXvXNvZRizPe5MXTZOe4he+8x3OsHyKztySdOYG0hktSWdU0BkR5RoZ/xodfsd0FG98hzCL0kEZ49jAeEQ6qDdtolNVrINjAytFHRKd+QbNb9WhdzVe8KH3N7Wny32b5reoBzzW4cV6TuTn2IDl/weKDVR5sV4W775DvFMH0Hy8s/wvaE+X+66Hd6zbaPuXUBryY5zS1Ef+GpTmoA2+A2jqMoiD5QCaOnx8IB1AU2Odso18AG0c0vgAGup3yIf8fAfQ1FieHK6yw2fTh6su3nn7Ndtv2rVj+55du2++cuezb9t5654hQFYjxzj9zZYYr4bKehr09wClLaJ0POWgHt9oWvKKg2DP1/CbrrsXimiOOtGlvAy+qgfLqqsqXgu/MQ3p+D47iFhHRMTiT1TUV3lm0+mHT+BUdQVAm+jM1Cebs7yVlUdMv0d7GOqtWP4V7elyq1JMdWSYd9obNnp6S0Q7hij/+pRGyaib9PQMi+0u8+6oAN6hTcvi3c9XTpc7hniHtFm3kU9sX9S1P2rGjhiY5px/dV55BMw3LMfjVcGocbCnNxO7FtTVOCWvvpjy9JRnqfoBPT3kqTqJ67vKcxGlqWssfFfoKBsU4ulhm0I8PZOtBYKOpR0OaYspbZVoc6J355De4eeil6a/h4j2dWSDCl6/dOYI0TEMxD6iIHaovmSN51ivpkgbCqjLiX/z0KLBp+54X4PKW1343QDgo4xh/otF/pJjwaNGjMbEdHlc+UmeIUg7gtKGIc3qkEQTN1D9Cq7YPCqEf0onMf95E9P58vSFshmoI3mwxlynXKHumP6hfi9Lf48QXUtPnpI6GDwPMvym6+ZBkXFF2URsH8+DFM9aIu0l8Jtty6B4N+DBWhARy2yz6meeBy0QdBZ46MwVdVZ0RkvSGRV0RkS5Rsa/RoffMR3Fm5mOeC+NSAfloE10lkWkswzy8Dwoy5d/PvnyeD14iC9v+SfBl/9lj0+BdcTyOA9aLNrB9F5CPkjBsUXOg3jXQxbvXka8WwxpIbyz/C8F3r3SwzvWbXXtlJoHLaW0cUjjWI+lORc2D8Lylu9gmQepMd7aV/CGjal5kIoTqn7ImgepG5x4HoR2djGlqfmtsmfsc6F+8zxocY828TxI1a/2hcJ9oTvgN6YhnVD/ZUVELJ+PUvtCnXRqX8gVolPEF/qdSL7QGhjPf3cGfKFP94Ev9PuRfKFDgHef9cSEWbeRT+wLqZiO8pN4Xp/3tBCWn4Gds8G+kOFXuXNWjVcxTuol//W6UVP5QshT5Rf5fCGOCatdesqeHUFpPl9oUY82+XwhXg/HeC7nXQjtxbzfOGK6zNDKbFrLXWfaQkg7jNJC9RMxkL9oKzD/M6kNlv/v0zYkscbvXqsxB5yWUbM/KvZp7ZhtdCEth/x+KqnXF6+dpoPykjzDE511xvHP51NZ/uUiP8oc+4bLIY39OSWP6F+YPCp+WR2r4BfWIYRfam0qlF+s98ivwwlL+b/IQx+/rI5V8AvrEMIvtfcklF/GA8WvVYTVa45zMdXVsGc5bRN4N/OUHU5tmbotx2fjFwpstI0NwsB2NEQ7RigNy+6L86QVnqk4D/uaq6EuLAuIyzfhjIJ/Nk68UeO0b31LxTh8OzxxHF8bgLXYQ9v3iT5FG+vFe1d4z4zyN5QdMN6UtAPDyg5gvIrtgOonzB/CK9VPai2c96yFxpxWU1pozGk8/a3kU8Wfsmw26wPOZ3iuo+YJPtkbF/lRj1n2VIxV6T/bDdR/thsoo2w3sG/ZbhTdoX5cWtEqd6izfA85Ld9ZO8/PBdt2QoZtG86JeTKMRw+BjiaPWm8vaQuGlC1AfWdb4LPByZPXbrLe+vaVqnVz5Cn7BMajWSI/4vGeuc2BPoFv1/c4pYXO+0wfErm5Ia1Hr72J55PsoU1Tc8WsWxaeCvJ8Ec3xYtiNZZSm9k6x/jjnlzO1qx7HUC5ndqDkfvDgWArvBy97k3roOk+MTyEn/6kTLaofMJbS61SljQUzbdeQTyF2DfObbVF7+1if0UawHVB7UdlGKHpoI9AXv4F0X9nIUJ8F49e/Q7FU1C/Wf9Rx1n+Ud/YbkIfsN6hPuaENwjEb8z8TbNgE8UbJss+PVXtL1Sex1amxIwOwxj201Sn2Iz201WfjuS7OZeuk0kXjTRXzDfQLWBdVP6nzIz5eqX5St7McSWmhussnt3B8Z71G2cYTohMZ4za2Q8V4e50aP5/G7gMlVvBq0N3761hBF22uZx0r6EybyVjB/RXFCl5Wxwpyxwo+cADECj4Ftu3DkWIFH61jBVNp+ytW8L/7JFbwzcBYwUORYgV/A/L8mTpW4HvqWAHRq2MF+ydW8M2KYgXPP0BjBf8ENuxndaygi3aWTtaxgny6GyNW8LOKYgUP0diN9eZz9EqnlM7zOfrVghfcf1mxAsMdovyz2tPllrU7MX1fdU6evPrDcyalPz4s3x4jdVPRUR7aWC++GZ11WZ1tr3AclbqL+sm667OZyRPCK9VP6mZavgFXxb3UmX6+vQnHoXFKQ9nGcZflU+1tCh13ca8R36sx3gOX+bla5Ec95nFDxVB8Z8SU/rPdULepKVlnu2H9ibECzM+xAsu/vv3wvyVvQpWxAr65H++TUPLNcyvLf2b74X+TPt7Q1pjDOTE3pji9YgXWj1X41KjvbAt8Njh58tpN1lvsG77LJfRmNdazWU77EFk3p57WfvhfFStAe8R+BtojjoGoWwx99xwlcvP49sO/ea6T/G5Dvse0O9ut4vpWNnlY9iz/k9rT5c5Of8e0G+soDe0AYrBM+eRM3ciHYyiXMztQ8gbD4FgB3y5f9obl0NvlY9wgnfynvuSbdaOz4qm6YdwXKxiH+u/LO1Gs/nnXQ3rxlefu2EbWZ7QRbAfQRrD9WOuhp+Z3aCN8NjJ0voE+y0qKFagYq9Jx1n+Ud/YbkIfsN2yAuiifB8dszL+zPV3uee1OTCXLPj/2GJEfb8kfp/b4vsKrsHxxCvX1mmM8tNXXa7guzmXrpNJF400V8w30C1gXVT+pL1v4eKX6qUX5kTd5dXcDpeH4znqNsm0yr+TT5+cnD+vuuKgr+gMzdbty1tidFeczXPZ9X9KeLvf6diemss9oL1kmevmdPGdS83Uflm99zCe/ijbWC8syba6nlVO6a7ypQndjzg8Ur1Q/tVy3XrMOht70zPo5Dmm+m55x3GX57HWW1Tfu4roy37bu23eRPMxPX5xVyd5a0T6l/77YGtsNlFG2G+rrl6xnGCvA/BwrsPwPth/+t+QXdmSsgL8qh/EMJd88t7L8n2g//G/Sx+9ua8zhnJjvS3F6xQqsH6vwqVHf2Rb4bHDy5LWbrLfYNyF7wdRXX1jPZjkds8Q9L5j/4+2H/1WxArRHHNcMvXme906hzmCs4Mvth3/zWkzyuw35/le7s90qro82h2XP8n+1PV3u/6S/Y9oNjluqmJFvzPF9zVatCyh5NjtQci4dHCvgrzEVjE14v8ak5jsl7eZUrEDNcVQ/YKyg1xfIfLGCKu2abz2kF1957o5tZH1GG8F2AG0E249xDz0VC0Mb4bORoT4Lrnl+g77mgvrlWxdj/Ud5H6c05CH7DepLv2rONUT5v92eLvfjdiemkmWfH9trvs6xTzVf92H54hTHivwbPbSxXliWaWfppNJF400V8w30C1gXfTGa5AnhleqnFuVH3uTV3aMpbRzSWK9RtjEGxvLZaz8F625W/ND8ARXn57lCjK8089z6WKgLr8PzOID5/6c9XW5svBPzODf9hMiE+kLxcZCH7RTKxKYArHEP7eNF/k0e2lgvLMu0uZ5WTumu8aYK3UV9Y91V/YT5Q3il+qlF+ZE3lqb22SgdPJbSQr8YbTKv5HNctCPrTh7Wh3HA5a+2K1vok71eYxbLnhqzlP6z3UD9Z7uBMsp2A/uW7QZ/CZzzc6zA8q9MGWL+J8pI2VjB8VTH46AOSr55bmX5T07rmPTxqgzbNpwTc22K0ytWYP1YhU+N+s62wGeDkyev3WS9xb7hmI6KOyBPOVZgPJol8iPeEOXfBH3AsQK0R8dR3dEe+b5gz34G6gzGCral9Rhx3brbhnynkuyhTWN7kTwse5b/GpDnR6W/Y9qNDZSGdoB9azXmKDlTa0U4hnI5swNmV1AWq4gVGH7Tdbe5SKxA6R+ODxwrKGg3p2IFJwl6qh8wVoA8RfqG5YsVVGnXkE8hdg3z89wd28j6jDaC7QDaCLYfR3nooY1AX3wb6b6ykaE+C87Pd1OsAPWL9R91nPUf5Z39BuQh+w3HQ12Uz4NjNuZ/ItiwZxFvlCz7/NiTRf6TIM8x1B6U9ZMDsDZ6aJ8i8p/soY31wrJMO0snlS4ab6qYb6BfwLqo+gnzh/BK9VOL8iNv8uru8ZSG4zvrNcq2ybyST5+fnzysu8eIuqI/cKDFCp4Puvta4o2yz75YQd75Otqw4wOwxj20ffKraGO9sCzT5npauX6KFah+8tlYxSvVTy3XrdesgzMZK2D5HBftKBIrOP0RHisIGfMxVoD5OVZg+d+aMsT8T5SRsrGCk6iOGM8Imddb/o+CbXt7hm0LjRVY/r0pzv6MFaC+sy3w2eDkyWs3WW+xb/ZXrOCD0Ae+WAHHNWPHCj6f1qNXrOBjJHtFYwVfBHn+zfR3lbECtAMcK1BjjpIzFSvAMZTLmR0oOZcOjhUYftN1t7lIrEDpny9WUNBuTsUK1BxH9QPGCtRcBLH6MVbQi688d1cxzbzzDbYfRWIFnyfdjxUrOC5SrADlnf0G5CH7DSdBXZTPg2M25v8K2LB/Id4oWfb5sTHm6z4sX6zgVJH/FA9trBeWZdpZOjnTsQL0C1gXfTGa5AnhleqnFuVH3uTV3ZMoDcd31muUbYyB/UvGuI3tKBIrYH9gtcBVNqFB9cX84/Au795R316joylN7dVnOuoOsOT3i9LfvNfo39PK9/Kp8dva+3AgLYe8j1a9j6bXfNB4onwj3vOCPMbzSDw2GGbC+yU0NoxDPt6T4bvrgctiH8zKyM/7yabyr3r4X/TZffKMOlFWnrENZeUZdeNWaqvlnwttnQF5nru/5ZllFuV5nNKUPDdctw0rE88Z7kP5P/wgkv81fS7/ai7hk/9eMRKWf/Tf9of8fz/90FmI/B/voank39qWJf8YT8T8J3nkX/HXJ/+91gh98n8ypWG5lRl0UP6x31n+Lf8ZgfJvtKuQf+QRy79v3pQ8eec6vCaA/rtP/nm9Npb8fzmH/Pt8byX/1tYs+Tc8jpdf7JF/pYO+c4x517qwDSdRGpZbmUEny59n+bf8VwbKv9GuQv5jzl97xRnYn0fd8Mk/r3PEkv9PkvzjGXffHY7jlKbOsfvurrB2qDOb6kwfn9ncsWq63HNXdWIqH8l3R2KMOa8Py6efPv9a0VZ3Y3BdnKinlavw/Ndw1edaFa9UP7UoP/JG6RafcR+HNN+5Et9deXhejOVTnXEP1V084/60FZ2463vgMj973eHKd9CoO1yV/vvuhGC7oc6xK1lnu8F3IHF+Xou2/C9P+8LWN1BGcsi6XIvmu2rwHL6Sb167s/xvBdv2qgzbNpwT81cDx9lId9UMVX1XTS+7yXqrzqY16G/EUus3rGeznJ7r8r0slv8Nwq9T9ojv4xiHND67v1rQVfYI16I/kdaDz+gmv9uQ736SvaJ3Mf5vkOfJ9HdMu8H3Yam7DnxjjpKzliiPYyiXMztQ8gx48Fq04Tddd5uLrEWH3k9X0m5OrUWrOKHqB1yLVmdoEcu3Fl2lXfPd49OLr7w2jG1kfUYb4bt7h+3Hag89tBHoi3+CdL/X/Tnss6hvPCW4T6L5hu/e9rzn2NWeOfYbjoG6KJ8Hx2zM/xDYsL8k3ihZ9vmxx4r8GAfn+4PUOXMflu98/XEi/7Ee2urcDtfFuWydVLpovKlivoF+AetirzXZEF6pfmpRfuRNXt3l9W0c33135WH8/S8zxm1sh7pnQ/kDOObfT2M30veN3ayfyldSes3306g1BrQzWfdTfAt090fEG+VHlrmfgudMee+nWOuh3ctuMG1lN7guzmWPrUp3Hyn3U/CcH20g7xVR97Uo/eQYg7o7xdLUmKPkU90tEzru4t0yayhWEPseSN99tbxX1Hd/ZOi47ruLhe0G+4ecn2MFUzqVVsD8T5SRsrECHsfxzI2Sb55bWf4laR2TPh5arTGHc2IekuL0ihVEGseHqh7He9lN1lvsG54/qrEUecqxAuPRLKfjFHz/suWfD33gixXk8RdU/E7ZI4wVnJwCcjw3+d2GfMtI9orGqU4DeV6R/o5pN3y+Ne9bVWOOkjO1NxDHUC5ndsDsCspiFbECw2+67jYXiRWEzt1L2s2pWIHyw1U/YKwAeYr08Vxy8sy0XfPFQHvxlefu2EbWZ188EW0E2491HnpoI9AXP5l0X9nIUJ8F5xvLKVbgu/s59Jws+w1qPsfjRtaepqxzso8BG3Yl8UbJcpk7tXgfvjp/6sPyxdh7ndH13TNU36ml+0mdOfHdqeXTXY4x4PjOeo2yjfvLr8wYt7Edai1E+QM45i+jsRtjBfzdi7zxAKXz7Kcp31d9d4B93yeA7u4m3sSO84XM131Yvvlarzgf067jfJ35VT+FxPnwuxccKwjVT9Z5lO2OO2BIPmPFCr5+WCeusgk+2eu1n4ZlL/QMCduNvPEAJetsN6w/MVaA+TlWYPl/mWIFKCM5ZF3GCo6jOmI8Q8l31png+8C2TWTYtrznjF8aGCuItH8791lQnw1Onrx2k/VWjfEN+hux1Bkw1rNZznnPTvCc+U5PrADtEcc10R5xDETd7a7sEcYKPkqxAtTdNuR7PcmeiuujzWHZs/wfB3l+E/kbMewG73FSMSPfmKPkTK3z4hjK5cwOlJxLB8cKDL/puttcJFag9E/Nd0razalYQej9exgrUHMRxPLFCqq0a771kF585bk7ttH3bWDfGgbbD99d/Wgj0Bf/KOm+spGhPgvuV/hS6rMoHWf9zxsPUHNr9huOg7oonwfHbMz/v8CG/V/ijZJlnx/ba77uu98z5E6tMueefPeF9LpTS+mk0kXjTRXzDfQLWBfz3rnb604t9v99d2qF6u5xlKbiAUp3MQb2fzPGbWyHilcqfwDH/NcfoLGCvwLd/W4dK+iizfWsYwWdaTMZK/huRbGCN9exgtyxgv88AGIFrZTxSR//LFKs4Od1rGAqbX/FCuak/bq/YwUb03r0ihWMrelsd9FYwSaQ54Xp7zpWIJ86VkD06ljB/okVbCTdjxUruOsAjRWcCjbsIuJNHSvI1sk6VpBPd2PECi7KGLexHUViBWM0dvtiBVg33zyi7BmE1ZAn6wzCVaC7NxJvYp9B4P1PM3kGwbf3qj6D4L/bz3cGwRcrwHEuxhkElk8VK1gN71h3V4u6JrhXUawg9hkElr3QMwhsN3zxh5k+g3BbWoF+PoPwq2Dbnpdh2/KeQXgBzFPrMwidWDN1BuEVgbECjnOo2HmZMwjvo1hB1hmE15LsFT2D8EGQ57vJ34hhN+ozCPUZhH3g6b+P1DMIaCPYDqCNiHEG4X2k+8pGhvoseAbhIooVhMYKfet1M3EG4WNgwz5DvFGyXJ9BePipzyDk090YZxA+kzFuYzuKnEF4LY3dag1zpvcVrBZ1Zd/3C6C7f0u8ib2vIGS+7sPy3W3Ya32Madf7Cjrzq34K2VeAMTHejxB7XwHL5xrRjtBxF+82XBiwr8Ane732FbDshe4rYLvRT/sKfkixgn7cV3BIysCkj3+cYdvy7iv498BYQb2voJunsfYVDKT9qmIFaI+q3lewNiXWa19Bc21nu4vuKzgS5Hkk/R3TbtT7Cup9BfvA038fqfsK1F1mVe0rWEu6r2xkqM+C+wrmePYVsP73076C48CGnU28qfcVZOtkva8gn+7G2Fdwdsa4je0osq+A/YHQ+04bVF/MjzaE+a9sjm+/gvKF1Drn2gw6aBOwbdsmHv6X134uBX/O51NXuRYf89sBveaDfNeuWq9R8m401Z4zvPf235Z31qeRpuEc70T4fQKkY/5npMTNb8B25uD3pSNQxgEGYg8VxG4QnnPaz0OfRtFLnqZIGwqoyzEveu7GlbcPb2pQeasLv2N5GRb5bxD5jVezqO5tF/RcrHTKaFvaEKSxH4h6YXVIdGkD1W+4YP1C+If4LZH/8onpfHn6Ysx1ygLKu9m+cUhbTGm+b1kom+mLBbPdQXuK3+fgtXTLfwv4WC8PGMPQr63imzE+rHEP7V57z5i2mmNyXZzLHpuVfkS6y3246m9UKF6pflJrqRzjWQxp45Tm22+BYxWvz6q9YUo+x0U7inxr6o9pDFQ+k0/2evlMLHuhPhPbDd+9tnljOqxnaDMxP8d0Lf99NN4XjIXImC7vBcVv6uSJgb0PbNsbIsXV3jyz/mfu2EfevaC97CbrrW9PwHqBpeY8rGeznPZ9DW+I8r/TE9NFe8RzPnXuQtkj9qtRZzCm+1mK6aLutiHfBzLiOih7aHNY9iz/H4M8f5hiujHsBsd71HeLfGOOkrOWKI9jKJczO2B2peB+rOCYruE3XXebi8R0lf6p+V9JuzkV0w2NIWNMV61RI5YvplulXfPNq3vxlWOsao1T2Qi2A74962s99NBGoC/+WdJ9ZSNDfZb1gPvJ1GdROs76H7r/MyQWzOOGsmE8ZmP+PwMb9nfEGyXLPj+213qkb43quAAsX9ym194zpq32nnFdnMvWyQrXV4arXjdWvFL91KL8yJu8ustx29BYMK7H/F3AegyO26y7R4q6oj9woMUKvg+621jXiVnHCrrrWccKOtNmMlbA8jku2lEkVvDqOlaQO1bQSoH6OVawNq1j0sfzM2xb3ljBohSnjhXsv1hBG/pgf8YKtqYJvWIF60n2isYKzgN53pD+rmMF8qljBUSvjhXsn1jBVtL9WLGCiQM0VnAp2LCnEG/qWEG2Ttaxgny6GyNW8JSMcRvbUSRWwP7AEoE7LnAbrtsOhez/UvvLkB9GS51dY58Ayy3OoKNiEMnD+78s/zMCfWqjXYW8I49Y3pXNxvzMbzV/RF+Z59dqL56Sd6NpdR4XmAnvn0Zjw+GQL/3M2VTaKkjjM8arIY2/gYYygvXAfkI5WAB5DHeI8r8Qxoa7SEeUDK+Cd9wHvj7D+ii5DpnXHO6h3av/mba6p4Lr4kQ9UR720ZqYTjPeVKEraH9YV3y2JnlCeKX6SekK+3UrIO1wSvPdaYTfQFtNaeOQhmcGWT4PF+1YAO94bFgg6prgzqVY1GqB65M935lIJXurRPuU/rPdQP1nu4EyynYD+3ac6o7zfSfycyzK8t9PsSiUkbKxKD73sA7qoOSb5+6W/2Ng2yYzbNtwTswHA8dN68cq5mwzOW6y3mLfrCKsVQJLzd9Yz2Y57SMZ3hDl/7AnFoX2iPd8oz3iMX+loKvsEcai/oxiUai7bcj3GyR7aNOUL8myZ/n/HOT5tykWFcNujFMa2gHEYJnyyZmaJ7BPheXMDphdQVmsIhZl+E3X3eYisSilf+oce0m7ORWLUvMj1Q8Yi0KeqvmSLxZVpV1DPoXYNXVeR509Yn1GG8F2AG0E24+VHnrjUA598T8j3Vc2MtRnWQW4gzTfQP1i/UcdZ/1HeWe/AXmI7UO5UTaMx2zM/9dgw74fMNf3+bEx7ov0YVV9/wTXxblsnZzpuTn6BayLvWIyIbxS/aTOZvFaWKjucnwLx3fW63FIw3jv9zPGbWwHjtu+c8Q45rM/MFvgNgSuvZ8LWIOEkfx+Ufp7iPL/RPiuhjkq6jAA77hP54n8o5DH6jNKdcCyo6KcybmSd8tXUt7nKnnH9rC8j0HaoMjPvJkv8o9RnuRpUX7kk6WNQJrRHCEc5HciE29b0klrrqgP9i3L1zzAGnTd/Zdmn5Ivy39IqjxKvhQP58C7vDy0+oxSHbDsqCjXSn8r+bJ8JeVrVMkXtoflC8f/QZGfebNQ5Ec/gX3vhZA2j9JakGY0RwiHbc7hCzvzjUB9Ghn/Wl35HdcVsexc4YjrluOydFCebU5ndA6FtHb6e1+710+/R96hnmDZ56e/hyj/6euny7XT36Oi/Fwqb2mrQc++f212eePlqOu2JT773HC92+mzB5b/KKjndz2xEntXUu9aSu9akIH1TtkYzM9659NTZbtRJw8lrEMFFso322Tj0Syn+8Dwhij/SdAHHCtBn6FFdW/krLsaT5QdsbKJLP15yqBR122L5hHNlqCp+qolyrcysAZE/VFvud8HBW2V32QC45XKPg9R/i3QVz+8VmO6jDocmlHnWRn551MdLP+5Ql58dgDlf4wwLf8FgPm7OTFfmIF5scfXUHrq89d6jafsTyAfF1Ia1p3HxQVAn/O+mOhjGso503We+iof0ldfHm8s7XoYr65Jf88mvJy2etDXV48X9Q3tq0M97WMsK4d3cIToCPLjies15nBOzKeIMV35KicA/vUZ/ohz3f5I8rBdRpuBeng4+SRIfw7V38aQpwl9VGO9YZUb6xvfUmM9zqOHJ6Zxs3iD+UPmt9iPvvHmOEqbA2mziY6a+4eOpTjne3BBJ+4cD27y+2lUD2WHsd7PSn+zHX6uxw4rHvp47ptnY32UHR6jNKy7yZySR8tXhTzOZEyB5VGNH8qesJ/lk5vk8cmjlU1k6PXk240JmqOeuvrGh/mi3Tw+zMrIzzbf8r/G4/csEnXwxS4Wi/yLRJ1HqQ5YlmmrfT3Jc8lEZ3ss/72B9jhSzGNMyT/yjeXfx6PkYZ6q/XrIK96zgnt4F1IayvwiSlNjtU9nQ3XDyu4bt3PYasRluxpqqy3/O3LG53y2upc9YlvdR/G5sUdifA5t7wUkX8r38dmvUN8nJLbvm6PmndMrf1XFeRoZ/xodfsd0VJ2VHHN7FN/mBbaHY/vzIrZH1Zljt8nvdvo7kaFP0dwC7dcglU0eHocs/1/DXOn3aV6BtI3neWWqQb/nAQ+ULb1ywk21P3nQvhhuFeupaF/ZvvhsqbUF8/fyidiGoO0ZIawRgYWyh2PavjwT0+Uj2ePhvHFbn31KnpCxCnXC2hayHofyxnKoeBnqH1jZRE8WLuhd/7me9vaSD14XwPGX96oq31zJguWrYmzG9rAs+Mba5GHeKF8ex1+WBfTbxygN+38B0VH+lLKX3MdoX7FfeC3J8n83ZxzUJze9/BaeY6vYmm++N9M+Xb/IDcdj0fbklRu2IWjPcYy28bvXnBnHyTFRZ+sHX7zfcLgNc5yOdT+X2sy+NGM/j/Lj2saAp+4cYx1INwWpOf6CHnW4neqwsEcdsuIMs0QdfPxPHjVHsXGoZBx+CMcze9inRPym0/LRdkFPw6d/ak7FsQQs67PRDZettyrOoLAOjYjlG3PnEB1lA8Y8dLD8mIdOqyQdFW9V/m0j41+jw++YjuKN0VkYkQ7qDM8nF0Wkg3LQJjqLI9LBeNiJRGeuqEMyTqw7cvp98h+eaVQ+A59NsPw3HzVd7qgUU/kJHN+08nj+aL5oB9M7NqVh9m8plMlhj+T5I8PqxbtNxDvlw/l4Z/kfC7w70cM71m0V4xx13fxYRGnLIA0xMM1BG/AdyxyWt3wjopzx1/prObzPM1cM0Q3Eb7ruNhcZr5YTPWx78vC5jsOK0Zs617FC0FP9gOc6kKdI37BMx5SdZR8VbeMySkN7tpTSUL9PgN9II6tN5tuOeurnW9NJHuX7s+zNtK+0oBg9r6+k5ip5fSVe3+hXXwnryb6Skqn5HjpYfr6HTqskHV/cXvnxIbKl6Cje1L5SbzpFfKUbI/lK/3bkdLmn03iPtiLEV1og2sH0dveBr/Rs4h3ukwrhneX/C+DdHg/vWLdrX2m6nvgO8WtfKdtXUv5Glb7Sgh5tYl9J1U/5O8nTdmFPiC+F7cvRd+Ohsmn4sXwp5ZcoX8rat7gYvXYia3PScmg3nwG/kXdIZyHVoWz/qdjM/uq/sWL0vP2nYlYx+w91K0//Kd3k/XZ5/Uq1j6Zqv5L3JmSN8ZM0xi+ENDXG854By/8RGOMfpDEeafv2ETWgzvvaPDGdFmnNabCf9xH51q153hd6PrTXucCvzdf1bwDu80VZ1m3Mv1DUw/KbztleT85jZYco/2/AGswnr9V1RpnFevE6rOX/bcDkdVi119G31thrryP7qMhnvvccy6G92Ic9MZ1m+UrqxLjSCWwP68RSSPP5ipZf+dzov7Pcoy/b6yxJ8uC6PMunqutYibpyP2JfLSMstQ8Y28Nyafn/WMil6n/jeRX979sHrHjq2wfci6cc70I+LqY0tIOLiI6yvep8phoT0YZMzvAclWMGy6Eug6KuhjtE+b8GY/C/0rhu8yXnwnRWzc9wzsVn+XFutiIAy2dL1R2BKzy0sV5YlmlzPa1chbol98nhXJt1S/UT5g/hleqnFuVH3uSdLy+ntND5ssm8ks9e+558uotxKY5ZKVvlk73QsUrp/zJKw3JsN9QYp3SJ7Qb2LdsNjoNwfo41Wv7/R7FGlJGyscbDqY6HQR2UfHMM0fIvgPVWu4iIMYdzYg6mOL3GWevHKu5PQ31nW+CzwcmT126y3mLfcJxU+bPIU/brjUezRH7EG6L8o9AHfNcB2qPDqO6h8Tu+Q1qtISRyc3xajxHXrbttyLeIZA9tGtuL5GHZs/wngTwvTX/HtBv8bQO0A+ynqjFHyZnyz3AM5XJmB8yuoCxWERM3/KbrbnORuFVojLqk3ZyKiR8h6Kl+wJi4ussZsXz3QlZp15BPIXZNxclbrruNrM9oI9gOoI1g+7HIQw9tBPrix5PuKxsZ6rPgOuSNNN9A/WL9Rx1n/Ud5Z78Bech+A96rrXweHLMx/xlgwy4j3ihZ9vmx4yI/3g04NV64blkfD8Ba5qG9WuQf99DGemFZpp2lk0oXjTdVzDfQL2BdVP3kuzdd8Ur1U4vyI2/y6i7fUY/jO+s1yrbJvJJPn5+fPKy7S0Vd0R+Yqb1/sWIF14LuPiPDn3auP2IFvnh7HStI6+N629iYsYLQfYgxYgUsn73O1vnGXdzvuykgVuCTvapiBWw3+ilWcHvaF/0cK7gLbNsLI8UKXlzHCqbS9les4NWeWAHKU9Wxgg8FxgruiRQr+AjI8+s8sYKidqOOFdSxgn3g6b+P1FgB2oiqYwUfqihWsM4TK2D976dYwW+BDfvjOlbQRTtLJ+tYQT7djREr+OOKYgXsD/DeqeS5bmL6Hd/7wvsiEQPrwTYna6+VleWzB18EP+uTJB9qb9e+e6Ez2pa192Ux0bb8/wZ24svk6yC/+H4h5A3vnUX7iXmT57wJJ3nwTajH147KpmVrySOeNiYY3z5K58M6YD7GsPsKfOfE5olyar8Z7w1fRDQWemgsEOUUjfmEiTxTY+HSHulLRNuceDcg8i/KaK8TtBf3wF0ocFQ8k/ctjYm0huuWBWtv6P0huG/pMWkFlL5k6YSSq0WeuvPcz3fHiqq74h/aD99dNPY3y9aYaGdD/G31eza8Yxur7mDHPFaWzzj9j7CZjJl1T9DuDMzGhmnMhzL2vDrAPBne5b0Lh31Hpeeq7mhL+J3qn0MpL5+TMFuoZHYsgw7zQ9VBxeVn8m6fDaSb6N/znfMtqjvm5f2t+LeS7wb9traifGMelm/LvwBk8ZMZd0ZnrUHszsBc7JFvxfeT4F3eu01Dvj2k6o62h9+p/mH55jgnyjd/G2duBh0l+1yHlsAx+R7JwGSaLA/Jw/LdEHSSfv+dtIKKv3x/et47N2eL+vN30taDLPH3KtS317CNfKbF8m/wyGfse9KtPso+jHnKYf/NFrTa9uPn/sfwTBcOcdkyyHehnAB8+tNrdV0aXJ8ej+9O1dlE32xf2wU9bZRhe1SM0PCbrpsXRWKEvjstk4djhAXPTa7Ec3AoR3gOTu31xf7iOz0bQD/Ro0dvmH6fpWNY9ub0N+vY2Rumyz0mA9O5crbpwbFO3Nj3+Fs78553892ZkXU/aNY3d56V/mYf8iLQze9Wfqd844f7+05HXovGeU2W74RY2NccTzEeZX2ngL/FY/mvhj7gdSscm3nP/UDOurdE3ZUeo26wHqvvhM0WuD69x3tlnpb+Zr1/kmdsbYk6oN7nvfuc7wMPvafa+qbCe6fH9vc3SKz+KoaR57um6KPh9+J+mWzvaZCPY8LJw/J1evo+K4aJa1eY/1livmLtaEIdTqN2nA51MZmz8fhMqnvbBT0DOC7Zo/wNw29SXXLSm/I3ziR63D6TlaS/rN9v27Prpl17br9k9/YdW7c/69bbbtqJp4qR40ylQaj4jjUY0wbp3RzKd9lE59/W+4Mu+0HpSv7bAmmKE3wzB7ZpS0Y5llx+NyDyn0lYZ4pyVvdBT3nEwHIsMaxFaKVPE7RZi+4ALfrxtdl0T3PdfGBNmi3omdZtobzOTWvd2dSmtgt6HheqdYbfpLoU1bqziR63r5jWoaQglWsI1fJgXnyugZph/jn0N/feoaIcP8axEdfNCe7VrVSm7YKe+aG9avhNV0qKpnp1K9Hj9vHc7Zxi9MYaVB7pIabVx3h9nUgzrCelf6P2Y/5zoA2YH38nzxC9e2NqHVqEmTz2HeiGSBsU7wagjvekuKOiPaupbapftgpctcZs+RSds0vSOTuQThXtsX4ym/FRmGO/g3h7pqfNarQ5M7DNZ7psOqtL0lkt6JgejEMa3xF4tCftGEg7m9I2Qlqb0o6FevK3zze57jZb2vEezFMEZtJ3jz96ukzy352QT4007NXsAppYFv8eprzJw2vklvf/gFz95obONmB/M6+Vnlka2rg2pSn7Ymlos5jXOz2YTxWYSXuuPLozH/MreczW3wXvc9j6a0LHMsNvUl2KjmV3ET1uH49ldxejd3WDyiM9xLT6GK/vEWmGdW/6N45lmP9uaAPmx9/JM0Tv/pTGsnsgL49l94j24Dscyz5DeoG8b2T8a7j8ju0g8sb6z+igrrehPn9G8R7U+0FR1ub8rPufPmu63J/TmILluW+VHhVt/52ijT4+l5TnBaH6avhNV8o+NHz6g+1jfb2nGL35IfKN9TFe3yvSDOu+9G+UL8x/D7QB8+Pv5Bmid/9A+oq6zfp6r2gPvkN9/RbpK/K+rLz6bN4WSGtDfb5L+noXpA2Ksjemv4co/wdAX79P+oryyX1bVft53D87Ih30Q9vwO0sWsP3GP+MNyv29VA5llXVOyfp9grbCN4xesvGzDbptWbJhtHjsuxtk4+cBsjHqsvtz1HX3AdrpLPuC+W90ul2zMvJntWtW6sOpb0dZ+Sw/gse9qSgRYPK6hZIt9KM5Nq/kQdlGxdP7XG/ayGeOq1v5Wc4vi2x35wmeqvHYyo+IupjuznZa7tsu6Dk7xD4gftOVGh8bobzm8fi+YvS2+OQEMZnXrxNphvX69G+Ue8x/H7QB8+Pv5BmidytTuWgRZvLwePw60R58h+PxMpqHIe/LjhNK13rZ3DU0B78H0pTNfXr6e4jy3w42d32K6Rtzqm7/aqJzX0Q6KKtt+M0ypeyQ8c94g7L6eir3BkjDfDgeozy/QdBW+IbRSzZOPlq3LUs2jBbr0pNANk4j2cDy9xJvkG/3URr2NY/Hvcahp1N+q/cs5/dzhij/YzzjsfJdUG54PLb8Z3vGY2VnfOOxkkVlGxVPX09YuwQW8pnHY8VTbP8uar/lvzBwPLbyKj53AqVthTSep2B8jucKuKbA/j3G57ZQGsbn2A4/FdJQRjg+N+5pD8Z9OV58DKTxmgrGfc+htGMh7TpKw7jvkygN4747Ke0USHsqtNXivkPU1iel70vuT5B3MWTF1Tkf/utc2HiAfcXfPzozIh3EumCik86WiHS2eNqzVdApuUYYvJ/E8JuuW6+L+L1qTVKtTeVb2eZVJ+QKouK7hutsPaYN0rsq9pOo1cytAtNGCmzTdRnlkBdOvBsQ+c8hrHNEOav7oKc8YqiVS26/vc/aT2IYQ5T/uTBa/TuN1ooW8oNHTKt71s4wroPlfwHUgU+ynANlVLu2ZmDeefQ0P150tMZ0AlO16zpqF9fhHKqD5X+J8AQGKQ/XR71L/sa9OliW/1Yycxrlf1KP9nA/Wf5XefrpbFEH1EnmKdeB81yXUYfXiDoI67Z197NuT62bo2cIfrM1UpznfTdnC5ysx7iRSKFJJPu9bKnUO5YAK5u03PZapy0/Z+dNO/fszGg7W+45GTQHnH5CxtCCa6HBY6jhxxpD1Zq9GkN5HQvLqvU/7F/8uxedpE9t33nap9v27L4lq0tDB9eGqBaXd4TVEO+Sh5c0MW1/icGuYvS8YqCmpvlcKRRO5gqi4jsf53v1tjnV9hRxpdRmhF0C01wpbNNdGeV6GbkBkf9OwrpTlLO6D3rKIwaWY4lhDclypdjlsPzvh6HJtuZyGfv7FvjNW28r2NgyFqpV+2tjSz6tYtNqVOYRquXBvPjMg5ph/qxh0R47nhqiVSFDZsFeHSnaq2WHTNWraigrub3j0AaVR3r9tl3p92i5JdZ2pU9QqMlk/09hgvMpCkmvgjrzCLRK0F4laLdEecvHR3OS37ylECeKvDXwHE9a6JZCDg0W2VJ46DGd+WJsBfP1MVo+HkVRnu8hrHt7YF1JWFlbGJL/7uuBdRVhqWUEdndVOQyVrwqoA75jGVwl6lD1shjLetb2va9TcGEVpCmv5Nb09xDlPx+WmL5F+ozlZ6r9rF9bI9JBm9KG38l/aslH8a+flh9Xifbs29YVsPy4StSRlx+PAdn4ocfW83KY8r7VkQceI5V+Yv5bKb9aKtsq6sVLZf/hWX5UAU2sF18RYvn/O+fyo/JGfbLoW37ENvPyo5qNlFl+NDzm6cAx0+3n5Uff9mQcy3m5DoN7vMSIAW5eKsTAJG+bwLGcbS2O5bxMisuPKCM2lvOBydH0/WzXrS85fFG5JGdYShdxGRPTnAvzu44JpLOpJJ1Ngo7xquhxZytfMCYzyDZg30tRJ5YNbGcj41/D4jSj1XSl5MR7PDHUz8Y2ZmFtzYlV8pjnVJ+c7rLbhfgjnrqoevKig20ReEuqCPu2epG/joe9G9TOcXifo52nhMqL4TepLkXlZZzocfs4DH20qEtLpF0LvzEN6Rwt6Cis+RGxzoiItSgi1vKIWEv6tI0x+zFmGw/r0zYuiIh1dUSsNRGxWhGx1kXEWhgRK6ZMxNTHmDoUUyZi8mtxRKylEbFi8n4sIlZM3s+LiBWTXzFt4bKIWDH51a+2MCa/Ytqcg8FniikTMcftmLxfGxErptzH5P36iFgxeR+zjTHtREwfICa/joyItYGwxgWWmtdb/o0i/yqR32KBGCe0shYDwSMROWISAz4+4BEMwz/UTduhqW2I19924yW7b2RsDKUge06mfBYOH3DdLD4mA8vR3yfTu0HAwycJLV2c+m4h2zUKhjVPaBAet8ERfqztGqE7D3kDEpZVJ5geB78xDemo5RWFNT8i1oKIWFdHxFoTEasVEWtdRKyFEbFiysSiiFhLImLFlImY/FocESsmv8YiYsXk1xkRsWLK6vKIWAdDP86LiBWTXzHHoWURsWLyq1/HoZj8imnvY8pXTJsTUx9jykRMnykm79dGxIop9zF5vz4iVkzex2xjTDvRr/7XkRGxLFQymv6N8+pVREfNYXd56GD5oifxLL86fuALydwF5a1syZsgB3z8VlvHS4RkjD3HUz4OyWBX3pWB5ejv4+ldVkiGdwHNTcNOM72L70lUf+x2nyi0RHkfnSp2C/p2xRkfMayWg49zkX9YT3yH+LF21amIpOJLyd1uIw3XbRYGBabVR50SQN6ivmSdDNgKbWD9QrXni3/HU91ouW7zdvlEZx1CzWhSx8M2drYNed/I+Ndw+Z0vYh4ir0XpoLy109+mf9iPrOe+fld01MkkxsJ+xx30Oyk/XiylME+EdMx/bNpfyc7v/6IPWJ0u+JDUZ9PG3nU9XdSVd92PwgmFE1NMxWfrdyUHWyltlaCrMNl25u07deGUDwv7ayPlt76YlZHf8LjvzoS+45MQVj5LfrZm1AHlB+uQJT9bCsjP1o2964plNxJty/+DM6fLnUfyg+V98sO7i1F+puRUpFWxg17R2UJpqu6+cc63Aql4pOg8uSSdJws6VY8PTyY6OyPSUadG1XRkO/zGNKPD75gOlt/lobOpJJ1Ngo7yNdAPL3kKfbDk1GbqZIHvUn3E992TECIHSCvWPQeq7r5psDq97sO6OydWyZP3U31yl8tuF+KPeOqi6slT8jJtXhUR6xzCUvq3XWBZ/l6nvjlUoKbuJS/hHvD1nToZHiFUcA3ls8PgA65bxO/OwHL09zX0LitUoMzo6Rn1NLq9zKg6ZDZT5lrROasknbMC6WwuSWdzIJ0LStK5IJDOI41vM9WebSXpbOuz9mwuSWfzQdqeR5qe1nLdSWdz3Z4Drj0VXr4YHNY3/KbrbnOR6ZNa1VJ8iXFhGpZHeohp9VHTGuRt8p/63oiaBg1QfvydPPw9kj+ksD5OYTisHzrlSer4aQqvYXtYL/Ku7mJ5y6fobC5JZ3MgnUdae84tSefcQDozxberStK5qs/as7kknc2BdHaUpLMjkE5tD/qnPb5vXyd2/ccbNU0cl7CshYB5OflTm6bL/TuNFaug/Hmuk17eZRMs71s28S1n8LLgRoHZoDSs30ZP/bD8xoxyWJ/kMf8EvxuTxx+aTe3KWX4qbKu+hoF14u/c8LYc9a9hcZrRahJW3rb76o71437CS8awjVlY1+XEmi3SivTJKS67XYg/4qmLqicvQSs658E7Dlnv8tQL85uOqcvZYlz6ntVfOLcw/BIha2PP0ZSPd7chi3dmYDn6m1dAe4WssfvZXB1PbeilBlj++Aws/IgKmtE2pGP+vz3u4X+ToWD5sQ//5k9jGUbylFSVE4uanKLmNsRcJo/xWt1PaGXVivLl8BvTkM5OQUdhLYyItTQi1mERseZHxFoREasVEWten9ZreUSsJRGxjoyIdVRErA0RsWLya1FErJj6uC4iVky5j2kLY/bjWESsmP0Y037F5NfVEbGWRcSKya+YOhTTn4jJrzURsWq7uv/sakzer42IFVPuY/J+fUSsmLyP2caYdmJxRKx+9VfPj4jFhy1xjr6K6OQNm2F5y1cylDlQMqQ0FXZT4S2sE4fXsZ2NjH8Ni9OMVtN187hIXELV3dcPGCrDNmZh7cqJFete/52ediH+iKcuqp5Zp3GQTmibzyYstXygYkR5+24mwqpni7pEDqsae06gfPZpqgHXzdadGViO/j6B3vUKq6IYbKE0DBXyoT8VOVdd3BLlT/HQOb0kndMD6RxTks4xgXQ2laSzKZDOqpJ0VgXSuawkncsEHbXqthUweOUt+d1Ofw//4r9fP7azTlsgTa0eWTh/iPJ/79jpcr9xbCcPkD/jrjNtHNLOpDqbnFh68pipQt3La6oQzzk9xBp+03XLbJEhVpl1bJ/1dWIawz9Qyke/kSuIiu8artuiNaBm+G4V/T1O5Wwxa9BlP8Yxo3sspClOGKayssdmlENeOPFuQOQPWWu3ug96yiOGuj2U22/vUcNOE7SHKP9n08Ynx2b/nY7uKlrID+Mpy4kdH+Y8XAfL/ydQh09eqzGHMtrF2nws/Y2ydd6Epv8tsDKfP1bTd4I+tw9Hh1kZ9eUjxJb/S8ADO0I9SHm4Puod8gDLZv2NefEjQPy3ksXTKP/xPdrO/W/5v+rp/6NFHfACYuY/14HzHJFRh2+IOgiruXX3s27P+JT9EPxWVo57iXviaIGT9Rg3Eok16WXusHYwHftbSUDScgs1TbnSN+3cszOj7TwirMqgOeD04zuEPduVGiuDx2bDbzoteW0X9DTYeho9bh8vy28UdWmJtCwt7UUn6VO7Wzjt0217dt+S1aWhg7YyFlzeUdmGeJc8iTjbVdY2UOOUi6c8amaI73xTHsun6Jxeks7pgXSOKUnnmEA6m0rS2RRIZ1VJOqsEHcbKmkI8M/09RPl/Doadv6h6NtSDMZPHDgJbfhVZXCXaY/l7RYqYl1shjSNgijbykgfCXTnreqfIj1GW66iuKgoZWtcrZ7iuZ4u6VngQKXjIMfyZPoiUbzqIEstcQVR813Cdrcc0HlnYpb1wovPvItPBuyBNcYKng9imuzLKsWTzuwGR/07CulOUs7r7YpuIoWLNhqHKJX+/VJTxaUCIBCcPOzF3RcS6W2CVvK1lUahmGn6T6lJUM9XNGuqIm7X9XlGXlkjjNYN7BZ17BR2FdU5ErK2RsJKHjwvWWDVWjVVjHWhYap32biqH46fNPtTsoOw31rG85VN0LitJ5zJBx/eRKv7X6PA7pqPqbO3BsZv5lve2LSzPt4dtgbR2+juZrV53nKaJM1ksa7djDlH+P4fzLE88LruNyOd97ZrorvNsowFpOfya0WQ2/UW6ZRN9nOGJadws/UEf7kXpb+VL8PEx7Gu+VS+rD26kPtgKaaoPrD58U+zvQh88nfoAy9/lND3Xgx7LyKyM/FupfpZ/d1onXEZQ9duVQQ/5gXx+eQa9W4HeQyAP+9o5MV3eaJeUu0VK7lBfWe5C/e5QOTWeKDnliM0WgYVywBEbKz/L6T4wPL599kWiz0PlnPvV8t8R2K+R7InsV+QV96uKrKlxyCcH2F/Gk5br7vOsSCRiYV+H9OsWgc/9+hpPv1p57FesJ/er5b8rsF+Nl1X0K/IqpF8xP/erGr+xX40nLdc9Th5LWMpG+yKsql+xD9hGW/63ePpVRbl9dtjy398Hdhh5FdKvaiUgtF/ZDmO/PpXSfPsitwg6Vdjo94k+Z5+f7UJW/RTfSi7u8dr0nRnVWCjKOyrboHcLM7AMJ3mHYVVmuTV3ltMhUGa55f+IYLlSU6yPMlHWnpIf5QheFDD8pusWiSKhR5/rua9i6b/q5gZWM7V4xf3Ui05EUU0eWy1oiGpxeUdYDfEO05So4vqgiaraDmllcTukmmHzTEFZPhSBrMhqlndheEOU/9OeUcjnBScPW+v7RH70jK0+qv33URqW25VBB0dHtPw8Olr+PwocHY12FaMj8ohHx9dB2qDIz/x+vcj/OsjDUaXXQxqrNPL4PqLTy3Sw/Cs5VbNv5Y2f7rLb22tWxvKFMnEvpanZnJIFvM88eYYgrWykBNvDsuDTpeRh3vhkB3nTcr3lBPXyXqLjs0vJ45MFjC5YNGw2YCOdtgt61hsdtfps2Di85uizG7BO9qih2t41qS456U0N1YNEj9vHQ/WQqEtLpF0CvzEN6QwJOgprSUSsqyNiLYuINS8i1rqIWAsjYsXk15qIWDHla1FErPkRsWLKRCsiViMi1tKIWDFl4rCIWDFlYkFErJh2NaZux5TVfrWrMWUipv2KqUMxZSImvxZHxIrJr+URsWLKasx61eP2/uNXTH81po2O6QOcERFrTUSsfpWJmHaiX8ehmHOYmG08PCJWbVcfGfYrZj9eGhErJr/61eb0q184FhErpj7GHGtj9mO/+qvX9Gm9YtrV9RGxYtqJfrXRMesVk/f9aifWRMQ6GOa1McftFX1ar5jz2pj9GFMfY85hYsZ9Y2LFlAnWoUb6N+Y5EX6fAOmY3z4UVXKteAevxRoGYg8XxG4QnnOd9XSEPyLoWb2aGWlt539+fMMnRz/86sd9sEHlrS78jvcnzBL51Zq28eoQKJ+DV9erPRxG29KGIG2Y0oYhzeqQ/LuB6jerYP1C+If4LZGfT6WF9sWY69YjkyPbF3MXpPEpqbsEnbsEnZYof5eHzqaSdDYJOoyFe8XwtDTfF2L5/zgFVfeFqD0wm0T9LL/v9AnWR/GGTzap0/Ah9gHr1RJ1OJ3o3BORTtZeq+TveyPSUafY1b67snRwXxV/8Ox1EengHq1VROf1EengvsCjic4bItJ5A+TBa3OTv98Iabi31+rxJlEPs8Vvhvc5bPFQSDsQv0l1yUlvan/Xm4ket4/3d71F1KUl0p4DvzEN6bxF0FFYp0TEsr4ddd19zR8zfaOg80YPnbMC6WwuSWezoDMiypXVEcUbo/PmiHRQZzYTnbdEpINy0CY6b41I562Q50Sic6eoQ+IPDBw//T75722QNkhlk8dO4g9R/nvOnC43nGKaDKKtwDpiefTH3iTawfTmpDTM/t0PZXLYo464syOsXrwbId69CdJCeGf59wDvWsQ7bBfr9tsh7c2U9gCkvYXSJiENMTDNQRvwHcsclrd8I6Icj1d74X2O/hoO0Q3Eb7ruNhcZr/YSPWx78vDc7R3F6A0ZvQcFvUlBb57TPEX6hmU6puzs/ZSGtnGS0tCePUBpqN8nwG/EzGrTxRMP/6vGLpZvrN/dlIY+/T2Uhn44n4dA35nP4mCb2b+1Ng8TTvLYPHWI8h53/HSZo9Pfyt6wHX+TwLa0t4m0BH/ryZ1tQZuCfMS05BkU73xj6P0ZWEOue86XPGwPLf8lZNvRxuTQpRuNLw/AS7ZDkwWxQ+3QZPp7RNCzeikbFRKPet2R35///hv++yt5bbfPpl0h8pe0aTIeZbRVPGqS0oYhzeqg4lEFx5TrQ/iH+C2Rdgf8ztMXLZHGd60WxWJbWBbr3oJYFnNDn4T9DnWuDccLHhvu9tTr/h5YVxIWlmcb9vYeWHwz1f2ijewvcL5hgc20R1x329iWFbSTwTEAw2+KNhTxqRRv1VjDdhzLtkQay/wDgs4Dgo7CujciFscxY8QXlQxfQHXOe2Mblr+X0u4RdHgum/xup7/3nXk9XtcH5R7nwewXWP7rYZ70dJonIW2fz8exFhWXVue7VazFR2dbSTrbBJ2q49Ica3l7RDpom7YRnQci0kF9axOdyYh0JiEP++j3ijokMvti0oO9kKb0ctvEw/8OUf5B0IOXePRg0ml6GGtRMSOm90ryxwv6gTLWYli9ePcrxDuccynesQ2x/P/w6Olyr8lhQ/ZC2tspDfnxAKU9CGmIgWkO2oDvWOawvOUbEeWMv9Zf74T3VcRaDL/puttcxC94J9HDticPz0veVYzeVKzl3YKe6geMtSBPkb5hcawF7exbKQ1t44OUhvbsHZQ2CWkca3lrjzaxP63q54tR7y+f863F6Hl9TmxfEZ8zec6bmM7HaUX9xBhYHDfbH77Q5pJ0Ngs6jxRfaDPROVh8od/L6QvxeG75Xwnj+adnwBf6bB/4Qn8UyRd6OvDuT4l36qsLiq/sC+2FNPaFkFe8DmhpDtqA73xrncw3LMfjVUHfJNgXMvymKyUfU+OV8hHVeFXS15vyhd4l6Kl+QF8Iear8Ip8vxPEFtI3s76A920tpk5DGvtC9Pdrk84V4bxbGLpK/cd8Dr/VY3mtAz/6W1noQ/5qJzjSU8TcC3X8gXUW+cPwyr++A5S1fzLFJrUFzvGrSddd50lNnLD9JaQ8IOjyms3394fG6Pmhf0R9g+2r5z4F+/zH1GdJmO4l1Zh8tb3+eFUhnW0k62wSdqn0a9tEmI9KZhDwcr9obkc5eyNMmOu+ISAfHIfbR7hd1SGS2ecL0e7TzqAcYr+d4leX/+zOmy42kmEoPsI5YHn20t4t2ML2xlEbJMVH6aIbVi3cLiHdvhzTFO7Yhlv8PgXeLPbzzxZ0mKQ35sZfSMJaBGJjmoA34jmUOy1u+EVHO+Gv99W54X4WPZvhN193mIj5aaPzI2veeYvSmfLT3CnqqH9BHQ54ifcNiH80X95iEtHdR2l5IeyeloX6zj/ZAjzaxj6Zkv8L9HsHxqsn0d9N187GIbE0SPW4fx6v2irpw3yQPx6v2Cjp7BR3Vz7yWXwbLt8+LfSG1n+zNHjpnBdLZXJLOZkGn6v3L+yteNRmRziTkaROdvRHpoLyF+kIX0nj+DkgLGc8t/y4Yzy+h8VzNb5ke+kIPiHYwvceSL1Qw/iF9IV6DyuLdNuLdA5AWwjvLfwnw7hoP71i3cdzheFWon8S+qVqjwnc+/5t9SCzH41VB3yTYFzL8putuc5HxKjR+VNLXm/KF3iPoqX5AX0it1yEW+0JoZ3m/M9pG9ncmIY3X9fZCGvtCb+/RJvaF1J4xxsIz3yrmxPOO3WmlEl17Zvpb6bnRTvL9hPLVflhnWdX3L4HfmIZ09go6CustEbFqP2yaDr/L44dNRqQzCXk2E529EemgHLSJzkzFpLJis3cGxKR8sVnL/71HTZe7x+NLhMSkfH6Y5X/DDMaksnj3pgA/zMc7y/8F4N1bc/hhdUxqup74DvHrmFR2TMrnh01C2v6KSan6MVaoH2b5P0Z2YxJwy9qNyfR37a+F+2t3wG9MQzp7BR2F9daIWLW/Nk2H39X+Whw6Rfy1L0by154NPsdfzIC/9tU+8Ne+Fslfuwp4903PGqLvDoFJSkM/ai+lIa94HMwbN8PyB1vcTI1XB2rczLeGyD7ZXkjjuJnPX4sRNwuNcTHNLL/ucROd6Zb/vyC+9h8UN1Nn6pN8Eyd25qv9tc6yB1J8zfpV3S/B/lree6fOEnVWdDaXpLNZ0Kn6/iT21+6PSAd1fjPRmYxIZxLytInO3oh0UN5C/bVlJ06/R3sb6nNY/p+cPl1uRYpZ5TrneJowE+ucWbxbTbwr6q/9FfBunYd3rNs4NrJ9qdc5H37qdc5sf813rxPaxljrnPf3aBP7a1g/311D9s7nh1n+s8huFPRjpN3gfWnqnteS99cF+2uG36S6FJV/1XfqTgl1jpLvGsO0O+A3piGd0LOPb42I5fOjan+tk47PX6vqvsvNRKcqv7BNdKo62xDqrz2RfI5JSAvxOSz/7eBzPIV8DrXXlumF7tG3/DvJ7u6FMmXtrmH1Okd5I/FO7dH3naO0/E8A3j2deIe0WbeRT2+ltElIY18OeVV27y2WZ75hOR6v0M+rwl8z/KYrJR9T49U7iB7rBftrBecPU/5a6B0W6K8hT5G+Yfn8NT5HibZxL6WhPZukNNRv9tfe0qNN7K8p2VcxLjxTyTEuNS7NFm3M0UejoTJo+E3Xze8iMqju5FDj9aG/+G9t+vu2Pbtu2rXn9vN37rnitutv2nXDxTtvv3XLzTuu2H7Lnl3bb9qyY8ctO2+9FSuNhObCe0zHh/PY77vFe8S4v0djWBiws0Iu2UMsvrBPXbJnWA/0wOIL+9Tgxn8Pu+562mHfgQAcVLSsem2jeqnFF5+RR+F8hevEwvJ7CesdPbBeSVhYnhcXMVjE9WR++XCyDCjW61VUL2UwDetdPbBeQFhZl/sk/727B9avEJaahPPfw667nswvH07y33t61OvVVK+szTfJf+/tgbWHsNTmHcN6Xw+sWwkLy2NZ/HvYddeT+eXDSf57f496vYjq9T5Iez+lYbldRCfvJA3Lz9QkbRfReX9EOu+HPG0ol/z9AUhTl52qQ0w2+H8Q3lcRMDH8JtUlJ72pwf+DRI/bxwGTD4m6tEQaBzk+JOh8SNBRWPdHxPoAtSfzIiCahBW9zOZcmIR9miZhyKP3UxuVH6MuI21Qu2aJ/Ig3RPk/m9Ypubj68+nHtJSO3J9RFxwzkyfkQmDUryp0xPBjXQj8AaLH7WMd+aCoS0ukcdBC6eIHBR2FNRkRiy/ay9KRv4ykI8eCjnylD3XkGxF0BH2oEB0puPAUrCO88FRWR5Qv69ORD4i6tEQa+s9ZuvgBQUdhvTMiVqiOfC+SjiwBHflBhTpi/A7VEcv/kwg6gn5ziI6UCYYhntUH3yF+LB15kOj10pF3irq0RBrOmTAN6fgWxxHrPRGxQnVk6KROmkV1xIGOHJJi9pOOjKR1CtURVfcq5l4qfnUu/M7ike8DPOeK9qg53rnUniwZWXySro+SkeS3zd95Yf37p02XW+aRkX5YWL2qJJ2rBJ1Hyka4q4jOgxHp4LjSJjrvjEgHbWXoBbXHkh68C9KUHli8aIjy3wV6cLxHD7Jilriw6rug1vKfktIoufFILqwaVi/enRZpnLkFeHdGDhuCPj3beOTHg5SGYzLHfVV8Fd+xzGF5yzciyhl/rb8wblnFwqrhN113m4v4WqEHP6197y9Gb2phVc0lVD/gwiryFOkblm9hlS/rR9v4HkpDe/ZuSkP9DrmsH9vk2wiX57L+md5kVvay/l7+IvvxD4q6qL75VfiNaUjnQUFHYb0lIpatMdSbzLrf9eOhgIPFF7o5hy+UPDyeW/4FMJ4/ewZ8oef0gS/0vEi+0E9PnS73gtoX8j0HjC/0vmL0pnwhtYadxxdSa9qPBF9oUNQP86HuqXiSE+8aHnpMY0CUfY3rrDem7SAaeWNAO0R9K4zrDobq14ES1+U19DKx2BCfp+QGxmB/fCY2MO6Ad5E20Q76+uF+D72Ca3kDRs+3twvpJfZ0luvuQ2xv1h6ydwO+vcvS+aL7KR/sgeXbT8nrgO/sgcX7KRUPOD7/qdR/SezwR0/qzPOONM9vQJ6Ppb9Zp5AP+/aSUD51+UmMD+UgnnNa9ww/1oeAVD+oA4eJbB7i/DKCfZS1z3SvaEuIzGKdQmQ2b5+qTeVJvoc8+R4Q+RSt5G/1YXH2xT8D60vfubazjVie9ybfPU16il/4znc4w/IpOmeVpHNWIJ3NJelsFnRGRLlGxr9Gh98xHcUb3yHMonRQxjYTnaoOurWJTlWxDo4NvEXUIdGZr9P8Vh16V+MFH3p/I8xvv0XzW9SDrA9chR5As/x/T7GBSShTNjYwmf7uxbt/JN6pA2g+3ln+5wPv/tnDO9Zt9aF7dWaAD6fthTTeW2dpDtqA73yHHi3fwXIAzXfBU0HfeUYPoKmxTtnGvZSmPsypbFDIh/ywTexvqLE8OVx1RPp7+nDVxTtvv2b7Tbt2bN+za/fNV+589m07b90zBMhMHVvhnLbEeDVU1tOgvwco7W5Kx1MO6vGNpiWvOAj2fA2/6bp7oYjmqBNdysvgq3qwrLqq4rXwG9OQzqSgo7DeHBGLP1FRX+WZTacfPoHzSPtkc5a3csTJ0+/RHoZ6K5b/MPBWxlNMdWR40nXSM2z09O4V7Rii/OtSGiWjbtLT49V3tHXt9HfSziMDeIc2LYt3/3PKdLmjiXdIm3Ub+cT2RV37o2bsiIFpzvlX55VHMAO7FoI9vZnYtaCuxil59cWUp6c8S9UP6OkhT5G+Yfmu8ryb0tQ1Fr4rdJQNCvH0sE0hnp7J1p2CjqW9CdLuobS3iTYnereV9A4/F31f+nuIaP8S2aCC1y+dOUJ0DAOx31wQO1RfssZzrFdTpA0F1OXEv3lo0eBTd7yvQeWtLvxuAPBRxjD/xSJ/ybHgUSNGY2K6PK78JM8QpL2Z0oYhzeqQRBM3UP0Krtg8KoR/Sicx/3kT0/ny9IWyGagjebDGXKdcoe6Y/qF+vy79PUJ0LT15Supg8DzI8JuumwdFxhVlE7F9PA9SPGuJtJfAb7Ytg+LdgAfrzohYZptVP/M86E5B504PnbNEnRWdzSXpbBZ0RkS5Rsa/RoffMR3Fm5mOeN8XkQ7KQZvovC4inddBHp4HZfnyt5Mvj9eDh/jylv8B8OVf6PEpsI5YHudB94h2ML07yAcpOLbIeRDvesji3UuJd/dAWgjvLP9LgHev8PCOdVtdO6XmQfdRGvoJHOvJOw/C8gfbPEiN8da+gjdsTM2DVJwwzzxI3eDE8yC0s/dQmprfKnvGPhfqN8+D7unRJp4HqfrVvlC4L3QH/MY0pBPqv7wxIpbPR6l9oU46tS/kCtEp4gt9IpIvtBrG8/89A77Qp/rAF3ooki80C3j3GU9MmHUb+cS+kIrpKD+J5/V5Twth+RnYORvsC83Ezlk1XsU4qZf81+tGTeULZe0W5HVsZWc5Jqx26Sl79mZK8/lCd/dok88X4vVwjOdy3rugvZj36ydPlxk8JZvW611n2l2Q9gZKC9VPxED+oq3A/M+kNlj+v0vbkMQav3utxhxwWkbN/qjYp7VjttGFtBzy+6mkXl+8dpoOykvyDE901hnHP59PZflfL/KjzLFv+HpIY39OySP6FyaPil9Wxyr4hXUI4ZdamwrlF+s98utNhKX8X+Shj19Wxyr4hXUI4ZfaexLKL+OB4tfbCKvXHOdiqqthz3LaJvBu5qn+SG1Zwhu+Lcdn4+8S2GgbG4SB7dgo2jFCaVg2wf1xmjBTcR72NdVNOGi/cX8C5p8L/lmbeKPGad/6lopx+HZ44jj+QADWPR7akyL/Ax7aWC8sy7S5nvgpxn20JqbTjDcl7cCwsgMYr2I7oPpJnUTy8Ur1k1oL5z1roTEnvvEgNOaEJyBYPlX8Kctmsz7gfIbnOmqe4JM939X5SvZUjFXpP9sNtd9F6RLbDexbthtFd6gfm/ZFlTvUWb6HnJbvrJ3n54BtOz7Dtg3nxDwJxqOHQEeTB22B9WNJWzCkbAHqO9sCnw1Onrx2k/V2EtJ4rUGtmyNP2ScwHs0S+RGP98w9JtAn8O369sXAffM+04dEbq5P69Frb+J5JHvqlgXf3kTLvxPk+UKa48WwG6+jNLV3yjfmKDlTu+r5c8a+m9QL7gcPjqXwfvCyN6mHrvPE+BRy8t9eQU/1A8ZSep2qtLFgpu0a8inErqm1JrW3j/UZbQTbAbUXlW2Eooc2An3x60n3lY0M9Vkwfv0JiqWifrH+o46z/qO8s9+APGS/YRLqonwe/vS45b8JbNiLiTdKln1+7DtE/r2Qh2+bmYS0dwRgvdVD+0GR/x0e2lgvLMu0s3RS6aLxpor5xiRmmJjGzeonzB/CK9VP6naWd1BaqO5OUhqO76zXKNt4QvTFGeM2tkPFeHudGj+Pxu4DJVbwK6C7b6tjBV20uZ51rKAzbSZjBW+rKFbw0jpWkDtW8P4DIFbwSbBtH4oUK/hIHSuYSttfsYL/1Sexgm8Exgo+HSlW8G2Q5z+oYwW+p44VEL06VrB/YgXfqChWcPsBGiv4Dtiw/65jBV20s3SyjhXk091JSisSK/jvimIFn6axG+vN5+iVTimd53P06pPr3H9ZsQLDHeL8cI/C0lM7MZX+qP1/ofrDcyalPz4s3x6jd4r8D3poY734ZnTWZaynlatwHJW6uxczTEzj9rKZyRPCK9VPLcqPvFHnkHjfG45DeykNxyHW+UlIw3GX5VPtbQodd3GvEd+r8dYeuMxP3xcm1LihYii+M2JK/9luoIyy3cC+naS6W39irADzc6zA8q9L+6LkTagyVsA39+N9Ekq+eW5l+R8Ntu2oDNs2nBPzmBSnV6zA+rEKnxr1nW2BzwYnT167yXqLfcN3uYTerMZ6NstpHyLr5tRToQ84VoD2iP0MdQOkskdsxyYhDWMF16X14LlO8rsN+c4i2VNxffUFQ47rPxHkeUv6O6bdmKQ0tAN8Y6Yac5SctUR5HEO5nNmBkjcYBscKDD/WDctK/3y3jZe5QTr5712CnuoHjBUgT9UN475YQZV2zbce0ouvPHfHNrI+o41gO4A2gu3HAx56k1Bur7XBTdsIn40MnW+gz3IExQpUjFXpOOs/yjv7DcjDSdfZjndCXZTPg2M25t8BNuy5xBsly3vhHY9d6qb9d0EeXofxfYVXYfniFO8R+d/toY31wrJMO0snlS4ab6qYb6BfwLqo+kl92cLHK9VPLcqPvMmru++kNBzfWa8nIc1kXslnry/Jse6qs3DoD6h4XRW3K2eN3VlxPsNl3/cO0N3XEW+UfVY3E7P9wPxob3jOpObrPizf+phPfhVtrBeWZdpcTyundNd4U4XuxpwfKF6pfmq5br1mHQy96Zn1M/Sm573pbyWfvc6y+sZdXFfm29YnBa5P9vaK/JOQh2VP3Wyu9N8XW2O7gTLKdgP7lu0G3+DN+TlWYPnfQbEClJEcsi5jBe+iOmI8Q8k3z60s/2+DbXtXhm0bzon53sBYwWT6rgqfGvWdbYHPBidPXrvJeot9E7IXDHnKsYLJ9P0sp2OWuOcF83/MEytAe8RxzdCb53nvlPr6RSI3f0mxgknI14Z8v0OyhzaN7UXysOxZ/q+APP8u+RtIu6jd4Lilihmx/jjnl7OWKI9jKJczO1ByLh0cK+CvMRWMTXi/xrQX3nGsoKDdnIoVqDmO6geMFfT6ApkvVjDppuu/L+9EsfrnXQ/pxVeeu2MbWZ/RRrAdQBvB9sO3j0HFwtBG+GxkqM+Ca55fp6+5oH751sVY/1HefXNr9hveBXVRPg+O2Zj/W2DDfkS8UbLs82N7zdcnqT1qvu7D2uuh/V6R/z0e2lgvLMu0s3RS6aLxpor5BvoFrIu+GE3yhPBK9VOL8iNv8uruuyhNfY1R6S7GwH6UMW5jOybhHevupKgr+gMqzl/FV5p5bv1eqAuvw/M4gPn/H+juvNM6Me2Lwc6FyYT6QjF+dZjtFMrE+wOwfHuCPiDyv99DG+uFZZk219PKKd013lShu6hvrLuqnzB/CK9UP7UoP/LG0kK/GP1eSsMxyvfFaJN5JZ9q/T/rTh7WB9wTxF9tV7bQJ3u9xiyWPTVmKf1nu4H6z3YDZZTtBvYt2w3+Ejjn51iB5T8i7QvzP1FGcsi6jBV8gOr4PqiDkm+eW1n+k9I6Jn08nmHbhnNirklxesUKrB+r8KlR39kW+Gxw8uS1m6y32Dcc01FxB+QpxwqMR7NEfsQbovzHQR9wrADt0fuo7qFfsGc/A3UGYwVXpvUYcd2624Z8p5DsoU1je5E8LHuW/2qQ59PT3zHtxjspDe0A+9ZqzFFyptaKcAzlcmYHzK6gLFYRKzD8putuc5FYgdI/HB84VlDQbk7FCj4o6Kl+wFgB8hTpG5YvVlClXUM+hdg1zM9zd2wj6zPaCLYDaCPYfjzooYc2An3xK0n3lY0M9Vlwfn4zxQpQv1j/UcdZ/1He2W9AHrLf8AGoi/J5cMzG/E8AG7abeKNk2efHfkjk/yDkeTe1B2X9QwFY7/HQ/rDI/yEPbawXlmXaWTqpdNF4U8V8A/0C1kXVT5g/hFeqn1qUH3mTV3c/QGk4vrNeo2ybzCv59Pn5ycO6+25RV/QHDrRYwe2gu68h3ij77IsV5J2vow37QACWb77mk19FG+uFZZk219PK9VOsQPWTz8YqXql+arluvWYdnMlYwWsqihWc9giPFYSM+RgrwPwcK7D8b6FYAcpI2VjBB6mOGM8Imddb/o+Abbs/w7aFxgos/2QfxApQ39kW+Gxw8uS1m6y32Df7K1bwgcBYAcc1Y8cK/m9grODXI8UK/gzk+TdmIFaAdoBjBWrMUXKmYgU4hnI5swMl59LBsQLDb7ruNheJFSj988UKCtrNqViBmuOofsBYgZqLIFY/xgp68ZXn7iqmmXe+wfajSKzg/1YUKzg2UqwA5Z39BuQh+w0fhLoonwfHbMz/V2DDvku8UbLs82NjzNd9WL5Ywa+J/B/20MZ6YVmmnaWTMx0rQL+AddEXo0meEF6pfmpRfuRNXt39IKXh+M56jbKNMbDvVhQrYH+g1/fm2W9Se6x885Nee0d9e43eRWlqrz7TQZuAffKi9DfvNfppoE9ttEvK+2jV+2h6zQf57Azabt7zgjzG80g8NuAZl8U0NmAsivdkPCjqqubJLHuzMvLzfrKpfTqnP/wv+uw+efad/8orz9iGsvKMunErtXWqf6CtMyDPc/e3PLPMojxzTEjJc8N127Ay8ZyhPpT/FQeR/K/uc/lXcwmf/PeKkbD8o/+2P+T/e2mQIkT+P+ChqeTf2pYl/xhPxPwneuRf8dcn/73WCH3y/yFKw3JvyaCD8o/9zvJv+R8VKP9Guwr5Rx6x/PvmTcmTd67DawLov/vkn9drY8n/X+aQf5/vreTf2pol/4bH8fKLPPKvdNB3jjHvWhe24YOUhuXekkEny59n+bf8jw2Uf6NdhfzHnL/2ijOwP4+64ZN/XueIJf+/R/KPZ9x9dziGnGP33V1h7XgQ6qJ0xHD5zOYNp0+Xe87pnZjKR5qEd1XMeX1YPv3sdTcG01Z3Y3BdnKinlavw/Ndw1edaFa9UP7UoP/JG6RafcQ89V7KX0tTdFUo+1Rn3UN3FM+43ntiJu7cHbt47XPkOmknRPqX/vjshQs6xK1lnu4HrfU7k57Voy/+ytC9sfQNlJIesy7VovqsGz+Er+ea1O8v/FrBtr8ywbcM5MV8dOM5aP1axZhPzrppedpP1Vp1Na9DfiKXWb1jPZjk91zU8Puv9euHXKXvE93Go+5qUPZqkNNQZXIv+7bQefEY3+d2GfG8j2St6F+P/Anl+IP0d027wfVjqrgPfmKPkrCXK4xjK5cwOlDwDHrwWbfhN193mImvRSv/UOd2SdnNqLVrFCVU/4Fo08lStl/jWovdC/fflnShW/7z3+PTiK68NYxsnXWca2gjf3TtsP3z376GNQF/8t0n3J113O94ucPm7Elg2wX0izTd897ajjoecY1d75thveDfURfk8OGZj/k+DDfsL4o2SZZ8f2+uc+V5qjzpn7sPyna/3nRVVtNW5Ha6Lc9k6qXTReFPFfAP9AtbFXmuyIbxS/dSi/MibvLrL69vqHLvSXYy//0XGuI3t2AvvWHf3irqiP6DuvPKN3b47aCYpDfUa68FtZBuEuOzzfxN099+IN7Hvp+A5k9q/68Py3cXXy24w7fp+is78qp9C7qdQ97Uo/eQYwySk8XxkL6ThnI7ls9c3xXzjLt4ts5piBWots8w9kL77anmvKJZjuxE6rk9SGvbtXqo7+4ecn2MFU7rxqIf/Mf8TZSSHrMtYAY/jeOZGyTfPrSz/4rSO+2ziozTmcE7MWSlOr1hBpHF8qOpxvJfdZL3FvuH5oxpLkaccKzAezXI6TsH3L1v+MegDX6wgj78wKegqe4SxgpPSenA8N/ndhnxLSfaKxqlOBXk+LP0d027spTS0A7xvVY05Ss7U3kAcQ7mc2QGzKyiLVcQKDL/puttcJFYQOncvaTenYgXKD1f9gLEC5Km6v8cXK6jSrvlioL34ynN3bCPrsy+eiDaC7cekh95eKIe++Emk+8pGhvosON9YRrECtf8o7znZSUpT8zkeN7L2NGWdkz0LbNhjiTex79R6kNqT904tX4y91xldpl3fqdWZX/WTOnPiu1PLp7scY5iENNbrvZCG+8sfmzFuYzvUWojyB3DMX0pjt/omaNF4gNJ59tOU76u+O8C+7+NBd28m3sSO84XM131Yvvlarzgf067jfJ35VT+FxPnwuxccK5iENJ9+ss6jbOO4y/IZK1bwtRM6cZVN8Mler/00LHsPivYp/We7kTceoGSd7Yb1J8YKMD/HCiz/CylWUPAeKRkreB/VEeMZSr6zzgTfC7btxRm2bTgn5ksCYwWR9m/nPgvqs8HJk9dust6qMb5BfyOWOgPGejbLOe/ZCZ4zv9YTK0B7xHHNSUjjGMheQVfZI4wVfIRiBai7bcj3OpI9FddHm8OyZ/k/BvL8RvI3YtgN3uOkYka+MUfJmVrnxTGUy5kdKDmXDo4VGH7Tdbe5SKxA6Z+a75S0m1OxgtD79zBWoOYiiOWLFVRp13zrIb34ynN3deeLshG+NQy2H3s99NBGoC/+EdJ9ZSNDfRbcr/DF1GdROs76nzceoObW7Deo+2TRBuGYjfl/B2zY54g3SpZ9fmyv+Tqvw6j5ug/LF6fodc7Ad19Irzu1lE5WeN+EnG/EvHO3151a7P/77tQK1V2+824vpLFeo2xjDOxzGeM2tkPFK5U/gGP+6w7QWMGXQXf/uY4VdNHmetaxgs60mYwV/HNFsYI31bGC3LGC/zgAYgWjZzz8b9LH/x0pVvA/daxgKm1/xQqaab/u71jBMWk9esUK5p3R2e6isYLjQJ4XpL/rWIF86lgB0atjBfsnVnAM6X6sWMGdB2is4BSwYRcSb+pYQbZO1rGCfLobI1ZwYca4je0oEiuYR2O3L1aAdfPNIyYpLe8ZBNyTwX6X5d8GuvtU4k3sMwi+/Y9Vn0Hw7b2qzyD47/bznUHwxQpwnPPpNY/leyEN9+6wfKpYgTpTOOK69QFjBdsoVqDG8zJnEHz3jvjOILDd8MUf8sYRWM/ynkHYk/ZFSZ++0jMIrwbb9twM2zacE/P5ME+tzyB0Ys3UGYSXB8YKOM6hYudlziC8l2IFqLttyPcakr2iZxA+APJ8F/kbMezGXkqrzyAE06vPILjydm2mziCgjWA7gDYixhmE95LuKxsZ6rPgGYQLKVYQGiv0rddNUloVZxB+HWzYHxBv6jMI2TpZn0HIp7sxziD8Qca4je3AcTv0DMJraOxWa5gzva9Anc9k3/fzoLt/Q7yJva8gZL7uw/LdbdhrfYxp1/sKOvOrfgrZV4AxMd6PMAlpMfYVsHyquw1Dx12823BBwL4Cn+z12lfgu5PEt6+A7UY/7Sv4AcUK+nFfwaxHP/xv0sc/yrBtefcV/DQwVlDvK+jmaax9BY20X1WsAO1R1fsK1qT16LWvYPajO9tddF/BepDnQ9PfMe1Gva+g3lewDzz995G6r0DdZVbVvoI1pPvKRob6LLivoOnZV8D630/7Co4FG7aFeFPvK8jWyXpfQT7djbGvYEvGuI3tKLKvgP2BSYGr9ho1qL6Y3/ddGmVzfPsVkFcc88JyId9XmATa2yYe/pfXfi4Bf87nU1e5Fo88YnnvFSPKOx+cTH8r32gvpak7c3vde/vD4zvr00jTcI53Ivw+AdIx/9PTfjG/AduZg9+XjkAZBxiIPVQQu0F4zmk/D30aRS95miJtKKAux7zouRtX3j68qUHlrS78juVlWOS/QeQ3Xs2iurdd0HOx0imjbWlDkMZ+IOqF1SHRpQ1Uv+GC9QvhH+K3RP7LJ6bz5emLMdcpCyjvZvvw7tx7KG0vpPnupwyJBbPdQXuK3+fgtXTL/2zwsV4WMIbthXcsm759SFgf3zdjfFi+78P22nvGtNUck+viXPbYXOFd7sN510Z7+RohvFL9pNZSOcZzD6Txd6J8+y3UN2l8e8OUfMb61tQf0RiofCaf7PXymVj29or2Kf1nu4H6z3Yjb0yH9QxtJubnmK7lv5fG+4KxEBnT5b2g74I65ImBvRds2+sjxdXeNLP+Z+7YR969oL3sJuutb0/AXoGl5jysZ7Oc9n0Nb4jyP+iJ6aI94jmfOneh7NFeSpuENIzpfoZiuqi7bcj3/oy4Dsoe2hyWPcv/RyDPH6KYbgy7MUlpaAc4fq/GHCVnLVEex1AuZ3bA7ErB/VjBMV3Db7ruNheJ6Sr9U/O/knZzKqYbGkPGmK5ao0YsX0y3Srvmm1f34ivHWNUap7IRbAd8e9Yf8NCbhHLoi3+GdH+vaEeoz7IXcH8v9VmUjrP+h+7/DIkF87ihbBiP2Zj/C2DD/pZ4o2TZ58f2Wo/0rVG9LwDLF7fptfeMaau9Z1wX57J1ssL1leGq140Vr1Q/tSg/8iav7nLcNjQWjOsxfxuwHoPjNuvuO0Rd0R840GIF3wPddWd2Ytaxgu561rGCzrSZjBWwfMaKFfxKHSvIHSsYTfuin2MFa9I6Jn08lmHb8sYKFqY4daxg/8UKVkIf7M9YwdlpPXrFCtaR7BWNFZwL8nxU+ruOFcinjhUQvTpWsH9iBWeT7u8V7SgSK3jxARoruARs2JOJN3WsIFsn61hBPt2NESt4csa4je0oEitgf+BegftWgdtw3XbI8vv2f02K/MgP/t612lek7sC5J4OOikEkD+//svxPD/SpjXYV8j6JGSamcbNsNuZnfqv5417Iw/NrtRdPyfuk66zzWwVmwvsbaWx4E+R7o+tMexuk8Rlj3HvM30BDGcF6YD+hHNwJeQx3iPK/AMaGO0lHJt30M0h1Tx7uA1+fYX2UXO8NwHqTh3av/mfak5CGZZk219PKKV0x3lShK2h/WFcmIW1Q5A/h1STkMV4pXdlLaW+EtDdRmu9OI/wGGp99RNnGM4Msn28S7bgT3vHYcKeoa4I7QrGo+wWuT/Z8ZyKV7L1NtE/pP9sN1H+2G75vtU9CGtuNvenfGIvC/ByLsvxvo1gUykgOWZexqHdQHSehDkq+ee5u+X8dbNsDGbZtOCfmOwLHTevHKuZsk5BheGIaF/tnX31c+XGT9Rb75m2E9TaBpeZvlt94NMtpH8nwhij/hzyxKLRHk1R3tEc85r9F0FX2CGNRX6BYFOpuG/J9nGQPbZryJVn2LP+XQJ5/i2JRMewG+6STkIYYLFM+OVPzBMun5NnsgNkVlMUqYlGG33TdbS4Si9pL9LDtycOxqIJ2cyoWpeZHk4IexqKQp2q+5ItFVWnXkE8hdk2d11Fnj1if0UawHUAbMUlpb/HQQxuBvvgXSPeVjQz1Wd4GuAM030D9Yv333aE6CWnsNyAP2W/AO5SUz2O4vI7wVbBh3wuY61d9X6QPq+r7J7guzmXr5EzPzdEvYF3sFZMJ4ZXqJ3U2i9fCQnWX41s4vk9SGsr23vS3ks9Yd598nMbunZDvaNeZtgvSVrnO+twp6oP5T6f8d6V/z8rIb3hDlP+nwt8apTzJ72My6GH98B37CFj+rgwstDfYvqdl1P1nwl83zLtF/Y4R9bP894j8d0Meq4/iDcft7hbtQVt/K7XH8g+c1d0eZRtMpkrahrnKNiDf2Db4eLSv/q4zv4rDIq84FoFrM3dR2tGQdjeloe7sojrsFHU4Hd6xXqPcWdmkH/9/e+8Cb1dV3QvPfV7mmGMOD+0Lrxyw2qpAUaui1XAOAUReIkFA9MNGiYiiCAQV7UcP1gf3s5VXQt7JPgkhAcMb5VG9PtDetnqvrVrb2tp6VT5trbZqW796P6/3rmSNs//7v/9zrLn2Wusk4F6/X37ZZ80xxxhzzDHGHHPMx1p25N7f1v/LAG5/tOsngi55dn1+hB7y59k11i9r16sivP+KsAPPrs8X/O1Pdj2VaNemUwO7LrbrZYKHVLu2ulk/Hn1kN941UDYs+OA+NvjfcHT2JsHrRfCO5btWwN8EMMbPEuIB6y4R9W6kMoy3lhEP64QcEJ5t1+BfAHL4rqPrxldFXZ9Quo75XNb19VCWkv/dIOAxFjWZqFh0DeFaI3BhX3MOzWQ0FnQfGL4Rgj9O+H7j70aozzn9ZSV5P1zwPhF6bQZt6vu5wS8RcDx+rBY0vbHV6MTGSsPHtnuqkFeLaKAdIF+nznbjNPiXO/5AyRLjAtZB5T/WiHYpmd5EZauhzHRB2afBNTEWYfvZPr22Zk9ZX2n9r+aYh1MZ2gbr/+GCDvpw1n+lp5kOfe1Z3XjVeDMDdd+U/2adXVFyvMExvqwMjZ+y4w3v00bZ30g8FI03bwndcjD4ixZ2vJkZjDe9480qZ7zB2I/HmxtL8j4jeJ8IvTaDNvU8Gm9UnNoifhRNros+ciwCb/hGCP4qZ7y5HngfDr1ymiCcBn+14w+8cTR7WAeV7NW4oWS6hsqQd9MFZZ8GV9E+j1P2ie1n+/Tamj1lx2Lr/8nQ6w+vpzK0jdVER83JUvUfdehXabzBfU1KZy/Mf48Q/I2Ofim7UTkDTx9RT4yfJSEuJ6Vf11EZyvQ44kGNuwjPOUeD35g43tSkzwft6/jJZKLipxsIl8oLYF/zeGMyGgu6DwzfCMHf4ow3mNtZQ7wfV5L3GcG7sje0qf8/v7xL5ZN4vPFsnOsindh4Y/jYdu9yxhuVo0N/zuONwd/r+AMlS2+8Uf7jBtEuJVNvLDJdUPZpcBXt82Bln9h+tk+vrdnTr6+cDL32w7k2tA3Wf5X3TdV/1KHvPrMbL+e7ERfqRYt4jOVYF+e/Ocf6R44+Fo2l/eY3l4S4XJcI3k1OSh8NrqI+nq30EdvP+ui1NXvK2irPt9X4bGVert1bJ8keb75tdTMd+vNndsM9C3C08v9t7wyuUZaQ+VCL8BnP+A7xjxMvJenN70c6guhx+6zvMps5KP99xaqLLr5o1ZWnXrLigmUr3nb5FRevHELUoTerhlJBrPiuFbpbj2XD9O7xBHfSbPff1rPDIf6YxIzukVCmJGE4zSqxTUdG6qEsgng3JOCPIFxHiHrG+7BTH3FgPdaYFr1HrzkhaI8Q/CPgNf/13DjdidArhwn6+zJBr0GrO/Dnw+oOIKwGg7D4HACcIfzj6W/uUctjp1gd57p/mGtRpn3/nP+2nn8K1LX9tVZ2GOC2e2b3nOc6thvucOJB/Y+84zsev+rwFLw+mT1nUb0jod55CTwcKXieFPUNbkLU61c2kw7PRge9yVT+O+urny3tvM/+HQVlyhPx+qnBX3Zsp95Q/ttkiRZrPCo5816GsnI+X9BpWs7nE52jaqRzFMBMwe/s37MJF8vZ+snkfDSUPZvqPR/KEA5HuWfD++cL2gq/4SjSwYOP1W2L6aDRGiH4c0AHf4F0UI2mPPqG4Os86+VYBP5ZxJ/BH5LzpObx83eKB+3XeJ3S4J8COB+O4AzB95Veu1CnJiLtOly0S+0BsfpqbHkOlR0GZebDcWwZIRzPyN8vCr39USJKkGeeYnwjnNE9vD+6yXMQwz8eemXYTzSk1kWxff1FQyh9lgpixXet0N16LCuag5w22/13P3MQ5QWeInCqVfpnReqxFfK7IQF/OOFSFsTeWdVHHFiPNUbVy/5eLOqkWECf8flwqgUY/rosoKjfTVet7UcIXtQu6cfDbyxDOmpHs8J1GOE6LJHnrA8Pzn/nVrt81SWXrczNNtBTNOk4PMLGkKgfqC6bNgf2TxFNQtPhwcpoxwZhwzdC8CeKwcqrH0Ka2mMXNeH4DX9dap+qQmpDmNX1BvlW6O3DBVLV7LERoSXY4vqBcLXEu+xRseQiqrdQavxKJ+ZaJOrviYkP7KZdFGfzXM/gz3NiTjU3UNkVgz9GwON8xPhZQjxg3SWiHs8zj4Gyo4iHFwo5IDzvlTX414EcvLVk46uJvbK4Z3p0NnS16yVQNizguS9mBPxLAMZkMknw3C/4N+LCvmY7MBmNBd0Hhm+E4N/i2AHO019IvB9Vkndlw2peizZ1MM1BkSYPpUc7NJXOGp2Y34jNkd/hzEFV7gf54jmowb/L8QdeniJ7WAeV/3i2aJeS6fOpDHMSmA/ag3u2F2cTe2Wx/WyfXluzp19fORniPk/ZBuv/UYJOqv6jDnFuEdcSDe8igdfgeX8ew8z3F8H/AejjJ8knHAY84P5prG/lIXTCuzXE+1RIepLDO8M/TryUpDcf3qXuiys3r+doB6WCWPFdK3S3HsuKoriXznb/3c+8Xu2oUrua1O7omyL1WHP53ZCAX0O41oh6xvuwUx9xYD3WGLai2I7UmBVtASvitUWkizsKmBf7+4WCnlndTQQbQsfq1lKbpkLSc26q1Rn+ceKlX6vzduNlT39Wx3urjco5hNVgEBafc4AzhOdpPvfeSlGPH5MY77e8H3LyuygeQo3leEjtm1L+S01BeY8p0nlqRTpPFXRMk8ehjNdKF4u2eusiVob7aGyN1cquFe3i86IK5/UOzhtEWdZ3L57uhkNv1Ir8nz3D4h3LdI3gVZ05wZRHzNrWOnSwvsFNiHpV26N45hgD25rJ99O0BqbO02DdN+S/+TxN+9xOvc+SvXn3XqpzVf3K+XBBp2k5s02tr5EOnt+Zgt/ZP/XNDZSz9ZPJGc/7bKR6eGcbwmFEgPehqPuKFH7DUaSDXzlWty2mg0ZrhODfBzr4133qIN+FhH3A42HRmas3BN2usQh8rF1fd3INa0R9xTvP49c7vGePtyfA4JrW+aOITkx//oH0ZwOUKf2xPZ8jBP9W0J9/Iv3BCK2J9nt2jZEczxqU3bEsVT200Wcn8KC+uzMp6hvchKhXVTcUz0W68RPSDbwvTekGn5s1+HNAN35KuoH+k+9LRJ45Biwr56cKOk3LmeO7zTXSUXdjmmzU3eooZ+snddfdVqrXhjKEw/FN3eeMOBT+1PFtybRuW0wHjRbfy/1i0MEDp7vbj/U9HeQ76NS9463Q29deH7SI77EIPN83bvC/NL33f5UbVvaKesO+3OAPAZycG1Z3tqnZsqeLW0S7lEy3hmLa6r44pj0WdPtjunL49N7/lUyt/mikPSxTg38a4GSZKhl5Mm0L+K2iXeou2zbhUpk2dQ+oJ1Nsv+FjmR4xvfd/FYetF/VV7MAxpIrD1D0Uno2p2IRt7DnTcd7XiPoqt8B75TC3sI7KMLfAczE827SByjC3wHkOzC3w+IfngDZRGZ4zQt233MIItfXY/H3FHLzc07eGeBsH+Fbk/xDSxlPsq8cTnabyJkznphrpIC7LyKs5G+78wjKjw++YDtb35oaLK9JZLOgwLvTJUwDDe2AN/hXTe//P7Prj5JPVtxAWwzueE6jvNpgNoH8rk6G2+hv7qz9sbSmaa7M/wLaX0UOkNU64yrbd413d5aLuZuGYTOHaUBLXIlHWT594d9Qo3654UXzGbAPpeGv5Xm4M4b05tMkIY7my668xGalcWmaXk/nvfGXm+JWvu+LCUy+5kHGjyqJ4DiE4M++h0KtKGyK4Av19CL0bBnz4LJS7VHSOqEjnCEGn6bTxEUQnNnW8bLrzHtU49foRg38mTB2vyHGqqWPM9FrB35LB/MW2TkxE+HvX9N7/cetEi+pgm9/o8LwOaDDd7PdzIzz87vTe/ysOeTLs47Qy8jNOZRjG8fU+GC4Oi3esc6sFHcYVCzlMrhwev3967/+pIYe36QF5sroqZc9yUHS8IXV1Ip0jK9I5UtCpGpIoOopnNS2byn9nfXzjdOc96iT2P4aHvO3O4H8JfMlNOU7lS5BH/lv5ZfYlRi/mS1g/DX7j9N7/lS/hMBvbqXjG6TTTVb7E4NvTe/+vGGpJX8LLPMjP0cR/2bEQ6y/UWHg00Wl6CVWFfexfyobZanmyyB7vmNY0lT3yuIbwXz+nU+/u6e42qrE9Zdmzad/LuFLHIIN/cHrv/3WMQWsT+BsJvTaV/f4NaHMMVxDvDB7HP04FrSfYdQ5szG9lvy/OfzdpX9lz4mw3nZjef3a6m9civb8k/816/znQ+z/OcaolD24vT6k3ijZY+SZodyreUaqbPS8nvBsJL+rKuTksjylHz3Twf2F67+8JQatqnyIu7lPlTzN+vjzdeZ/9U0sMWJf71OAPgTb+ZY5TLQFwireO9tv7LfCe6fLy51aCVZ/jnaCyEKr3kVqOtL/bIc4/bxHYJOo1vdS7lehsrZEO4nrVbDedmO7+w3TnPcohprtX5L/5M6D/Mt2p90/5b7UVh3UXfR1v31Qpswz/K2a6eZ4DOJPTebO9dQ1+G8EjjuzhWHx7/j4Wi1vdEYL/t+m9/2Msbm1rC3pZ2348rduG/dEG/rcRbYN/EviSn+Q4l4ReeVl/LAm9smEb2A68IGz2mK9kGQwBHz+bjtNiu2iLNmY4RmY0HPKAcIzD/ALKwHAov2D1lgi+2HbniEbboaE+9a1osD9GmW0H+qYbNxeUbxdtC+LdkICfC7q9QdDeVoC3LfAo/76NyjaLMvZdIfT6ruzhI1Tq05boE5W9xGxC6dWcw/t24n1O8N52eG8LOug/vLjB/k4Z61vib+PvUnjHPlZtM0AYq8vbDA6b2fu/yl+orUPI1yURnL8KOHnrRjt0HsP5PHjHyytePyE/S0LczhXv6Ev4nRfLBMFD9pgvVDobi+NYHooHtfVH+U3e+qO2U6XaJsbTFmvvL7H/82Y675nXMrH/R2E+d0yO89Ea+3Pud3+I/fkzGoPYP4STSXfbUFYm9v8g6O5ppLupsT9vryqK/a3M5Dsk6vGRAqN3+UwH31mEbzHQQr3JHstjmLxw+2EQbeL8uMGfm9PMxqM/Otenr3w+t+dtOb5FoddGSuTbZzy9NNztPnGn6LWyRaRnfKlP048k8PLwfee+6op/3Xgp67vxwu9Sxv4XC/iKn7J/ibouwWjPryFDWZvKRqHMeMh07ZnE31yf/KXID/FPirK3w+8yfaFwbagR17o+cR0YunUU7VD5Yc51qHxp5gM+NNN5X+QfOF9vsB8k/9DndrTf9MZzw721T9yp/iE2hiJf46IsxT884QdnPPWl73/b8a3Q6weHxbuUbd0vEvAV7e9o5R/a+TvlH7ZSGfoH40H5h3af/KXID/GrnAj7h9S+ULg21IhrXZ+4zD94OXL0DxwPqWOq6B94veR6svk+t3HKNXjey4H7nrLnjNlOGa8hrXfwsA8Lok5sTXR93t49+zJmuvHiumT2vFzwp2JS3C+xcSYOt0nAZeW/kL/PtzS+dOWq5W9ccdnKC5avfP1lK1cNh24uWRq8wsa7FtVjLRyhdzfQ37yCupj+fq7AU0RT7Wo6Bn4z3ZQdXMcInhWdl1Sk8xJBp+lDCi8hOqilU/nvTKN2znTeY1/hLA13p5w5u/d/jgIeeGWn3m05TrULwJPzTOjmpaycZxLpHFeRznGCTtP9eRy1Bz0uy63sLhKsz9mV2E6DB2c0zdiON9Ybg38r6M3HEvTGa6Pa8ebthjRc6wtwnUm4sL53qcF4Ah3vYoDxRDop7fHo7Mv2GC61Kwz7gD/moXbcG66NBbiWEy51SMHbydUSOBUdb8ect2NsQ0U6GxLpLFR7Vlekk7rTbqYinRlBp+kdmjNEJ+Zvv0H+Vl3k4u0wNvjXgL99hPwtztwf63JuYmUH+6yoP39A/alWdrz+NPjjoT//NaE/lWxiO5eQrtfX6mKNlsDl7fZlOSC8GlMazBYlf8aMM8Z9ZsbnDzO2iR63z9qe6cUT89/57G9m5eXPfs4xx/+fqd+Vb1sVyxwdgERD9yobwgf6m+tlvI0QzFpBI3tYfzYRHPe7vWf8KTwVwRaVK1+3JdLOENJ8HdYvezDZ+ocPJo/lkwG1Q1vFZOrCBi8eUKtz6rQavn98pN67g+bP2ow8qTYb/BOcNm8oaDPH77HTmvg3ww2LNiwKvTqAOJSMl4Vu3svqE9ZfqLFzGdGJjWm/fFznPcohtvv8d/LfvPv82TCmPTnH6Z26aLr9HL+q63d/B2Bic5uRCE5eyTX4p+Vtr7iyIrOsnB1eLPjP2vdr1Keq7V6fGvxToU+fmdCnnn2oy1w9X7DOgVdzRZX78eJG6x/exTYVUp7W11N0FPGPEy8l9WE+3lAXJmH7+o03DO/fQ4OQ/6J4g+t58QbDxmyPY4CN9L4o3lA8xWDLxhuYF9lEsGVzk1jf4Ew/+7yAfoplPhz0LsPYabahoMfJ2AnsVgQ/57ms/kjolQ2OTeyLlkIs8Sd5LKH64vgIfyGk9QXWX6g88fFEZ3WNdNRNCirGYR0uG+Ng/dh4ENPBd+W/i2KV02hc8/LXSJfz1186q1PvDBrXUtc9vMvNuf1lLzdPiWOK7IdllBrHGPzFFMf0efvDGbx7z3Ag7j5jpDNSbALxTwh6fLkRlqXsENn2pec/PH3Ja67nMcp44XcpuZZXCPhq8Uo4Te0QwZXu7BmBso1UNgplxoPaIdJnfHNaivwQ/6SAxx3uZfpC4TqlT1y2q0PNSfeVr4jlKsxv8Fh7mTNvL7uGp067c4zPbWSfE0Jcj35Gj+Ez+T9O0OJLIQ32Smj35+lTK+sFr+Yjhh0aQbxrhbhsmIbaJfN/h27eNiTwpvIniGN1hM8Mh1pzY70te0OEl3tBOqdXpHO6oOONSfy/0eF33vrd6UQnFs98kOIZb30o+31V/pvXhz4F8cyHKJ7B+rE1ylbQsTH7QKsfO/XK/sTgbwS74hNc6talq4CvmJ5hPKM++MI8rFuAvAy3aST0+tbsWTYbZJuKbv0weBUzeBdZqvGTccVyu7Fbr3ac0Km39bhy7T9+VuO8+fgOzm0lcZ4Qwfnx4zo4d5BtoN68LGh62ZMyb8T6PIdHGyyT87H6H+qv/vzFlHhDnfIrhr/qPBdpjYdeGfeT71K8e/2AN8nxjYsK10RJXItEWT99sjjE24X4JxxeFJ8cYyg6L4N3PB+51uEL4c2GUDetrskIL6guIaMhr7/wQmzDX+GyUBPPLxIcXxaKIv5QBFegv3+R3g0HfVlo5ppefeLe30tEM3+b8Kouwnesxljf4BSdQyvSOVTQ8XD9tsBl8GoadKiAt3bgfedWt2LqYl4NrxO8qHC5ghqaeJ4MMBgFDIVei7o+givQ34wzpobDggafEfCsMHuWCBzsha9zaFpbs0fde2tw/HmLb1J016fn+QBfn284EHefGfkPpI6gfM0/0jO+1OdpU7JV/zx55Jde9bQTPu+ZmbdSp2b/rxPwFU3vvSpbhbucs2cEylZT2SiUGQ8qW9XnGZj3psgP8U8KeM5Wlc38qDv8yuKybBW6T7OdhbJlD5fKLLWI57GgV6rYVxj8P8Js9AuU5VFyCOLdUOj1E6+Y3fu/GpKWBs27om34s2dS1De4Bn3VaFlfNR5629xPtK/0VsmF7xDGurxDPnv4nH7Z0xb7Oy7UTf48jJWr/40Ov2M517EiyX1WB671NeBSWcfnw28sM1z8jvsF62+gsusEHbVaez2VodzMF6pd/c+ldqFNsv8u64cWC/44a5D9nsp/Z1ObA5ZpmpjtwrqccTL4l0B26OBl8Tam7ORC+FjG8JdyGguxkysmu18pIbvssRM3LLspkN1/cmTHY79aWVBZRb5DPvYJXSwLwd/BpDLrKXcdVVwpTR776t7ZpXbRKx9T8U6XEaPnfVIS6R0QtEzVvUtmY8rXsT9DX8erujiuxT7jmv1+DvyO+TNsE2fGFX8L5TcVnfMq0jlP0PHixBRdV3QUz0W+7MXky9TqNNa9PP/N2f4l4MuOJV+m5NwSf6fML4xe6vcWDP74nCe12qXafLnDM9IIoddueOwy+JfR2NXnPNe968HbwV2R7lCqDzb848RLvz64aHcD7q49KP+dp/pOvWTFBctWvO3yKy5eOYSoQ3yPZYuw4rtW6G49lg3TuwmCO3m2+2/T2uEQf9Aq0MuGkLbPQ+19ULPy1YIu73VQXw0YFnR4djvs1Eccsf03w5F62d/vFXXqPMNQ54ymwT13B6dapuEfJ176tUy1/0pFR+p2HO+Wd1zYwTKk40WniOvamnBlD2cGBrgGuAa4BrgWApe3R49nYdnDZzXRD/LMqeyiMtb3Fq9Pr0jndEFnQtTrd0yedHhW2RaWW9kMpNr3VzRDW71M00ydoRn8z5Z16q1d1s2zmqGhDHAGhP2wB8dsb91FxgOUlYgvlmSztC/SlzhQrqOzHbxFcUj22/Yu8p5ybLvShdQ+2kZ9pO7+Ghf88N1f34E+2kGzaO/On6J9S1cRvLVxLAK/mPgz+NtgFv0F57zX2gi92B7aCyP07gB6D4M+7GnnbKc+7u3bgwfKysTRSu/Qz7DeqUyQ8meev1AZLZVl5ZVZtRdS7TdtUf2xoPuA9wkb/IOiz1P1nPvV4D+W2K+4d20PHiir2q8oK+5XteqN8NyvSg+wv0wmKlP3IcL1IYHL2/9dZMuGj23rvzr9qvZ/I5/crwb/p4n9ivs29+CBsqr9irLifk3dR+npAY4PJhOVWb+Byrw7+JT/Rj1I6XPsn5j//oroc5XBX5zAn5JbBndw/jvPwC1fdcllK/MUXKDHS5llf6+LsHGQqB+oboveHURlyn16m3eM9ljQKSt2nwb/NSFyz/1mj7flu+L28+QkruGva8t4kVvjVJFnZt5UZh+oavZYdrcl2OL6gXC1xLvsUVuQ1e0iKd5NiUrt1UJ4w8fr1t9zRg41Enq3lKnIHUdHPu2NbeAbJrHe2ggdHNFQjXhEM/h/TRzRapr5yBENZcQjmsoseCeb1Xq2ypZOEjzKXo1ofNqqyAzNvaqZFUaVPLNS+uJFZp58lH6pfQ1qb4U3Cza4JmbB2B7WBa9vsyd2uwzCY39z1Ip7CzjzhLbEp9nUrCdVFzDbsTqyVl2E1+DVzRQ4hPOs3OAPyte21Xfp1Iqcp49KFuoUs1rB4xO5WA/3FezBPdspw1vW9rQPykro4xPqzMpkT7+2qlZ5eE83jgVeFgfX/l9MGZem92Dx+K1uLkVe+btSBv9rsPfiRcd341Q27vWB2n+Eds/+Un03zcN1vUO7LeC3OrSRL6zLtJlP/N7PHlqznTKTTUVbGVW2gv6ZbcXzxdmTIivVT5MEj7Ipux+MvyOZuh8MTzOzfqp4MXVswH2Xv0K223TWnmPi42CM+HgkJk7NBhv8Cc64o9rgjTtFGXK2LfR9HGerrKTyfewXlb9WfoT9ovp+H8LHvt93Ri6/ircYy/1Wse+m4u0eOJ7xHmCDfwP47uXHa5yjJXGeLfSmQV830rSvKxqTeJ8q9k1svyHiUntR2c7Ggp4vGT5ebVsBfcCZNvS37FPR37JPXSfoemcNMr15b84Hx2vZ7ymAeyPpnpovo89h3TP4D4A+vzn/Xaff4Fub1Hc32X5C8PVMrQoanNJn8wMV93wn72nn7+X1uYfeva1U5Qwq+s35Pe1tQU/1A+5pV/vYEZeNBQvt17xcTJFc+XwQtpHtGX0E+4GUmEzRi8Vk720oJjuAYjK0L7Z/tHG2f3VzqZoDxL5tr3wYj9kI/yHwYXMkm3boPCk5ljkB3wYYntOr79B7uLxc3zYBP+fQbkMZ1mXaMZv0bjNsYj6FcQHbYhvKhgV8iqzaAMP5rm1QNkdlqbbL8zAc39muUbdN55V+FuVc2HbVF5swHlA3yrwmdNNUSzv4jsdZrG9wis6hFekcKuh4uF4jcHk+0bv6RM2pK57/nr/6RK3zqKtWKlx9YuJ5KsC0gNUhYgWbzLgC/c04h4O++kSpxOIIn0a3SCXUBVuMCy9ds02UWTkfLTL4P6Fp5rXUtqmQ9NzoHRE33H0e5b+xRfhC0KFm7Hga8qWuFUi55uSLP7z6mle//pG/9kzKSw+qdP//JeArXnNynRrG+CqTESjj1DsORd41J326getS5If4JwU8X3NS9kgjlp3ZJ64DQ+hxlbyZuGnb52n7fxdpvIXmxUKmLzkpRTUEqI+EehfC7cuN4edXpHO+oNP0xvDziU5sM/DXKSS7DspU+ndV/ps3Xt5wQqfeNykcU3JuBT3+4NiVPWyvvDGUYdZG+PsO6CcfqVVtXuXwjGm0EHr9Aqd457ei0Njbp0+VKV6+8quBK32Sd2Ptqyt9yh2p5S3KKBXEiu9aobv1WDZM73jT1Umz3X/b5GY4xB+0CrYMJQnD6V0Tr0bfMhdVIV61MYEvzvNGe8ShJiGGQ9XL/r5M1KnzsoKFOp5rltnnEdfkT1fypyr6jDrnLdPbIJI93pFaTlJgGc92qhyp3VgjrnU14cqewdHCAa4Brv336Kq6EIw3k2YPf6K+6ZmXonNeRTrnCToTol6/Y9+kw7PaPMhyK3upIdbny2ZiM6HfPEHTTJ0JGfzvwUzoBSd086xmQigDdY6gwaNmcpMkynV0toMX7WAPP6G33+w4r3dMR+lCah8dR31UdKSPjxcb/MXQRyfkv1OOhhYdXb2c4K2NqUdXDf7knKeio6vXR+ilfk7e4E8HegtwdPVApXfoZ1jvVMZF+TPPX6jMkVrM4qNw3vHHssda1VE471irwZ8n9IHHItaNGH9KbjUfhYt94fMAUT9Q3Ra9OyCCy/Bk73D6mnIUTp12ZRexQojc67LsGRyFe9QdhbOsTEuwxfUD4WqJd9lTdBSORxVPxEpUyoukHKK+VKi052FVhOVFAti93lE43haH9a6P0FGHu7OHRzSDf2fiiFZTJCVHNJQRj2ipmRODL9oSzabmXRriXXVc11E4jtTqPnrE+pV69MiLqn8ejx7hcMTXLKsoKlUXcPbEM6vrCvDG1mjRB+AQHjuScJPwAYZTZaA9fVT6q7Le6kgC+zu1hqz00eAq6uOE0kdsP+uj19bs6ddWJ0OvnvFWUhwLOIws0htPH3GN7+u0Pol0ziSaZT+pcqbgX9E5tCKdQwUdD9eZApfBq63A3nYxdTyt4vbrIU/31PbqCtvFTDyHAEwLWB0KvSq8OYIr0N+Ms2i7GHbdtRE+jW6RSijTUXQWV6SzWNDh7SCfz11vxSXn30tZNOvzhMHvtQhfCHpGFTtdgXyp0w4p28y++uBv/ZeDr/7ykhbVN174XYrpvkrAVzTPWTU88cnUESjbTGU4xBgPaptZn6dTZlPkh/gnBTxvMyt7IgfLTukTl20z807ZL5Qt2zD95xBG8TazpnlRdM6rSOc8QafOrxRNOjwXJbj/NjJtSk1wG/ydZ3Xq/T0luJWcW0H76ex/7wsHRi/1CwcG/y3QKd6OtVa0+XKH5/VAg+lmv58b4eEfaIzqc/OF3I7FU1Dkh+1EbepRXwxQdrLWofPainReK+jUuSFm0uG5zrvs1WLUVP5bnfZcAb+xzOjwO6aD9Tc4dK6tSOdaQUelhnDaVDFmGq4YR8x/u7roNh/D732lKUUPkFZdX1lSvHubDDCmwTbGcG0piati7DTfJ0W3bWG8F+NF8clppSptnqgRF28MU/a3QuAy+NSvX6nTn1bX+q4NZf1Mm1XfqVOPFabNJp6zCc72vwyFXhXfEsEV6O+z6V3RtLnpC1MWyl0XhYNPPlHTjIWD/MFag599aafeoc534k+kNpY96YD1vRMVHLZgRpSzpeo69xaVIX/eSSC10jQs6Kghs88PUbUqhpfz7rlo7w3rVL8hGtKq66NYRZ+C8kI13nOrcK0viaviqbv5PvE+9oX4JxxeFJ8pF8GcCO9SMvJK3mqFDC+kwCGt36FJyUhdXFlhaDLxPIvgbCY6FHpVaX0EV6C/n0Xvioampt2VonNyRTonJ9JZqPasrUhnraDj4TpZ4BqYUtezr00pdh200S1SCfXRmH0ZYWCisSgKPIeiwKLPnnIUaPA3ntipdx785r1KiGtN6C5DOd5E/OO+HOvTivcMJG97M/zjxEtJevMRS+qO03JnDnn6ilJBrPiOrQnLhukdbzxcTPX6OXOoVt0/JHCqOP+6SD2URRDvhgT8tYTrWlHPeB926iMOrMca06L3aG03Ctq8p/otuVVlKe4fU4pb0UJ5FO0bZhjmYX7HH/DwyciOv5FIu9ia+aYP1C1bOmP67wcvc8WJmn4Q9Ll96D3HIvxiexD+SpABb+RVnj9E3qEMsG7sb4RdFLrbgn8rXbyR4G8oaDv3v8HPOv0/IXgwvrKH5c88MMz8LiWCf6/gQXjNZZe87crIHt4R+K28HPcS98SEwBN7TBqZxpr2snTYOpiO/a00IGv5E/Pf86HZxStXxfYv84gwHqE5FPQzETRvIey7LekT/dFzt6Rj+/rdkh6z0iI6FbekxwZt5Sy4fqC6LfEue/Z8oy8/SrEv1ySvrUhHJREZVywsfkv+m790vwkc1MORteghgTN7LPlt8N62eMOD8EVbJ1mWKuHn0fbW7jeV5LVofYgTt+r2ylRez1xgXtcKXr21x4rrqMmu0/DXtXaZ+tWVctOa2LchWoQV37VCd+uxjD0kTxVeNtv9dz/TmqJVXJ7WxJa1YpoVxLshAb+ZcMXulh+O0FM9qu7ONRyqXvb374k6VVffs4cH4y014toqcFVcUX1SqmW289/jxEu/ltkmetw+bvuc4GVSlHHKYU7QmRN0FK6NNeJaVxOu7OFrIAa4BrgGuAa4Hm241IE9vncbx0++eqbpK1QUndMr0jld0FFXkbQi/xsdfsd0FM/WHhy7WW5ql9dWhw7W512MuHN5Kv+dzVZ/fKKmGfv2H+/6NvhLYZvPT06MtxHlvKdds708N/E9yDYAjM528Mbspw082yFPFUvwIULsa8NR1AcjL+3mp9/vL54HffC4/Lc6xYC7AWN2o+ixjsQ+8byO+JvXxZwndbUM1t8UoYfyQDm/L0LvAKDnHcQ32hX17klNf3uhSE95Ww/qKWds1MkV9U2UFtUfC7oPYid4DhF9nqrn3K8G/5TEfq3Jnzyp7FVVKrPmXWjRFvDqu5mTobfPY5lIxOV9rl31q7q6lfv1GU6/qk0CyCf3q8EfkdivuJVuDx4oq9qv3uF01a/e4XQ1fmO/mkwmQ+84ydc9edv9sielX7EP2Ecb/AucflVZbs8PG/yL9gM/jLJK6Ve1EpDar+yHsV/5ii8c69iWF8pHnyj6nGN+9gsx/pTcar7ia3OEjSeK+oHqtujdEyO4DE/2DtOqLHJr7ljQKVAWucGfJkSuzFTt1VIHRSvuFE9eFDD846FXJfpJPXqh5x7G8v/L7mIuOyw2oKrZY6sFLcEW1w+EqyXeYVnqV92LvuZ9Ds3WUIV4pqA8n4r8DX4u/zsWXRi+EYJ/rTMKzQke2vCOvfU2AT8HMN6X5LdRGdbbFKGDoyN6fh4dDf4NiaOj0W5idEQZ8ei4HcqGBTzL+2YBvx1gOKt0M5SxSaOMtxGdItfB+q/0VM2+2wKvdz2Tp49Kv9SXC5eIel6mxOCayJRge1gXPFvKHpaNpzsom8lQrCdol3NEx/NL2ePpAmYXfky+EPWPs3NlL/zG+gan6Fxbkc61gg7jSt2nYvD/Wfgow6lWgb39EUXnr/l6Pe8csPraMP9vdPhd7A4V7Ks6V469iNpbVe6XDvqZjUSnXSOdNsBwFn2uRjpo8xNEZ1uNdNA/8d0T22ukg74Oj7HwmKhu+d0h+LApwC3wvsRYMJLSDsQ/TryUpDc/BbiF6HH7eAqwU/AyKcreDr+xDOnsFHQUrutrxGV9uyT09vVSoqNiqZsdOksT6UxXpDMt6EyIelVtRMnG6NxSIx20mWmis7NGOqgHU0RnV410dgHMc4nOBsFDFg98iuLgW6GMs1zZYyvAIwR/xlmdep+hVSj0Fcgj1se7lHaIdjC9P8lpmP+7DeqU8EfyLiXDVSS7z5HsdkBZiuwM/rkgu/9OssN2sW1/GMpuobLdULaTym6HMsSBZQHagO9Y57C+wU2Iejxe3QHvS/TXaIptIP7x0NvmfsarO4getj17TC7Wvjv7ozdi9O4S9FQ/HBC0TJG+4TIbU372NipD33g7laE/201laN/Pgd+IM9Ym3gGL/LF+I3+bqUztnPXuxFFz9DaVYZvnQufBNo8SnuyxnTYjBPt9WLX/x/y38jfsx3cI3FZ2qyjL8A+d2t0W9CkoRyzLnmHxzhtDb4vgwgN/OHdjf2jwi0/a+7/pNfqYErZ0ocllN7xkP9SnX7gw1Q/FfCLypXxUyl2uq3/9+wfd9vr/+ddlfbfn084Q8BV92utULstoq7tcb6eyUSgzHtRdrn2OKa9LkR/inxRlV8PvMn0xKcr4jE+/uNgXVsW1tU9cdscsxiQcd6hcHo4X3ukI5uu2Alz8+W+szz7swwW4eEfkbaKNHC8w3KjAzbQnQm/b2Jf16SeTcwCGf1y0oZ+YSslWjTXsx7HupChjnd8t6OwWdBSurTXiit1naOXqf6PD7/gWGOTzJOK57I5SrB/bDYxwPJfNfk/lvzPdfvpJmh/Ue5wHc1xg8IfBPOkZJ3W3H2l7MR/nWsre57g0kc7yinSWCzpN56U51/LhGumgb1pOdHbXSAftbYro3F4jHRwXOUbfKnjIdHYp2cEdUKbscvns3v9HCP7Tyzv1Zhw7QB6xPuZaVM6I6Z1I8XifcaDMtRiuItmdRLLDOZeSHfsQg98BsjulhA/B2PLDVIby2E1ld0EZ4sCyAG3Ad6xzWN/gJkQ9k6/1193wvolci+EfD71t7icuuJvoYduzh+cl9/RHbz7Xcq+gp/oBcy0oU6RvuDjXgn52F5Whb7yLytCf3UllaN+ca9lV0CaOpxV/Xo56X8Wcu/qj58ac2L5+Ys7ssQuJWqKs3zixDlycN9sXsdB0RTrTgs5jJRaaJjo/L7HQVSVjIR7P52MTGM+vXoBY6P37QSx0TU2x0DNAdh8k2SFttm2UE8dCGKNwLISy4nVAKwvQBnznrXWy3LAej1d9xibJsZDhHw+V9GN+vFIxohqvKsZ687HQPYKe6geMhVCmKi7yYiHOL6Bv5HgH/ZmXi+VYaGtBm7xYiPdmYe4i+xv3PfBaj8E+CexsW25nEwL/2bPdZajjNwPdHWSrKBfOX5aNHbC+wdU5Nqk1aM5Xlc1RY31eq9wt6PCYzv71rpM0P+hfMR5g/2rww9Dv91KfIW32k8gzx2hl+3NpIp3lFeksF3Sajmk4RmsqpuF81R010sHxcoro3FkjHRyHOEa7TfCQ6ewfkx3cBWUqX8/5KoO/+cxOvc85doA8Yn2M0T4s2sH0/oxitD7HRBmjGa4i2X2RZPdhKFOyYx9i8B8A2f1FCR+CY/LtVIbyuIPKMJeBOLAsQBvwHesc1je4CVHP5Gv9dS+8byJGM/zjobfN/cRoqfkja999/dGbj9E+IuipfsAYDWWK9A0Xx2he3gN94z1Uhv7sbipD++YYbXdBmzhGU7rf4H6P5HyV4R8PvXLsR7dULKTGYR6bsC73TfZwvkrtBVE5V9XPvJZfBZe3z4tjIbWf7BaHztJEOtMV6UwLOk3vX95X+aqmYq4potNUzJUaCy16Wec9+rLU8dzgfx3G88U5ThWP81qR1cdYaLdoB9M7IKdRMf8hYyFeg4rJ7iCS3W4oS5GdwS8G2T3JkR3bNo47nK9KjZM4NlVrVPjOi785hsR6PF71GZskx0KGfzz0trmf8So1f1Qx1puPhe4T9FQ/YCyk1usQF8dC6Gd5vzP6Ro530J/xuh7aN8dCHy5oE8dCas8Y4xqBdyrnxPOOo3L7ymztiPy3snOjncHdR3CDOKy7rur798BvLEM6qbHTzhpxDeKwDh1+VyYOayo+miY6j7WcVCw3exrFEion5eVmDX73Kzr1znBiiZSclBeHGfwrKQ5rMicVk905CXGYJzuDvxZkd16JOGyQk+rwie8Q/yAnFc9JeXHY/pCTUvwxrtQ4zOAvI7/RZ9wk/QafTRrEa911lf5cDb+xDOmkxli7asQ1iNc6dPjdIF6rh04/8dr1NcVrR0PMsXoB4rX1+0G8trGmeO1gkN0Wkl3qHQIcr6l97SqW43GwbN4M6/+85c3UePVozZt5a4gck6lzDinxWh15s9QcF9OMxXXnzHaXG/yDkF+7n/Jm6kx9Bnfsyd1wg3itu+6jKb9m/bpE4OZ4rey9U0sFz4rOdEU604LOhKjXivxvdPidd38Sx2u31UgHbX6a6DzW1jljMcdfJaxzejGHwd93Rqfe3yzAOufXF3CdMya7b9QUr60F2T3iyI5tG8dG9i+Ddc69z2CdMx6vefc6oW+sa53ztoI2cbyG/Hl3Ddk7Lw4z+J+S3+gzjpF+g/eleV8P7fMujeR4zfDX9fVQ1Xfe10PVGQU1x7safmMZ0vH2oSOuXTXi8uKoQbzWTceL15q673Ka6DQVF04Rnd010lFxTlHM8eSTO+/RF5c9q3IMxByH5ji9vbZML3WPvsH/ak6j4t1d0u8aLva7LLunk+zUHn3vHKXBHwKyewbJDmmzbaOcdlEZjqkcy9W59xbrs9zUXKTiudfkeM3wj4dK+jE/Xt1J9NguOF7rc/4wH6+l3mGB8RrKVJ2p9OI1PkeJvpHPSqI/887Lcby2s6BNHK8p3Vc5LjxTyTkuNS4tEm0s0UdLUnXQ8I+HXnn3o4PqTg41Xi/+P/+elv/OP0f00pWrzrjidRdf9PpTVl55+cxbLzhjxWWrLlpx8cwFF1y28vLLkWkk9AR4j+X4MIz93izeI47bChrDyoCdlXLJHuLiC/vUJXuGa3cBLr6wTw1u/Pdo6OXTDvsOJeBBQ4vxtZz4UosvnpNH5Xx/6MalLrH0HCPi+gDhwvq8uIjJIuaT5eXhiTlQ5Osa4it2CD37d08BrncTrtjlPtm/ewtw/WfCpSbh/Pdo6OWT5eXhyf7dV8DX/0N8xTbfZP8+UoBrFeFSm3cM10cLcF1OuLA+1sW/R0MvnywvD0/27/4Cvq4ivj4KZfdTGdY7j+iUnaRh/YWapJ1HdO6vkc79ADMF9bK/H4AyddmpOsRkg/+D8L6JhInhHydeStKbH/wfJHrcPk6YPCR4mRRlnOR4SNB5SNBRuG6rEdcD1J7oRUA0Cev3MpsRmIRdTZMwlNH91EYVx6jLSFvUrjEBj/hGCP79OU+PC72fW71f1Fe4cTz1Eh2LQq99NWEjhr+uC4EfIHrcPraRBwUvk6KMkxbKFh8UdBSu22vExRftxWxkTU028r2Xd+qt2w9tZHMNNoIxVIqNVLk8EvEZP/gO8ddlIyqW9WzkAcHLpCjjjfXKFh8QdBSuu2vElWoju2uyka+AjdzZoI2YvFNtxODvq8FGMG5OsZEqyTDEZ/zgO8Rfl42oS9M8G7lb8DIpynDOhGVIx1scR1z31Ygr1UYerslGPgE28kf7oY18rqSNKN6bmHup/NUJ8DsmI+8DPCeI9qg53gnUnpiO/MXJmp/YB65t/s4L67eDjvyVoyP7w8LqWRXpnCXoPFY2wp1FdO6qkQ6OK1NE5+4a6aCvTL2g9ntkB/dAmbIDyxeNEPzpYAf/4thBLGeZekGtwf8bLaz2ufFILqwariLZ/bimcebZILuflPAhGNOzj0d53EVlOCZz3lflV/Ed6xzWN7gJUc/ka/2FecsmFlYN/3jobXM/sVbqwU9r3/390ZtfWFVzCdUPuLCKMkX6hstbWN1FZegb76My9Gf3Uhnad8pl/dgmbyNcmcv6F3qTWZ8LtO4mM++y/rsEL6pvPgi/sQzpeB/iQFw7a8RlawyDTWa97/bHQwE/L7HQkad03qN/Tx3PDf6Lp3fqHZ3jbDIWel5OY1/GQi8g2fUbC30EZPciR3aDWOjREwt9tD9687GQWsMuEwupNe3HQiw0LPhDOPXhQYQP4l3Locc0hkTd3w/dfGPZBUSjbA7oAsFvg3nd4VT7erTkdXkNvUouNiXmqbiBMTkeX4gNjBfAu5o20Q57/XCbQ6/Ptbwho+ft7UJ6mT8dC719WPQhFKSB/RWz+X73U95VgMvbT8nrgHcX4OL9lLGNy1g2m8cvmR9+2yndMHfmMKsA5rL8N9sUymHPXhKCU5efVLzQI9n2+KOIfW6Ydz+KqA4cZrr5uODrCPZRbJ/pHaItKTqLPKXobNk+VZvKM7j3OHC7BZyilf2tPizOsfj7chyZnL9zbncbsT7vTd7cIT0vL3znHc4wOEVnaUU6SxPpTFekMy3oTIh6rcj/RoffMR0lG9aLOuigjk0TnaYOuk0RnaZyHZwb2Cl4yGxmE81v1aF3NV7wofezYX67lea3aAexD1ylHkAz+JspN9DkxXox2d1CslMH0DzZGfwLQXa3OrJj20bfv5XKUB58OA3HBt5bV/YAmroM4uflAJp3wdOj4QCaGuuUb+QDaOjP+AAa2nfKh/y8A2hqLM8OVz0l/905XHXKyivPXnHxRResWHXRJW89c+WlV6y8fNUIYFYjB3t49sR4NVTsadHfQ1S2mcrxlIN6vNG04hUHyZGv4R8Pvb3Qj+WoE10qyuCrerCuuqriD+A3liEd77ODiOuWGnHxJyoGV3nG6ewPn8Bp6gqAKaKzUJ9sjkUrX6NoBY/tpkQrBv/V0zr1vk7RCo4avNPecGOkt1W0Y4TgH6FIr8+sm4z0ePUdfd1U/jtr57cTZIc+LSa7j4Ps/pFkh7TZtlFO7F/UtT9qxo44sCwEf3VeRQQLsGshOdJbiF0L6mqcildfzEd6KrJU/YCRHspUncT1rvLcTGXqGgvlz3ZSWdlPNmObUiI9060Ngo6V7YCyLVR2q2hzZndDp3bTxs9Ft/PfI0T7l/I6i0KvLZTo85dMEB3Dgbhv6RN3qr3ExnPka1yUjSTw8txvPPyk4TdccGuL6hsv/G4I8KOOIfwpAr7iWPCiCaMx26mPKz/ZMwJlt1DZKJQZD1k28ZnEX58rNi9KkZ+ySYQ/cbYDV6YvlM9AGymD68DQrVdoO2Z/aN9z+e8Jomvl2VPRBpPnQYZ/PPTKoJ9xRflEbB/Pg9qCl0lR9h74zb5lWLwbcnBtqBGX+WbVzzwP2iDobHDoLBU8KzrTFelMCzoTol4r8r/R4XdMR8lmoTPe7RrptAFmiujM1UhnDmB4HhSL5Y85tfMe/VZqLG/w50Ms/1tOTIE8Yn2cB20R7WB60xSD9Dm2yHkQ73qIye44kt0WKEuRncHPgOxOcGTHtq2unVLzoDaVYZzAuZ6y8yCs//M2D1JjvLWvzxs25udBKk9YZh6kbnDieRD62S1Upua3yp9xzDUHZTwP2lLQJp4HKf4GsVB6LHQ1/MYypNMWdBSum2vE5cUog1iom84gFgp90UE/lBoLvbOmWOgbp3bqvXsBYqHZ/SAWek9NsdBnQXbvI9khbbZtlBPHQiqno+IknteXPS2E9Rdg52xyLLQQO2fVeFXHSb3sX9GNmioWiu0W5HVs5Wc5J6x26Sl/dguVzUEZx0KbC9rkxUK8Ho75XIbdFDrtRdhNYGefPjVOa1voLtsEZdupLNU+EQfKF30Fwr+F2mDw23O+s1zjd8/VOIeC1lHzPyr3ae1YZHShrIT+firj64vnduigvmTP6Gw3z3NQ5sVUBr9NwKPOcWy4Dco4nlP6iPGF6aOSVzt/14S8kIcUeam1qVR5sd2jvHYQrrbAhTL05GU8NiEv5CFFXmrvSaq82vlvJa9bCVfRHOcU4rWdvx8L2ifwbmaD/wT4BL4tx/PxmwRu9I0twoHtGBftmKAyrLvnUwcn7v29UHke7DccE1V8hnj5JpzPw7jx9yQbNU5761sqx+Ht8MRxfHcCri0Obe8TfYo28sV7V3jPjIo3lB8w2VT0A6PKD2C+iv2A6id1EsmTleontRbOe9ZSc05840EbyrycE56A+PvInATbEfPZbA84n+G5jponeLqn4me0Y9Y9lWNV9s9+Q+13UbbUpjLs2znivd8d6t+jOWoTO9RZv0eC1u/YzvNhyMP/S8S3jZbE+SMYjx4GG91Db7ZDw/qxoi8YUb4A7Z19geeDs6es32S79faVqnVzlCnHBCajMQGP+HjP3P9KjAm8Xd9eDtyb95k9ZHpzWK5fRXsTR0/rbre6ZcHbm2jwvwr6vCj/XaffmKMytXfKG3OUnqld9fw5Y+8m9T73gyfnUng/eNWb1FPXeSr6zflcyh2CnuoHzKUUnaq0sWCh/RrKKcWvqbUmtbeP7Rl9BPsBtReVfYSiNwf1MBY/jGxf+cjUmAXz1++kHA/aF9s/2jjbP+p7m8pQhtg+1Bvlw3jMRvhngQ9bSrJRuuzFsXcKeNwvyrfNoK7fmYBrl0NbnWK/06GNfPHNTHwSXNmkskWTTRPzDYwL2BZVP6nzI56sVD+p21nupLJU2+WTW20oY7uegzI8Ibo0Mm5jO1SOV8UDOOaP0tj9aMkVnAS2+2qSzSBX0MvnIFfQXbaQuQLWz7pyBccNcgWlcwUX5X2xP+cKfhd828UR31Y2V3BJjmeQK9h3uYJ3QR/sy1zB5sRcwdU15QraoM/vHeQKvGeQKyB6g1zBvskVbG4oV3DMozRXsBN82EODXEEP7ZhNDnIF5Wy3jlzBQw3lCq6msRv55nP0yqaUze+mstuELLj/YrkCwztC8J8B2/1Lko2yH7X/L9V+eM6k7MfD5e0xUjcV3eXQRr74ZnS2ZXW2vcFxVNou2ifbruczsydFVqqfJgkeZaPOIfG+NxyH+PYmHIfY5lG3cdxl/VR7m1LHXdxr9O3I7eoxvCxP7wsTatxQORTvjJiyf/Yb6jY1pevsN6w/MVeA8JwrMPhHKFfQ502oMlfAN/fjfRJKv3luZfD/E3zbdyK+bbQkzu8m5gqsH5uIqdHe2Rd4Pjh7yvpNtlvsG77LJfVmNbazsaBjiNjNqf/u5ArQH3GcoW6AVP6I/Zi65yjTm18+fe9vnutkv6cA7qekeyqvjz6Hdc/gn3x6p17If9fpN26nMvQDfGOmGnOUnk2K+jiGcj3zA+ZX+rzBMDlXwLfL39kfvdK3y1f0m/O5AvUlX9UPmCsoumHcyxU06de89ZAiufLcHdvI9ow+gv0A+gj2H7sdemp+hz7C85Gp8w2MWb5G93apHKuycbZ/1HeOG1CGHDfcDbyomAfHbIR/Kviw55NslC57cay6aR9vyed1GO8rvAqXl6dQX6+516Gtvl7DvIQQt0lliyabJuYbGBewLap+Ul+28GSl+mmS4FE2ZW33birD8Z3tGnXbdF7pZ9GX5Nh21Vk4jAdUvq6J25VjY3csz2d4OfadBttdTrJR/hn9Zdm4k+dMar7u4fLWxzz9VbSRL6zLtJlPq6ds12TThO3WOT9QslL9NBl67ZptMPWmZ7ZPtCPvpmccd1k/i86yeuMurivzbevevovsYXl6eVale7tF+5T9e7k19huoo+w31Ncv2c4wV4DwnCsw+BV5X1j82ecXdmSugL8qh/kMpd88tzL4d4BvuyDi20ZL4rwwx1OUK7B+bCKmRntnX+D54Owp6zfZbrFvUvaCoUw5V2AyGgs6Z4l7XhD+MugDzhWgP+K8ZurN87x3Sn39ItObNZQrQNudArgrSfdUXh99Duuewa8Dff4dyhXU4Tc4b6lyRt6Y433NVq0LKH02P1BxLp2cK+CvMfWZm3C/xqTmOxX95nyuQM1xVD9grqDoC2RerqBJv+athxTJlefu2Ea2Z/QR7AfQR7D/8PYxqFwY+gjPR6bGLLjmuYlyBWhf3roY2z/quze35rhBfelXzbn4y7tbwYfdQ7JRuuzFsUXzdc59qvm6h8vLU6gvut7n0Ea+sC7TjtmkskWTTRPzDYwL2Ba9HE32pMhK9dMkwaNsytruPVSG4zvbNeo25sDuiYzb2A4ct9l2Y/nDK508P88V6vhKM8+tPwK88Do8jwMI/zGw3S+QbOyLwSGk6YT6QjF+dZj9FOrE/Qm4vD1BDwj4+x3ayBfWZdrMp9VTtmuyacJ20d7YdlU/IXyKrFQ/TRI8ysbK1D4bZYMfobLUL0abziv9VOv/sTt52B5wTxB/tV35Qk/3isYs1j01Zin7Z7+B9s9+A3WU/Qb2LfsN/hI4w3OuwOC/RrkC1JGquYIHiMePAg9Kv3luZfA/At/29YhvGy2J85uJuQLrxyZiarR39gWeD86esn6T7Rb7hnM6Ku+AMuVcgcloTMAjvhGC/76TK0B/9FHiPfUL9hxnoM1gruDAl+/9PRF6bXcK4P6NdA99GvuL7GHdM/gnvrxT7/+jeKMOv3E3laEf4NhajTlKz9RaEY6hXM/8gPkV1MUmcgWGfzz0trmfXIGyPxwfOFfQp9+czxU8KOipfsBcAcoU6RsuL1fQpF9DOaX4NYTnuTu2ke0ZfQT7AfQR7D/ucuihj8BY3HyE5yNTYxacnx9JuQK0L7Z/tHG2f9R3jhtQhhw3PAC8qJgHx2yEPwR82FEkG6XLXhz7kIB/EGDupfagrj+UgOs+h/YfCviHHNrIF9Zl2jGbVLZosmlivoFxAdui6ieET5GV6qdJgkfZlLXdB6gMx3e2a9Rt03mln16cnz1su/cKXjEeeLTlCo4B2z2FZKP8s5crKDtfRx/2QAIub77m6a+ijXxhXabNfFq9/SlXoPrJ87FKVqqfJkOvXbMNLmSugPWzrlzBj0/uxvtYyxWkjPmYK0B4zhUY/KvyvrD4E3Wkaq7gQeIR8xkp83qDvwR822sivi01V2Dwr83x7MtcAdo7+wLPB2dPWb/Jdot9s69yBW+CPvByBZzXrDtX8AeJuYJLIzFH2VzBdaDPq/LfTeYK0A9wrkCNOUrPVK4Ax1CuZ36g4lw6OVdg+MdDb5v7yRUo+/NyBX36zflcgZrjqH7AXIGaiyCu/TFXUCRXnrurnGbZ+Qb7j35yBX/QUK7ge3nMUjVXgPrOcQPKkOOGB4EXFfPgmI3wa8GH3UayUbrsxbF1zNc9XF6u4GMC/g8d2sgX1mXaMZtc6FwBxgVsi16OJntSZKX6aZLgUTZlbfdBKsPxne0adRtzYLc1lCvgeKDoe/McN6k9Vt78pGjvqLfX6B4qU3v1mY66Ayz7fVX+m/cafSQxpjbaFfV9SdP7aIrmg3x2Bn0373lBGeN5JB4b8IzLX9DYgLko3pPh3fXAdbEPxiLwvJ/M4D8jYnZPn73zX2X1GdtQVZ/RNi6nthr85xZWn5+wr/WZdRb1mXNCSp9bodeHVcnnPLwf6v/f/Bzp/zf2c/1XcwlP/4tyJKz/GL/tC/3fXUL/H3BoKv23tsX0H/OJCP9DR/+VfD39L1oj9PT/ISrDejsjdFD/sd9Z/w3+PxL132g3of8oI9Z/b96UPWXnOrwmgPG7p/+8XluX/q8pof9e7K3039oa03/Dx/ny8TP2/q/0X9mgd46x7FoXtuFBKsN6OyN0YvE867/BHwBt9fTfaDeh/3XOX4vyDBzPo214+s/rHHXp/1Wk/3jG3bvDMeUcuzqrspvaoc5sqjN9fGbz8DM69Z53RjdOFSN5dyTWMef1cHn2WXQ3BtNWd2MwL0HwafUaPP812vS5ViUr1U+TBI+yUbbFZ9xTz5XwWRV1d4XST3XGPdV28Yz702kt+o4CvGXvcOU7aNQdrsr+vTshUs6xK11nv8F3IDE8r0Ub/LK8L2x9A3WkhK7LtWi+qwbP4Sv95rU7g38V+LYTI75ttCTOlyWOs9aPTazZ1HlXTZHfZLtVZ9Na9DfiUus3bGdjQc91+V4Wgz9LxHXKH/F9HOq+JuWP+Mwd2gyuRb8j54PP6Ga/pwDu1aR76NPYX+xp32x3uw3+XaDP5+e/6/QbfB+WuuvAG3OUnk2K+jiGcj3zAxXPgCevRRv+8dDb5n7WolPvp6voN+fXolWeUPUDrkWrM7SIy1uLbtKvoZxS/BrC89owtpHtGX0E+wH0Eew/vPv30EdgLP4Osv2i+3M4ZlHfeMrwPpnmG2hf3n1OKefY1Z45jhvuBV5UzINjNsJfDT5sNclG6bIXxxadM7+D2qPOmXu47nRoe2dFFW11bod5CSFuk8oWTTZNzDcwLmBbLFqTTZGV6qdJgkfZlLVdXt9W59iV7WL+fXVk3MZ2qHs2VDyAY/6raexG+t7Y7d1Bw3cqoF0jH9xG9kGIl2P+LWC7d5Ns6r6fgudMZe+n8O7iK/IbTHtwP0U3vOqnydDrA3mviLqvRdkn5xjU3SlWpsYcpZ/qbpnUcRfvlvnGy7rx1n0PpHdfLe8V9e6PTB3XvbtY2G9wfMjwnCsw+E9QrgB1pGqugMdxPHOj9JvnVgb/F+DbPh3xbaMlcX42MVdQ0zg+0vQ4XuQ32W6xb3j+qMZSlCnnCkxGY0HnKQwf57f/LDFXUCZeUPk75Y8wV/AjyhWg7U4B3F/WlKf6d9Dnr1K8UYff8GJr3reqxhylZ2pvII6hXM/8gPkV1MUmcgWGfzz0trmfXEHq3L2i35zPFag4XPUD5gpQpur+Hi9X0KRf83KgRXLluTu2ke3Zyyeij2D/cbtDD30ExuI/SphvpMYsON/4qzxm8fYflT0ny3GDms/xuBHb0xQ7J/tT8GEHvKIbZ913avE+/LJ3ank59qIzut49Q4M7tXQ/qTMn3p1anu1yjgHHd7Zr1G3cX876WbQmy7ar1pgxHlC5Av7uRdl8gLJ5jtNU7Ku+O8Cx76+8olPvSJJN3Xm+lPm6h8ubrxXl+Zj2IM/XDa/6KSXPh9+94FxBqn2yzaNud90BQ/pZV65gI+UKlE/wdK9oPw3rXuoZEvYbZfMBStfZb1h/Yq4A4TlXYPC/lfeFxZ993iMlcwUfJR4xn6H0O3Ym+BXg25ZGfFvZc8YzOZ4F2r9d+iyo54Ozp6zfZLtVY3yL/kZc6gwY29lYCO7ZCZ4znwp94H1nj/Oa6I84B3KHoKv8EeYKLsn54LlO9nsK4JaT7qm8Pvoc1j2Dvwz0+ez8d51+g/c4qZyRN+YoPVPrvDiGcj3zAxXn0sm5AsM/Hnrb3E+uQNmfmu9U9JvzuYLU+/cwV6DmIojLyxU06de89ZAiufLcXd35onyEt4bB/uMOhx76CIzFLyHbVz4yNWbB/QrXU64A7Yvtv2w+QM2tOW5Q98mqu4n4PtkrwYf9PslG6bIXxxbN1737PVPu1Kpy7sm7L6ToTi1lkw3eNzHa9J27RXdqcfzv3amVart8553KByjbxRzY70fGbWyHyleqeADH/OU0dj9acgU3ge3eOsgV9NBmPge5gu6yhcwV3NpQruCcQa6gdK7g/kdBruC/gW97qKZcwccHuYL5sn2VK/jj/SRX8N3EXMEXasoVfB/0+YuDXIH3DHIFRG+QK9g3uYLvNpQrOO1Rmiv4N/Bhi87sxjnIFcRtcpArKGe7deQKWD/ryhV8oUSuAHnz5hFVzyDgnozYGYSDzuzUexrJpu4zCN7+x6bPIHh7rwZnEPy7/bwzCF6uAMe5Os4gsH6qXIE6UzgReu0BcwUHNXwGwbt3xDuDwH7Dyz8s9BmE5+Z9sT+fQXgZ+LbnR3xb2TMIL8zxDM4g7LszCMdDH3i5As5zqNx5lTMIF+Z8FJ1BOIV0r98zCG8CfT49/12n3xicQRicQdiDPP//sXoGAX0E+wH0EXWcQbiQbF/5yNSYBc8gLHLOIHi5Qm+9biHOIFwKPuy9JJvBGYS4TQ7OIJSz3TrOILw3Mm5jO/o5g3AKjd1qDXOh9xWo85kc+34IbHeOZFP3voKU+bqHy7vbsGh9jGkP9hV0w6t+StlXgDkx3o9Q974C1k91t2HquIt3G37xpG68yid4ule0r8C7k8TbV8B+Y3/aV3An5Qr2x30FnwXfdk/Et5XdV/CRxFzBYF9Br0zr2lfwSSdXgP6o6X0F36RcQWxfwX+NrE+U3Vfw/4I+/ynFG3X4jcG+gsG+gj3I8/8fq/sK1F1mTe0r+CbZvvKRqTEL7iv44zxmUTbO9r8/7Sv4HviwsLwb52BfQdwmB/sKytluHfsKWD/r2lfA8UDqfact4hfhve/SKJ/j7VdQsZBa59wdoYM+Adu2fHbv/7z2sziXc1FM3eRaPMqI9b0oR1R2Psh37ar1GqXvRrPo3tu7aD7bystwjvdc+P0cKEf4Z+T9YnEDtrOEvE+bgDoBcCDukT5xtwhfCDrOw5hG0cuecVE2ksDLEVe948hDrxw9ukX1jRd+x/oyKuBfL+BNVmPE+1RIek5RNmW0rWwEyjgOHIUy4yGzpWcSf6N98tcKxfJD/JMC/uWzHbgiXNljsj0wdOtCC8rM9+2Csi1Uhj7Tu58yJRdsvKs1Zfw+B6+lG/zRyzv1liWMYRjXNvHNGA+X933Yor1nTFvNMZmXEOJjc4N3uY82/Y0KJSvVT2otlXM8W6CMvxPl7bfAsYrXZ9XeMKWfdX1r6hoaA1XM5OleUczEupcaM7Hf8O61LZvTYTtDn4nwnNM1+FfQeN9nLkTmdHkv6D3AQ5kc2IXg286K+LayebVzFjb+HGl6L2iR32S79fYE3CFwqTkP29lY0LGv4ePvtrwO+oBzuuiPeM6nzl0of8RxNdoM5nTfl/PB39vIfk8B3EWke2rugz6Hdc/grwF9vjj/Xaff4HwP+gHO36sxR+nZpKiPYyjXMz9Q8XsuyTldwz8eetvcT05X2Z+a/1X0m/M53dQcMuZ01Ro14vJyuk36NW9eXSRXzrGqNU7lI9gPeHvWdzv00EdgLP4+sn3lI1NjljsA71WU00X7YvtP3f+ZkgvmcUP5MB6zEf5a8GHbSDZKl704tmg90luj+mgCLi9vU7T3jGmrvWfMSwhxm2xwfWW06XVjJSvVT5MEj7Ipa7uct03NBeN6zLbIuI3twHGbbfdOwSvGA4+2XMFusN1PDHIFPbSZz0GuoLtsIXMFn2goV3DSIFdQOlfw3x4FuYJvgm/7s5pyBV8a5Army/ZVruDv9pNcQeusvb+LcgWP1JQrGDmrU+87g1yB9wxyBURvkCvYN7kC8xGej+wnV7D0UZorWAw+7Ckkm0GuIG6Tg1xBOdutI1fA+llXroDjga0C7y6BtxV6/VDK/i+1vwzlwd+7VvuK1B04WyJ0VA4ie3j/l8E/I5dzUUxttJvQd5QR67vy2QjP8lbzR4yVeX6t9uIpfTeaxvMugTOT/dNpbNgBcDeH7rJboYzPGOPeY/4GGuoI8oH9hHqwAWAM7wjBvwjGhtPI9pQO3wrvuA+8PkN+lF6nzGt2OLSL+p9pq3sqmJcg+ER92ENrtlNmsmnCVtD/sK14viZ7UmSl+knZCsd1N0PZDirz7jTCb6Dx2UfUbTwzyPq5Q7RjA7zjsWGD4DXD+7mXduO9TeD1dM87E6l071bRPmX/7DfQ/tlvoI6y38C+Zb+B8/0g4DkXZfCvzvvC5jeoI1VzUXcSj7cDD0q/ee5u8JeCbzs/4ttGS+JckThuWj82MWdbyHGT7Rb75lbCdavApeZvbGdjQcdIhm+E4C+GPuBcFPoj3vON/ojH/J2CrvJHmIu6lnJRaLtTAHc56R76NBVLsu4Z/A2gz2/Pf9fpNzgmRT+AOGJjjtIzNU/gmArrmR8wv4K62EQuyvCPh94295OLUvanzrFX9JvzuSg1P1L9gLkolKmaL3m5qCb9Gsopxa+p8zqTobeNbM/oI9gPoI9g/7HToYc+AmPxa8n2lY9MjVluBbyfymMWZeNs/94dqqjvHDegDDluuBN4UTEPjtkIvx582O6EuX7T90V6uJq+f4J5CSFukws9N8e4gG2xKCeTIivVT5MEj7Ipa7uc38Lxne0adRvzvbsj4za2o5+7TzgeWC/wjgu8Br8BcA0Tjuz3VfnvEYK/V8SuhnOT4GExvOM+3SzgNwGM8bMk9PqxzVSG9Vbnv5W+G1xFfX+C0ndsD+v7FigbFvAsG5VbxJyS9e0kwaOcrGw1lBnNCcKD8s504m9P6OZno+AH+5b1axPgGiYc2e8cfF6/DP6zjn4pfVkL71iGnsyRH6VDvBaD9Uy+Sr8MrqJ+LVH6he1h/fL0JXtYNm0BjzpkfTtJ8CgnK0O7NJoThAflnenEB4/rhkP/1Yr8b7zyO54nIC47V8ixUB10sN02pzM666BsKv+dtftvyG+jTIZF3Xflv0cI/scQA/0dzeOw/gaqb2X/A+zs++fG67MPxjFinMpQHuhzYu1E+NlIO78NfH7XyZUYXxXtblLZHfq+FL+O8GX9OvtutMl1hGudwKXmARwjjAXdB4ZvhOB/6ORKcPzYSLyvLsm7Gk+UH7G6e/K5uR9ZEnrHmE1EU41hqq8mRf2NEVxDgn+0W+734aDHQ4Y3ncB8pfLPIwT/M+irH5yrcYYID+siPI9F4LcQD/NtfGWHhy8QD8oPoP5vJpwGPwY4P14S5+9EcI4DTo41lJ1ifFt2POV4AuXYpjLkncfFrUCfYX+X6GMZ6jnTDQ6/PKYW8cvjjZVN5bLO+uiJ+e9FhK+krx72+urVgt/UvlrntI9xWT28gyPFRlAeh7xS4xwtifMpoM/fJz+Nfv45gH+KaCsfib6a/TL6DLTDv6GYBOmvJf5tnHi6sEc11huuamN96+tqrF8NEDzWK9kgPPsENR/GfuQYG8eb36CytVDGsdVqQSd1LLW6WZ/92nHdeDc4eLPfbyQ+imK8t+W/2Q8/z/HDSoaezItyCryOiv3BOQWlswutj9h+1kevrdlTdj7M+qjGD6WPHGd5epM9nj5iXuqXKbZDXo2+8tHMT1HMvZjg2/nfYxF49vkGf7IT98wJHrx5wjYBPyd4XkI8YF2mHdvfdepsd3sM/oxEf1xTzuNApf8oN9Z/T0bZwzLdLuBRVry/azuUtakM9X+OylQeybPZVNuwulk//mCmG2/d+Tn21Qb/246vVm3zfHVT+TnPVzepq/trfg51NTU/9w3SL+XTvdyr0scNgn+VV+J+x3ozoZivDYKvSVEf87hcrxX53+jwOy83OEPt2ei0p2yOAutvpPZsrLE9iueiXOfv0txC+RycW/A4ZPDrYa70nvy3l+ssq1OYw0JYldvJnjNnw3z7s6f+WFCvpy5kLMjxHo5jKbk81D0c0/bAzHbq17QeJ+WF9szy8vxT9qTMK1TubDL0ynI9laG+bSA6deVFH5wp5n+9094i/eAcyX60drbPx2bWhTaUpaydsb9EOspfch+jf8V+4bUkg7/ViemUHnh6UzTXMn6UbvB5e5V/b9CH7Nd6s5nKVD4wVW+8HB6O0TZ+K3+HMSWOk6jPCB9b99hAeFr0/vHwHuu9g9rMMRLjfifBWzvHIvCGj2ORTzpz/E0FPFxJPGwu4GET8WDwnxE8ePLPHi8mXBR6bbHsPlLEZ/zgO8Q/HrR+TIWkp8XyM3pKD7KHbVnZk1rD8HygsvOUWKkKLm8/1FKiU3ZehPU3OHSmK9KZFnSann8tJTqba6SDNjNNdLbUSAf1YIrobK2RDo5HvKdlseAhGye+RfO8NpSpGJbPJhj8Eed06n2b5nnoK5BHrI/njzaKdjC9f6J1yDmoU8IfyfNHhqtIdt+PrL+lym5+ngay+4EjO7btNpTx+gfKg2N6zJsiDiwLoTfPmj2sc1jf4CZEPR6vtsP7MnPFFNtA/OOht839jFcq/9yGd3yu4+b+6M2f69gh6Kl+wHMdKFN1LtNsTPlZzhmgb9xGZejP5qgM7fs58BtpxNpkse0Shz8Vh2LspvItrHsLHStt6o+eGyup/FDZWIn3Re2vsRLyybFS2Zwr1t/o0JmuSGda0Gk6tzuIldLp9BMrPe3sznv0/2VjpbvO7tT79fy3ypukxEqbRDuY3pE5jX0ZK/0GyU6tJ3iyM/gbQXbPcWTHtt2GskGs1N2Hg1ip8zsWK6l4o8lYaVNBmzhWUvypeCd7pkLakxJLYftK9N1hqbpp+OuKpVRcomIpa9/W/uhNZbr2+LwexrFvht9qXxL2V139p3Iz+6r/NvRHz+0/lbOqs//Qtsr0n7LNY+A3lmF7vLgS6y9UXHkM0YmN8efTGK/WtHCM5z0DBv9WGONX0Biv9rx4+wIaXOcfLnveyNtTnD1l98PaOo4ah3iPkTrr0wq9faL2B/Ga01pBJ+urnTOa/xbgfZeoy7aN8JsFHwbPZ1wYhs+jGPzluU5l/ffJyD642HmU2Drs2wHnQp9HQTm3qQzreeuwBlfRJg5TNtEGALaJOSjzYkWDT91bO0nwLCdlX9mD6/Ksn4rXDRV45X7EvtpGuAwW9RLbw3pp8NcIvVT9387fNdH/3jq8kqm3Dl8kU853eXuEvXX4uvb6nr/Ac1TOGWwHXoYFr4Z3hOA3wBh8O43rNl8KIc1m1fwM51y8nxTnZjsScHm+9BYBv8OhjXxhXabNfFq9Bm1L7pPDuTbbluonhE+Rleondd8K3/2YOl/eTmWp82XTeaWfRXeZeLaLeSnOWc0JvJ7u1XEORNk/+w01xilbYr+Bfct+g/MgDM+5RoP/Q8o1oo6U0HWZa7yFeLwZeFD6zTlEg/9z8G3/JeLbRkvi/FTiOGv92MT9aWjv7As8H5w9Zf0m2y32TZtwtQUulCnH9SajMQGP+PjM0+ehD/iuA/RHNxPvqfm7NpWpNYRMb/4554PPQWW/pwDuS6R76NPYX2QP657B/xD0+SsUb9ThN3hvJ/oBjlPVmKP0TMVnOIZyPfMD5ldQF5vIiRv+8dDb5n7yVqk56op+cz4nvlPQU/2AOXGUKdI3XN69kHPA/x7Y2f74V34N5ZTi11SefDL0trEdusvQR7AfQB/B/mOLQw99BMbi/xxZS8R2pMYsbcD7NLJ/tC+2f7Rxtn/Ud44bUIYcN9wCvKiYB8dshP8P8GET53TjVLrsxbG7BDze/zdH7UFd35WAa5tDW93vucuhre4dZl5CiNukskWTTRPzDYwL2BZVPyF8iqxUP00SPMqmrO3eQmU4vrNdo26bziv99OL87GHbnRO8YjywUHv/6soV/ALsX3wGyWZ/yxV4+fZBriDnJxT72DpzBan7EOvIFbB+pp69LzpzzXuB5wTepu+MUPbPfmN/yhW8IO+L/TlXcBr4thdFfFvZXMFLcjyDXMG+yxWcBH3wBee+raZzBW/O+SjKFbw8EnOUzRW8FfT5zPx3nX5jkCsY5Ar2IM//f6zmCtBHNJ0reDPZfjv0tqOfXMG36KwR2hfb//6UK7gCfNg1g1xBD+2YTQ5yBeVst45cwTUN5Qo4HkA4G6POm+28w/t02NY9Pgze9CS218rqcm7gOoizPunsCzJcWdtuiLQN/UQb+N9GtA3+LvATa5xYh++1ULFOCL1+mfvzxNkgZbAZ+NhwTpyW6dCE08YMx9ZzNBzygHCMYyj0ysBwqHvweH7ZFjwHwjkkYJnGVlFP0dhCOFFm6NtVHkKVbxdtC+LdkICfC7q9QdDeVoC3LfAoX+P5KI6p26G3vXjnC/sXdTd0pjsnz+z9rewlZhNKr+Yc3rcT73OC97bDe1vQQf+h9kfyWQbWrc2inS3xt/F3KbxjH6vuYEcYq8v7Uz8mfCbjjO0DvCSC8xMi5+DpzPPgHY/FXj8hP2pf4xzVU3cIBfFO9c86gm3D7+wxX6h0dnOEDstD8eCdr/XO7xXd4+XZJu4pfN7M3t9q3zvfOb+ReEdYviuFz2awfvN+WLyHR60XsH4b/J87+q3OBSJfl0RwftnRbyX334R3rN9F96fx3Ejdn6Z4R9/D71T/sH7zOSDUbz7jsyFCR+k+86DWnUy/10dwMs2y81K8O/qz03t/e98HY31BmmpP3qSoz3c0GQ+PgC7x9yrUt9e8My0G/x1HP+u+J53XCtS311Q97L9FgtaU/fiZ/xg+s4XHhbgO8n71fwE5ff5czUuL+Sl4GjzHONUifCHoHOGj9BzjoXWcY+SzUS2gn9nRT2i+p2wM6741/802Fs7t1PtpBGcI1XzTHdPdeJu6u1XZbsq92d53aIwHFUMiPN8fPn82KJdv0fe86rkLtPUDlVPCGHF0NnS1qw1lwwK+bBzL39GZg7JY7IS4VK6X9Sb2nQL+Fo/BHwx9wOtWeC6Pz7qsL8l77A5gtkW0DbZj9V1T7177ou+avjH/zXb/ZJDJw5HvSyEPVb774t3jx3kkdcewsheDa+IO1P3lGyQcR6p7S5Xvxe+a3jjdzY+6bxn7lvULcQ0LPi7Mf/M39I5y9KtoXGEZFt2tz3czp96D3vw3bsJB+/q8s/WtyiXxPd3oC/mcvPq2YaYTl01386PGSaz7pvw3j5PHOvrSDvE2Zk/ZMcr48XItKqfKuoRjG+e9vL0G2e+35L95r8FLE+OFdv6uon7OlF0P3g5lKet13h45lMkkwXO/4N+IC/uafVc7fz8WdB/Evmt0phMvpO6ZTeFd+V1lb2hTS6b3/lbzfI5Zve/TcF0ce8Yi8LH552uEvNifxXKvFxFOg3+t4w/UmHoTvGMdLLqjnXOvKh+p5g/e3QD1xPPhuH19RzuPH20o4zOqZe9oT9V/1KGfHLv3txrP1xBNL47lukgnpv+xO9Ivd/S/aF6+knAa/Nsd/Vey9PS/KEbwYiTvXh7zNw3G5yfs6/ic9d+Lz8vmeVP1H3XoH47txqvuT8a6b8h/8/3J15TUL5w39BuDKh3yfC/nZ1Tsyv0YG2d4nmLw1yXGWzV9c+Pgfe3Pee2tDWV8x5Hyn97dQsp/qvGS/efGxPyM943mFN5T7Q1t6is03uDcl8eb9Q5Nrot2HRtvDB+PDTuc8QbnZiofxOONwe8qOV/3xpui+Trng9Q3ldVc3puvG1xF+3xi09/VKsqV8XiD/pC/l4O2kfJdrVT9Rx36dK7/1eT6zj3we3iZ7eAeFpCGf4TgP5b3Cd7JZv+PJPDx47kf3bnj9i//KZ97yR7ro8dXwP/dl7170xl/dv2NTeH/9fffcNdL//any5rC/9k3f+a8JQeEoabwL2pNXPGz//Sm+5rC/63f+sF/vPvY4aubwn/e0LcO+chTbt3aFP4Tdv7ppb88860nFeFfkv8em+2Uox/Mnsflf9u5LYY3fCME/xVYC/wrioVGBb0M7tsOXCvy/x4c4t3IbPe78dle+OHZXnij/fjZXh6tbDGUoQ/fA5P/jfJCXONQjvDfyttufbII6lj9SUF/EdHv4lu8wzGEcQ2Ldwaf9c/XyG9i28uuoWfPGNXHd0zbdKOKXVz22e2vmnjkXRc2ZXcvf9clbzvzy9/4alP4/8eB/37K+z89+bdN4b9gxTW7/ugLqz/XFP7Pvfn0j6048Tef0BT+I//uib+47lunrWkK/8cvHn/2V3c+7o1F+P83jbZcO6TGDAA=",
      "debug_symbols": ""
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10492081608786484886": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "13434471300436635949": {
            "error_kind": "string",
            "string": "Function _log_transfer can only be called internally"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBHJwAABAMnAgIEAScCAwQAHwoAAgADgEYuCIBGAAElAAAARSUAAABbKAIAAQSARycCAgQAOw4AAgABKACAQwQAAygAgEQBAAEoAIBFBAABJiUAAAQbKQIAAgD20deRCioBAgMkAgADAAAAeyMAAAJHLQgBAicCAwQEAAgBAwEnAwIEAQAiAgIDHzCAQ4BFAAMtCAEDAAABAgEtDgIDLQgBAgAAAQIBJwIEBAAtDgQCJwIGBActCAAHLQoDCC0KAgkACAAGACUAAARELQIAAC0KCAUBIgAFgEUABy0LBwYnAgcECC0IAAgtCgMJLQoCCgAIAAcAJQAABEQtAgAALQoJBQEiAAWARQAILQsIBycCCAQJLQgACS0KAwotCgILAAgACAAlAAAERC0CAAAtCgoFASIABYBFAAMtCwMCHAoCBQYcCgUDAB4CAAIBHgIABQAKKgIFCCQCAAgAAAFtJQAABLspAgACAEc1lPMnAggEBCcCCgQDACoICgktCAEFAAgBCQEnAwUEAQAiBQIJLQ4ICQAiCQIJLQ4ICScCCQQDACoFCQgtCggJLQ4GCQAiCQIJLQ4HCQAiCQIJLQ4DCQAiCQIJLQ4CCScCAgQEACIFAgctCwcGJwIIBAIAKgcIAzcLAAMABicCAwQAJwIGBAMAKgMGBS0IAQIACAEFAScDAgQBACICAgUtDgMFACIFAgUtDgMFJwIFBAMAKgIFAwAiAgIGLQsGBScCBwQCACoGBwM7DgAFAAMjAAACRycCAgJVJwIDAm4nAgQCaycCBQJvJwIGAncnAgcCICcCCAJzJwIJAmUnAgoCbCcCCwJjJwIMAnQnAg0CcicCDgJ7JwIPAn0tCAEQJwIRBBwACAERAScDEAQBACIQAhEtChESLQ4CEgAiEgISLQ4DEgAiEgISLQ4EEgAiEgISLQ4DEgAiEgISLQ4FEgAiEgISLQ4GEgAiEgISLQ4DEgAiEgISLQ4HEgAiEgISLQ4IEgAiEgISLQ4JEgAiEgISLQ4KEgAiEgISLQ4JEgAiEgISLQ4LEgAiEgISLQ4MEgAiEgISLQ4FEgAiEgISLQ4NEgAiEgISLQ4HEgAiEgISLQ4OEgAiEgISLQ4IEgAiEgISLQ4JEgAiEgISLQ4KEgAiEgISLQ4JEgAiEgISLQ4LEgAiEgISLQ4MEgAiEgISLQ4FEgAiEgISLQ4NEgAiEgISLQ4PEicCAgEAJwIDAAELIgACgEQABCQCAAQAAAQbJwIFBB4tCAEGJwIHBB4ACAEHAS0KBgcqAwAHBZGbXKI+IJ6WACIHAgcAIhACCCcCCQQbLgIACIADLgIAB4AELgIACYAFJQAABM0nAggEGwAqBwgHLQ4DBwAiBwIHLQ4BBwAiBwIHPA4FBigAgAQEeAANAAAAgASAAyQAgAMAAARDKgEAAQX3ofOvpa3UyjwEAgEmJQAABBstCwIDLQsBBA0iAAOAQwAFJAIABQAABGYlAAAFEwAiBAIGACoGAwctCwcFLQgBBicCBwQCAAgBBwEnAwYEAQAiBgIHLQoHCC0OBQgBIgADgEUABQ4qAwUHJAIABwAABK4lAAAFJS0OBAEtDgUCLQoGASYqAQABBbpw1HgHtLEtPAQCASYBAIADgAWABy4AgAOACC4AgASACQsAgAiAB4AKJACACgAABRIuAYAIgAYuBIAGgAkBAIAIAAKACAEAgAkAAoAJIwAABOEmKgEAAQXFa8RaDhAAAjwEAgEmKgEAAQVFp8pxGUHkFTwEAgEm",
      "debug_symbols": "tZjRbuM4DEX/Jc95kEhJpPorg6JI23QQIEiLTLvAosi/r2jxKsksbGSzmJfy6Nq+oihFcv29et0+f/182h3e3n+tHn58r56Pu/1+9/Np//6y+dy9H5r6vQr2p5bVQ1yvYsg9Eq8e2KL0yOTR28nbydu5PZcs1h5L8qg9CnmUHtXb2votLdboMXusU6TAHrXH6O0oPVJ7Ti3WHtmvs99veU6x90M5eOz9UPG25TvF9lwMDaQ4qN+h/oR6ZtV7qj0TDuTR2zF6tIq2krKVtEO7I1IDK2oHU+xmSzdWg6ZQ654zOVimHZohtZqzJEB1UCgKxbLsoB1SYACUSABxsKp2KA4MhTPAu0gpAWCY0UWGYUEXxQxzA4kAKFboDtmhQrHVSa0+OUQAlAjF6jwBBQAUhsIJUB0SA9RhSl4N1GFKfgJxEChqN4uBOlQo1ZUSGAAlQolQCApBYSgMJUFJUDKUqc4GU6oTQBEoAkUjIDtMdZ4gAWoHQfKC5CUSwA2FIqA4cABkAAxTAsAQoxCMQjAKKTAUdCEwVHShMFR0gSkQTIEGAngXGiPAu1AKgAxwQ+UEgCHmQhMMM7rIMCzoosBQ0IXAUNAFFpJiIWmFYfUuaogA76LGAMiAZshtl6iUAFCmrdsgZQfbDDvg5oybCxTbECewZdOhOFQo1ZUYrNBOCoppUAXR0GhotuKdxrNp+CUBWT3YzqhoBWGaKIPst9WJxlVbl2ynVLRtzGloyaqQJkqDKigPLQ+tDG2qzkT2O+NsZCvTKYNsSTqpE021yqfTeoXj+OnzuN3aaXxxPrdT+2Nz3B4+Vw+Hr/1+vfprs/+abvr1sTlM8XNzbFdbbbaH1xab4dtuvzU6rc9Ph/lHU0jsT6dQ0jBos3irBVFStyCOddaC5i04pYg0GudzHkI3p8E5IY1E941ERxakHGct8ryFVkxGDXkYsPLNBqLDQGcNZGEQIhWDEL2wKDdbtMUt0T1sedPZhK9N6h/Ng1KiMaU5/n+LOmsRlhanwKK9kunsqrC1M1tRIsW8thfsUC5c9NolLbjUzEilcQpzP5O4sMDay6hkjIe4zpssjocjncfDND+epXXWjukCF6k1z6aii+MJeh4PpfvGczU/nObHs+BCsYz9oy284ZF/2wjjvEWlgIrU9p/NeSz52mJhM23v6ZiaxFrmyrFsweVsUWctFtYqc65jmXGhcseWzsLYTRvSPVs6F6WzBc8fTrK0AejYyrj9Z3LP6dQmZZyzl7+5f+WxsKOObUhkPJ9u3sbKSKBcnK+/HyxLBhVnglzsX//FQM8GcpdBwTQU0XsMxKa5Z5D42uCxNTcvu+PVB5KTWR13m+f91ptvX4eXi6uff3/gCj6wfBzfX7avX8etOZ2/srS3wB/tU8Sacnm0V1lrtr2EolozWrOENRV6PFky/wA="
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "verify_id_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "verified_id",
            "type": {
              "kind": "array",
              "length": 5,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                          "fields": [
                            {
                              "name": "request",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                "fields": [
                                  {
                                    "name": "pk_m",
                                    "type": {
                                      "kind": "struct",
                                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                      "fields": [
                                        {
                                          "name": "x",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "y",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "is_infinite",
                                          "type": {
                                            "kind": "boolean"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "sk_app",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app_generator",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "note_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                          "fields": [
                            {
                              "name": "call_context",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::call_context::CallContext",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "function_selector",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "returns_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "start_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "end_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  },
                                  {
                                    "name": "calldata_hash",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                "fields": [
                                  {
                                    "name": "recipient",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "content",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                          "fields": [
                            {
                              "name": "log",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log::Log",
                                "fields": [
                                  {
                                    "name": "fields",
                                    "type": {
                                      "kind": "array",
                                      "length": 18,
                                      "type": {
                                        "kind": "field"
                                      }
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "note_hash_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log_hash::LogHash",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "963818325383147006": {
            "error_kind": "string",
            "string": "Function verify_id_private can only be called statically"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "verification_key": "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\nAAAFiSRi70jt/BTMpcaOrm4="
    }
  ],
  "outputs": {
    "globals": {},
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "serial",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "binnedAmount",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::TransferEvent"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "serial",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "binnedAmount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::_log_transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::_log_transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::binned_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::binned_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "sender",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::check_transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::check_transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "ShieldGateway::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "verified_id",
                    "type": {
                      "kind": "array",
                      "length": 5,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::verify_id_private_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::verify_id_private_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "108": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{\n        auth_registry::AUTHORIZE_ONCE_REGISTRY, call_interface_stubs::stub_fn, stub_registry,\n    },\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_authorize_once, fn_has_noinitcheck, get_fn_visibility,\n        is_fn_contract_library_method, is_fn_initializer, is_fn_internal, is_fn_private,\n        is_fn_public, is_fn_test, is_fn_utility, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse std::meta::{ctstring::AsCtString, type_of};\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject the authwit check if the function is marked with #[authorize_once].\n    let authorize_once_check = if fn_has_authorize_once(f) {\n        create_authorize_once_check(f)\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    // A quote to be injected at the beginning of the function body.\n    let to_prepend = quote {\n        dep::aztec::oracle::version::assert_compatible_oracle_version();\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n        $authorize_once_check\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n\n    let args_len_quote = if original_params.len() == 0 {\n        // If the function has no parameters, we set the args_len to 0.\n        quote { 0 }\n    } else {\n        // The following will give us <type_of_struct_member_1 as Serialize>::N + <type_of_struct_member_2 as Serialize>::N + ...\n        original_params\n            .map(|(_, param_type): (Quoted, Type)| {\n                quote {\n            <$param_type as $crate::protocol_types::traits::Serialize>::N\n        }\n            })\n            .join(quote {+})\n    };\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len_quote] = dep::aztec::context::public_context::calldata_copy(1, $args_len_quote);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // Inject the authwit check if the function is marked with #[authorize_once].\n    let authorize_once_check = if fn_has_authorize_once(f) {\n        create_authorize_once_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $authorize_once_check\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // A quote to be injected at the beginning of the function body.\n    let to_prepend = quote {\n        dep::aztec::oracle::version::assert_compatible_oracle_version();\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Injects an authwit verification check of the form:\n/// ```\n///   if (!from.eq(context.msg_sender())) {\n///         assert_current_call_valid_authwit::<N>(&mut context, from);\n///     } else {\n///         assert(authwit_nonce, \"Invalid authwit nonce. When 'from' and 'msg_sender' are the same, authwit_nonce must be zero\");\n///     }\n/// ```\n/// where `from` and `authwit_nonce` are the names of the parameters that are expected to be present in the function definition.\n/// This check is injected by the `#[authorize_once(\"from_arg_name\", \"nonce_arg_name\")]`, which allows the user to define\n/// which parameters to use.\npub(crate) comptime fn create_authorize_once_check(f: FunctionDefinition) -> Quoted {\n    let maybe_authorize_once_args = AUTHORIZE_ONCE_REGISTRY.get(f);\n    let authorize_once_args = if maybe_authorize_once_args.is_some() {\n        maybe_authorize_once_args.unwrap()\n    } else {\n        // We need to for authorize_once to have already executed so that we can retrieve its params - this depends on\n        // the order in which the attributes are applied.\n        panic(\n            f\"Functions marked with #[authorize_once] must have the #[private] or #[public] attribute placed last\",\n        )\n    };\n\n    let (from_arg_name, nonce_arg_name) = authorize_once_args;\n    let name: Quoted = f.name();\n\n    let from_arg_candidates =\n        f.parameters().filter(|(name, _)| name == f\"{from_arg_name}\".quoted_contents());\n    let (from_arg_name_quoted, from_arg_type) = if from_arg_candidates.len() == 1 {\n        from_arg_candidates[0]\n    } else {\n        panic(\n            f\"Function {name} does not have a {from_arg_name} parameter. Please specify which one to use in #[authorize_once(\\\"...\\\", \\\"authwit_nonce\\\")]\",\n        )\n    };\n    if from_arg_type\n        != quote { dep::protocol_types::address::aztec_address::AztecAddress }.as_type() {\n        panic(\n            f\"Argument {from_arg_name_quoted} in function {name} must be of type AztecAddress, but is of type {from_arg_type}\",\n        )\n    }\n\n    let nonce_arg_candidates =\n        f.parameters().filter(|(name, _)| name == f\"{nonce_arg_name}\".quoted_contents());\n    let (nonce_arg_name_quoted, nonce_arg_type) = if nonce_arg_candidates.len() == 1 {\n        nonce_arg_candidates[0]\n    } else {\n        panic(\n            f\"Function {name} does not have a {nonce_arg_name}. Please specify which one to use in #[authorize_once(\\\"from\\\", \\\"...\\\")]\",\n        )\n    };\n    if nonce_arg_type != quote { Field }.as_type() {\n        panic(\n            f\"Argument {nonce_arg_name_quoted} in function {name} must be of type Field, but is of type {nonce_arg_type}\",\n        );\n    }\n\n    let nonce_check_quote = f\"{nonce_arg_name_quoted} == 0\".quoted_contents();\n\n    let fn_call = if is_fn_private(f) {\n        // At this point, the original args of the fn have already been altered by the macro\n        // to include PrivateContextInputs, so we need to adjust the args_len accordingly.\n        let args_len = f.parameters().len() - 1;\n        quote { dep::aztec::authwit::auth::assert_current_call_valid_authwit::<$args_len> }\n    } else {\n        quote { dep::aztec::authwit::auth::assert_current_call_valid_authwit_public }\n    };\n    let invalid_nonce_message = f\"Invalid authwit nonce. When '{from_arg_name}' and 'msg_sender' are the same, '{nonce_arg_name}' must be zero\"\n        .as_ctstring()\n        .as_quoted_str();\n    quote {         \n        if (!$from_arg_name_quoted.eq(context.msg_sender())) {\n            $fn_call(&mut context, $from_arg_name_quoted);\n        } else {\n            assert($nonce_check_quote, $invalid_nonce_message);\n        }\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "110": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::note::note_getter_options::PropertySelector;\nuse std::{collections::bounded_vec::BoundedVec, meta::{ctstring::AsCtString, type_of}};\n\n/// Maximum number of note types within 1 contract.\ncomptime global MAX_NOTE_TYPES: u32 = 128;\n\n/// A BoundedVec containing all the note types within this contract.\npub comptime mut global NOTES: BoundedVec<Type, MAX_NOTE_TYPES> = BoundedVec::new();\n\ncomptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < MAX_NOTE_TYPES,\n        f\"A contract can contain at most {MAX_NOTE_TYPES} different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_type_impl(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let note_type_name: str<_> = f\"{name}\".as_ctstring().as_quoted_str!();\n    let max_note_packed_len = crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                // This static assertion ensures the note's packed length doesn't exceed the maximum allowed size.\n                // While this check would ideally live in the Packable trait implementation, we place it here since\n                // this function is always generated by our macros and the Packable trait implementation is not.\n                // Note: We set the note type name and max packed length as local variables because injecting them\n                // directly into the error message doesn't work.\n                let note_type_name = $note_type_name;\n                let max_note_packed_len: u32 = $max_note_packed_len; // Casting to u32 to avoid the value to be printed in hex.\n                let note_packed_len = <$typ as Packable>::N;\n                std::static_assert(note_packed_len <= $max_note_packed_len, f\"{note_type_name} has a packed length of {note_packed_len} fields, which exceeds the maximum allowed length of {max_note_packed_len} fields\");\n\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::traits::Packable::pack(self).concat( [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::context::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates the core note functionality for a struct:\n///\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - NoteHash trait implementation: Handles note hash and nullifier computation\n///\n/// # Requirements\n///\n/// The note struct must:\n/// - Have an `owner` field\n/// - Implement the `Packable` trait\n/// - Not exceed `MAX_NOTE_PACKED_LEN` when packed\n///\n/// # Registration\n///\n/// Registers the note in the global `NOTES` BoundedVec to enable note processing functionality.\n///\n/// # Generated Code\n///\n/// For detailed documentation on the generated implementations, see:\n/// - `generate_note_properties()`\n/// - `generate_note_type_impl()`\n/// - `generate_note_hash_trait_impl()`\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n    assert_has_packable(s);\n\n    // We register the note in the global `NOTES` BoundedVec because we need that information inside the #[aztec] macro\n    // to generate note processing functionality.\n    NOTES.push(s.as_type());\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_type_impl = generate_note_type_impl(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n\n    quote {\n        $note_properties\n        $note_type_impl\n        $note_hash_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n///\n/// # Requirements\n///\n/// The note struct must:\n/// - Implement the `Packable` trait\n/// - Not exceed `MAX_NOTE_PACKED_LEN` when packed\n///\n/// Unlike the `#[note]` macro, there is no requirement for an `owner` field.\n///\n/// # Registration\n///\n/// Registers the note in the global `NOTES` BoundedVec to enable note processing functionality.\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    assert_has_packable(s);\n\n    // We register the note in the global `NOTES` BoundedVec because we need that information inside the #[aztec] macro\n    // to generate note processing functionality.\n    NOTES.push(s.as_type());\n\n    let note_type_id = get_next_note_type_id();\n    let note_properties = generate_note_properties(s);\n    let note_type_impl = generate_note_type_impl(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_type_impl\n    }\n}\n\n/// Asserts that the given note implements the `Packable` trait.\n///\n/// We require that notes have the `Packable` trait implemented because it is used when emitting a note in a log or as\n/// an offchain message.\ncomptime fn assert_has_packable(note: TypeDefinition) {\n    let packable_constraint =\n        quote { crate::protocol_types::traits::Packable }.as_trait_constraint();\n    let note_name = note.name();\n\n    assert(\n        note.as_type().implements(packable_constraint),\n        f\"{note_name} does not implement Packable trait. Either implement it manually or place #[derive(Packable)] on the note struct before #[note] macro invocation.\",\n    );\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    let note_name = note.name();\n\n    assert(\n        has_owner,\n        f\"{note_name} does not have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "113": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "114": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "115": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "116": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__EVENT_COMMITMENT,\n    hash::poseidon2_hash_with_separator_bounded_vec, traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "117": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "118": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "119": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u16 {\n    fn from(value: u8) -> u16 {\n        value as u16\n    }\n}\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u16> for u32 {\n    fn from(value: u16) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u16> for u64 {\n    fn from(value: u16) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u16> for u128 {\n    fn from(value: u16) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u16> for Field {\n    fn from(value: u16) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i16 {\n    fn from(value: i8) -> i16 {\n        value as i16\n    }\n}\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i16> for i32 {\n    fn from(value: i16) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\n\nimpl From<i16> for i64 {\n    fn from(value: i16) -> i64 {\n        value as i64\n    }\n}\n\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u16 {\n    fn from(value: bool) -> u16 {\n        value as u16\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for u128 {\n    fn from(value: bool) -> u128 {\n        value as u128\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i16 {\n    fn from(value: bool) -> i16 {\n        value as i16\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n\n    let u_types =\n        [quote { bool }, quote { u8 }, quote { u16 }, quote { u32 }, quote { u64 }, quote { u128 }];\n\n    for type2 in u_types {\n        let body = quote { self as Field };\n\n        impls = impls.push_back(\n            quote {\n                impl AsPrimitive<Field> for $type2 {\n                    fn as_(self) -> Field {\n                        $body\n                    }\n                }\n            },\n        );\n    }\n\n    for type1 in u_types {\n        let body = if type1 == quote { bool } {\n            quote { self != 0 }\n        } else {\n            quote { self as $type1 }\n        };\n\n        impls = impls.push_back(\n            quote {\n                impl AsPrimitive<$type1> for Field {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n        );\n    }\n\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\n/**\n * Computes N close-to-uniformly-random 256 bits from a given ECDH shared_secret.\n *\n * NEVER re-use the same iv and sym_key.\n * DO NOT call this function more than once with the same shared_secret.\n *\n * This function is only known to be safe if shared_secret is computed by combining a \n * random ephemeral key with an address point. See big comment within the body of the function.\n * See big comment within the body of the function.\n */\nfn extract_many_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2_unsafe<let N: u32>(\n    shared_secret: Point,\n) -> [[u8; 32]; N] {\n    /*\n     * Unsafe because of https://eprint.iacr.org/2010/264.pdf Page 13, Lemma 2 (and the * two paragraphs below it).\n     *\n     * If you call this function, you need to be careful and aware of how the arg\n     * `shared_secret` has been derived.\n     *\n     * The paper says that the way you derive aes keys and IVs should be fine with poseidon2\n     * (modelled as a RO), as long as you _don't_ use Poseidon2 as a PRG to generate the * two exponents x & y which multiply to the shared secret S:\n     *\n     * S = [x*y]*G.\n     *\n     * (Otherwise, you would have to \"key\" poseidon2, i.e. generate a uniformly string K\n     * which can be public and compute Hash(x) as poseidon(K,x)).\n     * In that lemma, k would be 2*254=508, and m would be the number of points on the * grumpkin curve (which is close to r according to the Hasse bound).\n     *\n     * Our shared secret S is [esk * address_sk] * G, and the question is: * Can we compute hash(S) using poseidon2 instead of sha256?\n     *\n     * Well, esk is random and not generated with poseidon2, so that's good.\n     * What about address_sk?\n     * Well, address_sk = poseidon2(stuff) + ivsk, so there was some\n     * discussion about whether address_sk is independent of poseidon2.\n     * Given that ivsk is random and independent of poseidon2, the address_sk is also\n     * independent of poseidon2.\n     *\n     * Tl;dr: we believe it's safe to hash S = [esk * address_sk] * G using poseidon2,\n     * in order to derive a symmetric key.\n     *\n     * If you're calling this function for a differently-derived `shared_secret`, be\n     * careful.\n     *\n     */\n\n    /* The output of this function needs to be 32 random bytes.\n     * A single field won't give us 32 bytes of entropy.\n     * So we compute two \"random\" fields, by poseidon-hashing with two different\n     * generators.\n     * We then extract the last 16 (big endian) bytes of each \"random\" field.\n     * Note: we use to_be_bytes because it's slightly more efficient. But we have to\n     * be careful not to take bytes from the \"big end\", because the \"big\" byte is\n     * not uniformly random over the byte: it only has < 6 bits of randomness, because\n     * it's the big end of a 254-bit field element.\n     */\n\n    let mut all_bytes: [[u8; 32]; N] = std::mem::zeroed();\n    // We restrict N to be < 2^8, because of how we compute the domain separator\n    // from k below (where k <= N must be 8 bits). In practice, it's extremely\n    // unlikely that an app will want to compute >= 256 ciphertexts.\n    std::static_assert(N < 256, \"N too large\");\n    for k in 0..N {\n        // We augment the domain separator with the loop index, so that we can\n        // generate N lots of randomness.\n        let k_shift = (k as u16 << 8);\n        let separator_1 = k_shift + GENERATOR_INDEX__SYMMETRIC_KEY as u16;\n        let separator_2 = k_shift + GENERATOR_INDEX__SYMMETRIC_KEY_2 as u16;\n\n        let rand1: Field =\n            poseidon2_hash_with_separator([shared_secret.x, shared_secret.y], separator_1);\n        let rand2: Field =\n            poseidon2_hash_with_separator([shared_secret.x, shared_secret.y], separator_2);\n\n        let rand1_bytes: [u8; 32] = rand1.to_be_bytes();\n        let rand2_bytes: [u8; 32] = rand2.to_be_bytes();\n\n        let mut bytes: [u8; 32] = [0; 32];\n        for i in 0..16 {\n            // We take bytes from the \"little end\" of the be-bytes arrays:\n            let j = 32 - i - 1;\n            bytes[i] = rand1_bytes[j];\n            bytes[16 + i] = rand2_bytes[j];\n        }\n\n        all_bytes[k] = bytes;\n    }\n\n    all_bytes\n}\n\nfn derive_aes_symmetric_key_and_iv_from_uniformly_random_256_bits<let N: u32>(\n    many_random_256_bits: [[u8; 32]; N],\n) -> [([u8; 16], [u8; 16]); N] {\n    // Many (sym_key, iv) pairs:\n    let mut many_pairs: [([u8; 16], [u8; 16]); N] = std::mem::zeroed();\n    for k in 0..N {\n        let random_256_bits = many_random_256_bits[k];\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n        for i in 0..16 {\n            sym_key[i] = random_256_bits[i];\n            iv[i] = random_256_bits[i + 16];\n        }\n        many_pairs[k] = (sym_key, iv);\n    }\n\n    many_pairs\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe<let N: u32>(\n    shared_secret: Point,\n) -> [([u8; 16], [u8; 16]); N] {\n    let many_random_256_bits: [[u8; 32]; N] = extract_many_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2_unsafe(\n        shared_secret,\n    );\n\n    derive_aes_symmetric_key_and_iv_from_uniformly_random_256_bits(many_random_256_bits)\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PlaintextLen: u32>(\n        plaintext: [Field; PlaintextLen],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        // It is safe to call the `unsafe` function here, because we know the `shared_secret`\n        // was derived using an AztecAddress (the recipient). See the block comment\n        // at the start of this unsafe target function for more info.\n        let pairs = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe::<2>(\n            ciphertext_shared_secret,\n        );\n        let (body_sym_key, body_iv) = pairs[0];\n        let (header_sym_key, header_iv) = pairs[1];\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, body_iv, body_sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PlaintextLen * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, header_iv, header_sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PlaintextLen * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PlaintextLen * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n\n        // Derive symmetric keys:\n        let pairs = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe::<2>(\n            ciphertext_shared_secret,\n        );\n        let (body_sym_key, body_iv) = pairs[0];\n        let (header_sym_key, header_iv) = pairs[1];\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext =\n            aes128_decrypt_oracle(header_ciphertext_bvec, header_iv, header_sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, body_iv, body_sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let env = TestEnvironment::new();\n\n        // Log decryption requires oracles that are only available during private execution\n        env.private_context(|_| {\n            let plaintext = [1, 2, 3];\n\n            let recipient = AztecAddress::from_field(\n                0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n            );\n\n            // Mock random values for deterministic test\n            let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n            let _ = OracleMock::mock(\"utilityGetRandomField\").returns(eph_sk).times(1);\n\n            let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n            let _ = OracleMock::mock(\"utilityGetRandomField\").returns(randomness).times(1000000);\n\n            let _ = OracleMock::mock(\"utilityGetIndexedTaggingSecretAsSender\").returns(\n                IndexedTaggingSecret::deserialize([69420, 1337]),\n            );\n            let _ = OracleMock::mock(\"privateIncrementAppTaggingSecretIndexAsSender\").returns(());\n\n            // Encrypt the log\n            let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n            // Mock shared secret for deterministic test\n            let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n                EmbeddedCurveScalar::from_field(eph_sk),\n                recipient,\n            );\n            let _ = OracleMock::mock(\"utilityGetSharedSecret\").returns(shared_secret);\n\n            // Decrypt the log\n            let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n            // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n            // at compile time. For this reason we need to convert the original input to a BoundedVec.\n            let plaintext_bvec =\n                BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n            // Verify decryption matches original plaintext\n            assert_eq(\n                decrypted,\n                plaintext_bvec,\n                \"Decrypted bytes should match original plaintext\",\n            );\n\n            // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n            // static methods of the struct).\n            let _ = AES128 {};\n        });\n    }\n}\n"
    },
    "136": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "148": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::{Packable, Serialize};\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize, Packable)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n"
    },
    "151": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "156": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize,\n{\n    let serialized_option = load_oracle(contract_address, slot, <T as Deserialize>::N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(utilityStoreCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(utilityLoadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(utilityDeleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(utilityCopyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n\n            assert_eq(load(contract_address, SLOT).unwrap(), value);\n        });\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n\n            let new_value = MockStruct::new(7, 8);\n            store(contract_address, SLOT, new_value);\n\n            assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n        });\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n            delete(contract_address, SLOT);\n\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            delete(contract_address, SLOT);\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 5;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 10;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 1;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 2;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n            // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n            assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n            assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n            assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 2;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 1;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n            // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n            assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n            assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n            assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n        });\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            copy(contract_address, SLOT, SLOT, 1);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            let value = MockStruct::new(5, 6);\n            store(other_contract_address, SLOT, value);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            let _: Option<MockStruct> = load(other_contract_address, SLOT);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            delete(other_contract_address, SLOT);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            copy(other_contract_address, SLOT, SLOT, 0);\n        });\n    }\n}\n"
    },
    "157": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(privateNotifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(privateNotifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(privateNotifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "158": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(utilityGetContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(utilityGetBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(utilityGetTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(utilityGetChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(utilityGetVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "159": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(privateStoreInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(privateLoadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars, true)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n    predicate: bool,\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n    _predicate: bool,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2, true)[0]\n}\n"
    },
    "165": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(utilityGetKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "166": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(utilityGetPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "168": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(utilityFetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(utilityValidateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(utilityBulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "173": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(utilityGetSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "176": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/version.nr",
      "source": "/// The ORACLE_VERSION constant is used to check that the oracle interface is in sync between PXE and Aztec.nr. We need\n/// to version the oracle interface to ensure that developers get a reasonable error message if they use incompatible\n/// versions of Aztec.nr and PXE. The TypeScript counterpart is in `oracle_version.ts`.\n///\n/// @dev Whenever a contract function or Noir test is run, the `utilityAssertCompatibleOracleVersion` oracle is called and\n/// if the oracle version is incompatible an error is thrown.\npub global ORACLE_VERSION: Field = 1;\n\n/// Asserts that the version of the oracle is compatible with the version expected by the contract.\npub fn assert_compatible_oracle_version() {\n    // Safety: This oracle call returns nothing: we only call it to check Aztec.nr and Oracle interface versions are\n    // compatible. It is therefore always safe to call.\n    unsafe {\n        assert_compatible_oracle_version_wrapper();\n    }\n}\n\nunconstrained fn assert_compatible_oracle_version_wrapper() {\n    assert_compatible_oracle_version_oracle(ORACLE_VERSION);\n}\n\n#[oracle(utilityAssertCompatibleOracleVersion)]\nunconstrained fn assert_compatible_oracle_version_oracle(version: Field) {}\n\nmod test {\n    use super::{assert_compatible_oracle_version_oracle, ORACLE_VERSION};\n\n    #[test]\n    unconstrained fn compatible_oracle_version() {\n        assert_compatible_oracle_version_oracle(ORACLE_VERSION);\n    }\n\n    #[test(should_fail_with = \"Incompatible oracle version. PXE is using version '1', but got a request for '318183437'.\")]\n    unconstrained fn incompatible_oracle_version() {\n        let arbitrary_incorrect_version = 318183437;\n        assert_compatible_oracle_version_oracle(arbitrary_incorrect_version);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars, true)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn poseidon2_permutation<let N: u32>(input: [Field; N], state_len: u32) -> [Field; N] {\n    assert_eq(input.len(), state_len);\n    poseidon2_permutation_internal(input)\n}\n\n#[foreign(poseidon2_permutation)]\nfn poseidon2_permutation_internal<let N: u32>(input: [Field; N]) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "206": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends the elements of the second `BoundedVec` to the end of the first one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let ALen: u32, let BLen: u32, let DstLen: u32>(\n    a: BoundedVec<T, ALen>,\n    b: BoundedVec<T, BLen>,\n) -> BoundedVec<T, DstLen> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "209": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DstLen` elements from a source array, starting at `offset`. `DstLen` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SrcLen: u32, let DstLen: u32>(src: [T; SrcLen], offset: u32) -> [T; DstLen] {\n    assert(offset + DstLen <= SrcLen, \"DstLen too large for offset\");\n\n    let mut dst: [T; DstLen] = std::mem::zeroed();\n    for i in 0..DstLen {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DstLen to be 0, so we always get back an empty array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "210": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DstMaxLen` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DstLen` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DstLen` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SrcMaxLen: u32, let DstMaxLen: u32>(\n    bvec: BoundedVec<T, SrcMaxLen>,\n    offset: u32,\n) -> BoundedVec<T, DstMaxLen> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "212": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "213": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "215": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "217": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "229": {
      "path": "/home/vscode/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "294": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\nuse std::meta::derive;\n\n// Aztec address\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    // We use the AZTEC_ADDRESS_LENGTH constant to ensure that there is a match between the derived trait\n    // implementation and the constant.\n    let serialized: [Field; AZTEC_ADDRESS_LENGTH] = address.serialize();\n    let deserialized = AztecAddress::deserialize(serialized);\n    assert_eq(address, deserialized);\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "310": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(utilityDebugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "319": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::field::{field_from_bytes, field_from_bytes_32_trunc},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    // Q: shouldn't we be checking whether the _whole_ nullifier is empty?\n    // A: We don't have to. The init and inner circuits add contract address to non-empty nullifiers.\n    // So we know we should silo it if the contract address is not empty.\n    if nullifier.contract_address.is_zero() {\n        // Q: I don't understand this comment. We could still compute a siloed nullifier from a zero contract address.\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n/// Computes sha256 hash of 2 input fields.\n///\n/// @returns A truncated field (i.e., the first byte is always 0).\npub fn accumulate_sha256(v0: Field, v1: Field) -> Field {\n    // Concatenate two fields into 32 x 2 = 64 bytes\n    let v0_as_bytes: [u8; 32] = v0.to_be_bytes();\n    let v1_as_bytes: [u8; 32] = v1.to_be_bytes();\n    let hash_input_flattened = v0_as_bytes.concat(v1_as_bytes);\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = [separator.to_field()].concat(inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert_eq(input[in_len - remainder + i], 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "333": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "/// Generates the generic parameter declarations for a struct's trait implementation.\n///\n/// This function takes a struct type definition and generates the generic parameter declarations\n/// that go after the `impl` keyword. For example, given a struct with generics `N: u32` and `T`,\n/// it generates `<let N: u32, T>`.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate generic declarations for\n///\n/// # Returns\n/// A quoted code block containing the generic parameter declarations, or an empty quote if the struct\n/// has no generic parameters\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Container<T, let N: u32> {\n///     items: [T; N],\n///     count: u32\n/// }\n/// ```\n///\n/// This function generates:\n/// ```\n/// <let N: u32, T>\n/// ```\ncomptime fn get_generics_declarations(s: TypeDefinition) -> Quoted {\n    let generics = s.generics();\n\n    if generics.len() > 0 {\n        let generics_declarations_items = generics\n            .map(|(name, maybe_integer_typ)| {\n                // The second item in the generics tuple is an Option of an integer type that is Some only if\n                // the generic is numeric.\n                if maybe_integer_typ.is_some() {\n                    // The generic is numeric, so we return a quote defined as e.g. \"let N: u32\"\n                    let integer_type = maybe_integer_typ.unwrap();\n                    quote {let $name: $integer_type}\n                } else {\n                    // The generic is not numeric, so we return a quote containing the name of the generic (e.g. \"T\")\n                    quote {$name}\n                }\n            })\n            .join(quote {,});\n        quote {<$generics_declarations_items>}\n    } else {\n        // The struct doesn't have any generics defined, so we just return an empty quote.\n        quote {}\n    }\n}\n\n/// Generates the `where` clause for a trait implementation that constrains non-numeric generic type parameters.\n///\n/// This function takes a struct type definition and a trait name, and generates a `where` clause that\n/// requires all non-numeric generic type parameters to implement the specified trait.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate the where clause for\n/// - `trait_name`: The name of the trait that non-numeric generic parameters must implement\n///\n/// # Returns\n/// A quoted code block containing the where clause, or an empty quote if the struct has no non-numeric\n/// generic parameters\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Container<T, let N: u32> {\n///     items: [T; N],\n///     count: u32\n/// }\n/// ```\n///\n/// And trait name \"Serialize\", this function generates:\n/// ```\n/// where T: Serialize\n/// ```\ncomptime fn get_where_trait_clause(s: TypeDefinition, trait_name: Quoted) -> Quoted {\n    let generics = s.generics();\n\n    // The second item in the generics tuple is an Option of an integer type that is Some only if the generic is\n    // numeric.\n    let non_numeric_generics =\n        generics.filter(|(_, maybe_integer_typ)| maybe_integer_typ.is_none());\n\n    if non_numeric_generics.len() > 0 {\n        let non_numeric_generics_declarations =\n            non_numeric_generics.map(|(name, _)| quote {$name: $trait_name}).join(quote {,});\n        quote {where $non_numeric_generics_declarations}\n    } else {\n        // There are no non-numeric generics, so we return an empty quote.\n        quote {}\n    }\n}\n\n/// Generates a `Serialize` trait implementation for a struct type.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A quoted code block containing the trait implementation\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Log<N> {\n///     fields: [Field; N],\n///     length: u32\n/// }\n/// ```\n///\n/// This function generates code equivalent to:\n/// ```\n/// impl<let N: u32> Serialize for Log<N> {\n///     let N: u32 = <[Field; N] as Serialize>::N + <u32 as Serialize>::N;\n///\n///     #[inline_always]\n///     fn serialize(self) -> [Field; Self::N] {\n///         let mut result = [0; _];\n///         let mut offset = 0;\n///\n///         let serialized_member = Serialize::serialize(self.fields);\n///         let serialized_member_len = <[Field; N] as Serialize>::N;\n///         for i in 0..serialized_member_len {\n///             result[i + offset] = serialized_member[i];\n///         }\n///         offset += serialized_member_len;\n///\n///         let serialized_member = Serialize::serialize(self.length);\n///         let serialized_member_len = <u32 as Serialize>::N;\n///         for i in 0..serialized_member_len {\n///             result[i + offset] = serialized_member[i];\n///         }\n///         offset += serialized_member_len;\n///\n///         result\n///     }\n/// }\n/// ```\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Serialize` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_serialize_clause = get_where_trait_clause(s, quote {Serialize});\n\n    // The following will give us <type_of_struct_member_1 as Serialize>::N + <type_of_struct_member_2 as Serialize>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Serialize>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly returning the serialized member,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let function_body = if params.len() > 1 {\n        // For multiple struct members, generate serialization code that:\n        // 1. Serializes each member\n        // 2. Copies the serialized fields into the result array at the correct offset\n        // 3. Updates the offset for the next member\n        let serialization_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                let serialized_member = $crate::traits::Serialize::serialize(self.$param_name);\n                let serialized_member_len = <$param_type as $crate::traits::Serialize>::N;\n                for i in 0..serialized_member_len {\n                    result[i + offset] = serialized_member[i];\n                }\n                offset += serialized_member_len;\n            }\n            })\n            .join(quote {});\n\n        quote {\n            let mut result = [0; _];\n            let mut offset = 0;\n\n            $serialization_of_struct_members\n\n            result\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            $crate::traits::Serialize::serialize(self.$param_name)\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Serialize for $typ\n            $where_serialize_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn serialize(self) -> [Field; Self::N] {\n                $function_body\n            }\n        }\n    }\n}\n\n/// Generates a `Deserialize` trait implementation for a given struct `s`.\n///\n/// # Arguments\n/// * `s` - The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A `Quoted` block containing the generated trait implementation\n///\n/// # Requirements\n/// Each struct member type must implement the `Deserialize` trait (it gets used in the generated code).\n///\n/// # Example\n/// For a struct like:\n/// ```\n/// struct MyStruct {\n///     x: AztecAddress,\n///     y: Field,\n/// }\n/// ```\n///\n/// This generates:\n/// ```\n/// impl Deserialize for MyStruct {\n///     let N: u32 = <AztecAddress as Deserialize>::N + <Field as Deserialize>::N;\n///\n///     fn deserialize(serialized: [Field; Self::N]) -> Self {\n///         let mut offset = 0;\n///         let mut member_fields = [0; <AztecAddress as Deserialize>::N];\n///         for i in 0..<AztecAddress as Deserialize>::N {\n///             member_fields[i] = serialized[i + offset];\n///         }\n///         let x = <AztecAddress as Deserialize>::deserialize(member_fields);\n///         offset += <AztecAddress as Deserialize>::N;\n///\n///         let mut member_fields = [0; <Field as Deserialize>::N];\n///         for i in 0..<Field as Deserialize>::N {\n///             member_fields[i] = serialized[i + offset];\n///         }\n///         let y = <Field as Deserialize>::deserialize(member_fields);\n///         offset += <Field as Deserialize>::N;\n///\n///         Self { x, y }\n///     }\n/// }\n/// ```\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Deserialize` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_deserialize_clause = get_where_trait_clause(s, quote {Deserialize});\n\n    // The following will give us <type_of_struct_member_1 as Deserialize>::N + <type_of_struct_member_2 as Deserialize>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Deserialize>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly deserializing the input array,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let function_body = if params.len() > 1 {\n        // This generates deserialization code for each struct member and concatenates them together.\n        let deserialization_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let mut member_fields = [0; <$param_type as Deserialize>::N];\n                    for i in 0..<$param_type as Deserialize>::N {\n                        member_fields[i] = serialized[i + offset];\n                    }\n                    let $param_name = <$param_type as Deserialize>::deserialize(member_fields);\n                    offset += <$param_type as Deserialize>::N;\n                }\n            })\n            .join(quote {});\n\n        // We join the struct member names with a comma to be used in the `Self { ... }` syntax\n        // This will give us e.g. `a, b, c` for a struct with three fields named `a`, `b`, and `c`.\n        let struct_members = params\n            .map(|(param_name, _, _): (Quoted, Type, Quoted)| quote { $param_name })\n            .join(quote {,});\n\n        quote {\n            let mut offset = 0;\n\n            $deserialization_of_struct_members\n\n            Self { $struct_members }\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            Self { $param_name: $crate::traits::Deserialize::deserialize(serialized) }\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Deserialize for $typ\n            $where_deserialize_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn deserialize(serialized: [Field; Self::N]) -> Self {\n                $function_body\n            }\n        }\n    }\n}\n\n/// Generates a `Packable` trait implementation for a given struct `s`.\n///\n/// # Arguments\n/// * `s` - The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A `Quoted` block containing the generated trait implementation\n///\n/// # Requirements\n/// Each struct member type must implement the `Packable` trait (it gets used in the generated code).\n///\n/// # Example\n/// For a struct like:\n/// ```\n/// struct MyStruct {\n///     x: AztecAddress,\n///     y: Field,\n/// }\n/// ```\n///\n/// This generates:\n/// ```\n/// impl Packable for MyStruct {\n///     let N: u32 = 2;\n///\n///     fn pack(self) -> [Field; 2] {\n///         let mut result: [Field; 2] = [0_Field; 2];\n///         let mut offset: u32 = 0_u32;\n///         let packed_member: [Field; 1] = self.x.pack();\n///         let packed_member_len: u32 = <Field as Packable>::N;\n///         for i in 0_u32..packed_member_len {\n///             {\n///                 result[i + offset] = packed_member[i];\n///             }\n///         }\n///         offset = offset + packed_member_len;\n///         let packed_member: [Field; 1] = self.y.pack();\n///         let packed_member_len: u32 = <Field as Packable>::N;\n///         for i in 0_u32..packed_member_len {\n///             {\n///                 result[i + offset] = packed_member[i];\n///             }\n///         }\n///         offset = offset + packed_member_len;\n///         result\n///     }\n///\n///     fn unpack(packed: [Field; 2]) -> Self {\n///         let mut offset: u32 = 0_u32;\n///         let mut member_fields: [Field; 1] = [0_Field; 1];\n///         for i in 0_u32..<AztecAddress as Packable>::N {\n///             member_fields[i] = packed[i + offset];\n///         }\n///         let x: AztecAddress = <AztecAddress as Packable>::unpack(member_fields);\n///         offset = offset + <AztecAddress as Packable>::N;\n///         let mut member_fields: [Field; 1] = [0_Field; 1];\n///         for i in 0_u32..<Field as Packable>::N {\n///             member_fields[i] = packed[i + offset];\n///         }\n///         let y: Field = <Field as Packable>::unpack(member_fields);\n///         offset = offset + <Field as Packable>::N;\n///         Self { x: x, y: y }\n///     }\n/// }\n/// ```\npub comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Packable` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_packable_clause = get_where_trait_clause(s, quote {Packable});\n\n    // The following will give us <type_of_struct_member_1 as Packable>::N + <type_of_struct_member_2 as Packable>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Packable>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly returning the packed member,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let pack_function_body = if params.len() > 1 {\n        // For multiple struct members, generate packing code that:\n        // 1. Packs each member\n        // 2. Copies the packed fields into the result array at the correct offset\n        // 3. Updates the offset for the next member\n        let packing_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let packed_member = $crate::traits::Packable::pack(self.$param_name);\n                    let packed_member_len = <$param_type as $crate::traits::Packable>::N;\n                    for i in 0..packed_member_len {\n                        result[i + offset] = packed_member[i];\n                    }\n                    offset += packed_member_len;\n                }\n            })\n            .join(quote {});\n\n        quote {\n            let mut result = [0; Self::N];\n            let mut offset = 0;\n\n            $packing_of_struct_members\n\n            result\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            $crate::traits::Packable::pack(self.$param_name)\n        }\n    };\n\n    // For structs containing a single member, we can enhance performance by directly unpacking the input array,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let unpack_function_body = if params.len() > 1 {\n        // For multiple struct members, generate unpacking code that:\n        // 1. Unpacks each member\n        // 2. Copies packed fields into member array at correct offset\n        // 3. Updates offset for next member\n        let unpacking_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let mut member_fields = [0; <$param_type as $crate::traits::Packable>::N];\n                    for i in 0..<$param_type as $crate::traits::Packable>::N {\n                        member_fields[i] = packed[i + offset];\n                    }\n                    let $param_name = <$param_type as $crate::traits::Packable>::unpack(member_fields);\n                    offset += <$param_type as $crate::traits::Packable>::N;\n                }\n            })\n            .join(quote {});\n\n        // We join the struct member names with a comma to be used in the `Self { ... }` syntax\n        let struct_members = params\n            .map(|(param_name, _, _): (Quoted, Type, Quoted)| quote { $param_name })\n            .join(quote {,});\n\n        quote {\n            let mut offset = 0;\n            $unpacking_of_struct_members\n            Self { $struct_members }\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            Self { $param_name: $crate::traits::Packable::unpack(packed) }\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Packable for $typ\n            $where_packable_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn pack(self) -> [Field; Self::N] {\n                $pack_function_body\n            }\n\n            #[inline_always]\n            fn unpack(packed: [Field; Self::N]) -> Self {\n                $unpack_function_body\n            }\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Packable, Serialize};\n\n    #[derive(Deserialize, Eq, Packable, Serialize)]\n    pub struct Smol {\n        a: Field,\n        b: Field,\n    }\n\n    #[derive(Deserialize, Eq, Serialize)]\n    pub struct HasArray {\n        a: [Field; 2],\n        b: bool,\n    }\n\n    #[derive(Deserialize, Eq, Serialize)]\n    pub struct Fancier {\n        a: Smol,\n        b: [Field; 2],\n        c: [u8; 3],\n        d: str<16>,\n    }\n\n    #[derive(Deserialize, Eq, Packable, Serialize)]\n    pub struct HasArrayWithGenerics<T, let N: u32> {\n        pub fields: [T; N],\n        pub length: u32,\n    }\n\n    #[test]\n    fn serde_on_smol() {\n        let smol = Smol { a: 1, b: 2 };\n        let serialized = smol.serialize();\n        assert(serialized == [1, 2], serialized);\n        let deserialized = Smol::deserialize(serialized);\n        assert(deserialized == smol);\n\n        // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n        let packed = smol.pack();\n        assert_eq(packed, serialized, \"Packed does not match serialized\");\n    }\n\n    #[test]\n    fn serde_on_has_array() {\n        let has_array = HasArray { a: [1, 2], b: true };\n        let serialized = has_array.serialize();\n        assert(serialized == [1, 2, 1], serialized);\n        let deserialized = HasArray::deserialize(serialized);\n        assert(deserialized == has_array);\n    }\n\n    #[test]\n    fn serde_on_fancier() {\n        let fancier =\n            Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n        let serialized = fancier.serialize();\n        assert(\n            serialized\n                == [\n                    1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                    0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n                ],\n            serialized,\n        );\n        let deserialized = Fancier::deserialize(serialized);\n        assert(deserialized == fancier);\n    }\n\n    #[test]\n    fn serde_on_contains_array_with_generics() {\n        let struct_with_array_of_generics = HasArrayWithGenerics { fields: [1, 2, 3], length: 3 };\n        let serialized = struct_with_array_of_generics.serialize();\n        assert(serialized == [1, 2, 3, 3], serialized);\n        let deserialized = HasArrayWithGenerics::deserialize(serialized);\n        assert(deserialized == struct_with_array_of_generics);\n    }\n\n    #[test]\n    fn packable_on_contains_array_with_generics() {\n        let struct_with_array_of_generics = HasArrayWithGenerics { fields: [1, 2, 3], length: 3 };\n        let packed = struct_with_array_of_generics.pack();\n        assert(packed == [1, 2, 3, 3], packed);\n\n        let unpacked = HasArrayWithGenerics::unpack(packed);\n        assert(unpacked == struct_with_array_of_generics);\n    }\n\n}\n"
    },
    "334": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\n// Note: Not deriving this because it's not supported to call derive_serialize on a \"remote\" struct (and it will never\n// be supported).\nimpl Serialize for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn serialize(self: Self) -> [Field; Self::N] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn deserialize(serialized: [Field; Self::N]) -> Self {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n\n// TODO(#11356): use compact representation here.\nimpl Packable for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn pack(self) -> [Field; Self::N] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; Self::N]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "335": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\nuse crate::traits::{Deserialize, Serialize};\nuse std::meta::derive;\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "345": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::{default::Default, meta::derive};\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nmod test {\n    use crate::{\n        point::POINT_LENGTH,\n        public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n        traits::{Deserialize, Serialize},\n    };\n    use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\n    #[test]\n    unconstrained fn compute_public_keys_hash() {\n        let keys = PublicKeys {\n            npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n            ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n            ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n            tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n        };\n\n        let actual = keys.hash();\n        let expected_public_keys_hash =\n            0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n        assert(actual.to_field() == expected_public_keys_hash);\n    }\n\n    #[test]\n    unconstrained fn compute_default_hash() {\n        let keys = PublicKeys::default();\n\n        let actual = keys.hash();\n        let test_data_default_hash =\n            0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n        assert(actual.to_field() == test_data_default_hash);\n    }\n\n    #[test]\n    unconstrained fn serde() {\n        let keys = PublicKeys {\n            npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n            ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n            ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n            tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n        };\n\n        // We use the PUBLIC_KEYS_LENGTH constant to ensure that there is a match between the derived trait\n        let serialized: [Field; POINT_LENGTH * 4] = keys.serialize();\n        let deserialized = PublicKeys::deserialize(serialized);\n\n        assert_eq(keys, deserialized);\n    }\n}\n"
    },
    "360": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty: Eq {\n    fn empty() -> Self;\n\n    fn is_empty(self) -> bool {\n        self.eq(Self::empty())\n    }\n\n    // Requires this Noir fix: https://github.com/noir-lang/noir/issues/9002\n    // fn assert_not_empty<let U: u32>(self, msg: str<U>) { // This msg version was failing with weird compiler errors.\n    //     // We provide a default impl but it's likely inefficient.\n    //     // The reason we include this function is because there's a lot of\n    //     // opportunity for optimisation on a per-struct basis.\n    //     // You only need to show one element is not empty to know that the whole thing\n    //     // is not empty.\n    //     // If you know an element of your struct which should always be nonempty,\n    //     // you can write an impl that solely checks that that element is nonempty.\n    //     assert(!self.is_empty(), msg);\n    // }\n\n    // This default impl is overwritten by types like arrays, because there's a much\n    // more efficient approach.\n    fn assert_empty<let S: u32>(self, msg: str<S>) {\n        assert(self.is_empty(), msg);\n    }\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u16 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n\n    fn is_empty(self) -> bool {\n        self.all(|elem| elem.is_empty())\n    }\n\n    fn assert_empty<let S: u32>(self, msg: str<S>) -> () {\n        self.for_each(|elem| elem.assert_empty(msg))\n    }\n}\n\nimpl<T> Empty for [T]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty()]\n    }\n\n    fn is_empty(self) -> bool {\n        self.all(|elem| elem.is_empty())\n    }\n\n    fn assert_empty<let S: u32>(self, msg: str<S>) -> () {\n        self.for_each(|elem| elem.assert_empty(msg))\n    }\n}\nimpl<A, B> Empty for (A, B)\nwhere\n    A: Empty,\n    B: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        (A::empty(), B::empty())\n    }\n}\n\nimpl<T> Empty for Option<T>\nwhere\n    T: Eq,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\n// pub fn is_empty<T>(item: T) -> bool\n// where\n//     T: Empty,\n// {\n//     item.eq(T::empty())\n// }\n\n// pub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\n// where\n//     T: Empty,\n// {\n//     array.all(|elem| is_empty(elem))\n// }\n\n// pub fn assert_empty<T>(item: T) -> ()\n// where\n//     T: Empty,\n// {\n//     assert(item.eq(T::empty()))\n// }\n\n// pub fn assert_empty_array<T, let N: u32>(array: [T; N]) -> ()\n// where\n//     T: Empty,\n// {\n//     // A cheaper option than `is_empty_array` for if you don't need to gracefully\n//     // handle a bool result.\n//     // Avoids the `&` operator of `is_empty_array`'s `.all()` call.\n//     for i in 0..N {\n//         assert(is_empty(array[i]));\n//     }\n// }\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u16 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u16 {\n    fn from_field(value: Field) -> Self {\n        value as u16\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Associated Constants\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize for str<N> {\n///     let N: u32 = N;\n///\n///     fn serialize(self) -> [Field; Self::N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; Self::N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize {\n    let N: u32;\n\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let M: u32> Serialize for str<M> {\n    let N: u32 = M;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; Self::N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n/// Implementation of Deserialize for BoundedVec.\n///\n/// This implementation deserializes a BoundedVec from an array of Fields. The array contains:\n/// 1. The serialized items, each taking up T::N Fields\n/// 2. The length of the BoundedVec as the last Field\n///\n/// # Type Parameters\n/// * `T` - The type of items stored in the BoundedVec, must implement Deserialize\n/// * `M` - The maximum length of the BoundedVec\n///\n/// # Fields Array Layout\n/// [item1_field1, item1_field2, ..., item2_field1, item2_field2, ..., length]\n/// Where:\n/// - itemN_fieldM: The M-th Field of the N-th item (T::N Fields per item)\n/// - length: The number of items in the BoundedVec (1 Field)\n///\n/// Total length N = T::N * M + 1, where:\n/// - T::N is the number of Fields needed to deserialize one item\n/// - M is the maximum length of the BoundedVec\n/// - +1 is for storing the length\n///\n/// # Note\n/// Not deriving this because it's not supported to call derive_deserialize on a \"remote\" struct (and it will never\n/// be supported).\nimpl<T, let M: u32> Deserialize for BoundedVec<T, M>\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N * M + 1;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[<T as Deserialize>::N * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; <T as Deserialize>::N];\n            for j in 0..<T as Deserialize>::N {\n                nested_fields[j] = fields[i * <T as Deserialize>::N + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl Deserialize for () {\n    let N: u32 = 0;\n\n    fn deserialize(_fields: [Field; Self::N]) -> Self {\n        ()\n    }\n}\n\n// Note: Not deriving this because it's not supported to call derive_serialize on a \"remote\" struct (and it will never\n// be supported).\nimpl<T, let M: u32> Serialize for BoundedVec<T, M>\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N * M + 1; // +1 for the length of the BoundedVec\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut fields = [0; Self::N];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..<T as Serialize>::N {\n                fields[i * <T as Serialize>::N + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[<T as Serialize>::N * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Associated Constants\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let M: u32> Deserialize for str<M> {\n///     let N: u32 = M;\n///\n///     #[inline_always]\n///     fn deserialize(fields: [Field; Self::N]) -> Self {\n///         str::<Self::N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize {\n    let N: u32;\n\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let M: u32> Deserialize for str<M> {\n    let N: u32 = M;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        str::<Self::N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Associated Constants\n/// * `N` - The length of the Field array, known at compile time\n#[derive_via(derive_packable)]\npub trait Packable {\n    let N: u32;\n\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "362": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable for bool {\n    let N: u32 = BOOL_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable for u8 {\n    let N: u32 = U8_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable for u16 {\n    let N: u32 = U16_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable for u32 {\n    let N: u32 = U32_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable for u64 {\n    let N: u32 = U64_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable for u128 {\n    let N: u32 = U128_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable for Field {\n    let N: u32 = FIELD_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable for i8 {\n    let N: u32 = I8_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u8 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable for i16 {\n    let N: u32 = I16_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u16 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable for i32 {\n    let N: u32 = I32_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u32 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable for i64 {\n    let N: u32 = I64_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u64 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let M: u32> Packable for [T; M]\nwhere\n    T: Packable,\n{\n    let N: u32 = M * <T as Packable>::N;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n        for i in 0..M {\n            let serialized = self[i].pack();\n            for j in 0..<T as Packable>::N {\n                result[i * <T as Packable>::N + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; M] = std::mem::zeroed();\n        reader.read_struct_array::<T, <T as Packable>::N, M>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "363": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize for bool {\n    let N: u32 = BOOL_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for bool {\n    let N: u32 = BOOL_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize for u8 {\n    let N: u32 = U8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u8 {\n    let N: u32 = U8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize for u16 {\n    let N: u32 = U16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u16 {\n    let N: u32 = U16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize for u32 {\n    let N: u32 = U32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u32 {\n    let N: u32 = U32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize for u64 {\n    let N: u32 = U64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u64 {\n    let N: u32 = U64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize for u128 {\n    let N: u32 = U128_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u128 {\n    let N: u32 = U128_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize for Field {\n    let N: u32 = FIELD_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self]\n    }\n}\n\nimpl Deserialize for Field {\n    let N: u32 = FIELD_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize for i8 {\n    let N: u32 = I8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize for i8 {\n    let N: u32 = I8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize for i16 {\n    let N: u32 = I16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize for i16 {\n    let N: u32 = I16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize for i32 {\n    let N: u32 = I32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize for i32 {\n    let N: u32 = I32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize for i64 {\n    let N: u32 = I64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize for i64 {\n    let N: u32 = I64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let M: u32> Serialize for [T; M]\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N * M;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut result: [Field; _] = std::mem::zeroed();\n        for i in 0..M {\n            let serialized_t = self[i].serialize();\n            for j in 0..<T as Serialize>::N {\n                result[i * <T as Serialize>::N + j] = serialized_t[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let M: u32> Deserialize for [T; M]\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N * M;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; M] = std::mem::zeroed();\n        reader.read_struct_array::<T, <T as Deserialize>::N, M>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T> Serialize for Option<T>\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N + 1;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..<T as Serialize>::N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T> Deserialize for Option<T>\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N + 1;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        if fields[0] == 1 {\n            let mut value_fields = [0; <T as Deserialize>::N];\n            for i in 0..<T as Deserialize>::N {\n                value_fields[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_fields))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "383": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_u64(&mut self) -> u64 {\n        self.read() as u64\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert_eq(self.offset, self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "395": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[derive(Eq, Serialize, Packable)]\n#[custom_note]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    pub fn get_owner(self) -> AztecAddress {\n        self.owner\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` so that they can discover the\n    /// note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            self.pack().concat([storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        note_completion_log.concat(padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{address::AztecAddress, traits::{Deserialize, FromField, Packable}},\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        // The following is a misuse of the `deserialize` function, but this is just a test and it's better than\n        // letting devs manually construct it when they shouldn't be able to.\n        let partial_note = PartialUintNote::deserialize([commitment]);\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(private_log_without_public_tag.concat(public_log_without_tag), note.pack());\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "50": {
      "path": "/home/vscode/turnstile-monorepo/aztec/contracts/shield_gateway/src/main.nr",
      "source": "pub mod test;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract ShieldGateway {\n    use std::meta::derive;\n\n    use aztec::{\n        event::event_interface::{emit_event_in_public, EventInterface},\n        macros::{events::event, functions::{initializer, internal, private, public, utility, view}},\n        oracle::capsules,\n        protocol_types::{address::AztecAddress, traits::{FromField, Hash, Serialize, ToField}},\n    };\n\n    pub global VP_SLOT: Field = 0x1dfeed;\n    pub global BIN_AMOUNT: u128 = 1_000_000_000;\n\n    #[derive(Serialize)]\n    #[event]\n    struct TransferEvent {\n        serial: Field,\n        token: AztecAddress,\n        binnedAmount: u128,\n    }\n\n    #[private]\n    fn check_transfer(sender: AztecAddress, recipient: AztecAddress, amount: u128) {\n        let token: AztecAddress = context.msg_sender();\n\n        aztec::oracle::debug_log::debug_log_format(\n            \"Checking transfer of {0} {1} tokens from {2} to {3}\",\n            [amount.to_field(), token.to_field(), sender.to_field(), recipient.to_field()],\n        );\n\n        // TODO: Implement verified ID checks\n        // // Ensure Verified ID is provided & valid\n        // // Safety: value constrained later\n        // let mut verified_id: [Field; 5] =\n        //     unsafe { capsules::load(context.this_address(), VP_SLOT).unwrap() };\n\n        // let _ = ShieldGateway::at(context.this_address()).verify_id_private(verified_id).view(\n        //     &mut context,\n        // );\n\n        // Publicly log Verified ID Serial & Token & binned value (Amount / BIN_AMOUNT)\n        ShieldGateway::at(context.this_address())\n            ._log_transfer(\n                0, // TODO: using dummy serial number. Switch to verified_id[0] when available\n                token,\n                _binned(amount),\n            )\n            .enqueue(&mut context);\n    }\n\n    #[contract_library_method]\n    fn _binned(amount: u128) -> u128 {\n        amount / BIN_AMOUNT\n    }\n\n    #[utility]\n    unconstrained fn binned(amount: u128) -> u128 {\n        _binned(amount)\n    }\n\n    #[public]\n    #[internal]\n    fn _log_transfer(serial: Field, token: AztecAddress, binnedAmount: u128) {\n        emit_event_in_public(TransferEvent { serial, token, binnedAmount }, &mut context);\n    }\n\n    #[private]\n    #[view]\n    fn verify_id_private(verified_id: [Field; 5]) -> bool {\n        // TODO: Implement ID verification logic\n        aztec::oracle::debug_log::debug_log_format(\"Verified ID: {}\", verified_id);\n        true\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0, \"cannot pop from an empty vector\");\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            let _ = vec.get(0);\n        }\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_beyond_length() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            let _ = vec.get(3);\n        }\n\n        #[test]\n        fn get_works_within_bounds() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(2), 3);\n            assert_eq(vec.get(4), 5);\n        }\n\n        #[test]\n        fn get_unchecked_works() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            assert_eq(vec.get_unchecked(0), 1);\n            assert_eq(vec.get_unchecked(2), 3);\n        }\n\n        #[test]\n        fn get_unchecked_works_past_len() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            assert_eq(vec.get_unchecked(4), 0);\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_setting_beyond_length() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            vec.set(3, 4);\n        }\n\n        #[test]\n        fn set_unchecked_operations() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            vec.set_unchecked(0, 10);\n            assert_eq(vec.get(0), 10);\n        }\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn set_unchecked_operations_past_len() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            vec.set_unchecked(3, 40);\n            assert_eq(vec.get(3), 40);\n        }\n\n        #[test]\n        fn set_preserves_other_elements() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n\n            vec.set(2, 30);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 30);\n            assert_eq(vec.get(3), 4);\n            assert_eq(vec.get(4), 5);\n        }\n    }\n\n    mod any {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn returns_false_if_predicate_not_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, false, false]);\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn returns_true_if_predicate_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, true, true]);\n            let result = vec.any(|value| value);\n\n            assert(result);\n        }\n\n        #[test]\n        fn returns_false_on_empty_boundedvec() {\n            let vec: BoundedVec<bool, 0> = BoundedVec::new();\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn any_with_complex_predicates() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n\n            assert(vec.any(|x| x > 3));\n            assert(!vec.any(|x| x > 10));\n            assert(vec.any(|x| x % 2 == 0)); // has a even number\n            assert(vec.any(|x| x == 3)); // has a specific value\n        }\n\n        #[test]\n        fn any_with_partial_vector() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            assert(vec.any(|x| x == 1));\n            assert(vec.any(|x| x == 2));\n            assert(!vec.any(|x| x == 3));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn map_with_conditional_logic() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n\n            let result = vec.map(|x| if x % 2 == 0 { x * 2 } else { x });\n            let expected = BoundedVec::from_array([1, 4, 3, 8]);\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn map_preserves_length() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|x| x * 2);\n\n            assert_eq(result.len(), vec.len());\n            assert_eq(result.max_len(), vec.max_len());\n        }\n\n        #[test]\n        fn map_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let result = vec.map(|x| x * 2);\n            assert_eq(result, vec);\n            assert_eq(result.len(), 0);\n            assert_eq(result.max_len(), 5);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn mapi_with_index_branching_logic() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n\n            let result = vec.mapi(|i, x| if i % 2 == 0 { x * 2 } else { x });\n            let expected = BoundedVec::from_array([2, 2, 6, 4]);\n            assert_eq(result, expected);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn for_each_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut count = 0;\n            let count_ref = &mut count;\n            vec.for_each(|_| { *count_ref += 1; });\n            assert_eq(count, 0);\n        }\n\n        #[test]\n        fn for_each_with_side_effects() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            let mut seen = BoundedVec::<u32, 3>::new();\n            let seen_ref = &mut seen;\n            vec.for_each(|x| seen_ref.push(x));\n            assert_eq(seen, vec);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn for_eachi_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut count = 0;\n            let count_ref = &mut count;\n            vec.for_eachi(|_, _| { *count_ref += 1; });\n            assert_eq(count, 0);\n        }\n\n        #[test]\n        fn for_eachi_with_index_tracking() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([10, 20, 30]);\n            let mut indices = BoundedVec::<u32, 3>::new();\n            let indices_ref = &mut indices;\n            vec.for_eachi(|i, _| indices_ref.push(i));\n\n            let expected = BoundedVec::from_array([0, 1, 2]);\n            assert_eq(indices, expected);\n        }\n\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n\n        #[test]\n        fn from_array_preserves_order() {\n            let array = [5, 3, 1, 4, 2];\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array(array);\n            for i in 0..array.len() {\n                assert_eq(vec.get(i), array[i]);\n            }\n        }\n\n        #[test]\n        fn from_array_with_different_types() {\n            let bool_array = [true, false, true];\n            let bool_vec: BoundedVec<bool, 3> = BoundedVec::from_array(bool_array);\n            assert_eq(bool_vec.len(), 3);\n            assert_eq(bool_vec.get(0), true);\n            assert_eq(bool_vec.get(1), false);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n\n    mod push_pop {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn push_and_pop_operations() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n\n            assert_eq(vec.len(), 0);\n\n            vec.push(1);\n            assert_eq(vec.len(), 1);\n            assert_eq(vec.get(0), 1);\n\n            vec.push(2);\n            assert_eq(vec.len(), 2);\n            assert_eq(vec.get(1), 2);\n\n            let popped = vec.pop();\n            assert_eq(popped, 2);\n            assert_eq(vec.len(), 1);\n\n            let popped2 = vec.pop();\n            assert_eq(popped2, 1);\n            assert_eq(vec.len(), 0);\n        }\n\n        #[test(should_fail_with = \"push out of bounds\")]\n        fn push_to_full_vector() {\n            let mut vec: BoundedVec<u32, 2> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n            vec.push(3); // should panic\n        }\n\n        #[test(should_fail_with = \"cannot pop from an empty vector\")]\n        fn pop_from_empty_vector() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let _ = vec.pop(); // should panic\n        }\n\n        #[test]\n        fn push_pop_cycle() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n\n            // push to full\n            vec.push(1);\n            vec.push(2);\n            vec.push(3);\n            assert_eq(vec.len(), 3);\n\n            // pop all\n            assert_eq(vec.pop(), 3);\n            assert_eq(vec.pop(), 2);\n            assert_eq(vec.pop(), 1);\n            assert_eq(vec.len(), 0);\n\n            // push again\n            vec.push(4);\n            assert_eq(vec.len(), 1);\n            assert_eq(vec.get(0), 4);\n        }\n    }\n\n    mod extend {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn extend_from_array() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_array([2, 3]);\n\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n\n        #[test]\n        fn extend_from_slice() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_slice(&[2, 3]);\n\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n\n        #[test]\n        fn extend_from_bounded_vec() {\n            let mut vec1: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut vec2: BoundedVec<u32, 3> = BoundedVec::new();\n\n            vec1.push(1);\n            vec2.push(2);\n            vec2.push(3);\n\n            vec1.extend_from_bounded_vec(vec2);\n\n            assert_eq(vec1.len(), 3);\n            assert_eq(vec1.get(0), 1);\n            assert_eq(vec1.get(1), 2);\n            assert_eq(vec1.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"extend_from_array out of bounds\")]\n        fn extend_array_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_array([2, 3, 4]); // should panic\n        }\n\n        #[test(should_fail_with = \"extend_from_slice out of bounds\")]\n        fn extend_slice_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_slice(&[2, 3, 4]); // S]should panic\n        }\n\n        #[test(should_fail_with = \"extend_from_bounded_vec out of bounds\")]\n        fn extend_bounded_vec_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            let other: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n            vec.extend_from_bounded_vec(other); // should panic\n        }\n\n        #[test]\n        fn extend_with_empty_collections() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let original_len = vec.len();\n\n            vec.extend_from_array([]);\n            assert_eq(vec.len(), original_len);\n\n            vec.extend_from_slice(&[]);\n            assert_eq(vec.len(), original_len);\n\n            let empty: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.extend_from_bounded_vec(empty);\n            assert_eq(vec.len(), original_len);\n        }\n    }\n\n    mod storage {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn storage_consistency() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n\n            // test initial storage state\n            assert_eq(vec.storage(), [0, 0, 0, 0, 0]);\n\n            vec.push(1);\n            vec.push(2);\n\n            // test storage after modifications\n            assert_eq(vec.storage(), [1, 2, 0, 0, 0]);\n\n            // storage doesn't change length\n            assert_eq(vec.len(), 2);\n            assert_eq(vec.max_len(), 5);\n        }\n\n        #[test]\n        fn storage_after_pop() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n\n            let _ = vec.pop();\n            // after pop, the last element should be zeroed\n            assert_eq(vec.storage(), [1, 2, 0]);\n            assert_eq(vec.len(), 2);\n        }\n\n        #[test]\n        fn vector_immutable() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            let storage = vec.storage();\n\n            assert_eq(storage, [1, 2, 3]);\n\n            // Verify that the original vector is unchanged\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n    }\n}\n"
    },
    "63": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T)\n    where\n        T: Serialize,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T\n    where\n        T: Deserialize,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n\n    global SLOT: Field = 1230;\n\n    #[test]\n    unconstrained fn empty_array() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            let _: Field = array.get(0);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            array.push(5);\n\n            assert_eq(array.len(), 1);\n            assert_eq(array.get(0), 5);\n        });\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            array.push(5);\n\n            let _ = array.get(1);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(5);\n            array.remove(0);\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(7);\n            array.push(8);\n            array.push(9);\n\n            assert_eq(array.len(), 3);\n            assert_eq(array.get(0), 7);\n            assert_eq(array.get(1), 8);\n            assert_eq(array.get(2), 9);\n\n            array.remove(1);\n\n            assert_eq(array.len(), 2);\n            assert_eq(array.get(0), 7);\n            assert_eq(array.get(1), 9);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(7);\n            array.push(8);\n            array.push(9);\n\n            array.remove(1);\n            array.remove(1);\n            array.remove(0);\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n            // we do not care about the order in which each tuple was passed to the closure.\n            let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n            array.for_each(|index, value| { called_with.push((index, value)); });\n\n            assert_eq(called_with.len(), 3);\n            assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n            assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n            assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            array.for_each(|index, _| {\n                if index == 1 {\n                    array.remove(index);\n                }\n            });\n\n            assert_eq(array.len(), 2);\n            assert_eq(array.get(0), 4);\n            assert_eq(array.get(1), 6);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            array.for_each(|index, _| { array.remove(index); });\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all_no_copy() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            // We test that the utilityCopyCapsule was never called, which is the expensive operation we want to avoid.\n            let mock = std::test::OracleMock::mock(\"utilityCopyCapsule\");\n\n            array.for_each(|index, _| { array.remove(index); });\n\n            assert_eq(mock.times_called(), 0);\n        });\n    }\n}\n"
    },
    "64": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PrivateCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    /// Makes the call to this private function.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    /// This enables contracts to interact with each other while maintaining\n    /// privacy. This \"composability\" of private contract functions is a key\n    /// feature of the Aztec network.\n    ///\n    /// If a user's transaction includes multiple private function calls, then\n    /// by the design of Aztec, the following information will remain private[1]:\n    /// - The function selectors and contract addresses of all private function\n    ///   calls will remain private, so an observer of the public mempool will\n    ///   not be able to look at a tx and deduce which private functions have\n    ///   been executed.\n    /// - The arguments and return values of all private function calls will\n    ///   remain private.\n    /// - The person who initiated the tx will remain private.\n    /// - The notes and nullifiers and private logs that are emitted by all\n    ///   private function calls will (if designed well) not leak any user\n    ///   secrets, nor leak which functions have been executed.\n    ///\n    /// [1] Caveats: Some of these privacy guarantees depend on how app\n    /// developers design their smart contracts. Some actions _can_ leak\n    /// information, such as:\n    /// - Calling an internal public function.\n    /// - Calling a public function and not setting msg_sender to Option::none\n    ///   (see https://github.com/AztecProtocol/aztec-packages/pull/16433)\n    /// - Calling any public function will always leak details about the nature\n    ///   of the transaction, so devs should be careful in their contract\n    ///   designs. If it can be done in a private function, then that will give\n    ///   the best privacy.\n    /// - Not padding the side-effects of a tx to some standardised, uniform\n    ///   size. The kernel circuits can take hints to pad side-effects, so a\n    ///   wallet should be able to request for a particular amount of padding.\n    ///   Wallets should ideally agree on some standard.\n    ///   - Padding should include:\n    ///     - Padding the lengths of note & nullifier arrays\n    ///     - Padding private logs with random fields, up to some standardised\n    ///       size.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Advanced\n    /// * The call is added to the private call stack and executed by kernel\n    ///   circuits after this function completes\n    /// * The called function can modify its own contract's private state\n    /// * Side effects from the called function are included in this transaction\n    /// * The call inherits the current transaction's context and gas limits\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n\n        // If T is () (i.e. if the function does not return anything) then `get_preimage` will constrain that the\n        // returns hash is empty as per the protocol rules.\n        returns_hash.get_preimage()\n    }\n\n    /// Makes a _read-only_ call to this private function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// See `call` for more general info on private function calls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        // If T is () (i.e. if the function does not return anything) then `get_preimage` will constrain that the\n        // returns hash is empty as per the protocol rules.\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PrivateCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PrivateStaticCallInterface<M, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    /// Makes a read-only call to this private function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PrivateStaticCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PublicCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    /// Makes the call to this public function.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        // If T is () (i.e. if the function does not return anything) then `as_array` will constrain that `returns` has\n        // a length of 0 (since that is ()'s deserialization length).\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Makes a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        // If T is () (i.e. if the function does not return anything) then `as_array` will constrain that `returns` has\n        // a length of 0 (since that is ()'s deserialization length).\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Enqueues a call to this public function, to be executed later.\n    ///\n    /// Unlike private functions which execute immediately on the user's device,\n    /// public function calls are \"enqueued\" and executed some time later by a\n    /// block proposer.\n    ///\n    /// This means a public function cannot return any values back to a private\n    /// function, because by the time the public function is being executed,\n    /// the private function which called it has already completed execution.\n    /// (In fact, the private function has been executed and proven, along with\n    /// all other private function calls of the user's tx. A single proof of the\n    /// tx has been submitted to the Aztec network, and some time later a\n    /// proposer has picked the tx up from the mempool and begun executing all\n    /// of the enqueued public functions).\n    ///\n    /// # Privacy warning\n    /// Enqueueing a public function call is an inherently leaky action.\n    /// Many interesting applications will require some interaction with public\n    /// state, but smart contract developers should try to use public function\n    /// calls sparingly, and carefully.\n    /// _Internal_ public function calls are especially leaky, because they\n    /// completely leak which private contract made the call.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    /// Enqueues a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    /// Enqueues a call to this public function, and designates it to be the\n    /// teardown function for this tx. Only one teardown function call can be\n    /// made by a tx.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase ensures the fee payer\n    /// has sufficient balance to pay the proposer their fees.\n    /// The teardown phase is primarily intended to: calculate exactly\n    /// how much the user owes, based on gas consumption, and refund the user\n    /// any change.\n    ///\n    /// Note: in some cases, the cost of refunding the user (i.e. DA costs of\n    /// tx side-effects) might exceed the refund amount. For app logic with\n    /// fairly stable and predictable gas consumption, a material refund amount\n    /// is unlikely. For app logic with unpredictable gas consumption, a\n    /// refund might be important to the user (e.g. if a hefty function reverts\n    /// very early). Wallet/FPC/Paymaster developers should be mindful of this.\n    ///\n    /// See `enqueue` for more information about enqueuing public function calls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PublicCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T> PublicStaticCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    /// Makes the read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Enqueues a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PublicStaticCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T> CallInterface<M> for UtilityCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T> UtilityCallInterface<M, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n"
    },
    "71": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        logs::notify_created_contract_class_log,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        block_header::BlockHeader,\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, MAX_CONTRACT_CLASS_LOGS_PER_CALL,\n        MAX_ENQUEUED_CALLS_PER_CALL, MAX_INCLUDE_BY_TIMESTAMP_DURATION,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    hash::poseidon2_hash,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::{ClaimedLengthArray, trimmed_array_length_hint},\n};\n\n/// # PrivateContext\n///\n/// The **main interface** between a #[private] function and the Aztec blockchain.\n///\n/// An instance of the PrivateContext is initialized automatically at the outset\n/// of every private function, within the #[private] macro, so you'll never\n/// need to consciously instantiate this yourself.\n///\n/// The instance is always named `context`, and it is always be available within\n/// the body of every #[private] function in your smart contract.\n///\n/// > For those used to \"vanilla\" Noir, it might be jarring to have access to\n/// > `context` without seeing a declaration `let context = PrivateContext::new(...)`\n/// > within the body of your function. This is just a consequence of using\n/// > macros to tidy-up verbose boilerplate. You can use `nargo expand` to\n/// > expand all macros, if you dare.\n///\n/// Typical usage for a smart contract developer will be to call getter\n/// methods of the PrivateContext.\n///\n/// _Pushing_ data and requests to the context is mostly handled within\n/// aztec-nr's own functions, so typically a smart contract developer won't\n/// need to call any setter methods directly.\n///\n/// > Advanced users might occasionally wish to push data to the context\n/// > directly for lower-level control. If you find yourself doing this, please\n/// > open an issue on GitHub to describe your use case: it might be that\n/// > new functionality should be added to aztec-nr.\n///\n/// ## Responsibilities\n/// - Exposes contextual data to a private function:\n///   - Data relating to how this private function was called.\n///     - msg_sender\n///     - this_address - (the contract address of the private function being\n///                      executed)\n///     - See `CallContext` for more data.\n///   - Data relating to the transaction in which this private function is\n///     being executed.\n///     - chain_id\n///     - version\n///     - gas_settings\n/// - Provides state access:\n///   - Access to the \"Anchor block\" header.\n///     Recall, a private function cannot read from the \"current\" block header,\n///     but must read from some historical block header, because as soon as\n///     private function execution begins (asynchronously, on a user's device),\n///     the public state of the chain (the \"current state\") will have progressed\n///     forward. We call this reference the \"Anchor block\".\n///     See `BlockHeader`.\n///   - Enables consumption of L1->L2 messages.\n/// - Enables calls to functions of other smart contracts:\n///   - Private function calls\n///   - Enqueueing of public function call requests\n///     (Since public functions are executed at a later time, by a block\n///     proposer, we say they are \"enqueued\").\n/// - Writes data to the blockchain:\n///   - New notes\n///   - New nullifiers\n///   - Private logs (for sending encrypted note contents or encrypted events)\n///   - New L2->L1 messages.\n/// - Provides args to the private function (handled by the #[private] macro).\n/// - Returns the return values of this private function (handled by the\n///   #[private] macro).\n/// - Makes Key Validation Requests.\n///   - Private functions are not allowed to see master secret keys, because we\n///     do not trust them. They are instead given \"app-siloed\" secret keys with\n///     a claim that they relate to a master public key. They can then request\n///     validation of this claim, by making a \"key validation request\" to the\n///     protocol's kernel circuits (which _are_ allowed to see certain master\n///     secret keys).\n///\n/// ## Advanced Responsibilities\n///\n/// - Ultimately, the PrivateContext is responsible for constructing the\n///   PrivateCircuitPublicInputs of the private function being executed.\n///   All private functions on Aztec must have public inputs which adhere\n///   to the rigid layout of the PrivateCircuitPublicInputs, in order to be\n///   compatible with the protocol's kernel circuits.\n///   A well-known misnomer:\n///   - \"public inputs\" contain both inputs and outputs of this function.\n///     - By \"outputs\" we mean a lot more side-effects than just the\n///       \"return values\" of the function.\n///   - Most of the so-called \"public inputs\" are kept _private_, and never leak\n///     to the outside world, because they are 'swallowed' by the protocol's\n///     kernel circuits before the tx is sent to the network. Only the\n///     following are exposed to the outside world:\n///     - New note_hashes\n///     - New nullifiers\n///     - New private logs\n///     - New L2->L1 messages\n///     - New enqueued public function call requests\n///     All the above-listed arrays of side-effects can be padded by the\n///     user's wallet (through instructions to the kernel circuits, via the\n///     PXE) to obscure their true lengths.\n///\n/// ## Syntax Justification\n///\n/// Both user-defined functions _and_ most functions in aztec-nr need access to\n/// the PrivateContext instance to read/write data. This is why you'll see the\n/// arguably-ugly pervasiveness of the \"context\" throughout your smart contract\n/// and the aztec-nr library.\n/// For example, `&mut context` is prevalent. In some languages, you can access\n/// and mutate a global variable (such as a PrivateContext instance) from a\n/// function without polluting the function's parameters. With Noir, a function\n/// must explicitly pass control of a mutable variable to another function, by\n/// reference. Since many functions in aztec-nr need to be able to push new data\n/// to the PrivateContext, they need to be handed a mutable reference _to_ the\n/// context as a parameter.\n/// For example, `Context` is prevalent as a generic parameter, to give better\n/// type safety at compile time. Many `aztec-nr` functions don't make sense if\n/// they're called in a particular runtime (private, public or utility), and so\n/// are intentionally only implemented over certain\n/// [Private|Public|Utility]Context structs. This gives smart contract\n/// developers a much faster feedback loop if they're making a mistake, as an\n/// error will be thrown by the LSP or when they compile their contract.\n///\n#[derive(Eq)]\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: u64,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let max_allowed_include_by_timestamp =\n            inputs.historical_header.global_variables.timestamp + MAX_INCLUDE_BY_TIMESTAMP_DURATION;\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: max_allowed_include_by_timestamp,\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    /// Returns the contract address that initiated this function call.\n    ///\n    /// This is similar to `msg.sender` in Solidity (hence the name).\n    ///\n    /// Important Note: Since Aztec doesn't have a concept of an EoA (\n    /// Externally-owned Account), the msg_sender is \"undefined\" for the first\n    /// function call of every transaction. A value of `-1` is returned in such\n    /// cases.\n    /// The first function call of a tx is likely to be a call to the user's\n    /// account contract, so this quirk will most often be handled by account\n    /// contract developers.\n    ///\n    /// TODO(https://github.com/AztecProtocol/aztec-packages/issues/14025) - we\n    /// are considering making msg_sender: Option<AztecAddress>, since\n    /// a returned value of `Option:none` will be clearer to developers.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The address of the smart contract that called\n    ///   this function (be it an app contract or a user's account contract).\n    ///   Returns `-1` for the first function call of the tx.\n    ///\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    /// Returns the contract address of the current function being executed.\n    ///\n    /// This is equivalent to `address(this)` in Solidity (hence the name).\n    /// Use this to identify the current contract's address, commonly needed for\n    /// access control or when interacting with other contracts.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The contract address of the current function being\n    ///                    executed.\n    ///\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    /// Returns the chain ID of the current network.\n    ///\n    /// This is similar to `block.chainid` in Solidity. Returns the unique\n    /// identifier for the blockchain network this transaction is executing on.\n    ///\n    /// Helps prevent cross-chain replay attacks. Useful if implementing\n    /// multi-chain contract logic.\n    ///\n    /// # Returns\n    /// * `Field` - The chain ID as a field element\n    ///\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    /// Returns the Aztec protocol version that this transaction is executing\n    /// under. Different versions may have different rules, opcodes, or\n    /// cryptographic primitives.\n    ///\n    /// This is similar to how Ethereum has different EVM versions.\n    ///\n    /// Useful for forward/backward compatibility checks\n    ///\n    /// Not to be confused with contract versions; this is the protocol version.\n    ///\n    /// # Returns\n    /// * `Field` - The protocol version as a field element\n    ///\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    /// Returns the gas settings for the current transaction.\n    ///\n    /// This provides information about gas limits and pricing for the\n    /// transaction, similar to `tx.gasprice` and gas limits in Ethereum.\n    /// However, Aztec has a more sophisticated gas model with separate\n    /// accounting for L2 computation and data availability (DA) costs.\n    ///\n    /// # Returns\n    /// * `GasSettings` - Struct containing gas limits and fee information\n    ///\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    /// Returns the function selector of the currently executing function.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to access this.\n    ///\n    /// This is similar to `msg.sig` in Solidity, which returns the first 4\n    /// bytes of the function signature. In Aztec, the selector uniquely\n    /// identifies which function within the contract is being called.\n    ///\n    /// # Returns\n    /// * `FunctionSelector` - The 4-byte function identifier\n    ///\n    /// # Advanced\n    /// Only #[private] functions have a function selector as a protocol-\n    /// enshrined concept. The function selectors of private functions are\n    /// baked into the preimage of the contract address, and are used by the\n    /// protocol's kernel circuits to identify each private function and ensure\n    /// the correct one is being executed.\n    ///\n    /// Used internally for function dispatch and call verification.\n    ///\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    /// Returns the hash of the arguments passed to the current function.\n    ///\n    /// Very low-level function: You shouldn't need to call this. The #[private]\n    /// macro calls this, and it makes the arguments neatly available to the\n    /// body of your private function.\n    ///\n    /// # Returns\n    /// * `Field` - Hash of the function arguments\n    ///\n    /// # Advanced\n    /// * Arguments are hashed to reduce proof size and verification time\n    /// * Enables efficient argument passing in recursive function calls\n    /// * The hash can be used to retrieve the original arguments from the PXE.\n    ///\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    /// Pushes a new note_hash to the Aztec blockchain's global Note Hash Tree\n    /// (a state tree).\n    ///\n    /// A note_hash is a commitment to a piece of private state.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new note hashes.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The new note_hash.\n    ///\n    /// # Advanced\n    /// From here, the protocol's kernel circuits will take over and insert the\n    /// note_hash into the protocol's \"note hash tree\" (in the Base Rollup\n    /// circuit).\n    /// Before insertion, the protocol will:\n    /// - \"Silo\" the `note_hash` with the contract address of this function,\n    ///   to yield a `siloed_note_hash`. This prevents state collisions\n    ///   between different smart contracts.\n    /// - Ensure uniqueness of the `siloed_note_hash`, to prevent Faerie-Gold\n    ///   attacks, by hashing the `siloed_note_hash` with a unique value, to\n    ///   yield a `unique_siloed_note_hash` (see the protocol spec for more).\n    ///\n    /// In addition to calling this function, aztec-nr provides the contents\n    /// of the newly-created note to the PXE, via the `notify_created_note`\n    /// oracle.\n    ///\n    /// > Advanced users might occasionally wish to push data to the context\n    /// > directly for lower-level control. If you find yourself doing this,\n    /// > please open an issue on GitHub to describe your use case: it might be\n    /// > that new functionality should be added to aztec-nr.\n    ///\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    /// Pushes a new nullifier to the Aztec blockchain's global Nullifier Tree\n    /// (a state tree).\n    ///\n    /// See also: `push_nullifier_for_note_hash`.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifiers.\n    ///\n    /// A nullifier can only be emitted once. Duplicate nullifier insertions are\n    /// rejected by the protocol.\n    ///\n    /// Generally, a nullifier is emitted to prevent an action from happening\n    /// more than once, in such a way that the action cannot be linked (by an\n    /// observer of the blockchain) to any earlier transactions.\n    ///\n    /// I.e. a nullifier is a random-looking, but deterministic record of a\n    /// private, one-time action, which does not leak what action has been\n    /// taken, and which preserves the property of \"tx unlinkability\".\n    ///\n    /// Usually, a nullifier will be emitted to \"spend\" a note (a piece of\n    /// private state), without revealing which specific note is being spent.\n    ///\n    /// (Important: in such cases, use the below `push_nullifier_for_note_hash`).\n    ///\n    /// Sometimes, a nullifier might be emitted completely unrelated to any\n    /// notes. Examples include initialization of a new contract; initialization\n    /// of a PrivateMutable, or signalling in Semaphore-like applications.\n    /// This `push_nullifier` function serves such use cases.\n    ///\n    /// # Arguments\n    /// * `nullifier`\n    ///\n    /// # Advanced\n    /// From here, the protocol's kernel circuits will take over and insert the\n    /// nullifier into the protocol's \"nullifier tree\" (in the Base Rollup\n    /// circuit).\n    /// Before insertion, the protocol will:\n    /// - \"Silo\" the `nullifier` with the contract address of this function,\n    ///   to yield a `siloed_nullifier`. This prevents state collisions\n    ///   between different smart contracts.\n    /// - Ensure the `siloed_nullifier` is unique (the nullifier tree is an\n    ///   indexed merkle tree which supports efficient non-membership proofs).\n    ///\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    /// Pushes a nullifier that corresponds to a specific note hash.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifiers.\n    ///\n    /// This is a specialized version of `push_nullifier` that links a nullifier\n    /// to the specific note hash it's nullifying. This is the most common\n    /// usage pattern for nullifiers.\n    /// See `push_nullifier` for more explanation on nullifiers.\n    ///\n    /// # Arguments\n    /// * `nullifier`\n    /// * `nullified_note_hash` - The note hash of the note being nullified\n    ///\n    /// # Advanced\n    /// Important: usage of this function doesn't mean that the world will _see_\n    /// that this nullifier relates to the given nullified_note_hash (as that\n    /// would violate \"tx unlinkability\"); it simply informs the user's PXE\n    /// about the relationship (via `notify_nullified_note`). The PXE can then\n    /// use this information to feed hints to the kernel circuits for\n    /// \"squashing\" purposes: If a note is nullified during the same tx which\n    /// created it, we can \"squash\" (delete) the note and nullifier (and any\n    /// private logs associated with the note), to save on data emission costs.\n    ///\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    /// Returns the anchor block header - the historical block header that this\n    /// private function is reading from.\n    ///\n    /// A private function CANNOT read from the \"current\" block header,\n    /// but must read from some historical block header, because as soon as\n    /// private function execution begins (asynchronously, on a user's device),\n    /// the public state of the chain (the \"current state\") will have progressed\n    /// forward.\n    ///\n    /// # Returns\n    /// * `BlockHeader` - The anchor block header.\n    ///\n    /// # Advanced\n    /// * All private functions of a tx read from the same anchor block header.\n    /// * The protocol asserts that the `include_by_timestamp` of every tx\n    ///   is at most 24 hours beyond the timestamp of the tx's chosen anchor\n    ///   block header. This enables the network's nodes to safely prune old txs\n    ///   from the mempool. Therefore, the chosen block header _must_ be one\n    ///   from within the last 24 hours.\n    ///\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    /// Returns the header of any historical block at or before the anchor\n    /// block.\n    ///\n    /// This enables private contracts to access information from even older\n    /// blocks than the anchor block header.\n    ///\n    /// Useful for time-based contract logic that needs to compare against\n    /// multiple historical points.\n    ///\n    /// # Arguments\n    /// * `block_number` - The block number to retrieve (must be <= anchor\n    ///                    block number)\n    ///\n    /// # Returns\n    /// * `BlockHeader` - The header of the requested historical block\n    ///\n    /// # Advanced\n    /// This function uses an oracle to fetch block header data from the user's\n    /// PXE. Depending on how much blockchain data the user's PXE has been set\n    /// up to store, this might require a query from the PXE to another Aztec\n    /// node to get the data.\n    /// > This is generally true of all oracle getters (see `../oracle`).\n    ///\n    /// Each block header gets hashed and stored as a leaf in the protocol's\n    /// Archive Tree. In fact, the i-th block header gets stored at the i-th\n    /// leaf index of the Archive Tree. Behind the scenes, this\n    /// `get_block_header_at` function will add Archive Tree merkle-membership\n    /// constraints (~3k) to your smart contract function's circuit, to prove\n    /// existence of the block header in the Archive Tree.\n    ///\n    /// Note: we don't do any caching, so avoid making duplicate calls for the\n    /// same block header, because each call will add duplicate constraints.\n    ///\n    /// Calling this function is more expensive (constraint-wise) than getting\n    /// the anchor block header (via `get_block_header`). This is because the\n    /// anchor block's merkle membership proof is handled by Aztec's protocol\n    /// circuits, and is only performed once for the entire tx because all\n    /// private functions of a tx share a common anchor block header. Therefore,\n    /// the cost (constraint-wise) of calling `get_block_header` is effectively\n    /// free.\n    ///\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    /// Sets the hash of the return values for this private function.\n    ///\n    /// Very low-level function: this is called by the #[private] macro.\n    ///\n    /// # Arguments\n    /// * `returns_hasher` - A hasher containing the return values to hash\n    ///\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    /// Builds the PrivateCircuitPublicInputs for this private function, to\n    /// ensure compatibility with the protocol's kernel circuits.\n    ///\n    /// Very low-level function: This function is automatically called by the\n    /// #[private] macro.\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: ClaimedLengthArray::from_bounded_vec(\n                self.note_hash_read_requests,\n            ),\n            nullifier_read_requests: ClaimedLengthArray::from_bounded_vec(\n                self.nullifier_read_requests,\n            ),\n            key_validation_requests_and_generators: ClaimedLengthArray::from_bounded_vec(\n                self.key_validation_requests_and_generators,\n            ),\n            note_hashes: ClaimedLengthArray::from_bounded_vec(self.note_hashes),\n            nullifiers: ClaimedLengthArray::from_bounded_vec(self.nullifiers),\n            private_call_requests: ClaimedLengthArray::from_bounded_vec(self.private_call_requests),\n            public_call_requests: ClaimedLengthArray::from_bounded_vec(self.public_call_requests),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: ClaimedLengthArray::from_bounded_vec(self.l2_to_l1_msgs),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: ClaimedLengthArray::from_bounded_vec(self.private_logs),\n            contract_class_logs_hashes: ClaimedLengthArray::from_bounded_vec(\n                self.contract_class_logs_hashes,\n            ),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    /// Designates this contract as the fee payer for the transaction.\n    ///\n    /// Unlike Ethereum, where the transaction sender always pays fees, Aztec\n    /// allows any contract to voluntarily pay transaction fees. This enables\n    /// patterns like sponsored transactions or fee abstraction where users\n    /// don't need to hold fee-juice themselves. (Fee juice is a fee-paying\n    /// asset for Aztec).\n    ///\n    /// Only one contract per transaction can declare itself as the fee payer,\n    /// and it must have sufficient fee-juice balance (>= the gas limits\n    /// specified in the TxContext) by the time we reach the public setup phase\n    /// of the tx.\n    ///\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    /// Declares the end of the \"setup phase\" of this tx.\n    ///\n    /// Only one function per tx can declare the end of the setup phase.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase enables such a payment to\n    /// be made, because the setup phase _cannot revert_: a reverting function\n    /// within the setup phase would result in an invalid block which cannot\n    /// be proven. Any side-effects generated during that phase are guaranteed\n    /// to be inserted into Aztec's state trees (except for squashed notes &\n    /// nullifiers, of course).\n    ///\n    /// Even though the end of the setup phase is declared within a private\n    /// function, you might have noticed that _public_ functions can also\n    /// execute within the setup phase. This is because any public function\n    /// calls which were enqueued _within the setup phase_ by a private\n    /// function are considered part of the setup phase.\n    ///\n    /// # Advanced\n    /// * Sets the minimum revertible side effect counter of this tx to be the\n    /// PrivateContext's _current_ side effect counter.\n    ///\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    /// Sets a deadline (an \"include-by timestamp\") for when this transaction\n    /// must be included in a block.\n    ///\n    /// Other functions in this tx might call this setter with differing\n    /// values for the include-by timestamp. To ensure that all functions'\n    /// deadlines are met, the _minimum_ of all these include-by timestamps will\n    /// be exposed when this tx is submitted to the network.\n    ///\n    /// If the transaction is not included in a block by its include-by\n    /// timestamp, it becomes invalid and it will never be included.\n    ///\n    /// This expiry timestamp is publicly visible. See the \"Advanced\" section\n    /// for privacy concerns.\n    ///\n    /// # Arguments\n    /// * `include_by_timestamp` - Unix timestamp (seconds) deadline for inclusion.\n    ///                            The include-by timestamp of this tx will be\n    ///                            _at most_ the timestamp specified.\n    ///\n    /// # Advanced\n    /// * If multiple functions set differing `include_by_timestamp`s, the\n    ///   kernel circuits will set it to be the _minimum_ of the two. This\n    ///   ensures the tx expiry requirements of all functions in the tx are met.\n    /// * Rollup circuits will reject expired txs.\n    /// * The protocol enforces that all transactions must be included within\n    ///   24 hours of their chosen anchor block's timestamp, to enable safe\n    ///   mempool pruning.\n    /// * The DelayedPublicMutable design makes heavy use of this functionality,\n    ///   to enable private functions to read public state.\n    /// * A sophisticated Wallet should cleverly set an include-by timestamp\n    ///   to improve the privacy of the user and the network as a whole.\n    ///   For example, if a contract interaction sets include-by to some\n    ///   publicly-known value (e.g. the time when a contract upgrades), then\n    ///   the wallet might wish to set an even lower one to avoid revealing that\n    ///   this tx is interacting with said contract.\n    ///   Ideally, all wallets should standardise on an approach in order to\n    ///   provide users with a large anonymity set -- although the exact apprach\n    ///   will need to be discussed. Wallets that deviate from a standard might\n    ///   accidentally reveal which wallet each transaction originates from.\n    ///\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp = std::cmp::min(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    /// Makes a request to the protocol's kernel circuit to ensure a note_hash\n    /// actually exists.\n    ///\n    /// \"Read requests\" are used to prove that a note hash exists without\n    /// revealing which specific note was read.\n    ///\n    /// This can be used to prove existence of both settled notes (created in\n    /// prior transactions) and transient notes (created in the current\n    /// transaction).\n    /// If you need to prove existence of a settled note _at a specific block\n    /// number_, use `note_inclusion::prove_note_inclusion`.\n    ///\n    /// Low-level function. Ordinarily, smart contract developers will not need\n    /// to call this directly. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new note_hash read\n    /// requests.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The note hash to read and verify\n    ///\n    /// # Advanced\n    /// In \"traditional\" circuits for non-Aztec privacy applications, the merkle\n    /// membership proofs to check existence of a note are performed _within_\n    /// the application circuit.\n    ///\n    /// All Aztec private functions have access to the following constraint\n    /// optimisation:\n    /// In cases where the note being read was created earlier in the same tx,\n    /// the note wouldn't yet exist in the Note Hash Tree, so a hard-coded\n    /// merkle membership check which then gets ignored would be a waste of\n    /// constraints.\n    /// Instead, we can send read requests for all notes to the protocol's\n    /// kernel circuits, where we can conditionally assess which notes actually\n    /// need merkle membership proofs, and select an appropriately-sized\n    /// kernel circuit.\n    ///\n    /// For \"settled notes\" (which already existed in the Note Hash Tree of the\n    /// anchor block (i.e. before the tx began)), the kernel does a merkle\n    /// membership check.\n    ///\n    /// For \"pending notes\" (which were created earlier in _this_ tx), the\n    /// kernel will check that the note existed _before_ this read request was\n    /// made, by checking the side-effect counters of the note_hash and this\n    /// read request.\n    ///\n    /// This approach improves latency between writes and reads:\n    /// a function can read a note which was created earlier in the tx (rather\n    /// than performing the read in a later tx, after waiting for the earlier tx\n    /// to be included, to ensure the note is included in the tree).\n    ///\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    /// Requests to read a specific nullifier from the nullifier tree.\n    ///\n    /// Nullifier read requests are used to prove that a nullifier exists without\n    /// revealing which specific nullifier preimage was read.\n    ///\n    /// This can be used to prove existence of both settled nullifiers (created in\n    /// prior transactions) and transient nullifiers (created in the current\n    /// transaction).\n    /// If you need to prove existence of a settled nullifier _at a specific block\n    /// number_, use `nullifier_inclusion::prove_nullifier_inclusion`.\n    ///\n    /// Low-level function. Ordinarily, smart contract developers will not need\n    /// to call this directly. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifier read\n    /// requests.\n    ///\n    /// # Arguments\n    /// * `nullifier` - The nullifier to read and verify\n    ///\n    /// # Advanced\n    /// This approach improves latency between writes and reads:\n    /// a function can read a nullifier which was created earlier in the tx\n    /// (rather than performing the read in a later tx, after waiting for the\n    /// earlier tx to be included, to ensure the note is included in the tree).\n    ///\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    /// Requests the app-siloed nullifier secret key (nsk_app) for the given\n    /// (hashed) master nullifier public key (npk_m), from the user's PXE.\n    ///\n    /// Advanced function: Only needed if you're designing your own notes and/or\n    /// nullifiers.\n    ///\n    /// Contracts are not allowed to compute nullifiers for other contracts, as\n    /// that would let them read parts of their private state. Because of this,\n    /// a contract is only given an \"app-siloed secret key\", which is\n    /// constructed by hashing the user's master nullifier secret key with the\n    /// contract's address.\n    /// However, because contracts cannot be trusted with a user's master\n    /// nullifier secret key (because we don't know which contracts are honest\n    /// or malicious), the PXE refuses to provide any master secret keys to\n    /// any app smart contract function. This means app functions are unable to\n    /// prove that the derivation of an app-siloed nullifier secret key has been\n    /// computed correctly. Instead, an app function can request to the kernel\n    /// (via `request_nsk_app`) that it validates the siloed derivation, since\n    /// the kernel has been vetted to not leak any master secret keys.\n    ///\n    /// A common nullification scheme is to inject a nullifier secret key into\n    /// the preimage of a nullifier, to make the nullifier deterministic but\n    /// random-looking. This function enables that flow.\n    ///\n    /// # Arguments\n    /// * `npk_m_hash` - A hash of the master nullifier public key of the user\n    ///                  whose PXE is executing this function.\n    ///\n    /// # Returns\n    /// * The app-siloed nullifier secret key that corresponds to the given\n    ///   `npk_m_hash`.\n    ///\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    /// Requests the app-siloed nullifier secret key (nsk_app) for the given\n    /// (hashed) master nullifier public key (npk_m), from the user's PXE.\n    ///\n    /// See `request_nsk_app` and `request_sk_app` for more info.\n    ///\n    /// The intention of the \"outgoing\" keypair is to provide a second secret\n    /// key for all of a user's outgoing activity (i.e. for notes that a user\n    /// creates, as opposed to notes that a user receives from others). The\n    /// separation of incoming and outgoing data was a distinction made by\n    /// zcash, with the intention of enabling a user to optionally share with a\n    /// 3rd party a controlled view of only incoming or outgoing notes.\n    /// Similar functionality of sharing select data can be achieved with\n    /// offchain zero-knowledge proofs. It is up to an app developer whether\n    /// they choose to make use of a user's outgoing keypair within their\n    /// application logic, or instead simply use the same keypair (the address\n    /// keypair (which is effectively the same as the \"incooming\" keypair)) for\n    /// all incoming & outgoing messages to a user.\n    ///\n    /// Currently, all of the exposed encryption functions in aztec-nr ignore\n    /// the outgoing viewing keys, and instead encrypt all note logs and event\n    /// logs to a user's address public key.\n    ///\n    /// # Arguments\n    /// * `ovpk_m_hash` - Hash of the outgoing viewing public key master\n    ///\n    /// # Returns\n    /// * The application-specific outgoing viewing secret key\n    ///\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    /// Pushes a Key Validation Request to the kernel.\n    ///\n    /// Private functions are not allowed to see a user's master secret keys,\n    /// because we do not trust them. They are instead given \"app-siloed\" secret\n    /// keys with a claim that they relate to a master public key.\n    /// They can then request validation of this claim, by making a \"key\n    /// validation request\" to the protocol's kernel circuits (which _are_\n    /// allowed to see certain master secret keys).\n    ///\n    /// When a Key Validation Request tuple of (sk_app, Pk_m, app_address) is\n    /// submitted to the kernel, it will perform the following derivations\n    /// to validate the relationship between the claimed sk_app and the user's\n    /// Pk_m:\n    ///\n    ///       (sk_m) ----> * G ----> Pk_m\n    ///         |                     |\n    ///         v                       We use the kernel to prove this\n    ///  h(sk_m, app_address)         | sk_app-Pk_m relationship, because app\n    ///         |                       circuits must not be trusted to see sk_m.\n    ///         v                     |\n    ///      sk_app - -  - - - - - - -\n    ///\n    /// The function is named \"request_\" instead of \"get_\" to remind the user\n    /// that a Key Validation Request will be emitted to the kernel.\n    ///\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    /// Sends an \"L2 -> L1 message\" from this function (Aztec, L2) to a smart\n    /// contract on Ethereum (L1). L1 contracts which are designed to\n    /// send/receive messages to/from Aztec are called \"Portal Contracts\".\n    ///\n    /// Common use cases include withdrawals, cross-chain asset transfers, and\n    /// triggering L1 actions based on L2 state changes.\n    ///\n    /// The message will be inserted into an Aztec \"Outbox\" contract on L1,\n    /// when this transaction's block is proposed to L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target portal contract. The message will need to be manually\n    /// consumed from the Outbox through a separate Ethereum transaction: a user\n    /// will need to call a function of the portal contract -- a function\n    /// specifically designed to make a call to the Outbox to consume the\n    /// message.\n    /// The message will only be available for consumption once the _epoch_\n    /// proof has been submitted. Given that there are multiple Aztec blocks\n    /// within an epoch, it might take some time for this epoch proof to be\n    /// submitted -- especially if the block was near the start of an epoch.\n    ///\n    /// # Arguments\n    /// * `recipient` - Ethereum address that will receive the message\n    /// * `content` - Message content (32 bytes as a Field element).\n    ///               This content has a very specific layout.\n    /// docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    /// Consumes a message sent from Ethereum (L1) to Aztec (L2).\n    ///\n    /// Common use cases include token bridging, cross-chain governance, and\n    /// triggering L2 actions based on L1 events.\n    ///\n    /// Use this function if you only want the message to ever be \"referred to\"\n    /// once. Once consumed using this method, the message cannot be consumed\n    /// again, because a nullifier is emitted.\n    /// If your use case wants for the message to be read unlimited times, then\n    /// you can always read any historic message from the L1-to-L2 messages tree;\n    /// messages never technically get deleted from that tree.\n    ///\n    /// The message will first be inserted into an Aztec \"Inbox\" smart contract\n    /// on L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target L2 contract. The message will need to be manually\n    /// consumed by the target contract through a separate Aztec transaction.\n    /// The message will not be available for consumption immediately. Messages\n    /// get copied over from the L1 Inbox to L2 by the next Proposer in batches.\n    /// So you will need to wait until the messages are copied before you can\n    /// consume them.\n    ///\n    /// # Arguments\n    /// * `content` - The message content that was sent from L1\n    /// * `secret` - Secret value used for message privacy (if needed)\n    /// * `sender` - Ethereum address that sent the message\n    /// * `leaf_index` - Index of the message in the L1-to-L2 message tree\n    ///\n    /// # Advanced\n    /// Validates message existence in the L1-to-L2 message tree and nullifies\n    /// the message to prevent double-consumption.\n    ///\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    /// Emits a private log (an array of Fields) that will be published to an\n    /// Ethereum blob.\n    ///\n    /// Private logs are intended for the broadcasting of ciphertexts: that is,\n    /// encrypted events or encrypted note contents.\n    /// Since the data in the logs is meant to be _encrypted_, private_logs are\n    /// broadcast to publicly-visible Ethereum blobs.\n    /// The intended recipients of such encrypted messages can then discover and\n    /// decrypt these encrypted logs using their viewing secret key.\n    /// (See `../messages/discovery` for more details).\n    ///\n    /// Important note: This function DOES NOT _do_ any encryption of the input\n    /// `log` fields. This function blindly publishes whatever input `log` data\n    /// is fed into it, so the caller of this function should have already\n    /// performed the encryption, and the `log` should be the result of that\n    /// encryption.\n    ///\n    /// The protocol does not dictate what encryption scheme should be used:\n    /// a smart contract developer can choose whatever encryption scheme they\n    /// like.\n    /// Aztec-nr includes some off-the-shelf encryption libraries that\n    /// developers might wish to use, for convenience. These libraries not only\n    /// encrypt a plaintext (to produce a ciphertext); they also prepend the\n    /// ciphertext with a `tag` and `ephemeral public key` for easier message\n    /// discovery. This is a very dense topic, and we will be writing more\n    /// libraries and docs soon.\n    ///\n    /// > Currently, AES128 CBC encryption is the main scheme included in\n    /// > aztec.nr.\n    /// > We are currently making significant changes to the interfaces of the\n    /// > encryption library.\n    ///\n    /// In some niche use cases, an app might be tempted to publish\n    /// _un-encrypted_ data via a private log, because _public logs_ are not\n    /// available to private functions. Be warned that emitting public data via\n    /// private logs is strongly discouraged, and is considered a \"privacy\n    /// anti-pattern\", because it reveals identifiable information about _which_\n    /// function has been executed. A tx which leaks such information does not\n    /// contribute to the privacy set of the network.\n    ///\n    /// * Unlike `emit_raw_note_log`, this log is not tied to any specific note\n    ///\n    /// # Arguments\n    /// * `log` - The log data that will be publicly broadcast (so make sure\n    ///           it's already been encrypted before you call this function).\n    ///   Private logs are bounded in size (PRIVATE_LOG_SIZE_IN_FIELDS), to\n    ///   encourage all logs from all smart contracts look identical.\n    /// * `length` - The actual length of the `log` (measured in number of\n    ///              Fields). Although the input log has a max size of\n    ///   PRIVATE_LOG_SIZE_IN_FIELDS, the latter values of the array might all\n    ///   be 0's for small logs. This `length` should reflect the trimmed length\n    ///   of the array. The protocol's kernel circuits can then append random\n    ///   fields as \"padding\" after the `length`, so that the logs of this\n    ///   smart contract look indistinguishable from (the same length as) the\n    ///   logs of all other applications. It's up to wallets how much padding\n    ///   to apply, so ideally all wallets should agree on standards for this.\n    ///\n    /// # Advanced\n    ///\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    // TODO: rename.\n    /// Emits a private log that is explicitly tied to a newly-emitted note_hash,\n    /// to convey to the kernel: \"this log relates to this note\".\n    ///\n    /// This linkage is important in case the note gets squashed (due to being\n    /// read later in this same tx), since we can then squash the log as well.\n    ///\n    /// See `emit_private_log` for more info about private log emission.\n    ///\n    /// # Arguments\n    /// * `log` - The log data as an array of Field elements\n    /// * `length` - The actual length of the `log` (measured in number of\n    ///              Fields).\n    /// * `note_hash_counter` - The side-effect counter that was assigned to the\n    ///                         new note_hash when it was pushed to this\n    //                          `PrivateContext`.\n    ///\n    /// Important: If your application logic requires the log to always be\n    /// emitted regardless of note squashing, consider using `emit_private_log`\n    /// instead, or emitting additional events.\n    ///\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_contract_class_log<let N: u32>(&mut self, log: [Field; N]) {\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n\n        let log_to_emit: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS] =\n            log.concat([0; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS - N]);\n        // Note: the length is not always N, it is the number of fields we want to broadcast, omitting trailing zeros to save blob space.\n        // Safety: The below length is constrained in the base rollup, which will make sure that all the fields beyond length are zero.\n        let length = unsafe { trimmed_array_length_hint(log_to_emit) };\n        // We hash the entire padded log to ensure a user cannot pass a shorter length and so emit incorrect shorter bytecode.\n        let log_hash = poseidon2_hash(log_to_emit);\n        // Safety: the below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\n        unsafe {\n            notify_created_contract_class_log(contract_address, log_to_emit, length, counter);\n        }\n\n        self.contract_class_logs_hashes.push(LogHash { value: log_hash, length: length }.count(\n            counter,\n        ));\n    }\n\n    /// Calls a private function on another contract (or the same contract).\n    ///\n    /// Very low-level function.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the called function\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    /// This enables contracts to interact with each other while maintaining\n    /// privacy. This \"composability\" of private contract functions is a key\n    /// feature of the Aztec network.\n    ///\n    /// If a user's transaction includes multiple private function calls, then\n    /// by the design of Aztec, the following information will remain private[1]:\n    /// - The function selectors and contract addresses of all private function\n    ///   calls will remain private, so an observer of the public mempool will\n    ///   not be able to look at a tx and deduce which private functions have\n    ///   been executed.\n    /// - The arguments and return values of all private function calls will\n    ///   remain private.\n    /// - The person who initiated the tx will remain private.\n    /// - The notes and nullifiers and private logs that are emitted by all\n    ///   private function calls will (if designed well) not leak any user\n    ///   secrets, nor leak which functions have been executed.\n    ///\n    /// [1] Caveats: Some of these privacy guarantees depend on how app\n    /// developers design their smart contracts. Some actions _can_ leak\n    /// information, such as:\n    /// - Calling an internal public function.\n    /// - Calling a public function and not setting msg_sender to Option::none\n    ///   (feature not built yet - see github).\n    /// - Calling any public function will always leak details about the nature\n    ///   of the transaction, so devs should be careful in their contract\n    ///   designs. If it can be done in a private function, then that will give\n    ///   the best privacy.\n    /// - Not padding the side-effects of a tx to some standardised, uniform\n    ///   size. The kernel circuits can take hints to pad side-effects, so a\n    ///   wallet should be able to request for a particular amount of padding.\n    ///   Wallets should ideally agree on some standard.\n    ///   - Padding should include:\n    ///     - Padding the lengths of note & nullifier arrays\n    ///     - Padding private logs with random fields, up to some standardised\n    ///       size.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Advanced\n    /// * The call is added to the private call stack and executed by kernel\n    ///   circuits after this function completes\n    /// * The called function can modify its own contract's private state\n    /// * Side effects from the called function are included in this transaction\n    /// * The call inherits the current transaction's context and gas limits\n    ///\n    pub fn call_private_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    /// Makes a read-only call to a private function on another contract.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// See `call_private_function` for more general info on private function\n    /// calls.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the called function\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn static_call_private_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    /// Calls a private function that takes no arguments.\n    ///\n    /// This is a convenience function for calling private functions that don't\n    /// require any input parameters. It's equivalent to `call_private_function`\n    /// but slightly more efficient to use when no arguments are needed.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    /// Makes a read-only call to a private function which takes no arguments.\n    ///\n    /// This combines the optimisation of `call_private_function_no_args` with\n    /// the safety of `static_call_private_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    /// Low-level private function call.\n    ///\n    /// This is the underlying implementation used by all other private function\n    /// call methods. Instead of taking raw arguments, it accepts a\n    /// hash of the arguments.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args_hash` - Pre-computed hash of the function arguments\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values\n    ///\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1; // TODO: call `next_counter` instead, for consistency\n        ReturnsHash::new(returns_hash)\n    }\n\n    /// Enqueues a call to a public function to be executed later.\n    ///\n    /// Unlike private functions which execute immediately on the user's device,\n    /// public function calls are \"enqueued\" and executed some time later by a\n    /// block proposer.\n    ///\n    /// This means a public function cannot return any values back to a private\n    /// function, because by the time the public function is being executed,\n    /// the private function which called it has already completed execution.\n    /// (In fact, the private function has been executed and proven, along with\n    /// all other private function calls of the user's tx. A single proof of the\n    /// tx has been submitted to the Aztec network, and some time later a\n    /// proposer has picked the tx up from the mempool and begun executing all\n    /// of the enqueued public functions).\n    ///\n    /// # Privacy warning\n    /// Enqueueing a public function call is an inherently leaky action.\n    /// Many interesting applications will require some interaction with public\n    /// state, but smart contract developers should try to use public function\n    /// calls sparingly, and carefully.\n    /// _Internal_ public function calls are especially leaky, because they\n    /// completely leak which private contract made the call.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the public function\n    ///\n    pub fn call_public_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Enqueues a read-only call to a public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// See also `call_public_function` for more important information about\n    /// making private -> public function calls.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the public function\n    ///\n    pub fn static_call_public_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    /// Enqueues a call to a public function that takes no arguments.\n    ///\n    /// This is an optimisation for calling public functions that don't\n    /// take any input parameters. It's otherwise equivalent to\n    /// `call_public_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Enqueues a read-only call to a public function with no arguments.\n    ///\n    /// This combines the optimisation of `call_public_function_no_args` with\n    /// the safety of `static_call_public_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    /// Low-level public function call.\n    ///\n    /// This is the underlying implementation used by all other public function\n    /// call methods. Instead of taking raw arguments, it accepts a\n    /// hash of the arguments.\n    ///\n    /// Advanced function: Most developers should use `call_public_function`\n    /// or `static_call_public_function` instead. This function is exposed for\n    /// performance optimization and advanced use cases.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `calldata_hash` - Hash of the function calldata\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    /// Enqueues a public function call, and designates it to be the teardown\n    /// function for this tx. Only one teardown function call can be made by a\n    /// tx.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase ensures the fee payer\n    /// has sufficient balance to pay the proposer their fees.\n    /// The teardown phase is primarily intended to: calculate exactly\n    /// how much the user owes, based on gas consumption, and refund the user\n    /// any change.\n    ///\n    /// Note: in some cases, the cost of refunding the user (i.e. DA costs of\n    /// tx side-effects) might exceed the refund amount. For app logic with\n    /// fairly stable and predictable gas consumption, a material refund amount\n    /// is unlikely. For app logic with unpredictable gas consumption, a\n    /// refund might be important to the user (e.g. if a heft function reverts\n    /// very early). Wallet/FPC/Paymaster developers should be mindful of this.\n    ///\n    pub fn set_public_teardown_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Low-level function to set the public teardown function.\n    ///\n    /// This is the underlying implementation for setting the teardown function\n    /// call that will execute at the end of the transaction. Instead of taking\n    /// raw arguments, it accepts a hash of the arguments.\n    ///\n    /// Advanced function: Most developers should use\n    /// `set_public_teardown_function` instead.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the teardown\n    ///                        function\n    /// * `calldata_hash` - Hash of the function calldata\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    /// Increments the side-effect counter.\n    ///\n    /// Very low-level function.\n    ///\n    /// # Advanced\n    ///\n    /// Every side-effect of a private function is given a \"side-effect counter\",\n    /// based on when it is created. This PrivateContext is in charge of\n    /// assigning the counters.\n    ///\n    /// The reason we have side-effect counters is complicated. Consider this\n    /// illustrative pseudocode of inter-contract function calls:\n    /// ```\n    /// contract A {\n    ///    let x = 5; // pseudocode for storage var x.\n    ///    fn a1 {\n    ///        read x; // value: 5, counter: 1.\n    ///        x = x + 1;\n    ///        write x; // value: 6, counter: 2.\n    ///\n    ///        B.b(); // start_counter: 2, end_counter: 4\n    ///\n    ///        read x; // value: 36, counter: 5.\n    ///        x = x + 1;\n    ///        write x; // value: 37, counter: 6.\n    ///    }\n    ///\n    ///    fn a2 {\n    ///        read x; // value: 6, counter: 3.\n    ///        x = x * x;\n    ///        write x; // value: 36, counter: 4.\n    ///    }\n    /// }\n    ///\n    /// contract B {\n    ///     fn b() {\n    ///         A.a2();\n    ///     }\n    /// }\n    /// ```\n    ///\n    /// Suppose a1 is the first function called. The comments show the execution\n    /// counter of each side-effect, and what the new value of `x` is.\n    ///\n    /// These (private) functions are processed by Aztec's kernel circuits in an\n    /// order that is different from execution order:\n    /// All of A.a1 is proven before B.b is proven, before A.a2 is proven.\n    /// So when we're in the 2nd execution frame of A.a1 (after the call to\n    /// B.b), the circuit needs to justify why x went from being `6` to `36`.\n    /// But the circuit doesn't know why, and given the order of proving, the\n    /// kernel hasn't _seen_ a value of 36 get written yet.\n    /// The kernel needs to track big arrays of all side-effects of all\n    /// private functions in a tx. Then, as it recurses and processes B.b(), it\n    /// will eventually see a value of 36 get written.\n    ///\n    /// Suppose side-effect counters weren't exposed:\n    /// The kernel would only see this ordering (in order of proof verification):\n    /// [ A.a1.read, A.a1.write, A.a1.read, A.a1.write, A.a2.read, A.a2.write ]\n    /// [         5,          6,        36,         37,         6,         36 ]\n    /// The kernel wouldn't know _when_ B.b() was called within A.a1(), because\n    /// it can't see what's going on within an app circuit. So the kernel\n    /// wouldn't know that the ordering of reads and writes should actually be:\n    /// [ A.a1.read, A.a1.write, A.a2.read, A.a2.write, A.a1.read, A.a1.write ]\n    /// [         5,          6,        6,         36,         36,         37 ]\n    ///\n    /// And so, we introduced side-effect counters: every private function must\n    /// assign side-effect counters alongside every side-effect that it emits,\n    /// and also expose to the kernel the counters that it started and ended\n    /// with.\n    /// This gives the kernel enough information to arrange all side-effects in\n    /// the correct order.\n    /// It can then catch (for example) if a function tries to read state\n    /// before it has been written (e.g. if A.a2() maliciously tried to read\n    /// a value of x=37) (e.g. if A.a1() maliciously tried to read x=6).\n    ///\n    /// If a malicious app contract _lies_ and does not count correctly:\n    /// - It cannot lie about its start and end counters because the kernel\n    ///   will catch this.\n    /// - It _could_ lie about its intermediate counters:\n    ///   - 1. It could not increment its side-effects correctly\n    ///   - 2. It could label its side-effects with counters outside of its\n    ///        start and end counters' range.\n    ///   The kernel will catch 2.\n    ///   The kernel will not catch 1., but this would only cause corruption\n    ///   to the private state of the malicious contract, and not any other\n    ///   contracts (because a contract can only modify its own state). If\n    ///   a \"good\" contract is given _read access_ to a maliciously-counting\n    ///   contract (via an external getter function, or by reading historic\n    ///   state from the archive tree directly), and they then make state\n    ///   changes to their _own_ state accordingly, that could be dangerous.\n    ///   Developers should be mindful not to trust the claimed innards of\n    ///   external contracts unless they have audited/vetted the contracts\n    ///   including vetting the side-effect counter incrementation.\n    ///   This is a similar paradigm to Ethereum smart contract development:\n    ///   you must vet external contracts that your contract relies upon, and\n    ///   you must not make any presumptions about their claimed behaviour.\n    ///   (Hopefully if a contract imports a version of aztec-nr, we will get\n    ///   contract verification tooling that can validate the authenticity\n    ///   of the imported aztec-nr package, and hence infer that the side-\n    ///   effect counting will be correct, without having to re-audit such logic\n    ///   for every contract).\n    ///\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: 0,\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "72": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\n/// # PublicContext\n///\n/// The **main interface** between a #[public] function and the Aztec blockchain.\n///\n/// An instance of the PublicContext is initialized automatically at the outset\n/// of every public function, within the #[public] macro, so you'll never\n/// need to consciously instantiate this yourself.\n///\n/// The instance is always named `context`, and it will always be available\n/// within the body of every #[public] function in your smart contract.\n///\n/// Typical usage for a smart contract developer will be to call getter\n/// methods of the PublicContext.\n///\n/// _Pushing_ data and requests to the context is mostly handled within\n/// aztec-nr's own functions, so typically a smart contract developer won't\n/// need to call any setter methods directly.\n///\n/// ## Responsibilities\n/// - Exposes contextual data to a public function:\n///   - Data relating to how this public function was called:\n///     - msg_sender, this_address\n///   - Data relating to the current blockchain state:\n///     - timestamp, block_number, chain_id, version\n///   - Gas and fee information\n/// - Provides state access:\n///   - Read/write public storage (key-value mapping)\n///   - Check existence of notes and nullifiers\n///     (Some patterns use notes & nullifiers to store public (not private)\n///     information)\n///   - Enables consumption of L1->L2 messages.\n/// - Enables calls to other public smart contract functions:\n/// - Writes data to the blockchain:\n///   - Updates to public state variables\n///   - New public logs (for events)\n///   - New L2->L1 messages\n///   - New notes & nullifiers\n///     (E.g. pushing public info to notes/nullifiers, or for completing\n///     \"partial notes\")\n///\n/// ## Key Differences from Private Execution\n///\n/// Unlike private functions -- which are executed on the user's device and which\n/// can only reference historic state -- public functions are executed by a block\n/// proposer and are executed \"live\" on the _current_ tip of the chain.\n/// This means public functions can:\n/// - Read and write _current_ public state\n/// - Immediately see the effects of earlier transactions in the same block\n///\n/// Also, public functions are executed within a zkVM (the \"AVM\"), so that they\n/// can _revert_ whilst still ensuring payment to the proposer and prover.\n/// (Private functions cannot revert: they either succeed, or they cannot be\n/// included).\n///\n/// ## Optimising Public Functions\n///\n/// Using the AVM to execute public functions means they compile down to \"AVM\n/// bytecode\" instead of the ACIR that private functions (standalone circuits)\n/// compile to. Therefore the approach to optimising a public function is\n/// fundamentally different from optimising a public function.\n///\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl Eq for PublicContext {\n    fn eq(self, other: Self) -> bool {\n        (self.args_hash == other.args_hash)\n        // Can't compare the function compute_args_hash\n    }\n}\n\nimpl PublicContext {\n    /// Creates a new PublicContext instance.\n    ///\n    /// Low-level function: This is called automatically by the #[public]\n    /// macro, so you shouldn't need to be called directly by smart contract\n    /// developers.\n    ///\n    /// # Arguments\n    /// * `compute_args_hash` - Function to compute the args_hash\n    ///\n    /// # Returns\n    /// * A new PublicContext instance\n    ///\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    /// Emits a _public_ log that will be visible onchain to everyone.\n    ///\n    /// # Arguments\n    /// * `log` - The data to log, must implement Serialize trait\n    ///\n    pub fn emit_public_log<T>(_self: &mut Self, log: T)\n    where\n        T: Serialize,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    /// Checks if a given note hash exists in the note hash tree at a particular\n    /// leaf_index.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The note hash to check for existence\n    /// * `leaf_index` - The index where the note hash should be located\n    ///\n    /// # Returns\n    /// * `bool` - True if the note hash exists at the specified index\n    ///\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: u64) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    /// Checks if a specific L1-to-L2 message exists in the L1-to-L2 message\n    /// tree at a particular leaf index.\n    ///\n    /// Common use cases include token bridging, cross-chain governance, and\n    /// triggering L2 actions based on L1 events.\n    ///\n    /// This function should be called before attempting to consume an L1-to-L2\n    /// message.\n    ///\n    /// # Arguments\n    /// * `msg_hash` - Hash of the L1-to-L2 message to check\n    /// * `msg_leaf_index` - The index where the message should be located\n    ///\n    /// # Returns\n    /// * `bool` - True if the message exists at the specified index\n    ///\n    /// # Advanced\n    /// * Uses the AVM l1_to_l2_msg_exists opcode for tree lookup\n    /// * Messages are copied from L1 Inbox to L2 by block proposers\n    ///\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        // TODO(alvaro): Make l1l2msg leaf index a u64 upstream\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index as u64) } == 1\n    }\n\n    /// Checks if a specific nullifier has been emitted by a given contract.\n    ///\n    /// Whilst nullifiers are primarily intended as a _privacy-preserving_\n    /// record of a one-time action, they can also be used to efficiently\n    /// record _public_ one-time actions too. An example is to check\n    /// whether a contract has been published: we emit a nullifier that is\n    /// deterministic, but whose preimage is _not_ private. This is more\n    /// efficient than using mutable storage, and can be done directly\n    /// from a private function.\n    ///\n    /// Nullifiers can be tested for non-existence in public, which is not the\n    /// case in private. Because private functions do not have access to\n    /// the tip of the blockchain (but only the anchor block they are built\n    /// at) they can only prove nullifier non-existence in the past. But between\n    /// an anchor block and the block in which a tx is included, the nullifier\n    /// might have been inserted into the nullifier tree by some other\n    /// transaction.\n    /// Public functions _do_ have access to the tip of the state, and so\n    /// this pattern is safe.\n    ///\n    /// # Arguments\n    /// * `unsiloed_nullifier` - The raw nullifier value (before siloing with\n    ///                          the contract address that emitted it).\n    /// * `address` - The claimed contract address that emitted the nullifier\n    ///\n    /// # Returns\n    /// * `bool` - True if the nullifier has been emitted by the specified contract\n    ///\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    /// Consumes a message sent from Ethereum (L1) to Aztec (L2) -- effectively\n    /// marking it as \"read\".\n    ///\n    /// Use this function if you only want the message to ever be \"referred to\"\n    /// once. Once consumed using this method, the message cannot be consumed\n    /// again, because a nullifier is emitted.\n    /// If your use case wants for the message to be read unlimited times, then\n    /// you can always read any historic message from the L1-to-L2 messages tree,\n    /// using the `l1_to_l2_msg_exists` method. Messages never technically get\n    /// deleted from that tree.\n    ///\n    /// The message will first be inserted into an Aztec \"Inbox\" smart contract\n    /// on L1. It will not be available for consumption immediately. Messages\n    /// get copied-over from the L1 Inbox to L2 by the next Proposer in batches.\n    /// So you will need to wait until the messages are copied before you can\n    /// consume them.\n    ///\n    /// # Arguments\n    /// * `content` - The message content that was sent from L1\n    /// * `secret` - Secret value used for message privacy (if needed)\n    /// * `sender` - Ethereum address that sent the message\n    /// * `leaf_index` - Index of the message in the L1-to-L2 message tree\n    ///\n    /// # Advanced\n    /// * Validates message existence in the L1-to-L2 message tree\n    /// * Prevents double-consumption by emitting a nullifier\n    /// * Message hash is computed from all parameters + chain context\n    /// * Will revert if message doesn't exist or was already consumed\n    ///\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    /// Sends an \"L2 -> L1 message\" from this function (Aztec, L2) to a smart\n    /// contract on Ethereum (L1). L1 contracts which are designed to\n    /// send/receive messages to/from Aztec are called \"Portal Contracts\".\n    ///\n    /// Common use cases include withdrawals, cross-chain asset transfers, and\n    /// triggering L1 actions based on L2 state changes.\n    ///\n    /// The message will be inserted into an Aztec \"Outbox\" contract on L1,\n    /// when this transaction's block is proposed to L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target portal contract. The message will need to be manually\n    /// consumed from the Outbox through a separate Ethereum transaction: a user\n    /// will need to call a function of the portal contract -- a function\n    /// specifically designed to make a call to the Outbox to consume the\n    /// message.\n    /// The message will only be available for consumption once the _epoch_\n    /// proof has been submitted. Given that there are multiple Aztec blocks\n    /// within an epoch, it might take some time for this epoch proof to be\n    /// submitted -- especially if the block was near the start of an epoch.\n    ///\n    /// # Arguments\n    /// * `recipient` - Ethereum address that will receive the message\n    /// * `content` - Message content (32 bytes as a Field element)\n    ///\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    /// Calls a public function on another contract.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - Function to call on the target contract\n    /// * `args` - Arguments to pass to the function\n    /// * `gas_opts` - An optional allocation of gas to the called function.\n    ///\n    /// # Returns\n    /// * `[Field]` - Return data from the called function\n    ///\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    /// Makes a read-only call to a public function on another contract.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Useful for querying data from other contracts safely.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - Function to call on the target contract\n    /// * `args` - Array of arguments to pass to the called function\n    /// * `gas_opts` - An optional allocation of gas to the called function.\n    ///\n    /// # Returns\n    /// * `[Field]` - Return data from the called function\n    ///\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    /// Adds a new note hash to the Aztec blockchain's global Note Hash Tree.\n    ///\n    /// Notes are ordinarily constructed and emitted by _private_ functions, to\n    /// ensure that both the content of the note, and the contract that emitted\n    /// the note, stay private.\n    ///\n    /// There are however some useful patterns whereby a note needs to contain\n    /// _public_ data. The ability to push a new note_hash from a _public_\n    /// function means that notes can be injected with public data immediately\n    /// -- as soon as the public value is known. The slower alternative would\n    /// be to submit a follow-up transaction so that a private function can\n    /// inject the data. Both are possible on Aztec.\n    ///\n    /// Search \"Partial Note\" for a very common pattern which enables a note\n    /// to be \"partially\" populated with some data in a _private_ function, and\n    /// then later \"completed\" with some data in a public function.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The hash of the note to add to the tree\n    ///\n    /// # Advanced\n    /// * The note hash will be siloed with the contract address by the protocol\n    ///\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n\n    /// Adds a new nullifier to the Aztec blockchain's global Nullifier Tree.\n    ///\n    /// Whilst nullifiers are primarily intended as a _privacy-preserving_\n    /// record of a one-time action, they can also be used to efficiently\n    /// record _public_ one-time actions too. Hence why you're seeing this\n    /// function within the PublicContext.\n    /// An example is to check whether a contract has been published: we emit\n    /// a nullifier that is deterministic, but whose preimage is _not_ private.\n    ///\n    /// # Arguments\n    /// * `nullifier` - A unique field element that represents the consumed\n    ///   state\n    ///\n    /// # Advanced\n    /// * Nullifier is immediately added to the global nullifier tree\n    /// * Emitted nullifiers are immediately visible to all\n    ///   subsequent transactions in the same block\n    /// * Automatically siloed with the contract address by the protocol\n    /// * Used for preventing double-spending and ensuring one-time actions\n    ///\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    /// Returns the address of the current contract being executed.\n    ///\n    /// This is equivalent to `address(this)` in Solidity (hence the name).\n    /// Use this to identify the current contract's address, commonly needed for\n    /// access control or when interacting with other contracts.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The contract address of the current function being\n    ///                    executed.\n    ///\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n\n    /// Returns the contract address that initiated this function call.\n    ///\n    /// This is similar to `msg.sender` in Solidity (hence the name).\n    ///\n    /// Important Note: Since Aztec doesn't have a concept of an EoA (\n    /// Externally-owned Account), the msg_sender is \"undefined\" for the first\n    /// function call of every transaction. A value of `-1` is returned in such\n    /// cases, and is enforced by the protocol's kernel circuits.\n    /// The first function call of a tx is likely to be a call to the user's\n    /// account contract, so this quirk will most often be handled by account\n    /// contract developers.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The address of the account or contract that called\n    ///   this function\n    ///\n    /// # Examples\n    /// ```rust\n    /// #[aztec(public)]\n    /// fn transfer(context: &mut PublicContext, to: AztecAddress, amount: u64) {\n    ///     let sender = context.msg_sender();\n    ///     // Only the sender can transfer their own tokens\n    ///     assert(sender == get_token_owner(), \"Unauthorized\");\n    /// }\n    /// ```\n    ///\n    /// # Advanced\n    /// * Value is provided by the AVM sender opcode\n    /// * In nested calls, this is the immediate caller, not the original\n    ///   transaction sender\n    /// * Globally visible unlike private execution where it's contract-local\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n\n    /// Returns the function selector of the currently-executing function.\n    ///\n    /// This is similar to `msg.sig` in Solidity, returning the first 4\n    /// bytes of the function signature.\n    ///\n    /// # Returns\n    /// * `FunctionSelector` - The 4-byte function identifier\n    ///\n    /// # Advanced\n    /// * Extracted from the first element of calldata\n    /// * Used internally for function dispatch in the AVM\n    ///\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n\n    /// Returns the hash of the arguments passed to the current function.\n    ///\n    /// Very low-level function: The #[public] macro uses this internally.\n    /// Smart contract developers typically won't need to access this\n    /// directly as arguments are automatically made available.\n    ///\n    /// # Returns\n    /// * `Field` - Hash of the function arguments\n    ///\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n\n    /// Returns the \"transaction fee\" for the current transaction.\n    /// This is the final tx fee that will be deducted from the fee_payer's\n    /// \"fee-juice\" balance (in the protocol's Base Rollup circuit).\n    ///\n    /// # Returns\n    /// * `Field` - The actual, final cost of the transaction, taking into account:\n    ///             the actual gas used during the setup and app-logic phases,\n    ///             and the fixed amount of gas that's been allocated by the user\n    ///             for the teardown phase.\n    ///             I.e. effectiveL2FeePerGas * l2GasUsed + effectiveDAFeePerGas * daGasUsed\n    ///\n    /// This will return `0` during the \"setup\" and \"app-logic\" phases of\n    /// tx execution (because the final tx fee is not known at that time).\n    /// This will only return a nonzero value during the \"teardown\" phase of\n    /// execution, where the final tx fee can actually be computed.\n    ///\n    /// Regardless of _when_ this function is called during the teardown phase,\n    /// it will always return the same final tx fee value. The teardown phase\n    /// does not consume a variable amount of gas: it always consumes a\n    /// pre-allocated amount of gas, as specified by the user when they generate\n    /// their tx.\n    ///\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    /// Returns the chain ID of the current network.\n    ///\n    /// This is similar to `block.chainid` in Solidity. Returns the unique\n    /// identifier for the blockchain network this transaction is executing on.\n    ///\n    /// Helps prevent cross-chain replay attacks. Useful if implementing\n    /// multi-chain contract logic.\n    ///\n    /// # Returns\n    /// * `Field` - The chain ID as a field element\n    ///\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n\n    /// Returns the Aztec protocol version that this transaction is executing\n    /// under. Different versions may have different rules, opcodes, or\n    /// cryptographic primitives.\n    ///\n    /// This is similar to how Ethereum has different EVM versions.\n    ///\n    /// Useful for forward/backward compatibility checks\n    ///\n    /// Not to be confused with contract versions; this is the protocol version.\n    ///\n    /// # Returns\n    /// * `Field` - The protocol version as a field element\n    ///\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    /// Returns the current block number.\n    ///\n    /// This is similar to `block.number` in Solidity.\n    ///\n    /// Note: the current block number is only available within a public function\n    /// (as opposed to a private function).\n    ///\n    /// Note: the time intervals between blocks should not be relied upon as\n    /// being consistent:\n    /// - Timestamps of blocks fall within a range, rather than at exact regular\n    ///   intervals.\n    /// - Slots can be missed.\n    /// - Protocol upgrades can completely change the intervals between blocks\n    ///   (and indeed the current roadmap plans to reduce the time between\n    ///   blocks, eventually).\n    /// Use `context.timestamp()` for more-reliable time-based logic.\n    ///\n    /// # Returns\n    /// * `u32` - The current block number\n    ///\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n\n    /// Returns the timestamp of the current block.\n    ///\n    /// This is similar to `block.timestamp` in Solidity.\n    ///\n    /// All functions of all transactions in a block share the exact same\n    /// timestamp (even though technically each transaction is executed\n    /// one-after-the-other).\n    ///\n    /// Important note: Timestamps of Aztec blocks are not at reliably-fixed\n    /// intervals. The proposer of the block has some flexibility to choose a\n    /// timestamp which is in a valid _range_: Obviously the timestamp of this\n    /// block must be strictly greater than that of the previous block, and must\n    /// must be less than the timestamp of whichever ethereum block the aztec\n    /// block is proposed to. Furthermore, if the timestamp is not deemed close\n    /// enough to the actual current time, the committee of validators will not\n    /// attest to the block.\n    ///\n    /// # Returns\n    /// * `u64` - Unix timestamp in seconds\n    ///\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n\n    /// Returns the fee per unit of L2 gas for this transaction (aka the \"L2 gas\n    /// price\"), as chosen by the user.\n    ///\n    /// L2 gas covers the cost of executing public functions and handling\n    /// side-effects within the AVM.\n    ///\n    /// # Returns\n    /// * `u128` - Fee per unit of L2 gas\n    ///\n    /// Wallet developers should be mindful that the choice of gas price (which\n    /// is publicly visible) can leak information about the user, e.g.:\n    /// - which wallet software the user is using;\n    /// - the amount of time which has elapsed from the time the user's wallet\n    ///   chose a gas price (at the going rate), to the time of tx submission.\n    ///   This can give clues about the proving time, and hence the nature of\n    ///   the tx.\n    /// - the urgency of the transaction (which is kind of unavoidable, if the\n    ///   tx is indeed urgent).\n    /// - the wealth of the user.\n    /// - the exact user (if the gas price is explicitly chosen by the user to\n    ///   be some unique number like 0.123456789, or their favourite number).\n    /// Wallet devs might wish to consider fuzzing the choice of gas price.\n    ///\n    pub fn base_fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            base_fee_per_l2_gas()\n        }\n    }\n\n    /// Returns the fee per unit of DA (Data Availability) gas (aka the \"DA gas\n    /// price\").\n    ///\n    /// DA gas covers the cost of making transaction data available on L1.\n    ///\n    /// See the warning in `fee_pre_l2_gas` for how gas prices can be leaky.\n    ///\n    /// # Returns\n    /// * `u128` - Fee per unit of DA gas\n    ///\n    pub fn base_fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            base_fee_per_da_gas()\n        }\n    }\n\n    /// Returns the remaining L2 gas available for this transaction.\n    ///\n    /// Different AVM opcodes consume different amounts of gas.\n    ///\n    /// # Returns\n    /// * `u32` - Remaining L2 gas units\n    ///\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n\n    /// Returns the remaining DA (Data Availability) gas available for this\n    /// transaction.\n    ///\n    /// DA gas is consumed when emitting data that needs to be made available\n    /// on L1, such as public logs or state updates.\n    /// All of the side-effects from the private part of the tx also consume\n    /// DA gas before execution of any public functions even begins.\n    ///\n    /// # Returns\n    /// * `u32` - Remaining DA gas units\n    ///\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n\n    /// Checks if the current execution is within a staticcall context, where\n    /// no state changes or logs are allowed to be emitted (by this function\n    /// or any nested function calls).\n    ///\n    /// # Returns\n    /// * `bool` - True if in staticcall context, false otherwise\n    ///\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    /// Reads raw field values from public storage.\n    /// Reads N consecutive storage slots starting from the given slot.\n    ///\n    /// Very low-level function. Users should typically use the public state\n    /// variable abstractions to perform reads: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The starting storage slot to read from\n    ///\n    /// # Returns\n    /// * `[Field; N]` - Array of N field values from consecutive storage slots\n    ///\n    /// # Generic Parameters\n    /// * `N` - the number of consecutive slots to return, starting from the\n    ///         `storage_slot`.\n    ///\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    /// Reads a typed value from public storage.\n    ///\n    /// Low-level function. Users should typically use the public state\n    /// variable abstractions to perform reads: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The storage slot to read from\n    ///\n    /// # Returns\n    /// * `T` - The deserialized value from storage\n    ///\n    /// # Generic Parameters\n    /// * `T` - The type that the caller expects to read from the `storage_slot`.\n    ///\n    pub fn storage_read<T>(self, storage_slot: Field) -> T\n    where\n        T: Packable,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    /// Writes raw field values to public storage.\n    /// Writes to N consecutive storage slots starting from the given slot.\n    ///\n    /// Very low-level function. Users should typically use the public state\n    /// variable abstractions to perform writes: PublicMutable & PublicImmutable.\n    ///\n    /// Public storage writes take effect immediately.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The starting storage slot to write to\n    /// * `values` - Array of N Fields to write to storage\n    ///\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    /// Writes a typed value to public storage.\n    ///\n    /// Low-level function. Users should typically use the public state\n    /// variable abstractions to perform writes: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The storage slot to write to\n    /// * `value` - The typed value to write to storage\n    ///\n    /// # Generic Parameters\n    /// * `T` - The type to write to storage.\n    ///\n    pub fn storage_write<T>(self, storage_slot: Field, value: T)\n    where\n        T: Packable,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// TODO: consider putting this oracle code in its own file.\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn base_fee_per_l2_gas() -> u128 {\n    base_fee_per_l2_gas_opcode()\n}\nunconstrained fn base_fee_per_da_gas() -> u128 {\n    base_fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> u1 {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: u64) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: u64) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\n\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// TODO: consider putting this oracle code in its own file.\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeBaseFeePerL2Gas)]\nunconstrained fn base_fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeBaseFeePerDaGas)]\nunconstrained fn base_fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> u1 {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: u64) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: u64) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "74": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T>(self, storage_slot: Field) -> T\n    where\n        T: Packable,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "75": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/event/event_interface.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext},\n    event::event_selector::EventSelector,\n    messages::{\n        logs::{event::to_encrypted_private_event_message, utils::prefix_with_tag},\n        offchain_messages::emit_offchain_message,\n    },\n    utils::remove_constraints::remove_constraints_if,\n};\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT,\n    hash::poseidon2_hash_with_separator,\n    traits::{Serialize, ToField},\n};\n\n/// Specifies the configuration parameters for message delivery. There are two fundamental aspects to consider:\n///\n/// +----------------------------------------------------------------------------------------------------------+\n/// | 1. Delivery Mechanism                                                                                    |\n/// | - Messages can be delivered either on-chain or out-of-band                                               |\n/// | - On-chain delivery uses the Aztec protocol's private log stream, submitted to L1 blobs and consuming DA |\n/// | - Out-of-band delivery is implemented by the application (e.g. storing ciphertexts in cloud storage)     |\n/// | - Out-of-band delivery cannot have any cryptographic constraints since messages are never stored on-chain|\n/// +----------------------------------------------------------------------------------------------------------+\n///\n/// For on-chain delivery, we must also consider:\n///\n/// +----------------------------------------------------------------------------------------------------------+\n/// | 2. Message Encryption and Tagging                                                                        |\n/// | - Messages can use either constrained or unconstrained encryption                                        |\n/// | - Constrained encryption guarantees the ciphertext is formed correctly but costs more in constraints,    |\n/// |   which results in slower proving times                                                                  |\n/// | - Unconstrained encryption trusts the sender but is cheaper constraint-wise and hence faster to prove    |\n/// | - Tagging is an indexing mechanism that helps recipients locate their messages                           |\n/// | - If tagging is not performed correctly by the sender, the recipient will not be able to find the message|\n/// +----------------------------------------------------------------------------------------------------------+\n///\n/// For off-chain delivery, constrained encryption is not relevant since it doesn't provide any additional guarantees\n/// over unconstrained encryption and is slower to prove (requiring more constraints).\n///\n/// There are three available delivery modes described below.\npub struct MessageDeliveryEnum {\n    /// 1. Constrained On-chain\n    /// - Uses constrained encryption and in the future constrained tagging (issue #14565) with on-chain delivery\n    /// - Provides cryptographic guarantees that recipients can discover and decrypt messages (once #14565 is tackled)\n    /// - Slowest proving times since encryption is constrained\n    /// - Expensive since it consumes L1 blob space\n    /// - Use when smart contracts need to make decisions based on message contents\n    /// - Example 1: An escrow contract facilitating a private NFT sale that needs to verify payment before releasing\n    ///   the NFT to the buyer.\n    /// - Example 2: An application with private configuration where changes must be broadcast to all participants.\n    ///   This ensures every user can access the latest configuration. Without notification of config changes,\n    ///   users would be unable to read updated variables and therefore blocked from using the application's\n    ///   functions. This pattern applies to all critical events that require universal broadcast.\n    ///\n    /// Safety: Despite being called CONSTRAINED_ONCHAIN, this delivery mode is currently NOT fully constrained.\n    /// The tag prefixing is unconstrained, meaning a malicious sender could manipulate the tag to prevent\n    /// recipient decryption. TODO(#14565): Implement proper constrained tag prefixing.\n    pub CONSTRAINED_ONCHAIN: u8,\n\n    /// 2. Unconstrained On-chain\n    /// - Uses unconstrained encryption and tagging with on-chain delivery\n    /// - Faster proving times since no constraints are used for encryption\n    /// - Expensive since it consumes L1 blob space\n    /// - Suitable when recipients can verify message validity through other means\n    /// - Use this if you don't need the cryptographic guarantees of constrained encryption and tagging but\n    ///   don't want to deal with setting up out-of-band delivery infrastructure as required by mode 3\n    /// - Example: Depositing a privately-held NFT into an NFT-sale escrow contract. The buyers know the escrow\n    ///   contract's decryption keys, they receive the message on-chain and are willing to buy the NFT only if the NFT\n    ///   contained in the message is legitimate.\n    pub UNCONSTRAINED_ONCHAIN: u8,\n\n    /// 3. Out-of-band\n    /// - Uses unconstrained encryption with off-chain delivery\n    /// - Lowest cost since no on-chain storage is needed and short proving times since no constraints are used\n    ///   for encryption\n    /// - Suitable when recipients can verify message validity through other means\n    /// - Requires setting up custom infrastructure for handling off-chain delivery (e.g. cloud storage)\n    /// - Example: A payment app where a merchant receives the message off-chain and is willing to release the goods\n    ///   once he verifies that the payment is correct (i.e. can decrypt the message and verify that it contains\n    ///   a legitimate token note - note with note commitment in the note hash tree).\n    pub UNCONSTRAINED_OFFCHAIN: u8,\n}\n\npub global MessageDelivery: MessageDeliveryEnum = MessageDeliveryEnum {\n    CONSTRAINED_ONCHAIN: 1,\n    UNCONSTRAINED_ONCHAIN: 2,\n    UNCONSTRAINED_OFFCHAIN: 3,\n};\n\n/// Emits an event that can be delivered either via private logs or offchain messages, with configurable encryption and\n/// tagging constraints.\n///\n/// # Arguments\n/// * `event` - The event to emit\n/// * `context` - The private context to emit the event in\n/// * `recipient` - The address that should receive this event\n/// * `delivery_mode` - Controls encryption, tagging, and delivery constraints. Must be a compile-time constant.\n///   See `MessageDeliveryEnum` for details on the available modes.\npub fn emit_event_in_private<Event>(\n    event: Event,\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    delivery_mode: u8,\n)\nwhere\n    Event: EventInterface + Serialize,\n{\n    // This function relies on `delivery_mode` being a constant in order to reduce circuit constraints when unconstrained\n    // usage is requested. If `delivery_mode` were a runtime value then performance would suffer.\n    assert_constant(delivery_mode);\n\n    // The following maps out the 3 dimensions across which we configure message delivery.\n    let constrained_encryption = delivery_mode == MessageDelivery.CONSTRAINED_ONCHAIN;\n    let emit_as_offchain_message = delivery_mode == MessageDelivery.UNCONSTRAINED_OFFCHAIN;\n    // TODO(#14565): Add constrained tagging\n    let _constrained_tagging = delivery_mode == MessageDelivery.CONSTRAINED_ONCHAIN;\n\n    let (ciphertext, randomness) = remove_constraints_if(\n        !constrained_encryption,\n        || to_encrypted_private_event_message(event, recipient),\n    );\n\n    // We generate a cryptographic commitment to the event to ensure its authenticity during out-of-band delivery.\n    // The nullifier tree is chosen over the note hash tree for this purpose since it provides a simpler mechanism\n    // - nullifiers require no nonce, and events, being non-spendable, don't need the guarantee that a \"spending\"\n    // nullifier can be computed.\n    // TODO(#11571): with decryption happening in Noir we can now use the Packable trait instead.\n    let serialized_event_with_randomness = [randomness].concat(event.serialize());\n    let event_commitment = poseidon2_hash_with_separator(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n    context.push_nullifier(event_commitment);\n\n    if emit_as_offchain_message {\n        emit_offchain_message(ciphertext, recipient);\n    } else {\n        // Safety: Currently unsafe. See description of CONSTRAINED_ONCHAIN in MessageDeliveryEnum.\n        // TODO(#14565): Implement proper constrained tag prefixing to make this truly CONSTRAINED_ONCHAIN\n        let log_content = prefix_with_tag(ciphertext, recipient);\n\n        context.emit_private_log(log_content, log_content.len());\n    }\n}\n\npub fn emit_event_in_public<Event>(event: Event, context: &mut PublicContext)\nwhere\n    Event: EventInterface + Serialize,\n{\n    let mut log_content = [0; <Event as Serialize>::N + 1];\n\n    let serialized_event = event.serialize();\n    for i in 0..serialized_event.len() {\n        log_content[i] = serialized_event[i];\n    }\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    log_content[serialized_event.len()] = Event::get_event_type_id().to_field();\n\n    context.emit_public_log(log_content);\n}\n\npub trait EventInterface {\n    fn get_event_type_id() -> EventSelector;\n}\n"
    },
    "76": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "78": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "95": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n\nmod test {\n    use super::get_public_keys;\n\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use protocol_types::traits::Serialize;\n    use std::test::OracleMock;\n\n    global KEY_ORACLE_RESPONSE_LENGTH: u32 = 13; // 12 fields for the keys, one field for the partial address\n\n    #[test(should_fail_with = \"Invalid public keys hint for address\")]\n    unconstrained fn get_public_keys_fails_with_bad_hint() {\n        let mut env = TestEnvironment::new();\n        let account = env.create_light_account();\n\n        // Instead of querying for some unknown account, which would result in the oracle erroring out, we mock a bad oracle\n        // response to check that the circuit properly checks the address derivation.\n        let mut random_keys_and_partial_address = [0; KEY_ORACLE_RESPONSE_LENGTH];\n        // We use randomly generated points on the curve, and a random partial address to ensure that\n        // this combination does not derive the address and we should see the assertion fail.\n        // npk_m\n        random_keys_and_partial_address[0] =\n            0x292364b852c6c6f01472951e76a39cbcf074591fd0e063a81965e7b51ad868a5;\n        random_keys_and_partial_address[1] =\n            0x0a687b46cdc9238f1c311f126aaaa4acbd7a737bff2efd7aeabdb8d805843a27;\n        random_keys_and_partial_address[2] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // ivpk_m\n        random_keys_and_partial_address[3] =\n            0x173c5229a00c5425255680dd6edc27e278c48883991f348fe6985de43b4ec25f;\n        random_keys_and_partial_address[4] =\n            0x1698608e23b5f6c2f43c49a559108bb64e2247b8fc2da842296a416817f40b7f;\n        random_keys_and_partial_address[5] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // ovpk_m\n        random_keys_and_partial_address[6] =\n            0x1bad2f7d1ad960a1bd0fe4d2c8d17f5ab4a86ef8b103e0a9e7f67ec0d3b4795e;\n        random_keys_and_partial_address[7] =\n            0x206db87110abbecc9fbaef2c865189d94ef2c106202f734ee4eba9257fd28bf1;\n        random_keys_and_partial_address[8] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // tpk_m\n        random_keys_and_partial_address[9] =\n            0x05e3bd9cfe6b47daa139613619cf7d7fd8bb0112b6f2908caa6d9b536ed948ed;\n        random_keys_and_partial_address[10] =\n            0x051066f877c9df47552d02e7dc32127ff4edefc8498e813bca1cbd3f5d1be429;\n        random_keys_and_partial_address[11] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // partial address\n        random_keys_and_partial_address[12] =\n            0x236703e2cb00a182e024e98e9f759231b556d25ff19f98896cebb69e9e678cc9;\n\n        let _ = OracleMock::mock(\"utilityGetPublicKeysAndPartialAddress\").returns(\n            random_keys_and_partial_address.serialize(),\n        );\n        let _ = get_public_keys(account);\n    }\n}\n"
    },
    "99": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::macros::{\n    dispatch::generate_public_dispatch,\n    functions::{stub_registry, utils::check_each_fn_macroified},\n    notes::NOTES,\n    storage::STORAGE_LAYOUT_NAME,\n    utils::{get_trait_impl_method, module_has_storage},\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    // We generate `_compute_note_hash_and_nullifier`, `sync_private_state` and `process_message`\n    // functions only if they are not already implemented. If they are implemented we just insert empty\n    // quotes.\n    let contract_library_method_compute_note_hash_and_nullifier = if !m.functions().any(|f| {\n        f.name() == quote { _compute_note_hash_and_nullifier }\n    }) {\n        generate_contract_library_method_compute_note_hash_and_nullifier()\n    } else {\n        quote {}\n    };\n    let sync_private_state = if !m.functions().any(|f| f.name() == quote { sync_private_state }) {\n        generate_sync_private_state()\n    } else {\n        quote {}\n    };\n    let process_message = if !m.functions().any(|f| f.name() == quote { process_message }) {\n        generate_process_message()\n    } else {\n        quote {}\n    };\n    let public_dispatch = generate_public_dispatch(m);\n\n    quote {\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    if NOTES.len() > 0 {\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..NOTES.len() {\n            let typ = NOTES.get(i);\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret its raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = <$typ as $crate::protocol_types::traits::Packable>::N;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    }
  }
}
