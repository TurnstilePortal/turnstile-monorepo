{
  "transpiled": true,
  "noir_version": "1.0.0-beta.2+3278f71a05090dbd",
  "name": "ShieldGateway",
  "functions": [
    {
      "name": "compute_note_hash_and_optionally_a_nullifier",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5972837590977953198": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 36
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "storage_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_type_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "compute_nullifier",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "packed_note_content",
            "type": {
              "kind": "array",
              "length": 3,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "compute_note_hash_and_optionally_a_nullifier"
      ]
    },
    {
      "name": "channel_exists",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10775636126596421126": {
            "error_kind": "string",
            "string": "Function _log_channel_creation can only be called internally"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16541607464495309456": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 16
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "1775037338128445371": {
            "error_kind": "string",
            "string": "Deserialized value is too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "3238985437272151328": {
            "error_kind": "string",
            "string": "Function get_channel_threshold can only be called statically"
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7136678259008445534": {
            "error_kind": "string",
            "string": "Function _log_channel_threshold_exceeded can only be called internally"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "initialize_channel",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "1775037338128445371": {
            "error_kind": "string",
            "string": "Deserialized value is too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "set_default_channel_threshold",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "new_threshold",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_default_channel_threshold"
      ]
    },
    {
      "name": "set_channel_threshold",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "1775037338128445371": {
            "error_kind": "string",
            "string": "Deserialized value is too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "new_threshold",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_channel_threshold"
      ]
    },
    {
      "name": "get_channel_balance",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "14217640468024275109": {
            "error_kind": "string",
            "string": "Function get_channel_balance can only be called statically"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "1775037338128445371": {
            "error_kind": "string",
            "string": "Deserialized value is too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_default_channel_threshold",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "H4sIAAAAAAAA/9VYTW/TQBBd56Oxk5hW5Y/YiUPiW6BcuHDgwA2hTWy3FbSRkiCuESeQkJCQ+L9kYad5mUwc09gFRop2vTv75u3M7HgdR23EsW1DbYujCoiTM/bDtp5tazBfX//G9jk4TkKP2S0TfxREA0/YX4n8+57FdKrBDwi/Iv8HLYvzfLXBx72QXXf960L/ke37Oeur5L6ObeQBZtn4awkf7+FPezNysarGdsf6eWLxuuDzy3T57P1s+u7lh5tJOsdTzNkqgTmKQT3foF7MbpdzPV0+TZJ5uljsQzhUXAxqG1Cv9PXti4SjNe6H9jqdL65ntxytWRCtbnVOQL8G85RTLRgb2zY4Tu7y1S0fu+9bbI/5BffUhvESczVymD3yM46h/TbjWvbZcZg94sP9Q3E3Gdax/cVyNteX6atUJ0gd4aSt8bQjHXwv80PI0wzTkp5dASdPTtXuUfUYzzrjycfILWdKDpNSm5SqqPQGxLUlcJVCSPquoN8S+JOfsAy4BbDybEvphhj0qjgVeNFaT+BSol97xLXzh3vrCvod0CG+p2q31NBaX+36hJeoikpC4RJF9tuq0jjclShP8Cv6p8Z81xG4nglzmNf74t0R7EhYrRKxeJ7zszm2z8FxMvEFXiQ01wXbLpvzGS/qc+GXKtyTwbwCXK7H+WDMkNu+PMF3BT+veedbqoMYB1rrCbz+ZoyQIxcpDsTbxOET4HI9xfZbUQ0qLSeN4GdHEV944Iv/JSex9vKcrOjece8YFY0DjRXNSelzhV/j+R2Ox0HC4P7jd8MmjNcE3CbTf2tbM/8G9kW4tN4FPZ2j1xL0TEwoXxqrbf5jOx4cIcPR73vnL5+ttv3ApQHzqH9pnzFG1DaO4JkNdZj1daYHOkmiqT5n+EZq4Cf864DHVqnd2BrBmkJ8jZwoORcwV1D/xraGwxfb95hOyee2T5ybwKm+xyby4e/2kvgE3IfIoVnAhwvw4dd/wIcY9wbjTPofgfM30Mc1Sm3XGxL+rmgK+rhv0pe+d2mtL9ihfsV/q/YcZk8p+XuD7LfVbg2s4nujJvhVioOf4/Mztf9c8doj5Y9058LaNLZtmB0nivFsqeI17LNtzV6+w97KruvRQA+nehiGcRSmUTg4VNfLtq+HaRw96fem/SzWo2D00PbTUZwEcZbqMAx7SZA+tP2BDnprv08mgzDVcZwdsv8TEbPIOnwbAAA=",
      "debug_symbols": "7Z3dbqNADIXfhetczI/H4+mrrFZV2qZVpCip0nSlVZV3X8gyQAICMSBAZm6qUvkk9ucQHbsJ/CRvu5fvj+f98f30lTz9+kkOp9ftZX86pkc/103yct4fDvuP5+qfE5H9kOYW//W5PWaHX5ft+ZI8SUS1SXbHt+xXq9JHeN8fdskT6uumFkzC5LGkdBFK1BBqlA81RhShEvT19yaRODwVgz4VS+2pgHZ5KCDVUrGDU3FC57FO2vZUsACICmup0PBUQPpUDHSkQiIPtaLeINeUigINuUYBmY4Gae1zIUBZPoOFhmgJ1vdTgqugcbYhWkmyPhElOtovHZIPFhrbg63wFVpT9lKapizA+scF5+5iU4JKRIKdBLXzZ6apng45QRkJDiSoIsGBBHUkOJAgRIIDCZpIcCBBjAQHErSR4ECCtFKC6EqC1EVQSV+hVqacdbQSN4ZrnUpGZKjXOpeMyXCtk0kvhlr6XYfW2t0xbEhDWL9EkYIq0dAUTdK/05KGjliUfs+BlfKy2KyTa52Q+HVyrZMav05C7CSTTq51cuXXybVO0Pw6udZJnl8n40aBSyfjXoNJJyFuV7h0Mu54uHQy7njG7yTKopNW1IjHXczUxCESn5h43G1MTTzuIKYmHncFUxOPM/3UxOPsPTFxE2fkqYnHWXZq4nHmnJr40mdOWxLv+u4UOe2Jk0NdSUTeSoX1lLr0KWvEUpc+3oxY6tLnihFLXbqhH7HUpTvp8UrFpVvYEUtdunfsVaqqlAp3pTZYGXD+3xVoROVDwHj7QD8u3eLNBoaVExsTDKwXjIUSjL4DU4+2xfeq6SE2g8jKEc4FkZXXnAsiKxc7F0RW/nguiKyc90wQLStPX6zhnJDu0dNbVp6+vVRWLr29VFa+u71UWE+prPxue6msXGl7qay8Y3uprBwelaUq0WlOWtcBlpVrGxEMsXJiY4Jh5dv6gRnN5xMrRzgXRFZecy6IECEOh8jKH88FkZXzngsiI0/vhCkuJFz9sFXu6YmRp+8qlZFL7yjVjeC7jS6uEG5QdZXqdFGqs/IxHyka39uN9B7ZqMq0mVZ802CAxgZoKEDjOjQgahopAjQyQKMCNDpAAwGaxtcBWv9iRsK6BgM0NkBDARrXX9N8PfEOjQzQNL4OymvQY/US+l6jAzQQoDEBGgzQ2AAN9dc0X0fQFN+SNtXLyrv/EtVfovtLoL/E9JNc06M/2/N++3LY5beueP8+vlbuZHH5+7l7uKnF5/n0unv7Pu+y21tU7myRnRuONlLo2+mVHknAjQRKnyZ9qn8=",
      "brillig_names": [
        "get_default_channel_threshold"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==",
      "debug_symbols": "bY/dCoMwDIXfJde9aCb171VkSNUohdJKrYMhvvvikK37uTnkhC+HnA0G6tapNW70C9TNBtb3Ohrv2G27gC4Ya83UpmuQh2D25JdZu8MuUYcItUIB5AYeKr4ejSWo82wXPyBKWZYnixJRvXBU6i+PRfHmq/yDv+5sbzoY3Vk6Xx9X1ydN4n2mr1Jz8D0Na6CjXtKMtUElLpJjOfoB",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "get_storage_address",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "H4sIAAAAAAAA/7WWS1ODMBDHk5Y+ANGZ+gm86BUsnXKsj4sXDx68Rx61o8IM4L0fXdDNsG4D0w5hZ5hNQvLLP8smgbPGOHiD/TfOjjDe0XYD3gQ/Qu/H1bOButvPPJPMq5MfuP7KVKxPo/6lCUw+DN+V/IHi786A87hv+Hgtct559ZyhsgNlp2P8kNqrb+ubiKmbX5l32aK/NhvicAX1OjbnUN7G5f1nFn48f3+9xTneZTS6TEHGVlMXDfUhS8tchOVdFOVxUVDCSEFmLVQLUd/FLn2K2vScSHuN82KXpZRmHEkbQ58J6o/HmIq2DXi3nwWSPdXP9hxgz0hc8JrmqF1jHt+qMo5+XTy/RbTq3leczCf10PjIfK4zzIZyUWa52MYvsYiwdBo+6mnaqe5NvIVU43BayvpUwemyoa8LrtDZFVrODlO+awtesMOjRo51WPv1YbPmV8LY61/7Ovhb+69+4E+Y+lA10Hvc/xrqFtIvvdFDZ7IWXrIUiViJKPJDsSB8RuL0AwUeyKvgCQAA",
      "debug_symbols": "7ZjBioMwEIbfJWcPSSaZTPoqy1Jsa4sgtli7sBTffc2uUXcVXcit5lJM+Zj+/UbBmSc7ZYfHZZ+X5+ud7d6erLge0zq/lu3p2STsUOVFkV/2468Zdx9CffP3W1q6471Oq5rtBKJMWFae3KWRbYVzXmRsh9AkE5i47liS0KNEM6iWHtWa96hQ0LwnTOjwKBp9FEPLURTYDlVIkygYHMVy6FgrzHIU7AWixEkUEx5FCR9Fq5UoxDvU8GmDaDYKN9LXb681LocBkqajoXU0/AbiDC2U8R0Vyo7kWDNDS0G+tpR85QYQFsnDHHAZNlx5L3roptBzKZTxdZW1v1jn0EaH/3AI1j+devxI/DiUPDoMdiiiw2CHMjoMdgjRYbBDFR0GO9TRYbBDjA6DHZrNOkQ7OKQ1hyD8zAQAw1s2SD4Xgxvo7dGIVnM0Cd8fArXCovDzEo7+nmNdL7c7L71eL7c7t71cL2G78+OL9bJpjx9plaeHIutWnedHeRxtPuvPW/ZnCXqrrsfs9Kgytw4dbULdXQGQALVl29Jf",
      "brillig_names": [
        "get_storage_address"
      ]
    },
    {
      "name": "channel_transfer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "1775037338128445371": {
            "error_kind": "string",
            "string": "Deserialized value is too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7461896932686329849": {
            "error_kind": "string",
            "string": "U253 addition overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "storage_read",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_channel_threshold",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "1775037338128445371": {
            "error_kind": "string",
            "string": "Deserialized value is too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "3238985437272151328": {
            "error_kind": "string",
            "string": "Function get_channel_threshold can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "uint253::uint253::U253"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBIJgAABAMmAgIEASYCAwQAHxgAAwACgEYtCIBGAAEkAAAASyQAAAB/LQQAAYBHJwIAAgSARyYCAwQBOg0AAgADKwCAQwAwZE5y4TGgKbhQRbaBgVhdKDPoSHm5cJFD4fWT8AAAACcAgEQEAAEnAIBFBAADJSQAAASdHgIAAgAeAgADADI4AAIAAwAEJgICAQEjAgAEAAAAqCQAAATGHgIAAwkmAgQAAQo4AwQFIwIABQAAAMQkAAAE2CYCAwAILgwAAwAEKAIAAwBjiCjTJgIGBAImAggEAwA4BggHLAgBBQAQAQcBJgMFBAEAKAUCBywOBgcAKAcCBywOBgcmAgcEAwA4BQcGLAwGBywOAwcAKAcCBywOAQcsDQUBACgBAgEsDgEFLAgBASYCAwQDABABAwEmAwEEAQAoAQIDLAwDBi0KgEMABgAoBgIGLQqAQwAGJgIDBAIAKAECBgAoBQIJLA0JCCYCCgQCADgJCgc5A+UABgAEAAcACAAJIAIAASYCBAQALAgBBgAoBgIKLA0KCCYCCwQCADgKCwchPAAEAAEABywMAQgmAgsEAwA4CAsKABABCgEmAwYEAQAoBgILLA4ICwAoCwILLA4ICywMCAUGKAUCBSwNBgEAKAECASwOAQYjAgAJAAACFyIAAAH7ACgGAggsDQgHJgIJBAIAOAgJATsNAQciAAACFwsoAAWARAABIwIAAQAAAjAmAgcEADsJAQcAKAYCBSwNBQUMOAQFByMCAAcAAAJLJAAABOomAgcEAwA4BgcFADgFBAcsDQcBJgIFBAYsCAAGLAwBBwAQAAUAJAAABPwsBAAAKwIABQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw4AQUGIwIABgAAArAkAAAFPiwIAQIAAAECASwOAQImAgUAAAo4AQUGIwIABgAAAtQiAAAEMh4CAAYFHAwGCAQcDAgHABwMBwYELAgBByYCCAQEABABCAEmAwcEAQAoBwIILAwICSwOBQkAKAkCCSwOBQkAKAkCCSwOBQksCAEFAAABAgEsDgcFJgIHAAQsDAQBIgAAAzUNKAABgEUACCMCAAgAAAQ3IgAAA0osDQUHJgIIBAksCAAJLAwHCiwMBAsAEAAIACQAAAVQLAQAACwMCgUAKAUCCQA4CQQKLA0KCCYCBQQJLAgACSwMCAoAEAAFACQAAAT8LAQAACYCCQQKLAgACiwMBwstCIBEAAwAEAAJACQAAAVQLAQAACwMCwUAKAUCCgA4CgQLLA0LCSYCBAQKLAgACiwMCQsAEAAEACQAAAT8LAQAAAAoBwIFADgFAwosDQoEHAwEBQQcDAUDABwMAwQEDDgGBAMjAgADAAAEICIAAAQXLAwJASIAAAQpLAwIASIAAAQpLA4BAiIAAAQyLA0CASUsDQUIHAwBCQAAOAcJCi4MAAoACSYCCwQDDDgBCwwjAgAMAAAEYiQAAATqLQQACIADJwCABAQABCQAAAXULQiABQAKACgKAgsAOAsBDCwOCQwsDgoFASgAAYBEAAgsDAgBIgAAAzUnAIAEBHgADQAAAIAEgAMjAIADAAAExSkBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFLPMwGCVFFSA7AQECJSkBAAEF6J0J/qERLQ47AQECJSQAAASdHAwBAgArAgADAB//////////////////////////////////////////DjgCAwQjAgAEAAAFPSQAAAZiJSkBAAEFGKIzDfIzb7s7AQECJSQAAASdASgAAoBEAAMOOAIDBCMCAAQAAAVvJAAABnQNMIBFAAMABCYCAwEACjgEAwUjAgAFAAAFjiQAAAaGJgIEBAMMOAIEBSMCAAUAAAWlJAAABOoAKAECBAA4BAIFLA0FAywIAQEmAgIEAgAQAQIBJgMBBAEAKAECAiwMAgQsDgMEJS0BgAOABgsAgAYAAoAHIwCABwAABe8iAAAF+i0AgAOABSIAAAZhLQAAAYAFAQAAAYAEAAEBAIADgASACS0AgAOACi0AgAWACwsAgAqACYAMIwCADAAABk0tAYAKgAgtAoAIgAsBAIAKAAKACgEAgAsAAoALIgAABhwnAYAFBAABAwCABgACgAYiAAAGYSUpAQABBVoC5Bu1HqmfOwEBAiUpAQABBUWnynEZQeQVOwEBAiUpAQABBafpRjLD+agIOwEBAiUtABjKGMo=",
      "debug_symbols": "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",
      "brillig_names": [
        "get_channel_threshold"
      ]
    },
    {
      "name": "_log_channel_threshold_exceeded",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "7136678259008445534": {
            "error_kind": "string",
            "string": "Function _log_channel_threshold_exceeded can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBHJgAABAMmAgQEAyYCBQQAHxgABQAEgEQtCIBEAAEtCIBFAAItCIBGAAMkAAAAUSQAAABSJwIAAQSARyYCAgQAOg0AAQACJSQAAAEbHgIABAAeAgAFADI4AAQABQAGJgIEAQEjAgAGAAAAeyQAAAFEHgIABAEeAgAFAAo4BAUGIwIABgAAAJckAAABVigCAAQAfG2HQyYCBgQEJgIIBAMAOAYIBywIAQUAEAEHASYDBQQBACgFAgcsDgYHACgHAgcsDgYHJgIHBAMAOAUHBiwMBgcsDgEHACgHAgcsDgIHACgHAgcsDgMHACgHAgcsDgQHJgIBBAQAKAUCBCwNBAMmAgYEAgA4BAYCNg0AAgADJScAgAQEeAANAAAAgASAAyMAgAMAAAFDKQEAAQX3ofOvpa3UyjsBAQIlKQEAAQW+Hj//PqT2+jsBAQIlKQEAAQVjCpMQmHOcXjsBAQIlLQAYyhjK",
      "debug_symbols": "7VnBbsIwDP2XnHtInNhx+JVpmgqUqVJVUIFJE+LflyKaFahWbet2wFxQg15iv/dcyY0PalnM968vZb1ab9Xs6aCq9SLfles6rg7HTM2bsqrK15f+30q3P+xP+O0mr9vldpc3OzUzRJCpol62jx7iCauyKtSM7DG7BWuNHVgDJrAxfgDtnPNntHNICc00AGabjmYLpg9+zlSACXLnBI7J/2PuU+juTNKdxnQ3SAlNLeKr3IMNHTg4665yNxonTT6ed5F8G8Lovw/Bfx4C7K9DOIIuRHwMYzXnIdUc+2vf4PeMJ3wFjP2uOqdN/INNjn6wCc3QJga2iZMdqw9E10VAGgGz7ozm3vtpGAewyHzGkjEjWKbOsaBvPCAtgSQKIOklOOlFOBkEkGQngaQEJ4MEJwPfP0nQVgJJL4CkAQkkJTgJAr5CAAS0dWAFNOhgnQSSAto6cBKaASehrcN7aQYwXUrrizvpgQts5O7mMZChG0XupXOYTBF61Mi1IvRQ5FIRfy+t6HSKPGqkr8gxrt7ypsznVXGePK/29aI3iN69b4qrmfSmWS+K5b4p2un052D6NABEzEg/t7O6uIjzS7IxRozzAQ==",
      "brillig_names": [
        "_log_channel_threshold_exceeded"
      ]
    },
    {
      "name": "channel_key",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7Z3NbuMgEIDfxeccDAx/fZXVqkrbtLIUJVWarrSq+u5rVrHTAgWNgy8MlyreMIX5MPDZa9OP7mn38P5yPxyej2/d3a+Pbn983J6H42E8+vjcdA+nYb8fXu6//nPXux/M/C//9ro9uMO38/Z07u6YUnzT7Q5P7qPm4294Hva77k6Jz01Q2PTyUtZwMRc1JlJU8qmolP1clIH4/L3pmL29KVJNTdEm3RQQ9lIUlPGbwvubm2J7cSlrmU43Rc0AFVdBU9jtTQE2NUVCpimmvxTVfdBBnN/eFM3mtmguvxZ2FYi1K4C1K5BrV6DWrkCvXYFZuwK7cgWiX7sCtnYFa49kUWAkKyWuFdjMxA98nvlBXyc57j4HpcW8TAC/znJu7g2KcmbhUpZzxtOF5dwIyfXXoo4INCIeEdmIeERUI+IR0Y2IR8Q0Ih4R24h8JwJ9I+IRYY2IR4Q3Ih6R5qw+EWhEPCI0nVVNd4WkYj4Rms6aIkLTWVNEaDrrXFZ9L+qI0HTWBBFJ01lTRGg6a4oITWdNEaHprCki0Ih4RGg6a4oITWdNEaHprCkizVl9Is1ZPSKqOatPpDmrT4SAs7o0CYioSxNopElAGV2aBDzQpUlA7lyaBIzNpUlAw8Y0NQG3cmkSECaXJg0L0jQsSAONNGlYkKZhQZqGBWkaFqRpWJChYUGGhgWZahYULq5pgvTTrGYK0mx6SZBrIRYXdkyqma8wTNi1yUwZ/7EgW83kVpBJNTNhQSbVXDwWZFLNlSaKidbTL2ba+uuOhcYkYFKNchRkUs0Fb0Em1VwdF2RC0mMzTGh6bJIJ62mKbAYKTZPNQKGpshkozWUjUKBBCaE0m41AaTobgdJ8NgKlCW0ESjPaEAqjabSWzflZHkKhabQZKDSNNgOlmiVZ9FNZLhgEeVazymbyrGbhzORZzVqYzpNXs7xl8qxmxcrkWc0ilMmzmjsl3PI5z15mFtt+XpnHi10TQIEGJYRSz6NGGChMzP9nziQLoFSjZSWhVONwJaFUI3wloVRjhzgoSs5QTDDRimrUAwUF+mm7r/FjcKbUs/13SSjQoIRQaHpKBgpNT5F8Xn2+/nmYCQpNT8lAoekpGSg0PSUNpZ49wUtCqeb+WEkoNI02A4Wm0WagQIMSQqFptBkozWgjUIgarZ7zk5YHUIgabRoKUaNNQqlnx/CSUIgabRoKUaNNQyFqtGko0KCEUGjKm7g+4idEcI+2nh2zS0KhKW8ZKDTlLQ2lnq2zS0KhKW8ZKDTlLQOFprxloECDEkKheTsyA6UZbQRKM9oIFKJGC3qGooIb1/VsQV4QSj0blpeEQtRo01CIGm0aClGjTUOBBiWE0h4ZDR8ZrWcT95JQaBptBgpNo01DqWef9Z+huDzjW6RqMb1KqEEEIdFBZGGqxsqwFoMPsdgQHt91Lx0S19Hkq5T8hz3bMkFiSRAsCZJLgtSSIL0kyCwJsguCftizJhO05IxgS84ItuSMYEvOCLbkjGBLzoj4vhip6YTHt5iw/fT3BCwPQjh+oMdflE/XAvgQiQ9R+BCNT9/gQ/ATsMD3i2D4EI4PEfiQeO9Le13SgxCJD1H4EI0PMfgQiw6Jv1CSDsn1fiQE3/uA7/34g+zpEIkPUfgQ/NgH/NgH/NiX+LEv8WNf4ntf4ntf4ntf4ntfInv/czz6sz0N24f97m2McF++Hx7Pw/FwOTz/fZ2+eTgN+/3wcv96Oj7unt5Pu/v98dF91/WXH7/4eHnCDTjZdofMiA0zxh26fuFGjt/qsdax5n8=",
      "brillig_names": [
        "channel_key"
      ]
    },
    {
      "name": "verified_id_transfer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "value",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "uint253::uint253::U253"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "7Zrdbts8DIbvJcc5EEVKJHsrH4ahP9kQoGiLtP2Aoei9T84q2WnkGFSaLh18UlQxH+bNK8Ui5bwsblZXzz+/r+9+3D8uLv57WdzeX18+re/v0uhlAbh97fHh8q4bPj5dbp4WFxCjXy5Wdzfdv+xfl4sf69vV4iLi63Iv2PvIb8Hei5ZgcK4WrSRv0eg8TERDRJWihKCP90zV+NCHM/fRCrVojJijCdxO9LflAmj2ZtSbMHsz6k08c28IQ+8N6YQ3HnzMWoDCkd7w7M2oNzJ7M+qNzt6MeePd0d6Q0xxM4KUES9i+AZz6DfzRbwDoKAcjDmYXuBbtgPMEpP8Vh4JqS0dUy9rRff34xfVTTX9UyWua02c5rF9c1iM03G1xm79aLTAq5PzkaJi/Y6q7KFP54jBJOKwp5PRBJ24NX6e48Hy+tvzNe6DMttRs0dmWii3oZltqtsCULcHh4U+LUvZ5VN/rYakFl4KMoL/9A9FWjD9ejJIWMYM9siomue165+Ngpv7skYhnpoc+WQ+zuqyHBfi9nnBmeuLRelKlCv0ChcN6OOTFzIPmQnirhT9Xi3hfijEeaqncQJhzrBec6ookainzGHHi5iT9B0w6aCIaQw4mP7g1xapoKOXsjoxYXyilVGYNE8GuZAYXZRjczaPM8/hPzKPO8/gvzCO5T55HgPo8dlrqxVOIWT9HmNASKG/4IfShGPVrt6zkZ2dGnMGzduYvtiJEszMjzoTZmRFn4qQzgSaa9bTVZT0U8Ij2lfgDxJSP68NgC25qF0nOTI9+sp6JdjG4M9MDH6onysRZjC+FJDrZKW3S4Gqzvr1d//y+89MR1/3R6ndOpeyRzu09DVBuYKSBUTuTXmuBoAXyLRC2QNQChRYotkDcAkkL1LIioGVFQMuKgJYVAS0rov7TJo39M0VH+1BogWILxC2QtEBqhdIIutD6Q3FPpX6I/Q4Q/fhT7oMEmgkyE8FMRBuRBr4LrFeuAbAUo36viop2hO2I2BE1ImmE22VTnaDUhOaDBRcGoBufocNItCNsR8SOqBmpP6wTXxCSPQTsiLcjaEfIjgQ7Eu0I2xGxI2pG6kd8IvnHMqK6g9TatNyH4ODME9/Sw2nT+9Omx9Omp9OmD6dNH0+bnk+bXj4wveBeej1p+uBOm75eXZezJEV+fx8J3o6gHSE7EuxItCNsR8SMRDUj7OzISOUdSv3J7xcMezuCdoTsSLAj0Y6wHanOfno6mRHd+1aymhFxdgTsiLcjaEfIiKQRbVuCqrzocwcfB7+9fWs/6o3hYYTsSLAj0Y6wEUmjMPeTafj/5WZ9eXW76o5ju6vPd9f5dDYNn3495Cv5/PZhc3+9unnerLqT3P4Qt1tM4pfqv3VnZGnQPRNPT2bKWUcXkOYDJQekfo2oNPbdZYQlQb4cYBliaXm3L0W/jNxd776+6eQ7vVle/1vcLcllnFKuWKZ5LPtrMuE3",
      "brillig_names": [
        "debug_log_oracle_wrapper",
        "pop_capsule",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "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"
    },
    {
      "name": "init",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "error_types": {
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "shield_gateway_storage",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "default_channel_threshold",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "init"
      ]
    },
    {
      "name": "verify_id_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "963818325383147006": {
            "error_kind": "string",
            "string": "Function verify_id_private can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "verified_id",
            "type": {
              "kind": "array",
              "length": 5,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZbRiuowEIbfJde9yCSTzMRXOSxL1e5SKFWqHjiI736aczatYrrSkYVd6I005v/M5O9vJme1rdan99e6fdsd1OrXWTW7TXmsd20/Oisw/7477Ms2Dg/HsjuqFXhvClW12/hI5lKot7qp1MrbS3EnNsbTh9gYDoMYtM6pA/KH2moDD9TgbeChEoRRbwizejfKiUZ1gJzaepvUCPpG/VIosIs3k97g4s2kN+6be4PWjd5geOCNAeNTLYDuSW/84s2kN7R4M+kNL95MehOe9gZ1SGIEw4OYXVzA6K9eAJ5eAKzGJLb26u0C5dQaKL2A/jnY64Jy0eEQhuyE+/rND69/7k0nMphjiDFtgwLw53tmnfbAeN2h///+812UrE3/YbL8wCM7nA4IONqPeHnpR+uubpr6/fXm8qzjh896F3i4T2h9tzePAsYJGC9gSMCwgAnzGdICBgSMETCCHJAgByTIAQlyQIIckCAHJMgBC3LA+Rz48RjVeMcYAWMFDAoYJ2C8gKG5TD+CKMXsrhyku4xz5vacLRS6+Yifj9B8hGcil374u+zqct1UsVnE2VO7Sb2jHx7/7NNM6i77breptqeuin1mbDExUU4XXsfLXow+hyLg4HOctlAgpOle61xfQV/FXw==",
      "brillig_names": [
        "debug_log_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "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"
    },
    {
      "name": "_log_channel_creation",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "10775636126596421126": {
            "error_kind": "string",
            "string": "Function _log_channel_creation can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBHJgAABAMmAgQEAyYCBQQAHxgABQAEgEQtCIBEAAEtCIBFAAItCIBGAAMkAAAAUSQAAABSJwIAAQSARyYCAgQAOg0AAQACJSQAAAEbHgIABAAeAgAFADI4AAQABQAGJgIEAQEjAgAGAAAAeyQAAAFEHgIABAEeAgAFAAo4BAUGIwIABgAAAJckAAABVigCAAQAmKkMlCYCBgQEJgIIBAMAOAYIBywIAQUAEAEHASYDBQQBACgFAgcsDgYHACgHAgcsDgYHJgIHBAMAOAUHBiwMBgcsDgEHACgHAgcsDgIHACgHAgcsDgMHACgHAgcsDgQHJgIBBAQAKAUCBCwNBAMmAgYEAgA4BAYCNg0AAgADJScAgAQEeAANAAAAgASAAyMAgAMAAAFDKQEAAQX3ofOvpa3UyjsBAQIlKQEAAQW+Hj//PqT2+jsBAQIlKQEAAQWVir/3IqVWBjsBAQIlLQAYyhjK",
      "debug_symbols": "7VnBbsIwDP2XnHuIncRx+JVpmgqUqVJVUIFJE+Lfl6I1K1ANDcoOmAtq0Ev83rNBbrxT82K6fX8r68VyrSYvO1UtZ/mmXNZxtdtnatqUVVW+v/W/Vrr9YH/Ar1d53S7Xm7zZqAkQYaaKet4+eownLMqqUBMy++wcrLXrwBpdAgP4AbS11n+jrXWU0EwDYDbpaDYIffBrpgKOwJ0TOJL/R+5j+G4h+U6XfAdHCU0t4jfuwYQOHKyxJ9xBu1HJx/OOyLchQN8/BN89BJqbQ1jCLkR8DJdqzmOqOfanecPbFY/4EwDzV3cOm/iKTZau2ORgaBNr4k5T/Pe4UB8mdG6B7dXHIJg1pIN/UgfsBrCOOxIEcAHL1HEI+iwHpCWIdAJEegmZ9CIyGQSIZCtBpIRMBgmZDPz4IlEbCSK9AJGAEkRKyCQKeAtBFNDWoRHQoKOxEkQKaOvQSmgGrIS2zj1KM+DSpbQ+upMeuMB23N08BgI6c+RROofRHKFnjZw6Qk9Hjh3xj9KKjufIs0b6juzj6iNvynxaFd+T58W2nvUG0ZvPVXEyk141y1kx3zZFO53+GUwfBoDOZaRf21ldXMT5JZkYI8b5Ag==",
      "brillig_names": [
        "_log_channel_creation"
      ]
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8861757336002045335": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 99
          },
          "9862881900111276825": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 35
          }
        },
        "parameters": [
          {
            "name": "log_plaintext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "process_log"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "U253Note"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "U253Note"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "U253Note"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Beacon"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "target",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "overrides",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "ShieldGatewayStorage"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "authorized_caller",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "channel_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "channel_thresholds",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "minter",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway_beacon",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shielded_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "ShieldGateway"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "default_channel_threshold",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "shield_gateway_storage",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::ChannelThresholdExceeded"
        },
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::ChannelCreation"
        },
        {
          "fields": [
            {
              "name": "new",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "token",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "effective_block",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::ChannelThresholdChanged"
        },
        {
          "fields": [
            {
              "name": "new_threshold",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "effective_block",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::DefaultChannelThresholdChanged"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::get_channel_balance_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::get_channel_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::_log_channel_threshold_exceeded_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::_log_channel_threshold_exceeded_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::channel_exists_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::channel_exists_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::channel_transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::channel_transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::initialize_channel_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::initialize_channel_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::get_channel_threshold_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "uint253::uint253::U253"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::get_channel_threshold_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "value",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "uint253::uint253::U253"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::verified_id_transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::verified_id_transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_threshold",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::set_default_channel_threshold_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::set_default_channel_threshold_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "verified_id",
                    "type": {
                      "kind": "array",
                      "length": 5,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::verify_id_private_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::verify_id_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "shield_gateway_storage",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "default_channel_threshold",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::init_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::init_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::_log_channel_creation_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::_log_channel_creation_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "new_threshold",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGateway::set_channel_threshold_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGateway::set_channel_threshold_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "107": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        /// Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "111": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    /// Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "117": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "126": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\n    oracle::note_discovery::deliver_note, utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::compute_note_hash_nonce,\n};\n\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\n// the note type id.\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashesAndNullifier {\n    pub note_hash: Field,\n    pub unique_note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would've been\n/// created, along with the list of unique note hashes in said transaction.\n///\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\n///\n/// ```\n/// |packed_note_content, note_header, note_type_id| {\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\n///             MyNoteType::unpack_content,\n///             note_header,\n///             true,\n///             storage_slot,\n///             packed_note_content.storage(),\n///         )\n///     } else {\n///         panic(f\"Unknown note type id {note_type_id}\")\n///     };\n///\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\n///         note_hash: hashes[0],\n///         unique_note_hash: hashes[1],\n///         inner_nullifier: hashes[3],\n///     })\n/// }\n/// ```\npub unconstrained fn do_process_log<Env>(\n    context: UnconstrainedContext,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field, Field) -> Option<NoteHashesAndNullifier>,\n) {\n    let (storage_slot, note_type_id, packed_note_content) =\n        destructure_log_plaintext(log_plaintext);\n\n    // We need to find the note's nonce, which is the one that results in one of the unique note hashes from tx_hash\n    for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            let header = NoteHeader::new(context.this_address(), candidate_nonce);\n\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note_content,\n                header,\n                storage_slot,\n                note_type_id,\n            )\n                .unwrap();\n\n            if hashes.unique_note_hash == expected_unique_note_hash {\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\n\n                assert(\n                    deliver_note(\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\n                        storage_slot,\n                        candidate_nonce,\n                        packed_note_content,\n                        hashes.note_hash,\n                        hashes.inner_nullifier,\n                        tx_hash,\n                        recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_LOG_RESERVED_FIELDS == 2,\n        \"unepxected value for NOTE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n    let note_type_id = log_plaintext.get(1);\n\n    let packed_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, packed_note_content)\n}\n\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..MaxLen {\n        if i < vec.len() {\n            f(vec.get_unchecked(i), i);\n        }\n    }\n}\n"
    },
    "137": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header, storage_slot);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash(storage_slot);\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note, storage_slot: Field) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    unpack_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    storage_slot: Field,\n    packed_note_content: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = unpack_content(array::subarray(packed_note_content, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash(storage_slot);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context(storage_slot)\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"
    },
    "140": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "142": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "143": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "144": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "145": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "149": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n"
    },
    "150": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "151": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "154": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\nuse dep::protocol_types::address::AztecAddress;\n\n/// Informs PXE of a note's existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The note's `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\n/// `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was sucessfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        content,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n"
    },
    "155": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"
    },
    "157": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "166": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: U128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "169": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr",
      "source": "use dep::protocol_types::traits::Packable;\nuse std::cmp::min;\n\nmod test;\n\npub(crate) global SCHEDULED_DELAY_CHANGE_PCKD_LEN: u32 = 1;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub(crate) struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub(crate) fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub(crate) fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub(crate) fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub(crate) fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub(crate) fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Packable<SCHEDULED_DELAY_CHANGE_PCKD_LEN> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn pack(self) -> [Field; SCHEDULED_DELAY_CHANGE_PCKD_LEN] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33)\n            + (self.post.is_some() as u64 * (1 << 32))\n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n\n    fn unpack(input: [Field; SCHEDULED_DELAY_CHANGE_PCKD_LEN]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some {\n                Option::some(pre_inner)\n            } else {\n                Option::none()\n            },\n            post: if post_is_some {\n                Option::some(post_inner)\n            } else {\n                Option::none()\n            },\n            block_of_change,\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n"
    },
    "17": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "171": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::traits::Packable;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub(crate) struct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub(crate) fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub(crate) fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub(crate) fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub(crate) fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub(crate) fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32,\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\n// We store 2 Ts and one extra field for the block of change.\nimpl<T, let N: u32> Packable<2 * N + 1> for ScheduledValueChange<T>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; 2 * N + 1] {\n        let mut packed = [0; 2 * N + 1];\n        let pre_packed = self.pre.pack();\n        let post_packed = self.post.pack();\n\n        for i in 0..N {\n            packed[i] = pre_packed[i];\n            packed[N + i] = post_packed[i];\n        }\n        packed[2 * N] = self.block_of_change.to_field();\n        packed\n    }\n\n    fn unpack(input: [Field; 2 * N + 1]) -> Self {\n        Self {\n            pre: T::unpack(array::subarray(input, 0)),\n            post: T::unpack(array::subarray(input, N)),\n            block_of_change: input[2 * N] as u32,\n        }\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n"
    },
    "172": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable_values.nr",
      "source": "use crate::state_vars::shared_mutable::{\n    scheduled_delay_change::{SCHEDULED_DELAY_CHANGE_PCKD_LEN, ScheduledDelayChange},\n    scheduled_value_change::ScheduledValueChange,\n};\nuse crate::utils::array;\nuse dep::protocol_types::{traits::Packable, utils::arrays::array_concat};\nuse std::meta::derive;\n\n/// SharedMutableValues is just a wrapper around ScheduledValueChange and ScheduledDelayChange that then allows us\n/// to wrap both of these values in WithHash. WithHash allows for efficient read of values in private.\n///\n/// Note that the WithHash optimization does not work in public (due to there being no unconstrained). But we also want\n/// to be able to read the values efficiently in public and we want to be able to read each value separately. For that\n/// reason we expose `get_delay_change_storage_slot` and `get_value_change_storage_slot` which point to the correct\n/// location in the storage. This is \"hacky\" as we pack and store the values together but there is no way around it.\n#[derive(Eq)]\npub(crate) struct SharedMutableValues<T, let INITIAL_DELAY: u32> {\n    svc: ScheduledValueChange<T>,\n    sdc: ScheduledDelayChange<INITIAL_DELAY>,\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutableValues<T, INITIAL_DELAY> {\n    pub(crate) fn new(\n        svc: ScheduledValueChange<T>,\n        sdc: ScheduledDelayChange<INITIAL_DELAY>,\n    ) -> Self {\n        SharedMutableValues { svc, sdc }\n    }\n\n    pub fn get_delay_change_storage_slot(shared_mutable_storage_slot: Field) -> Field {\n        shared_mutable_storage_slot\n    }\n\n    pub fn get_value_change_storage_slot(shared_mutable_storage_slot: Field) -> Field {\n        shared_mutable_storage_slot + (SCHEDULED_DELAY_CHANGE_PCKD_LEN as Field)\n    }\n}\n\n// We pack to `2 * N + 1 + SCHEDULED_DELAY_CHANGE_PCKD_LEN` fields because ScheduledValueChange contains T twice\n// + 1 field for block_of_change + SCHEDULED_DELAY_CHANGE_PCKD_LEN fields for ScheduledDelayChange\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Packable<2 * N + 1 + SCHEDULED_DELAY_CHANGE_PCKD_LEN> for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; 2 * N + 1 + SCHEDULED_DELAY_CHANGE_PCKD_LEN] {\n        array_concat(self.sdc.pack(), self.svc.pack())\n    }\n\n    fn unpack(fields: [Field; 2 * N + 1 + SCHEDULED_DELAY_CHANGE_PCKD_LEN]) -> Self {\n        SharedMutableValues {\n            sdc: Packable::unpack(array::subarray(fields, 0)),\n            svc: Packable::unpack(array::subarray(fields, SCHEDULED_DELAY_CHANGE_PCKD_LEN)),\n        }\n    }\n}\n"
    },
    "174": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable.nr",
      "source": "use dep::protocol_types::traits::Packable;\n\nuse crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::{\n        shared_mutable::{\n            scheduled_delay_change::ScheduledDelayChange,\n            scheduled_value_change::ScheduledValueChange,\n            shared_mutable_values::SharedMutableValues,\n        },\n        storage::Storage,\n    },\n    utils::with_hash::WithHash,\n};\n\npub(crate) mod shared_mutable_values;\npub(crate) mod scheduled_delay_change;\npub(crate) mod scheduled_value_change;\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Packable and Eq traits, and allocate `M` storage\n// slots to this state variable.\nimpl<T, let INITIAL_DELAY: u32, Context, let M: u32> Storage<M> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    WithHash<SharedMutableValues<T, INITIAL_DELAY>, _>: Packable<M>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, let N: u32, Context> SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    fn get_value_change_storage_slot(self) -> Field {\n        SharedMutableValues::<T, INITIAL_DELAY>::get_value_change_storage_slot(self.storage_slot)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        SharedMutableValues::<T, INITIAL_DELAY>::get_delay_change_storage_slot(self.storage_slot)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32, let N: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: Packable<N> + Eq,\n{\n\n    pub fn schedule_value_change(self, new_value: T) {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    ) {\n        // Whenever we write to public storage, we write both the value change and delay change to storage at once.\n        // We do so by wrapping them in a single struct (`SharedMutableValues`). Then we wrap the resulting struct in\n        // `WithHash`.\n        // Wrapping in `WithHash` makes for more costly writes but it also makes private proofs much simpler because\n        // they only need to produce a historical proof for the hash, which results in a single inclusion proof (as\n        // opposed to 4 in the best case scenario in which T is a single field). Private shared mutable reads are\n        // assumed to be much more frequent than public writes, so this tradeoff makes sense.\n        let values = WithHash::new(SharedMutableValues::new(value_change, delay_change));\n\n        self.context.storage_write(self.storage_slot, values);\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32, let N: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn get_current_value(self) -> T {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_block_number) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon =\n            value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        let values: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::historical_public_storage_read(header, address, self.storage_slot);\n\n        (values.svc, values.sdc, historical_block_number)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32, let N: u32> SharedMutable<T, INITIAL_DELAY, UnconstrainedContext>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub unconstrained fn get_current_value(self) -> T {\n        let value_change: ScheduledValueChange<T> = WithHash::unconstrained_public_storage_read(\n            self.context,\n            self.get_value_change_storage_slot(),\n        );\n\n        let block_number = self.context.block_number() as u32;\n        value_change.get_current_at(block_number)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "185": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr",
      "source": "use crate::{context::PublicContext, event::event_interface::EventInterface};\n\nfn emit<Event, let N: u32>(context: &mut PublicContext, event: Event)\nwhere\n    Event: EventInterface<N>,\n{\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; N + 1];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_public_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32>(\n    context: &mut PublicContext,\n) -> fn[(&mut PublicContext,)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| { emit(context, e); }\n}\n"
    },
    "188": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "189": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    vec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "19": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "197": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            /// Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "21": {
      "path": "std/hash/mod.nr",
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "212": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "214": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "250": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "257": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "26": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "272": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "273": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "274": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "284": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "290": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "291": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "300": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "316": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "320": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "321": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 2;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\n        // This is necessary because of how Noir handles serialization:\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\n        //   first.\n        // For this reason if we didn't use the ordering of U128 limbs here and in encoder.ts we would get an arguments\n        // hash mismatch.\n        // The below warning is due to visibility in noir stdlib.\n        [self.lo, self.hi]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "337": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    /// Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "338": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "340": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "358": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/shield_gateway_storage/src/main.nr",
      "source": "mod test;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract ShieldGatewayStorage {\n\n    use aztec::{\n        context::PrivateContext,\n        encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n        macros::{functions::{initializer, private, public, view}, storage::storage},\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Hash, Serialize},\n        },\n        state_vars::{Map, PrivateMutable, PublicImmutable, SharedMutable},\n    };\n\n    use uint253::{uint253::U253, uint253_note::U253Note};\n\n    pub global CHANGE_DELAY_BLOCKS: u32 = 5;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicImmutable<AztecAddress, Context>,\n        authorized_caller: SharedMutable<AztecAddress, CHANGE_DELAY_BLOCKS, Context>,\n        channel_balances: Map<Field, PrivateMutable<U253Note, Context>, Context>,\n        channel_thresholds: Map<AztecAddress, SharedMutable<U253, CHANGE_DELAY_BLOCKS, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn init(admin: AztecAddress) {\n        storage.admin.initialize(admin);\n    }\n\n    #[public]\n    fn set_authorized_caller(caller: AztecAddress) {\n        assert(context.msg_sender() == storage.admin.read(), \"Only the admin can set the authorized caller\");\n        storage.authorized_caller.schedule_value_change(caller);\n    }\n\n    #[contract_library_method]\n    fn _assert_caller_is_authorized(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) {\n        assert(context.msg_sender() == storage.authorized_caller.get_current_value(), \"Unauthorized\");\n    }\n\n    pub unconstrained fn is_channel_initialized_unconstrained(key: Field) -> bool {\n        storage.channel_balances.at(key).is_initialized()\n    }\n\n    #[private]\n    #[view]\n    fn is_channel_initialized(key: Field) -> bool {\n        _assert_caller_is_authorized(&mut context, storage);\n        // Safety: `initialize` must be called if the key is uninitialized, so the caller\n        // must attempt initialization for uninitialized keys to constrain this value\n        unsafe {\n            is_channel_initialized_unconstrained(key)\n        }\n    }\n\n    #[private]\n    fn get_channel_balance(key: Field) -> U253 {\n        _assert_caller_is_authorized(&mut context, storage);\n        storage.channel_balances.at(key).get_note().note.get_value()\n    }\n\n    #[private]\n    fn initialize_channel_balance(key: Field, value: U253, owner: AztecAddress) -> U253 {\n        _assert_caller_is_authorized(&mut context, storage);\n        let mut note = U253Note::new(value, owner);\n        storage.channel_balances.at(key).initialize(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            owner,\n            owner,\n        ));\n        value\n    }\n\n    #[private]\n    fn set_channel_balance(key: Field, value: U253, owner: AztecAddress) -> U253 {\n        _assert_caller_is_authorized(&mut context, storage);\n        let mut note = U253Note::new(value, owner);\n        storage.channel_balances.at(key).replace(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            owner,\n            owner,\n        ));\n        value\n    }\n\n    #[public]\n    #[view]\n    fn get_channel_threshold(key: AztecAddress) -> U253 {\n        storage.channel_thresholds.at(key).get_current_value()\n    }\n\n    #[private]\n    #[view]\n    fn get_channel_threshold_private(key: AztecAddress) -> U253 {\n        storage.channel_thresholds.at(key).get_current_value()\n    }\n\n    #[public]\n    fn set_channel_threshold(key: AztecAddress, value: U253) -> U253 {\n        assert(context.msg_sender() == storage.authorized_caller.get_current_value(), \"Unauthorized\");\n        storage.channel_thresholds.at(key).schedule_value_change(value);\n        value\n    }\n\n    unconstrained pub fn get_authorized_caller_unconstrained() -> AztecAddress {\n        storage.authorized_caller.get_current_value()\n    }\n\n    unconstrained pub fn get_admin_unconstrained() -> AztecAddress {\n        storage.admin.read()\n    }\n}\n"
    },
    "367": {
      "path": "/home/vscode/nargo/github.com/ClarifiedLabs/aztec-uint253/aztec-packages-v0.76.4/src/uint253.nr",
      "source": "// Copyright (c) 2025 Clarified Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nuse aztec::protocol_types::traits::{Deserialize, FromField, Packable, Serialize, ToField};\nuse std::cmp::{Eq, Ord, Ordering};\nuse std::ops::{Add, Div, Mul, Rem, Sub};\n\n// Maximum value for U253 (2^253 - 1), chosen to fit within Aztec's field arithmetic bounds\npub global MAX_U253: Field = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\npub global U253_PACKED_LEN: u32 = 1;\n\npub struct U253 {\n    value: Field,\n}\n\nimpl U253 {\n    pub fn new(value: Field) -> Self {\n        value.assert_max_bit_size::<253>();\n        Self { value }\n    }\n\n    pub fn new_unchecked(value: Field) -> Self {\n        Self { value }\n    }\n\n    pub fn from_integer(value: Field) -> Self {\n        value.assert_max_bit_size::<253>();\n        Self { value }\n    }\n\n    pub fn to_integer(self) -> Field {\n        self.value\n    }\n\n    pub fn zero() -> Self {\n        Self { value: 0 }\n    }\n\n    pub fn one() -> Self {\n        Self { value: 1 }\n    }\n\n    pub fn max() -> Self {\n        Self { value: MAX_U253 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.value == 0\n    }\n\n    // Performs division with remainder using binary long division algorithm\n    // Returns (quotient, remainder) tuple\n    pub unconstrained fn div_rem_unconstrained(self, other: Self) -> (Self, Self) {\n        assert(!(other.value == 0), \"Division by zero\");\n\n        self.value.assert_max_bit_size::<253>();\n        other.value.assert_max_bit_size::<253>();\n\n        let bits: [u1; 253] = self.value.to_be_bits();\n        let divisor = other.value;\n\n        let mut quotient: Field = 0;\n        let mut remainder: Field = 0;\n\n        // Process each bit from MSB to LSB, similar to paper-and-pencil division\n        for i in 0..253 {\n            // Shift remainder left by 1 bit and add next bit\n            remainder = remainder * 2 + (bits[i] as Field);\n\n            // Single comparison to determine if we should subtract divisor\n            // Changed to just !remainder.lt(divisor) which means remainder >= divisor\n            if !remainder.lt(divisor) {\n                remainder = remainder - divisor;\n                quotient = quotient * 2 + 1;\n            } else {\n                quotient = quotient * 2;\n            }\n        }\n        (Self { value: quotient }, Self { value: remainder })\n    }\n\n    // Performs division with remainder using unconstrained binary long division algorithm, then\n    // constrains the result via multiplicative properties\n    // Returns (quotient, remainder) tuple\n    pub fn div_rem(self, other: Self) -> (Self, Self) {\n        assert(!(other.value == 0), \"Division by zero\");\n\n        if self.value == other.value {\n            (Self::one(), Self::zero())\n        } else if self.is_zero() {\n            (Self::zero(), Self::zero())\n        } else if other.value == 1 {\n            (self, Self::zero())\n        } else if self.value.lt(other.value) {\n            (Self::zero(), self)\n        } else {\n            //Safety: constraining this immediately after by checking the division property\n            let (quotient, remainder) = unsafe { self.div_rem_unconstrained(other) };\n\n            // Verify quotient * other + remainder == self\n            assert(\n                quotient * other + remainder == self,\n                \"Unconstrained division result is incorrect\",\n            );\n\n            (quotient, remainder)\n        }\n    }\n\n    // Adds two U253 values without overflow checks - use with caution\n    pub fn add_unchecked(self, other: Self) -> Self {\n        Self { value: self.value + other.value }\n    }\n\n    // Subtracts two U253 values without underflow checks - use with caution\n    pub fn sub_unchecked(self, other: Self) -> Self {\n        Self { value: self.value - other.value }\n    }\n}\n\nimpl ToField for U253 {\n    fn to_field(self) -> Field {\n        self.value\n    }\n}\n\nimpl FromField for U253 {\n    fn from_field(value: Field) -> Self {\n        value.assert_max_bit_size::<253>();\n        Self { value }\n    }\n}\n\nimpl Serialize<1> for U253 {\n    fn serialize(self) -> [Field; 1] {\n        [self.value]\n    }\n}\n\nimpl Deserialize<1> for U253 {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        fields[0].assert_max_bit_size::<253>();\n        assert(fields[0].lt(MAX_U253 + 1), \"Deserialized value is too large\");\n        Self { value: fields[0] }\n    }\n}\n\nimpl Add for U253 {\n    fn add(self, other: Self) -> Self {\n        let result = self.value + other.value;\n        result.assert_max_bit_size::<253>();\n\n        assert(!MAX_U253.lt(result), \"U253 addition overflow\");\n        assert(!result.lt(self.value), \"U253 addition overflow\");\n        assert(!result.lt(other.value), \"U253 addition overflow\");\n        Self { value: result }\n    }\n}\n\nimpl Sub for U253 {\n    fn sub(self, other: Self) -> Self {\n        assert(\n            other.value.lt(self.value) | other.value.eq(self.value),\n            \"U253 subtraction underflow\",\n        );\n        let result = self.value - other.value;\n        result.assert_max_bit_size::<253>();\n        Self { value: result }\n    }\n}\n\nimpl Mul for U253 {\n    fn mul(self, other: Self) -> Self {\n        let result = self.value * other.value;\n\n        result.assert_max_bit_size::<253>();\n        // Allow multiplication by 1 without additional checks, otherwise check for overflow\n        assert(\n            (self.value == 1)\n                | (other.value == 1)\n                | (result.lt(MAX_U253 + 1) & !result.lt(self.value) & !result.lt(other.value)),\n            \"U253 multiplication overflow\",\n        );\n        Self { value: result }\n    }\n}\n\nimpl Div for U253 {\n    fn div(self, other: Self) -> Self {\n        let (quotient, _) = self.div_rem(other);\n        quotient\n    }\n}\n\nimpl Rem for U253 {\n    fn rem(self, other: Self) -> Self {\n        let (_, remainder) = self.div_rem(other);\n        remainder\n    }\n}\n\nimpl Ord for U253 {\n    fn cmp(self, other: Self) -> Ordering {\n        if self.value.lt(other.value) {\n            Ordering::less()\n        } else if self.value.eq(other.value) {\n            Ordering::equal()\n        } else {\n            Ordering::greater()\n        }\n    }\n}\n\nimpl Eq for U253 {\n    fn eq(self, other: Self) -> bool {\n        self.value.eq(other.value)\n    }\n}\n\nimpl Packable<U253_PACKED_LEN> for U253 {\n    fn pack(self) -> [Field; U253_PACKED_LEN] {\n        [self.value]\n    }\n\n    fn unpack(fields: [Field; U253_PACKED_LEN]) -> Self {\n        U253::from_integer(fields[0])\n    }\n}\n"
    },
    "368": {
      "path": "/home/vscode/nargo/github.com/ClarifiedLabs/aztec-uint253/aztec-packages-v0.76.4/src/uint253_note.nr",
      "source": "// Copyright (c) 2025 Clarified Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nuse aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::{\n        note_header::NoteHeader,\n        note_interface::{NoteInterface, NullifiableNote},\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n        traits::{Empty, Hash, Packable, Serialize},\n    },\n};\n\nuse crate::uint253::U253;\n\n#[partial_note(quote {value})]\n#[derive(Serialize)]\npub struct U253Note {\n    // The amount of tokens in the note\n    value: Field,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NullifiableNote for U253Note {\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self, storage_slot: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self, storage_slot);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl U253Note {\n    pub fn new(value: U253, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value: value.to_field(), owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U253 {\n        U253::new_unchecked(self.value)\n    }\n\n    pub fn get_field_value(self) -> Field {\n        self.value\n    }\n}\n\nimpl Eq for U253Note {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n"
    },
    "369": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/token/src/main.nr",
      "source": "mod types;\nmod test;\n\nuse aztec::macros::aztec;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n#[aztec]\npub contract Token {\n    // Libs\n    use std::meta::derive;\n\n    use compressed_string::FieldCompressedString;\n\n    use aztec::{\n        context::{PrivateCallInterface, PrivateContext},\n        encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        oracle::random::random,\n        prelude::{\n            AztecAddress, FunctionSelector, Map, PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n    };\n\n    use authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n\n    use beacon::Beacon;\n    use uint253::{uint253::U253, uint253_note::U253Note};\n\n    use crate::types::balance_set::BalanceSet;\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES: u32 = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES: u32 = 8;\n\n    #[derive(Serialize)]\n    #[event]\n    struct Mint {\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Burn {\n        from: AztecAddress,\n        amount: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Shield {\n        from: AztecAddress,\n        amount: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Unshield {\n        from: AztecAddress,\n        amount: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        minter: PublicImmutable<AztecAddress, Context>,\n        shield_gateway_beacon: PublicImmutable<AztecAddress, Context>,\n        private_balances: Map<AztecAddress, BalanceSet<Context>, Context>,\n        public_balances: Map<AztecAddress, PublicMutable<U253, Context>, Context>,\n\n        total_supply: PublicMutable<U253, Context>,\n        shielded_supply: PublicMutable<U253, Context>,\n\n        name: PublicImmutable<FieldCompressedString, Context>,\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        decimals: PublicImmutable<u8, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn init(\n        minter: AztecAddress,\n        name: str<31>,\n        symbol: str<31>,\n        decimals: u8,\n    ) {\n        assert(!minter.is_zero(), \"invalid minter\");\n        assert(name.as_bytes().len() > 0, \"Name cannot be empty\");\n        assert(symbol.as_bytes().len() > 0, \"Symbol cannot be empty\");\n\n        storage.minter.initialize(minter);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        storage.decimals.initialize(decimals);\n    }\n\n    #[public]\n    fn set_shield_gateway_beacon(beacon: AztecAddress) {\n        assert(storage.minter.read().eq(context.msg_sender()), \"caller is not minter\");\n        storage.shield_gateway_beacon.initialize(beacon);\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[public]\n    #[view]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n\n    #[public]\n    #[view]\n    fn shielded_supply() -> Field {\n        storage.shielded_supply.read().to_integer()\n    }\n\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n\n    #[public]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        assert(storage.minter.read().eq(context.msg_sender()), \"caller is not minter\");\n\n        let amount = U253::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n\n        // Emit the mint event\n        Mint { to, amount: amount.to_field() }.emit(encode_event(&mut context));\n    }\n\n    #[public]\n    fn transfer_public_to_public(\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let amount = U253::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n\n    #[public]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U253::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n\n        Burn { from, amount: amount.to_field() }.emit(encode_event(&mut context));\n    }\n\n    #[private]\n    fn transfer_private_to_public(\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field,\n    ) {\n        assert_from_shield_gateway(&mut context, storage);\n        assert_current_call_valid_authwit(&mut context, from);\n\n        let amount = U253::from_integer(amount);\n\n        storage.private_balances.at(from).sub(from, amount).emit(\n            encode_and_encrypt_note(&mut context, from, from),\n        );\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n\n    #[contract_library_method]\n    fn assert_from_shield_gateway(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) {\n        let from = context.msg_sender();\n        assert(\n            from.eq(get_shield_gateway(context, storage)),\n            \"Private transfer must be initiated from the shield gateway\",\n        );\n    }\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U253,\n        max_notes: u32,\n    ) -> U253 {\n        let subtracted = storage.private_balances.at(account).try_sub(amount, max_notes);\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U253::from_integer(0), \"Balance too low\");\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U253,\n    ) -> PrivateCallInterface<25, U253> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining.to_field())\n    }\n\n    // TODO(#7728): even though the amount should be a U253, we can't have that type in a contract interface due to\n    // serialization issues.\n    #[internal]\n    #[private]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: Field) -> U253 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            U253::from_integer(amount),\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES,\n        )\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    #[private]\n    fn transfer_private_to_private(\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field,\n    ) {\n        assert_from_shield_gateway(&mut context, storage);\n        assert_current_call_valid_authwit(&mut context, from);\n\n        let amount = U253::from_integer(amount);\n\n        storage.private_balances.at(from).sub(from, amount).emit(\n            encode_and_encrypt_note(&mut context, from, from),\n        );\n\n        storage.private_balances.at(to).add(to, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            to,\n            from,\n        ));\n    }\n\n    #[private]\n    fn burn_private(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U253::from_integer(amount);\n\n        storage.private_balances.at(from).sub(from, amount).emit(\n            encode_and_encrypt_note(&mut context, from, from),\n        );\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n\n    // Moves token `amount` from the user's public balance to their private balance.\n    #[private]\n    fn shield(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U253::from_integer(amount);\n\n        Token::at(context.this_address())._transfer_public_to_private(from, from, amount).call(\n            &mut context,\n        );\n\n        Token::at(context.this_address())._log_shield(from, amount).enqueue(&mut context);\n    }\n\n    #[private]\n    fn unshield(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U253::from_integer(amount);\n\n        storage.private_balances.at(from).sub(from, amount).emit(\n            encode_and_encrypt_note(&mut context, from, from),\n        );\n        Token::at(context.this_address())._increase_public_balance(from, amount).enqueue(\n            &mut context,\n        );\n        Token::at(context.this_address())._log_unshield(from, amount).enqueue(&mut context);\n    }\n\n    // Transfers token `amount` from public balance of message sender to a private balance of `to`.\n    // Requires a shield gateway check.\n    #[private]\n    fn transfer_public_to_private(\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field,\n    ) {\n        assert_from_shield_gateway(&mut context, storage);\n        assert_current_call_valid_authwit(&mut context, from);\n\n        let amount = U253::from_integer(amount);\n\n        Token::at(context.this_address())._transfer_public_to_private(from, to, amount).call(\n            &mut context,\n        );\n    }\n\n    #[private]\n    #[internal]\n    fn _transfer_public_to_private(from: AztecAddress, to: AztecAddress, amount: U253) {\n        let token = Token::at(context.this_address());\n\n        // We prepare the private balance increase (the partial note).\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own tokens.\n        token._finalize_transfer_public_to_private_unsafe(from, amount, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// some of the finalization functions (`finalize_transfer_public_to_private`, `finalize_mint_shielded`).\n    /// Returns a hiding point slot.\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress, from: AztecAddress) -> Field {\n        // TODO(#9887): ideally we'd not have `from` here, but we do need a `from` address to produce a tagging secret\n        // with `to`.\n        _prepare_private_balance_increase(from, to, &mut context, storage)\n    }\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_public_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        from: AztecAddress, // recipient of the outgoing: TODO(#9887): this is not great?\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.private_balances.at(to).set.storage_slot;\n\n        // We create a setup payload with unpopulated/zero `amount` for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = U253Note::setup_payload().new(to, note_randomness, to_note_slot);\n\n        // We get the keys and encrypt the log of the note\n        let setup_log = note_setup_payload.encrypt_log(context, to, from);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_public_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_public_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        Token::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    /// Finalizes a transfer of token `amount` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_public_to_private(amount: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        let amount = U253::from_integer(amount);\n        _finalize_transfer_public_to_private(\n            from,\n            amount,\n            hiding_point_slot,\n            &mut context,\n            storage,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_transfer_public_to_private_unsafe(\n        from: AztecAddress,\n        amount: U253,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_public_to_private(\n            from,\n            amount,\n            hiding_point_slot,\n            &mut context,\n            storage,\n        );\n    }\n\n    #[contract_library_method]\n    fn _finalize_transfer_public_to_private(\n        from: AztecAddress,\n        amount: U253,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // First we subtract the `amount` from the public balance of `from`\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        // Increase the shielded supply by the `amount`\n        storage.shielded_supply.write(storage.shielded_supply.read().add(amount));\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            U253Note::finalization_payload().new(context, hiding_point_slot, amount.to_field());\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    /// Mints token `amount` to a private balance of `to`. Message sender has to have minter permissions (checked\n    /// in the enqueud call).\n    #[private]\n    fn mint_shielded(to: AztecAddress, amount: Field) {\n        let token = Token::at(context.this_address());\n\n        // We prepare the partial note to which we'll \"send\" the minted amount.\n        let hiding_point_slot =\n            _prepare_private_balance_increase(context.msg_sender(), to, &mut context, storage);\n\n        // At last we finalize the mint. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that only a message sender with minter permissions\n        // can successfully execute the function.\n        token\n            ._finalize_mint_shielded_unsafe(context.msg_sender(), to, amount, hiding_point_slot)\n            .enqueue(&mut context);\n    }\n\n    /// Finalizes a mint of token `amount` to a private balance of `to`. The mint must be prepared by calling\n    /// `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    ///\n    /// Note: This function is only an optimization as it could be replaced by a combination of `mint_public`\n    /// and `finalize_transfer_public_to_private`. It is however used very commonly so it makes sense to optimize it\n    /// (e.g. used during token bridging, in AMM liquidity token etc.).\n    #[public]\n    fn finalize_mint_shielded(to: AztecAddress, amount: Field, hiding_point_slot: Field) {\n        assert(storage.minter.read().eq(context.msg_sender()), \"caller is not minter\");\n        _finalize_mint_shielded(to, amount, hiding_point_slot, &mut context, storage);\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_mint_shielded_unsafe(\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        hiding_point_slot: Field,\n    ) {\n        // We check the minter permissions as it was not done in `mint_shielded` function.\n        assert(storage.minter.read().eq(from), \"caller is not minter\");\n        _finalize_mint_shielded(to, amount, hiding_point_slot, &mut context, storage);\n    }\n\n    #[contract_library_method]\n    fn _finalize_mint_shielded(\n        to: AztecAddress,\n        amount: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let amount = U253::from_integer(amount);\n\n        // Increase the total supply by the `amount`\n        storage.total_supply.write(storage.total_supply.read().add(amount));\n        // Increase the shielded supply by the `amount`\n        storage.shielded_supply.write(storage.shielded_supply.read().add(amount));\n\n        // Finalize the partial note with the `amount`\n        let finalization_payload =\n            U253Note::finalization_payload().new(context, hiding_point_slot, amount.to_field());\n\n        // emit the note hash and the final log\n        finalization_payload.emit();\n\n        // Emit the mint event\n        Mint { to, amount: amount.to_field() }.emit(encode_event(context));\n    }\n\n    #[contract_library_method]\n    fn get_shield_gateway(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> AztecAddress {\n        Beacon::at(storage.shield_gateway_beacon.read())\n            .get_target_private(context.this_address())\n            .view(context)\n    }\n\n    unconstrained fn get_shield_gateway_beacon_unconstrained() -> AztecAddress {\n        storage.shield_gateway_beacon.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_shield_gateway_beacon_public() -> AztecAddress {\n        storage.shield_gateway_beacon.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_shield_gateway_public() -> AztecAddress {\n        Beacon::at(storage.shield_gateway_beacon.read())\n            .get_target_public(context.this_address())\n            .view(&mut context)\n    }\n\n    #[private]\n    #[view]\n    fn get_shield_gateway_private() -> AztecAddress {\n        get_shield_gateway(&mut context, storage)\n    }\n\n    #[private]\n    #[view]\n    fn get_shield_gateway_beacon_private() -> AztecAddress {\n        storage.shield_gateway_beacon.read()\n    }\n\n    #[private]\n    fn setup_refund(\n        fee_payer: AztecAddress, // Address of the entity which will receive the fee note.\n        user: AztecAddress, // A user for which we are setting up the fee refund.\n        funded_amount: Field, // The amount the user funded the fee payer with (represents fee limit).\n        nonce: Field, // A nonce to make authwitness unique.\n    ) {\n        // 1. This function is called by fee paying contract (fee_payer) when setting up a refund so we need to support\n        // the authwit flow here and check that the user really permitted fee_payer to set up a refund on their behalf.\n        assert_current_call_valid_authwit(&mut context, user);\n\n        // 2. Deduct the funded amount from the user's balance - this is a maximum fee a user is willing to pay\n        // (called fee limit in aztec spec). The difference between fee limit and the actual tx fee will be refunded\n        // to the user in the `complete_refund(...)` function.\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            user,\n            U253::from_integer(funded_amount),\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.private_balances.at(user).add(user, change).emit(\n            encode_and_encrypt_note(&mut context, user, user),\n        );\n\n        // 4. We prepare the partial notes\n        // TODO(#9887): In each `_prepare_private_balance_increase` call we fetch the user's ovpk_m 2 more times. This is\n        // very inefficient.\n        let fee_payer_point_slot =\n            _prepare_private_balance_increase(user, fee_payer, &mut context, storage);\n        let user_point_slot = _prepare_private_balance_increase(user, user, &mut context, storage);\n\n        // 5. Set the public teardown function to `complete_refund(...)`. Public teardown is the only time when a public\n        // function has access to the final transaction fee, which is needed to compute the actual refund amount.\n        context.set_public_teardown_function(\n            context.this_address(),\n            comptime { FunctionSelector::from_signature(\"complete_refund(Field,Field,Field)\") },\n            [fee_payer_point_slot, user_point_slot, funded_amount],\n        );\n    }\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    // TODO(#7728): even though the funded_amount should be a U253, we can't have that type in a contract interface due\n    // to serialization issues.\n\n    #[public]\n    #[internal]\n    fn complete_refund(fee_payer_slot: Field, user_slot: Field, funded_amount: Field) {\n        // TODO(#7728): Remove the next line\n        let funded_amount = U253::from_integer(funded_amount);\n        let tx_fee = U253::from_integer(context.transaction_fee());\n\n        // 1. We check that user funded the fee payer contract with at least the transaction fee.\n        // TODO(#7796): we should try to prevent reverts here\n        assert(funded_amount >= tx_fee, \"funded amount not enough to cover tx fee\");\n\n        // 2. We compute the refund amount as the difference between funded amount and tx fee.\n        let refund_amount = funded_amount - tx_fee;\n\n        // 3. We construct the note finalization payloads with the correct amounts and hiding points to get the note\n        // hashes and unencrypted logs.\n        let fee_payer_finalization_payload =\n            U253Note::finalization_payload().new(&mut context, fee_payer_slot, tx_fee.to_field());\n        let user_finalization_payload =\n            U253Note::finalization_payload().new(&mut context, user_slot, refund_amount.to_field());\n\n        // 4. At last we emit the note hashes and the final note logs.\n        fee_payer_finalization_payload.emit();\n        user_finalization_payload.emit();\n        // --> Once the tx is settled user and fee recipient can add the notes to their pixies.\n    }\n\n    /// Internal ///\n\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: U253) {\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n\n        // Decrease the shielded supply by the `amount`\n        let new_shielded_supply = storage.shielded_supply.read().sub(amount);\n        storage.shielded_supply.write(new_shielded_supply);\n    }\n\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: U253) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n\n        // Decrease the shielded supply by the `amount`\n        let new_shielded_supply = storage.shielded_supply.read().sub(amount);\n        storage.shielded_supply.write(new_shielded_supply);\n    }\n\n    #[public]\n    #[internal]\n    fn _log_shield(from: AztecAddress, amount: U253) {\n        Shield { from, amount: amount.to_field() }.emit(encode_event(&mut context));\n    }\n\n    #[public]\n    #[internal]\n    fn _log_unshield(from: AztecAddress, amount: U253) {\n        Unshield { from, amount: amount.to_field() }.emit(encode_event(&mut context));\n    }\n\n    /// Unconstrained ///\n\n    pub(crate) unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.private_balances.at(owner).balance_of().to_field()\n    }\n}\n"
    },
    "48": {
      "path": "std/ops/arith.nr",
      "source": "// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n"
    },
    "51": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "52": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "57": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"
    },
    "6": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "60": {
      "path": "std/uint128.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                /// Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        /// Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        /// Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n"
    },
    "62": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/shield_gateway/src/capsule.nr",
      "source": "#[oracle(popCapsule)]\nunconstrained fn pop_capsule_oracle<let N: u32>() -> [Field; N] {}\n\n// A capsule is a \"blob\" of data that is passed to the contract through an oracle.\npub unconstrained fn pop_capsule<let N: u32>() -> [Field; N] {\n    pop_capsule_oracle()\n}\n"
    },
    "63": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/shield_gateway/src/main.nr",
      "source": "mod capsule;\nmod test;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract ShieldGateway {\n    use std::meta::derive;\n    use std::ops::arith::Add;\n\n    use aztec::{\n        context::{PrivateContext, PublicContext},\n        event::event_interface::EventInterface,\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        protocol_types::{\n            address::AztecAddress,\n            hash::poseidon2_hash,\n            traits::{\n                FromField,\n                Hash,\n                ToField,\n                Serialize,\n            },\n        },\n        state_vars::{PublicImmutable, SharedMutable},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n    };\n\n    use authwit::auth::assert_current_call_valid_authwit;\n\n    use shield_gateway_storage::ShieldGatewayStorage;\n    use token::Token;\n    use uint253::uint253::U253;\n\n    use crate::capsule::pop_capsule;\n\n    pub global CHANGE_DELAY_BLOCKS: u32 = 5;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicImmutable<AztecAddress, Context>,\n        default_channel_threshold: SharedMutable<U253, CHANGE_DELAY_BLOCKS, Context>,\n        // External contract to hold the channel balances\n        shield_gateway_storage: PublicImmutable<AztecAddress, Context>,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct ChannelCreation {\n        from: AztecAddress,\n        to: AztecAddress,\n        token: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct ChannelThresholdExceeded {\n        from: AztecAddress,\n        to: AztecAddress,\n        token: AztecAddress,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct DefaultChannelThresholdChanged {\n        new_threshold: Field,\n        effective_block: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct ChannelThresholdChanged {\n        new: Field,\n        token: AztecAddress,\n        effective_block: Field,\n    }\n\n    #[public]\n    #[initializer]\n    fn init(admin: AztecAddress, shield_gateway_storage: AztecAddress, default_channel_threshold: Field) {\n        storage.admin.initialize(admin);\n        storage.shield_gateway_storage.initialize(shield_gateway_storage);\n        _set_default_channel_threshold(&mut context, storage, default_channel_threshold);\n    }\n\n    pub unconstrained fn get_default_channel_threshold() -> Field {\n        storage.default_channel_threshold.get_current_value().to_field()\n    }\n\n    #[public]\n    #[view]\n    fn get_channel_threshold(token: AztecAddress) -> U253 {\n        let mut threshold = ShieldGatewayStorage::at(storage.shield_gateway_storage.read()).get_channel_threshold(token).view(&mut context);\n        if threshold.is_zero() {\n            threshold = storage.default_channel_threshold.get_current_value();\n        }\n        threshold\n    }\n\n    #[contract_library_method]\n    fn _assert_only_admin(context: &mut PublicContext, storage: Storage<&mut PublicContext>) {\n        assert(\n            context.msg_sender().eq(storage.admin.read()),\n            \"Unauthorized\",\n        );\n    }\n\n    #[public]\n    fn set_default_channel_threshold(new_threshold: Field) {\n        _assert_only_admin(&mut context, storage);\n        _set_default_channel_threshold(&mut context, storage, new_threshold);\n    }\n\n    #[public]\n    fn set_channel_threshold(token: AztecAddress, new_threshold: Field) {\n        _assert_only_admin(&mut context, storage);\n\n        let new_threshold = U253::from_field(new_threshold);\n\n        let _ = ShieldGatewayStorage::at(storage.shield_gateway_storage.read()).set_channel_threshold(token, new_threshold).call(&mut context);\n\n        ChannelThresholdChanged {\n            new: new_threshold.to_field(),\n            token,\n            // Change will be effective after `CHANGE_DELAY_BLOCKS` in public context and `CHANGE_DELAY_BLOCKS + 1` in private context\n            effective_block: context.block_number().add(ShieldGatewayStorage::CHANGE_DELAY_BLOCKS.to_field() + 1),\n        }\n            .emit(encode_event(&mut context));\n    }\n\n    #[private]\n    fn channel_exists(from: AztecAddress, to: AztecAddress, token: AztecAddress) -> bool {\n        _channel_exists(&mut context, storage, from, to, token)\n    }\n\n    #[contract_library_method]\n    fn _channel_exists(context: &mut PrivateContext, storage: Storage<&mut PrivateContext>, from: AztecAddress, to: AztecAddress, token: AztecAddress) -> bool {\n        let key = _channel_key(from, to, token);\n        ShieldGatewayStorage::at(storage.shield_gateway_storage.read()).is_channel_initialized(key).view(context)\n    }\n\n    #[private]\n    fn initialize_channel(\n        from: AztecAddress,\n        to: AztecAddress,\n        token: AztecAddress,\n        nonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let key = _channel_key(from, to, token);\n        let _ = ShieldGatewayStorage::at(storage.shield_gateway_storage.read())\n            .initialize_channel_balance(key, U253::zero(), from)\n            .call(&mut context);\n\n        // Publicly log new channel creation\n        ShieldGateway::at(context.this_address())\n            ._log_channel_creation(from, to, token)\n            .enqueue(&mut context);\n    }\n\n    #[private]\n    #[view]\n    fn get_channel_balance(\n        from: AztecAddress,\n        to: AztecAddress,\n        token: AztecAddress,\n    ) -> Field {\n        _get_channel_balance(&mut context, storage, from, to, token).to_field()\n    }\n\n    #[private]\n    fn channel_transfer(\n        token: AztecAddress,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field,\n    ) {\n        let amount = U253::from_field(amount);\n        let threshold = _get_channel_threshold_private(&mut context, storage, token);\n        let current_balance = _get_channel_balance(&mut context, storage, from, to, token);\n\n        let mut new_balance = current_balance + amount;\n        // Check if the threshold is exceeded\n        if new_balance > threshold {\n            // Log the channel threshold exceeded\n            ShieldGateway::at(context.this_address())\n                ._log_channel_threshold_exceeded(from, to, token)\n                .enqueue(&mut context);\n            // Once the threshold is exceeded, reset the balance to 0\n            new_balance = U253::zero();\n        }\n\n        // Update the channel balance\n        let _ = _set_channel_balance(&mut context, storage, from, to, token, new_balance);\n\n        // Finally, execute the transfer\n        Token::at(token).transfer_private_to_private(from, to, amount.to_field(), nonce).call(&mut context);\n    }\n\n    #[private]\n    fn verified_id_transfer(\n        token: AztecAddress,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: U253,\n        nonce: Field,\n    ) {\n        aztec::oracle::debug_log::debug_log_format(\n            \"Checking transfer of {0} tokens from {1} to {2}\",\n            [amount.to_field(), from.to_field(), to.to_field()],\n        );\n\n        // TODO: What checks should we perform here?\n        // Ensure Verified ID is provided & valid\n\n        // Safety: pop_capsule will eventually be verified\n        unsafe {\n            let verified_id: [Field; 5] = pop_capsule();\n            let _ = ShieldGateway::at(context.this_address()).verify_id_private(verified_id).view(\n                &mut context,\n            );\n        }\n\n        Token::at(token).transfer_private_to_private(from, to, amount.to_field(), nonce).call(\n            &mut context,\n        );\n    }\n\n    #[private]\n    #[view]\n    fn verify_id_private(verified_id: [Field; 5]) -> bool {\n        // TODO: Implement ID verification logic\n        aztec::oracle::debug_log::debug_log_format(\"Verified ID: {}\", verified_id);\n        true\n    }\n\n    #[public]\n    #[internal]\n    fn _log_channel_creation(from: AztecAddress, to: AztecAddress, token: AztecAddress) {\n        ChannelCreation { from, to, token }.emit(encode_event(&mut context));\n    }\n\n    #[public]\n    #[internal]\n    fn _log_channel_threshold_exceeded(from: AztecAddress, to: AztecAddress, token: AztecAddress) {\n        ChannelThresholdExceeded { from, to, token }.emit(encode_event(&mut context));\n    }\n\n    #[contract_library_method]\n    fn _set_default_channel_threshold(context: &mut PublicContext, storage: Storage<&mut PublicContext>, new_threshold: Field) {\n        storage.default_channel_threshold.schedule_value_change(U253::from_field(new_threshold));\n\n        DefaultChannelThresholdChanged {\n            new_threshold,\n            // Change will be effective after `CHANGE_DELAY_BLOCKS` in public context and `CHANGE_DELAY_BLOCKS + 1` in private context\n            effective_block: context.block_number().add(CHANGE_DELAY_BLOCKS.to_field() + 1),\n        }\n            .emit(encode_event(context));\n    }\n\n\n\n    #[contract_library_method]\n    fn _get_channel_threshold_private(context: &mut PrivateContext, storage: Storage<&mut PrivateContext>, token: AztecAddress) -> U253 {\n        let threshold = ShieldGatewayStorage::at(storage.shield_gateway_storage.read()).get_channel_threshold_private(token).view(context);\n\n        if threshold.is_zero() {\n            // If the threshold is not set for the token, use the default threshold\n            storage.default_channel_threshold.get_current_value()\n        } else {\n            threshold\n        }\n    }\n\n    #[contract_library_method]\n    fn _channel_key(from: AztecAddress, to: AztecAddress, token: AztecAddress) -> Field {\n        poseidon2_hash([from.to_field(), to.to_field(), token.to_field()])\n    }\n\n    #[contract_library_method]\n    fn _get_channel_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        from: AztecAddress,\n        to: AztecAddress,\n        token: AztecAddress,\n    ) -> U253 {\n        let key = _channel_key(from, to, token);\n         ShieldGatewayStorage::at(storage.shield_gateway_storage.read())\n            .get_channel_balance(key)\n            .call(context)\n    }\n\n    #[contract_library_method]\n    fn _set_channel_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        from: AztecAddress,\n        to: AztecAddress,\n        token: AztecAddress,\n        amount: U253,\n    ) -> U253 {\n        let key = _channel_key(from, to, token);\n        ShieldGatewayStorage::at(storage.shield_gateway_storage.read())\n            .set_channel_balance(key, amount, from)\n            .call(context)\n    }\n\n    pub unconstrained fn get_storage_address() -> AztecAddress {\n        storage.shield_gateway_storage.read()\n    }\n\n    pub unconstrained fn channel_key(from: AztecAddress, to: AztecAddress, token: AztecAddress) -> Field {\n        _channel_key(from, to, token)\n    }\n}\n"
    },
    "69": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "7": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "78": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"
    },
    "85": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            /// for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\n        /// to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "86": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "87": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        /// Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "88": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    }
  }
}
