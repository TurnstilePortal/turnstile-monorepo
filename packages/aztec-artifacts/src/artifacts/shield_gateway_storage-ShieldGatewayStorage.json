{
  "transpiled": true,
  "noir_version": "1.0.0-beta.1+4144a8dce4789d85",
  "name": "ShieldGatewayStorage",
  "functions": [
    {
      "name": "set_channel_balance",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 20
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16049994897275280777": {
            "error_kind": "string",
            "string": "Non-zero delay change for zero hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2435529361475140548": {
            "error_kind": "string",
            "string": "Non-zero value change for zero hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "key",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "value",
            "type": {
              "fields": [
                {
                  "name": "value",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "uint253::uint253::U253"
            },
            "visibility": "private"
          },
          {
            "name": "owner",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "get_public_storage_hints",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "random",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8861757336002045335": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 99
          },
          "9862881900111276825": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 35
          }
        },
        "parameters": [
          {
            "name": "log_plaintext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_log"
      ]
    },
    {
      "name": "is_channel_initialized_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "key",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "is_channel_initialized_unconstrained"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==",
      "debug_symbols": "dY/RCoMwDEX/Jc99aOqU2V+RIVWjFEortQ6G+O+LQ8Rt+HLJDSeX3AU6auahtr4PE+hqARdak2zw7JZVQBOtc3aoz2uQm2D24afR+M1OycQEOrsLIN+BvhV83VtHoAu1ij8QJUq1szyr8sAxv+BLPHiF8ot/rGyfJlrTONpf72ffnpqk10g/pcYYWurmSFu9UzPWCnOhJMdy9Bs=",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "compute_note_hash_and_optionally_a_nullifier",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 20
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "storage_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_type_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "compute_nullifier",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "packed_note_content",
            "type": {
              "kind": "array",
              "length": 3,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "compute_note_hash_and_optionally_a_nullifier"
      ]
    },
    {
      "name": "get_channel_threshold_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16049994897275280777": {
            "error_kind": "string",
            "string": "Non-zero delay change for zero hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2435529361475140548": {
            "error_kind": "string",
            "string": "Non-zero value change for zero hash"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7323347716749579232": {
            "error_kind": "string",
            "string": "Function get_channel_threshold_private can only be called statically"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "key",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_public_storage_hints",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_admin_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "H4sIAAAAAAAA/7WVTVODMBCGk5ZaU0Rn6h/womewdNpj/bh48eDBeyShdlSYAbz3pwu6DOsamDqEnWE2n0/ebJaEs8Y4eIf9Ns4OMN7RdgVegB+h/nH5baDu97NAkHVt8td+uBSG/VnUvxDA5MPw/Zo/UPz9KXDu9w0f76Ve97j8TlDZg7LXMX9I7eXZhgIxbfNLC85b9FfmQhwuoF7F5hTKW13cvqfR2+Pnx4vO8F9Go8sMZGwVdd5Q79KkyGRU3CiV6TynhJGBzFqoM0R9lbvkQbXp+SftWWf5Lk0ozTmQNoYxEzQezxGGtg14v58FHnCPiHa87hS1W8y1a1NW0BPA68+IVtu5z8l6+GxwfOqcq7LAhXJepJnc6ictFZZOw0c9TQ3T24bT3DQPpw7tp29kmw19pXODzq7Qdh2F6Tc5Y3+vg3qux9qveJc1z72zt7/31fpn79/6gT9h5ovPQf14/CXUZ0h/7Z0eOuOVDOKFjOVSKhVGck74jMTpCz4BVsuECQAA",
      "debug_symbols": "7ZjRasMgFIbfxetcePR41L7KGCNt0xIISUnTwSh99+kWW7eE5MK71psSy4f8fj+BeK5sX20vx4+6PXRntnm7sqbblUPdtW51vRVs29dNUx8/4r8Z9z+AP/z5VLZ+eR7KfmAbIBIFq9q9f9TC7XCom4ptyD1OYMPVyBoh76ihGVSJgCrF7yggv70XDFR6FEUhijbLUVDaEUUykyiUHMVyObIW9HIUugskQZMoOj0KQoiicCWK4SOq+bQgMxcFuQjbI5d2OYoEFbRIIR4wkJqhAXXoE9BGauwcLcDokRaCr9QPlkyAuaRlWHMMVtSjS1BzKVCHfdHaP6w3aLPBVYPShjdTxa/Dr0HBs8FEg5ANJhoU2WCiQZkNJhrEbDDRoMoGEw3Sixok+zBo1gy6I4YTykiH9LeCaQyugw/gJqLlHG0gtGMkrrAE4cueouN51jepc5NP0uSr3tGer8lXvSs+WZM3t/ws+7rcNtU4jjtc2l00nRu+TtW/Qd2p73bV/tJXfmQXTev87VeKQmq3rdv6Gw==",
      "brillig_names": [
        "get_admin_unconstrained"
      ]
    },
    {
      "name": "get_channel_balance",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 20
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16049994897275280777": {
            "error_kind": "string",
            "string": "Non-zero delay change for zero hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2435529361475140548": {
            "error_kind": "string",
            "string": "Non-zero value change for zero hash"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "key",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_public_storage_hints",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_note_internal",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "initialize_channel_balance",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16049994897275280777": {
            "error_kind": "string",
            "string": "Non-zero delay change for zero hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2435529361475140548": {
            "error_kind": "string",
            "string": "Non-zero value change for zero hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "key",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "value",
            "type": {
              "fields": [
                {
                  "name": "value",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "uint253::uint253::U253"
            },
            "visibility": "private"
          },
          {
            "name": "owner",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "get_public_storage_hints",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "random",
        "notify_created_nullifier_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "init",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "init"
      ]
    },
    {
      "name": "get_channel_threshold",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "3238985437272151328": {
            "error_kind": "string",
            "string": "Function get_channel_threshold can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "key",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "uint253::uint253::U253"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_channel_threshold"
      ]
    },
    {
      "name": "set_channel_threshold",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "key",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "value",
            "type": {
              "fields": [
                {
                  "name": "value",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "uint253::uint253::U253"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "uint253::uint253::U253"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBLJgAABAMmAgMEAiYCBAQAHxgABAADgEgtCIBIAAEtCIBJAAIkAAAAUSQAAACDLQQAAYBKJwIAAgSASiYCAwQBOg0AAgADJwCAQwQAACcAgEQEAAEnAIBFBAACKgCARgAAAAAAAAAAAQAAAAAAAAAAJwCARwQAAyUkAAAQdiwIAQQAAAECASYCBQEALA4FBCwIAQYAAAECASYCBwAALA4HBiwIAQgAAAECASYCCQACLA4JCB4CAAoAHgIACwAyOAAKAAsADCYCCgEBIwIADAAAAOIkAAAQnx4CAAsBHgIADAUcDAwOBBwMDg0AHAwNDAQmAg0AAywIAQ4mAg8EAwAQAQ8BJgMOBAEAKA4CDywMDxAsDgcQACgQAhAsDg0QKgIADQAAAAAAAAAAAgAAAAAAAAAAJgITBBQsCAAULAwNFQAQABMAJAAAELEsBAAALAwVDywMFhAsDBcRLAwYEiwNDxMAKBMCEywOEw8sCAETAAABAgEsDg8TLA0QDwAoDwIPLA4PECwIAQ8AAAECASwOEA8sCAEQAAABAgEsDhEQLAgBEQAAAQIBLA4SES0IgEMAAyIAAAHCDSgAA4BFABIjAgASAAAQAyIAAAHXJgISBBQsCAAULAwTFSwMDxYsDBAXLAwRGAAQABIAJAAAEU0sBAAALAwVDiYCEAQRLAgAESwMBRIsDAcTLAwJFCwMDhUAEAAQACQAABHLLAQAACwMEg8AKA8CEAEoABCAQwARLA0RDgAoDwIRASgAEYBEABIsDRIQACgPAhIBKAASgEUAEywNExEcDBESBBwMEg8AHAwPEQQMOAwRDyMCAA8AAAKKIgAAAoEsDBADIgAAApMsDA4DIgAAApMKOAsDDiMCAA4AAAKlJAAAEp8mAgMABSwIAQsmAg4EAwAQAQ4BJgMLBAEAKAsCDiwMDg8sDgMPACgPAg8sDgEPJgIQBBEsCAARLAwNEgAQABAAJAAAELEsBAAALAwSASwMEwMsDBQOLAwVDywNARAAKBACECwOEAEsCAEQAAABAgEsDgEQLA0DAQAoAQIBLA4BAywIAQEAAAECASwOAwEsCAEDAAABAgEsDg4DLAgBDgAAAQIBLA4PDi0IgEMADCIAAANXDSgADIBFAA8jAgAPAAAPkCIAAANsJgIPBBEsCAARLAwQEiwMARMsDAMULAwOFQAQAA8AJAAAEU0sBAAALAwSDAo4DAcBCjgBBQMjAgADAAADriQAABKxLA0EASwNBgMsDQgELAgBBiYCCAQDABABCAEmAwYEAQAoBgIILAwIDiwOBw4AKA4CDiwODA4mAhAEESwIABEsDA0SABAAEAAkAAAQsSwEAAAsDBIHLAwTCCwMFA4sDBUPLA0HEAAoEAIQLA4QBywIARAAAAECASwOBxAsDQgHACgHAgcsDgcILAgBBwAAAQIBLA4IBywIAQgAAAECASwODggsCAEOAAABAgEsDg8OLQiAQwALIgAABGcNKAALgEUADyMCAA8AAA8dIgAABHwmAhEEEiwIABIsDBATLAwHFCwMCBUsDA4WABAAEQAkAAARTSwEAAAsDBMPJgIIBBAsCAAQLAwBESwMAxIsDAQTLAwPFAAQAAgAJAAAEcssBAAALAwRBwAoBwIDASgAA4BDAAQsDQQBJgIDBA4sCAAOLAwBDwAQAAMAJAAAEsMsBAAAACgHAgQBKAAEgEQACCwNCAMmAgQEDiwIAA4sDAMPABAABAAkAAASwywEAAAAKAcCCAEoAAiARQAOLA0OBBwMBAgEHAwIBwAcDAcEBCYCBwABLAgBCCYCDgQDABABDgEmAwgEAQAoCAIOLAwODywOBw8AKA8CDywODA8mAhEEEiwIABIsDA0TABAAEQAkAAAQsSwEAAAsDBMHLAwUDiwMFQ8sDBYQLA0HEQAoEQIRLA4RBywIAREAAAECASwOBxEsDQ4HACgHAgcsDgcOLAgBBwAAAQIBLA4OBywIAQ4AAAECASwODw4sCAEPAAABAgEsDhAPLQiAQwALIgAABfwNKAALgEUAECMCABAAAA6qIgAABhEmAhMEFCwIABQsDBEVLAwHFiwMDhcsDA8YABAAEwAkAAARTSwEAAAsDBUSLgwAEgAHHAwHDgAqAgAPAP////////////////////8OOA4PESMCABEAAAZuJAAAEwUcDAcPBRwMDw4AAjgHDg8JKAAPgEYABxwMBxEFHAwRDwAcDA8HBSkCAA8FAAAAAgAAAAAGOAcPERwMERIBHAwSDwUcDA8RARwMDg8FKQIADgUAAAABAAAAAAY4Dw4SHAwSEwQGOAcOEhwMEhQBHAwUDgUcDA4SARwMDxQEHAwUDgUcDA4PBBwMBxQEHAwUDgUcDA4HBCMCABEAAAcfIgAABxAsDAULLQiAQwAQIgAABywsDAoLLAwTECIAAAcsIwIAEgAAB0giAAAHOSwMBQ4tCIBDABEiAAAHVSwMCg4sDA8RIgAAB1UeAgAKBRwMChIEHAwSDwAcDA8KBAw4CgcPJgISBAUjAgAPAAAHqCIAAAeAIwIADgAAB5YiAAAHjSwMEg8iAAAHnywMEQ8iAAAHnywMDwUiAAAH0CMCAAsAAAe+IgAAB7UsDBIPIgAAB8csDBAPIgAAB8csDA8FIgAAB9AAOAoFEg44ChITIwIAEwAAB+ckAAATFww4CgQFIwIABQAACAIiAAAH+SwMAw8iAAAICywMAQ8iAAAICyYCEwQULAgAFCwMDRUAEAATACQAABCxLAQAACwMFQMsDBYELAwXBSwMGAosDQMTACgTAhMsDhMDLAgBEwAAAQIBLA4DEywNBAMAKAMCAywOAwQsCAEDAAABAgEsDgQDLAgBBAAAAQIBLA4FBCwIAQUAAAECASwOCgUtCIBDAAEiAAAIjw0oAAGARQAKIwIACgAADjciAAAIpCYCCgQULAgAFCwMExUsDAMWLAwEFywMBRgAEAAKACQAABFNLAQAACwMFQYcDBIDACwIAQQmAgUEBAAQAQUBJgMEBAEAKAQCBSwMBQosDg8KACgKAgosDgIKACgKAgosDgMKLQiAQwABIgAACRENKAABgEcABSMCAAUAAA3xIgAACSYmAhMEFCwIABQsDA0VABAAEwAkAAAQsSwEAAAsDBUFLAwWBiwMFwosDBgSLA0FEwAoEwITLA4TBSwIARMAAAECASwOBRMsDQYFACgFAgUsDgUGLAgBBQAAAQIBLA4GBSwIAQYAAAECASwOCgYsCAEKAAABAgEsDhIKLQiAQwABIgAACaoNKAABgEUAEiMCABIAAA1+IgAACb8mAhIEFCwIABQsDBMVLAwFFiwMBhcsDAoYABAAEgAkAAARTSwEAAAsDBUIJgIGBBIsCAASLAwLEywMEBQsDA4VLAwRFiwMBxcAEAAGACQAABMpLAQAACwMEwUAKAUCCgEoAAqAQwASLA0SBi8MAAYACCwIAQUmAgYEAwAQAQYBJgMFBAEAKAUCBiwMBggsDgkIACgIAggsDgwIJgIMBBIsCAASLAwNEwAQAAwAJAAAELEsBAAALAwTBiwMFAgsDBUJLAwWCiwNBgwAKAwCDCwODAYsCAEMAAABAgEsDgYMLA0IBgAoBgIGLA4GCCwIAQYAAAECASwOCAYsCAEIAAABAgEsDgkILAgBCQAAAQIBLA4KCS0IgEMAASIAAArdDSgAAYBFAAojAgAKAAANCyIAAAryJgIKBBIsCAASLAwMEywMBhQsDAgVLAwJFgAQAAoAJAAAEU0sBAAALAwTBSwNBAYAKAYCBiwOBgQmAgYEEiwIABIsDAsTLAwQFCwMDhUsDBEWLAwHFwAQAAYAJAAAEyksBAAALAwTBAAoBAIHASgAB4BDAAgsDQgGLAgBBCYCBwQFABABBwEmAwQEAQAoBAIHLAwHCCwODwgAKAgCCCwOAggAKAgCCCwOAwgAKAgCCCwOBggsDQQDACgDAgMsDgMEKgIAAwAAAAAAAAAABAAAAAAAAAAAJgIKBAssCAALLAwDDAAQAAoAJAAAELEsBAAALAwMBiwMDQcsDA4ILAwPCSwNBgMAKAMCAywOAwYsCAEDAAABAgEsDgYDLA0HBgAoBgIGLA4GBywIAQYAAAECASwOBwYsCAEHAAABAgEsDggHLAgBCAAAAQIBLA4JCCYCCQQELQiAQwABIgAADFAMOAEJCiMCAAoAAAyYIgAADGImAgQECSwIAAksDAMKLAwGCywMBwwsDAgNABAABAAkAAARTSwEAAAsDAoBLwwAAQAFLAwCASUjAgAKAAAMpSIAAAz6JgILBAQMOAELDCMCAAwAAAy8JAAAFBYAKAQCCwA4CwEMLA0MCiYCCwQMLAgADCwMAw0sDAYOLAwHDywMCBAsDAoRABAACwAkAAAUKCwEAAAiAAAM+gEoAAGARAAKLAwKASIAAAxQIwIACgAADRgiAAANbSYCDQQCDDgBDRIjAgASAAANLyQAABQWACgFAg0AOA0BEiwNEgomAg0EEiwIABIsDAwTLAwGFCwMCBUsDAkWLAwKFwAQAA0AJAAAFCgsBAAAIgAADW0BKAABgEQACiwMCgEiAAAK3SMCABIAAA2LIgAADeAmAhQEAgw4ARQVIwIAFQAADaIkAAAUFgAoCAIUADgUARUsDRUSJgIUBBUsCAAVLAwTFiwMBRcsDAYYLAwKGSwMEhoAEAAUACQAABQoLAQAACIAAA3gASgAAYBEABIsDBIBIgAACaocDAEFAAA4BgUKJgISBAMMOAESEyMCABMAAA4SJAAAFBYAKAQCEgA4EgETLA0TBS8MAAUACgEoAAGARAAFLAwFASIAAAkRIwIACgAADkQiAAAOmSYCFAQCDDgBFBUjAgAVAAAOWyQAABQWACgGAhQAOBQBFSwNFQomAhQEFSwIABUsDBMWLAwDFywMBBgsDAUZLAwKGgAQABQAJAAAFCgsBAAAIgAADpkBKAABgEQACiwMCgEiAAAIjyMCABAAAA63IgAADwwmAhIEAgw4CxITIwIAEwAADs4kAAAUFgAoCAISADgSCxMsDRMQJgISBBMsCAATLAwRFCwMBxUsDA4WLAwPFywMEBgAEAASACQAABQoLAQAACIAAA8MASgAC4BEABAsDBALIgAABfwjAgAPAAAPKiIAAA9/JgIRBAIMOAsREiMCABIAAA9BJAAAFBYAKAYCEQA4EQsSLA0SDyYCEQQSLAgAEiwMEBMsDAcULAwIFSwMDhYsDA8XABAAEQAkAAAUKCwEAAAiAAAPfwEoAAuARAAPLAwPCyIAAARnIwIADwAAD50iAAAP8iYCEQQCDDgMERIjAgASAAAPtCQAABQWACgLAhEAOBEMEiwNEg8mAhEEEiwIABIsDBATLAwBFCwMAxUsDA4WLAwPFwAQABEAJAAAFCgsBAAAIgAAD/IBKAAMgEQADywMDwwiAAADVyMCABIAABAQIgAAEGUmAhQEAgw4AxQVIwIAFQAAECckAAAUFgAoDgIUADgUAxUsDRUSJgIUBBUsCAAVLAwTFiwMDxcsDBAYLAwRGSwMEhoAEAAUACQAABQoLAQAACIAABBlASgAA4BEABIsDBIDIgAAAcInAIAEBHgADQAAAIAEgAMjAIADAAAQnikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSQAABB2JgICAAAsCAEDJgIEBAQAEAEEASYDAwQBACgDAgQsDAQFLA4CBQAoBQIFLA4CBQAoBQIFLA4CBSwNAwQAKAQCBCwOBAMsCAEEJgIFBAUAEAEFASYDBAQBACgEAgUsDAUGLA4CBgAoBgIGLA4CBgAoBgIGLA4CBgAoBgIGLA4BBiYCAQEALAwEAiwMAQQsDAMBLQiAQwADJSQAABB2LA0EBSYCBgEACjgFBgcjAgAHAAARcSYCCAQAOwkBCCYCBQQGLAgABiwMAQcsDAIILAwDCSwMBAoAEAAFACQAABVVLAQAACwNAQUsDQIGLA0DBywOBQEsDgYCLA4HAyYCAQEBLA4BBAAoBgICASgAAoBDAAMsDQMBJSQAABB2JgIGAAAsCAEHJgIIBAQAEAEIASYDBwQBACgHAggsDAgJLA4GCQAoCQIJLA4GCQAoCQIJLA4GCSwIAQYAAAECASwOBwYtCIBDAAUiAAASHw0oAAWARwABIwIAAQAAEjkiAAASNCwNBgElLA0GARwMBQIAADgEAgMuDAADAAImAgcEAww4BQcIIwIACAAAEmQkAAAUFi0EAAGAAycAgAQEAAQkAAAWrS0IgAUAAwAoAwIHADgHBQgsDgIIASgABYBEAAEsDgMGLAwBBSIAABIfKQEAAQU+HIgCM5dGPDsBAQIlKQEAAQUC3G4ngHYSnTsBAQIlJAAAEHYcDAECACsCAAMAH/////////////////////////////////////////8OOAIDBCMCAAQAABMEJAAAEwUlKQEAAQVaAuQbtR6pnzsBAQIlKQEAAQVFp8pxGUHkFTsBAQIlJAAAEHYcDAIGBSkCAAIFAAAAAQAAAAAEOAYCByYCCQUACjgJAggjAgAIAAATbgY4BwILCjgLBgojAgAKAAATbiQAABc7HAwEBgUAOAcGBA44BwQIIwIACAAAE4okAAATFxwMAQYFKQIAAQUAAAACAAAAAAQ4BgEHHAwDAQUEOAECAwA4BwMBDjgHAQIjAgACAAATwiQAABMXHAwFAgUAOAECAw44AQMFIwIABQAAE94kAAATFxwMBAEAHAwDAgAFKAACgEYAAwA4AQMCLAgBASYCAwQCABABAwEmAwEEAQAoAQIDLAwDBCwOAgQlKQEAAQXonQn+oREtDjsBAQIlJAAAEHYsDQMGLA0EByYCCAEACjgHCAkjAgAJAAAUUCYCCgQAOwkBCgsoAAaARwAHIwIABwAAFOEiAAAUZSwNAQYsDQIHLA0DCCwNBAkmAgsEAww4CAsMIwIADAAAFIwkAAAUFi0EAAaAAycAgAQEAAQkAAAWrS0IgAUACgAoCgILADgLCAwsDgUMASgACIBEAAUOOAgFBiMCAAYAABTMJAAAExcsDgoBLA4HAiwOBQMsDgkEIgAAFVQmAgYEBywIAAcsDAEILAwCCSwMAwosDAQLABAABgAkAAAVVSwEAAAsDQEGLA0CBywNBAgtBAAGgAMnAIAEBAAEJAAAFq0tCIAFAAkAKAkCCgEoAAqAQwALLA4FCywOCQEsDgcCLQqARAADLA4IBCIAABVUJSQAABB2LQiAQwAFIgAAFWUNKAAFgEcABiMCAAYAABXVIgAAFXosDQEFLA0CBiwNAwcsDQQIJgIJBAQsCAEKJgILBAUAEAELASYDCgQBACgGAgsmAgwEBAAoCgINPg8ACwANLA0KBgAoBgIGLA4GCiwOBQEsDgoCLA4HAywOCAQlLA0DBgw4BQYHASgABYBEAAYjAgAHAAAV8yIAABakLA0BBywNAggsDQMJLA0ECiYCDAQEDDgFDA0jAgANAAAWGiQAABQWACgIAgwAOAwFDSwNDQsmAg0EAww4BQ0OIwIADgAAFj8kAAAUFgAoBwINADgNBQ4sDQ4MADgLDA0mAgwEBAw4BQwOIwIADgAAFmkkAAAUFi0EAAiAAycAgAQEAAUkAAAWrS0IgAUACwAoCwIMADgMBQ4sDg0OLA4HASwOCwIsDgkDLA4KBCIAABakLAwGBSIAABVlLQGAA4AGCwCABgACgAcjAIAHAAAWyCIAABbTLQCAA4AFIgAAFzotAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAIAMAAAXJi0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAAW9ScBgAUEAAEDAIAGAAKABiIAABc6JSkBAAEFZGGIqMbPlMs7AQECJS0AGMoYyg==",
      "debug_symbols": "",
      "brillig_names": [
        "set_channel_threshold"
      ]
    },
    {
      "name": "get_authorized_caller_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_authorized_caller_unconstrained"
      ]
    },
    {
      "name": "is_channel_initialized",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16049994897275280777": {
            "error_kind": "string",
            "string": "Non-zero delay change for zero hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2435529361475140548": {
            "error_kind": "string",
            "string": "Non-zero value change for zero hash"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "9759272949849148864": {
            "error_kind": "string",
            "string": "Function is_channel_initialized can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "key",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_public_storage_hints",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "is_channel_initialized_unconstrained",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "set_authorized_caller",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14186467995880275071": {
            "error_kind": "string",
            "string": "Only the admin can set the authorized caller"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "caller",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_authorized_caller"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14186467995880275071": {
            "error_kind": "string",
            "string": "Only the admin can set the authorized caller"
          },
          "16541607464495309456": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 16
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "1775037338128445371": {
            "error_kind": "string",
            "string": "Deserialized value is too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "3238985437272151328": {
            "error_kind": "string",
            "string": "Function get_channel_threshold can only be called statically"
          },
          "4475601672736294460": {
            "error_kind": "string",
            "string": "Unauthorized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "U253Note"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "ShieldGatewayStorage"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "authorized_caller",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "channel_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "channel_thresholds",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "key",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "fields": [
                        {
                          "name": "value",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "uint253::uint253::U253"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::set_channel_threshold_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "uint253::uint253::U253"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::set_channel_threshold_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "key",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::get_channel_threshold_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "uint253::uint253::U253"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::get_channel_threshold_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::init_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::init_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "fields": [
                        {
                          "name": "value",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "uint253::uint253::U253"
                    }
                  },
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::initialize_channel_balance_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "uint253::uint253::U253"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::initialize_channel_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "key",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::get_channel_threshold_private_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "uint253::uint253::U253"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::get_channel_threshold_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "caller",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::set_authorized_caller_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::set_authorized_caller_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::get_channel_balance_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "uint253::uint253::U253"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::get_channel_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "fields": [
                        {
                          "name": "value",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "uint253::uint253::U253"
                    }
                  },
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::set_channel_balance_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "uint253::uint253::U253"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::set_channel_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "ShieldGatewayStorage::is_channel_initialized_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "ShieldGatewayStorage::is_channel_initialized_abi"
        }
      ]
    }
  },
  "file_map": {
    "106": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        /// Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "108": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::embedded_curve_ops::multi_scalar_mul;\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "109": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::{\n    embedded_curve_ops::fixed_base_scalar_mul, field::bn254::decompose,\n    hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "110": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    /// Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "116": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "125": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\n    oracle::note_discovery::deliver_note, utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::compute_note_hash_nonce,\n};\n\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\n// the note type id.\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashesAndNullifier {\n    pub note_hash: Field,\n    pub unique_note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would've been\n/// created, along with the list of unique note hashes in said transaction.\n///\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\n///\n/// ```\n/// |packed_note_content, note_header, note_type_id| {\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\n///             MyNoteType::unpack_content,\n///             note_header,\n///             true,\n///             packed_note_content.storage(),\n///         )\n///     } else {\n///         panic(f\"Unknown note type id {note_type_id}\")\n///     };\n///\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\n///         note_hash: hashes[0],\n///         unique_note_hash: hashes[1],\n///         inner_nullifier: hashes[3],\n///     })\n/// }\n/// ```\npub unconstrained fn do_process_log<Env>(\n    context: UnconstrainedContext,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field) -> Option<NoteHashesAndNullifier>,\n) {\n    let (storage_slot, note_type_id, packed_note_content) =\n        destructure_log_plaintext(log_plaintext);\n\n    // We need to find the note's nonce, which is the one that results in one of the unique note hashes from tx_hash\n    for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            let header = NoteHeader::new(context.this_address(), candidate_nonce, storage_slot);\n\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes =\n                compute_note_hash_and_nullifier(packed_note_content, header, note_type_id).unwrap();\n\n            if hashes.unique_note_hash == expected_unique_note_hash {\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\n\n                assert(\n                    deliver_note(\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\n                        storage_slot,\n                        candidate_nonce,\n                        packed_note_content,\n                        hashes.note_hash,\n                        hashes.inner_nullifier,\n                        tx_hash,\n                        recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_LOG_RESERVED_FIELDS == 2,\n        \"unepxected value for NOTE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n    let note_type_id = log_plaintext.get(1);\n\n    let packed_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, packed_note_content)\n}\n\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..MaxLen {\n        if i < vec.len() {\n            f(vec.get_unchecked(i), i);\n        }\n    }\n}\n"
    },
    "126": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let packed_note_content = Note::pack_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        packed_note_content,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"
    },
    "128": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "130": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note_content: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note_content[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_content<let N: u32>(\n    packed_note_content: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note_content, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    /// Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    /// is check that the metadata is correct, and that the note exists.\n    let note = unsafe { get_note_internal(storage_slot) };\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    /// Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.pack_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_content(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "136": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    unpack_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    packed_note_content: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = unpack_content(array::subarray(packed_note_content, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"
    },
    "140": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "141": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "142": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "146": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n"
    },
    "147": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "148": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "151": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\nuse dep::protocol_types::address::AztecAddress;\n\n/// Informs PXE of a note's existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The note's `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\n/// `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was sucessfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        content,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n"
    },
    "152": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"
    },
    "154": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "155": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "158": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "162": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr",
      "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_note, view_notes},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nmod test;\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note, let N: u32> PrivateMutable<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note) -> NoteEmission<Note> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) -> NoteEmission<Note> {\n        let (prev_note, note_hash_for_read_request): (Note, Field) =\n            get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(self.context, prev_note, note_hash_for_read_request);\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace(self, note: &mut Note) -> NoteEmission<Note> {\n        /// Safety: `check_nullifier_exists` is an unconstrained function - we can constrain a true value\n        /// by providing an inclusion proof of the nullifier, but cannot constrain a false value since\n        /// a non-inclusion proof would only be valid if done in public.\n        /// Ultimately, this is not an issue given that we'll either:\n        ///  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        ///    nullifier, or\n        ///  - replace the current value, which would fail if it was not initialized since we wouldn't be able\n        ///    to produce an inclusion proof for the current note\n        /// This means that an honest oracle will assist the prover to produce a valid proof, while a malicious\n        /// oracle (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce\n        /// a proof.\n        let is_initialized =\n            unsafe { check_nullifier_exists(self.compute_initialization_nullifier()) };\n\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note(self) -> NoteEmission<Note> {\n        let mut (note, note_hash_for_read_request) = get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, &mut note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note, let N: u32> PrivateMutable<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    pub unconstrained fn view_note(self) -> Note {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"
    },
    "165": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "168": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr",
      "source": "use dep::protocol_types::traits::Packable;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub(crate) struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub(crate) fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub(crate) fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub(crate) fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub(crate) fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub(crate) fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Packable<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn pack(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33)\n            + (self.post.is_some() as u64 * (1 << 32))\n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n\n    fn unpack(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some {\n                Option::some(pre_inner)\n            } else {\n                Option::none()\n            },\n            post: if post_is_some {\n                Option::some(post_inner)\n            } else {\n                Option::none()\n            },\n            block_of_change,\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n"
    },
    "17": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "170": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr",
      "source": "use dep::protocol_types::traits::{FromField, Packable, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub(crate) struct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub(crate) fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub(crate) fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub(crate) fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub(crate) fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub(crate) fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32,\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Packable<3> for ScheduledValueChange<T>\nwhere\n    T: ToField + FromField,\n{\n    fn pack(self) -> [Field; 3] {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n\n    fn unpack(input: [Field; 3]) -> Self {\n        Self {\n            pre: FromField::from_field(input[0]),\n            post: FromField::from_field(input[1]),\n            block_of_change: FromField::from_field(input[2]),\n        }\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n"
    },
    "172": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    hash::{poseidon2_hash, poseidon2_hash_with_separator},\n    traits::{FromField, Packable, ToField},\n    utils::arrays::array_concat,\n};\n\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse crate::state_vars::{\n    shared_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    storage::Storage,\n};\nuse dep::std::mem::zeroed;\n\npub(crate) mod scheduled_delay_change;\npub(crate) mod scheduled_value_change;\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// Separators separating storage slot of different values within the same state variable\nglobal VALUE_CHANGE_SEPARATOR: u32 = 0;\nglobal DELAY_CHANGE_SEPARATOR: u32 = 1;\nglobal HASH_SEPARATOR: u32 = 2;\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, let INITIAL_DELAY: u32, Context, let N: u32> Storage<N> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, Context> SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], VALUE_CHANGE_SEPARATOR)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], DELAY_CHANGE_SEPARATOR)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], HASH_SEPARATOR)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n\n    pub fn schedule_value_change(self, new_value: T) {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    ) {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change),\n        );\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub fn get_current_value(self) -> T {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_block_number) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon =\n            value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        /// Safety: The hints are checked to be a preimage of a hash obtained from constrained context.\n        let (value_change_hint, delay_change_hint) = unsafe {\n            get_public_storage_hints(address, self.storage_slot, historical_block_number)\n        };\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        if hash != 0 {\n            assert_eq(\n                hash,\n                SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint),\n                \"Hint values do not match hash\",\n            );\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            assert_eq(\n                value_change_hint,\n                ScheduledValueChange::unpack(zeroed()),\n                \"Non-zero value change for zero hash\",\n            );\n            assert_eq(\n                delay_change_hint,\n                ScheduledDelayChange::unpack(zeroed()),\n                \"Non-zero delay change for zero hash\",\n            );\n        };\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    ) -> Field {\n        let concatenated: [Field; 4] = array_concat(value_change.pack(), delay_change.pack());\n        poseidon2_hash(concatenated)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, UnconstrainedContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub unconstrained fn get_current_value(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    unconstrained fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, let INITIAL_DELAY: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>)\nwhere\n    T: ToField + FromField + Eq,\n{\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy: SharedMutable<T, INITIAL_DELAY, ()> = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number),\n        storage_read(address, dummy.get_delay_change_storage_slot(), block_number),\n    )\n}\n"
    },
    "18": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "186": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "187": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    vec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "188": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/utils/bytes.nr",
      "source": "use crate::oracle::random::random;\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole bytes.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted into a Field. If the last chunk\n/// is less than 31 bytes long, then only the relevant bytes are considered.\n/// For example, [1, 10, 3] is encoded as [1 * 256^2 + 10 * 256 + 3]\n/// Note: ceil(N / 31) = (N + 30) / 31\npub fn be_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + j] as Field;\n        }\n\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\npub fn le_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            let k = 31 - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + k] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            let k = (N - ((N / 31) * 31)) - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + k] as Field;\n        }\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields.\n///\n/// It appears that the original author of this function wants to give the caller some control\n/// over the number of bytes that are returned: the final field can be mapped to fewer than 31 bytes,\n/// based on the caller's choice of M.\n/// Given the input is N fields, and each field (except the last) is mapped to 31 bytes,\n/// we definitely need M > (N - 1) * 31 to cover those first (N - 1) fields. Hence the static assertion.\n/// TODO: this is the same as the \"le\" version of this function, save for the `field.to_be_bytes()` calls. I tried passing the conversion function in as a parameter, to reduce code duplication, but couldn't get it to work.\npub fn fields_to_be_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_be_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 little-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields. You'll\n/// end up with quite a strange ordering of bytes if you use this particular function.\npub fn fields_to_le_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_le_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_le_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each field is converted to a 32-byte big-endian array.\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end,\n/// every 32 bytes. Be careful that such a gap doesn't leak information!\npub fn fields_to_be_bytes_32<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field = fields[i];\n        let field_as_bytes: [u8; 32] = field.to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\nunconstrained fn byte_to_bits(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Returns as many random bits as specified through N.\nunconstrained fn get_random_bits<let N: u32>() -> [u1; N] {\n    // Note: (N + 7) / 8 = ceil(N / 8)\n    let bytes = get_random_bytes::<(N + 7) / 8>();\n    let mut bits: [u1; N] = [0; N];\n    for i in 0..bytes.len() - 1 {\n        let mut byte = bytes[i];\n        for j in 0..8 {\n            let bit_idx = i * 8 + j;\n            bits[bit_idx] = (byte & 1) as u1;\n            byte >>= 1;\n        }\n    }\n\n    // N - ((N / 8) * 8) = N - floor(N/8) * 8 = the number of bits remaining.\n    let byte_idx = bytes.len() - 1;\n    let mut byte = bytes[byte_idx];\n    for j in 0..N - ((N / 8) * 8) {\n        let bit_idx = (byte_idx) * 8 + j;\n        bits[bit_idx] = (byte & 1) as u1;\n        byte >>= 1;\n    }\n\n    bits\n}\n\n/// Returns random bits, in chunks, according to the provided numeric generics.\nunconstrained fn get_chunks_of_random_bits<let NUM_CHUNKS: u32, let NUM_BITS: u32>() -> [[u1; NUM_BITS]; NUM_CHUNKS] {\n    let random_bits = get_random_bits::<NUM_CHUNKS * NUM_BITS>();\n    let mut chunks: [[u1; NUM_BITS]; NUM_CHUNKS] = [[0; NUM_BITS]; NUM_CHUNKS];\n    for i in 0..NUM_CHUNKS {\n        let mut chunk: [u1; NUM_BITS] = [0; NUM_BITS];\n        for j in 0..NUM_BITS {\n            chunk[j] = random_bits[i * NUM_BITS + j];\n        }\n        chunks[i] = chunk;\n    }\n    chunks\n}\n\n/**\n * Helper fn for be/le_bytes_to_padded_fields() fns.\n */\nfn pad_31_byte_fields_with_random_bits<let N: u32>(input: [Field; N]) -> [Field; N] {\n    /// Safety: we can't constrain whether or not the returned bits are actually random;\n    /// we can only rely on it being in the caller's best interest.\n    let chunks_of_random_bits = unsafe { get_chunks_of_random_bits::<((N + 30) / 31), 6>() };\n    let mut fields = input;\n    // We push the random bits to the \"big end\" of each field\n    let TWO_POW_248 = 0x100000000000000000000000000000000000000000000000000000000000000;\n    for i in 0..fields.len() {\n        let mut shift = TWO_POW_248;\n        for j in 0..5 {\n            fields[i] += shift * chunks_of_random_bits[i][j] as Field;\n            shift *= 2;\n        }\n\n        // This might overflow the field modulus, so we need to be careful.\n        // By this point, shift = 2 ^ 253, so will populate the 254th bit (counting from 1)\n        let field_with_254th_bit = fields[i] + shift * chunks_of_random_bits[i][6 - 1] as Field;\n\n        // Expensive comparison (one for each field), but it's important -- if we want to hide that we were\n        // working with bytes -- that we include the 254th random bit when it fits.\n        fields[i] = if (fields[i].lt(field_with_254th_bit)) {\n            field_with_254th_bit\n        } else {\n            fields[i]\n        };\n    }\n    fields\n}\n\n/**\n * The above functions be_bytes_31_to_fields and le_bytes_31_to_fields have a privacy-leakage problem:\n * they result in fields which are all 248-bits instead of 254-bits.\n * That means if the above functions are used to convert a ciphertext from bytes to\n * fields, it leaks (with very high probability) to all observers of the log that the\n * ciphertext was created with a \"bit twiddly\" encryption scheme like AES.\n * This reduces privacy sets for all apps.\n *\n * This function seeks to \"pad\" those remaining 6 bits with randomness, so that all\n * encrypted logs look even more similar (full fields of 254-bits of random-looking\n * information). Of course, this adds some extra constraints, unfortunately.\n */\npub fn le_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = le_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\npub fn be_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = be_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\nmod test {\n    use crate::utils::bytes::{\n        be_bytes_31_to_fields, fields_to_be_bytes_31, fields_to_le_bytes_31, le_bytes_31_to_fields,\n    };\n\n    // BE BYTES\n\n    #[test]\n    fn test_be_bytes_31_to_1_field() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_be_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_be_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_be_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_be_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_be_bytes_31(input);\n        println(f\"output: {output}\");\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_be_bytes_31_to_2_fields() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n        assert_eq(output[1], 0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n    }\n\n    #[test]\n    fn test_2_fields_to_be_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_be_bytes_31_input_to_fields_and_back(input: [u8; 128]) {\n        let output = be_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_be_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_be_bytes_31_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_be_bytes_31(input);\n        let input_back = be_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_be_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_be_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_be_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)]; // this number is 1 bit larger than 31 bytes.\n        let _ignored_result: [u8; 31] = fields_to_be_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_be_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_be_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n\n    // LE BYTES\n\n    #[test]\n    fn test_le_bytes_31_to_1_field() {\n        let input = [\n            31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,\n            9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_le_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_le_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_le_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_le_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_le_bytes_31(input);\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_le_bytes_31_to_2_fields() {\n        let input = [\n            59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,\n            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n            15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n        assert_eq(output[1], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c);\n    }\n\n    #[test]\n    fn test_2_fields_to_le_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47,\n                46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_le_bytes_input_to_fields_and_back(input: [u8; 128]) {\n        let output = le_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_le_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_le_bytes_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_le_bytes_31(input);\n        let input_back = le_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_le_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_le_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_le_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)];\n        let _ignored_result: [u8; 31] = fields_to_le_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_le_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_le_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n}\n"
    },
    "19": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "192": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"
    },
    "195": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            /// Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "21": {
      "path": "std/hash/mod.nr",
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "212": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "247": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "254": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "26": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "269": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "27": {
      "path": "std/hash/sha256.nr",
      "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n"
    },
    "270": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "271": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "272": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "281": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "287": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "288": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "297": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "300": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "313": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "317": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "334": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "335": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "337": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "342": {
      "path": "/home/vscode/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr",
      "source": "// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n"
    },
    "354": {
      "path": "/home/vscode/nargo/github.com/ClarifiedLabs/aztec-uint253/aztec-packages-v0.75.0/src/uint253.nr",
      "source": "// Copyright (c) 2025 Clarified Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nuse aztec::protocol_types::traits::{Deserialize, FromField, Packable, Serialize, ToField};\nuse std::cmp::{Eq, Ord, Ordering};\nuse std::ops::{Add, Div, Mul, Rem, Sub};\n\n// Maximum value for U253 (2^253 - 1), chosen to fit within Aztec's field arithmetic bounds\npub global MAX_U253: Field = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\npub global U253_PACKED_LEN: u32 = 1;\n\npub struct U253 {\n    value: Field,\n}\n\nimpl U253 {\n    pub fn new(value: Field) -> Self {\n        value.assert_max_bit_size::<253>();\n        Self { value }\n    }\n\n    pub fn new_unchecked(value: Field) -> Self {\n        Self { value }\n    }\n\n    pub fn from_integer(value: Field) -> Self {\n        value.assert_max_bit_size::<253>();\n        Self { value }\n    }\n\n    pub fn to_integer(self) -> Field {\n        self.value\n    }\n\n    pub fn zero() -> Self {\n        Self { value: 0 }\n    }\n\n    pub fn one() -> Self {\n        Self { value: 1 }\n    }\n\n    pub fn max() -> Self {\n        Self { value: MAX_U253 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.value == 0\n    }\n\n    // Performs division with remainder using binary long division algorithm\n    // Returns (quotient, remainder) tuple\n    pub unconstrained fn div_rem_unconstrained(self, other: Self) -> (Self, Self) {\n        assert(!(other.value == 0), \"Division by zero\");\n\n        self.value.assert_max_bit_size::<253>();\n        other.value.assert_max_bit_size::<253>();\n\n        let bits: [u1; 253] = self.value.to_be_bits();\n        let divisor = other.value;\n\n        let mut quotient: Field = 0;\n        let mut remainder: Field = 0;\n\n        // Process each bit from MSB to LSB, similar to paper-and-pencil division\n        for i in 0..253 {\n            // Shift remainder left by 1 bit and add next bit\n            remainder = remainder * 2 + (bits[i] as Field);\n\n            // Single comparison to determine if we should subtract divisor\n            // Changed to just !remainder.lt(divisor) which means remainder >= divisor\n            if !remainder.lt(divisor) {\n                remainder = remainder - divisor;\n                quotient = quotient * 2 + 1;\n            } else {\n                quotient = quotient * 2;\n            }\n        }\n        (Self { value: quotient }, Self { value: remainder })\n    }\n\n    // Performs division with remainder using unconstrained binary long division algorithm, then\n    // constrains the result via multiplicative properties\n    // Returns (quotient, remainder) tuple\n    pub fn div_rem(self, other: Self) -> (Self, Self) {\n        assert(!(other.value == 0), \"Division by zero\");\n\n        if self.value == other.value {\n            (Self::one(), Self::zero())\n        } else if self.is_zero() {\n            (Self::zero(), Self::zero())\n        } else if other.value == 1 {\n            (self, Self::zero())\n        } else if self.value.lt(other.value) {\n            (Self::zero(), self)\n        } else {\n            //Safety: constraining this immediately after by checking the division property\n            let (quotient, remainder) = unsafe { self.div_rem_unconstrained(other) };\n\n            // Verify quotient * other + remainder == self\n            assert(\n                quotient * other + remainder == self,\n                \"Unconstrained division result is incorrect\",\n            );\n\n            (quotient, remainder)\n        }\n    }\n\n    // Adds two U253 values without overflow checks - use with caution\n    pub fn add_unchecked(self, other: Self) -> Self {\n        Self { value: self.value + other.value }\n    }\n\n    // Subtracts two U253 values without underflow checks - use with caution\n    pub fn sub_unchecked(self, other: Self) -> Self {\n        Self { value: self.value - other.value }\n    }\n}\n\nimpl ToField for U253 {\n    fn to_field(self) -> Field {\n        self.value\n    }\n}\n\nimpl FromField for U253 {\n    fn from_field(value: Field) -> Self {\n        value.assert_max_bit_size::<253>();\n        Self { value }\n    }\n}\n\nimpl Serialize<1> for U253 {\n    fn serialize(self) -> [Field; 1] {\n        [self.value]\n    }\n}\n\nimpl Deserialize<1> for U253 {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        fields[0].assert_max_bit_size::<253>();\n        assert(fields[0].lt(MAX_U253 + 1), \"Deserialized value is too large\");\n        Self { value: fields[0] }\n    }\n}\n\nimpl Add for U253 {\n    fn add(self, other: Self) -> Self {\n        let result = self.value + other.value;\n        result.assert_max_bit_size::<253>();\n\n        assert(!MAX_U253.lt(result), \"U253 addition overflow\");\n        assert(!result.lt(self.value), \"U253 addition overflow\");\n        assert(!result.lt(other.value), \"U253 addition overflow\");\n        Self { value: result }\n    }\n}\n\nimpl Sub for U253 {\n    fn sub(self, other: Self) -> Self {\n        assert(\n            other.value.lt(self.value) | other.value.eq(self.value),\n            \"U253 subtraction underflow\",\n        );\n        let result = self.value - other.value;\n        result.assert_max_bit_size::<253>();\n        Self { value: result }\n    }\n}\n\nimpl Mul for U253 {\n    fn mul(self, other: Self) -> Self {\n        let result = self.value * other.value;\n\n        result.assert_max_bit_size::<253>();\n        // Allow multiplication by 1 without additional checks, otherwise check for overflow\n        assert(\n            (self.value == 1)\n                | (other.value == 1)\n                | (result.lt(MAX_U253 + 1) & !result.lt(self.value) & !result.lt(other.value)),\n            \"U253 multiplication overflow\",\n        );\n        Self { value: result }\n    }\n}\n\nimpl Div for U253 {\n    fn div(self, other: Self) -> Self {\n        let (quotient, _) = self.div_rem(other);\n        quotient\n    }\n}\n\nimpl Rem for U253 {\n    fn rem(self, other: Self) -> Self {\n        let (_, remainder) = self.div_rem(other);\n        remainder\n    }\n}\n\nimpl Ord for U253 {\n    fn cmp(self, other: Self) -> Ordering {\n        if self.value.lt(other.value) {\n            Ordering::less()\n        } else if self.value.eq(other.value) {\n            Ordering::equal()\n        } else {\n            Ordering::greater()\n        }\n    }\n}\n\nimpl Eq for U253 {\n    fn eq(self, other: Self) -> bool {\n        self.value.eq(other.value)\n    }\n}\n\nimpl Packable<U253_PACKED_LEN> for U253 {\n    fn pack(self) -> [Field; U253_PACKED_LEN] {\n        [self.value]\n    }\n\n    fn unpack(fields: [Field; U253_PACKED_LEN]) -> Self {\n        U253::from_integer(fields[0])\n    }\n}\n"
    },
    "355": {
      "path": "/home/vscode/nargo/github.com/ClarifiedLabs/aztec-uint253/aztec-packages-v0.75.0/src/uint253_note.nr",
      "source": "// Copyright (c) 2025 Clarified Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nuse aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::{\n        note_header::NoteHeader,\n        note_interface::{NoteInterface, NullifiableNote},\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n        traits::{Empty, Hash, Packable, Serialize},\n    },\n};\n\nuse crate::uint253::U253;\n\n#[partial_note(quote {value})]\n#[derive(Serialize)]\npub struct U253Note {\n    // The amount of tokens in the note\n    value: Field,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NullifiableNote for U253Note {\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl U253Note {\n    pub fn new(value: U253, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value: value.to_field(), owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U253 {\n        U253::new_unchecked(self.value)\n    }\n\n    pub fn get_field_value(self) -> Field {\n        self.value\n    }\n}\n\nimpl Eq for U253Note {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n"
    },
    "51": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "52": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "6": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "60": {
      "path": "std/uint128.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                /// Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        /// Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        /// Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n"
    },
    "62": {
      "path": "/home/vscode/turnstile-contracts/aztec/contracts/shield_gateway_storage/src/main.nr",
      "source": "mod test;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract ShieldGatewayStorage {\n\n    use aztec::{\n        context::PrivateContext,\n        encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n        macros::{functions::{initializer, private, public, view}, storage::storage},\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Hash, Serialize},\n        },\n        state_vars::{Map, PrivateMutable, PublicImmutable, SharedMutable},\n    };\n\n    use uint253::{uint253::U253, uint253_note::U253Note};\n\n    pub global CHANGE_DELAY_BLOCKS: u32 = 5;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicImmutable<AztecAddress, Context>,\n        authorized_caller: SharedMutable<AztecAddress, CHANGE_DELAY_BLOCKS, Context>,\n        channel_balances: Map<Field, PrivateMutable<U253Note, Context>, Context>,\n        channel_thresholds: Map<AztecAddress, SharedMutable<U253, CHANGE_DELAY_BLOCKS, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn init(admin: AztecAddress) {\n        storage.admin.initialize(admin);\n    }\n\n    #[public]\n    fn set_authorized_caller(caller: AztecAddress) {\n        assert(context.msg_sender() == storage.admin.read(), \"Only the admin can set the authorized caller\");\n        storage.authorized_caller.schedule_value_change(caller);\n    }\n\n    #[contract_library_method]\n    fn _assert_caller_is_authorized(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) {\n        assert(context.msg_sender() == storage.authorized_caller.get_current_value(), \"Unauthorized\");\n    }\n\n    pub unconstrained fn is_channel_initialized_unconstrained(key: Field) -> bool {\n        storage.channel_balances.at(key).is_initialized()\n    }\n\n    #[private]\n    #[view]\n    fn is_channel_initialized(key: Field) -> bool {\n        _assert_caller_is_authorized(&mut context, storage);\n        // Safety: `initialize` must be called if the key is uninitialized, so the caller\n        // must attempt initialization for uninitialized keys to constrain this value\n        unsafe {\n            is_channel_initialized_unconstrained(key)\n        }\n    }\n\n    #[private]\n    fn get_channel_balance(key: Field) -> U253 {\n        _assert_caller_is_authorized(&mut context, storage);\n        storage.channel_balances.at(key).get_note().note.get_value()\n    }\n\n    #[private]\n    fn initialize_channel_balance(key: Field, value: U253, owner: AztecAddress) -> U253 {\n        _assert_caller_is_authorized(&mut context, storage);\n        let mut note = U253Note::new(value, owner);\n        storage.channel_balances.at(key).initialize(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            owner,\n            owner,\n        ));\n        value\n    }\n\n    #[private]\n    fn set_channel_balance(key: Field, value: U253, owner: AztecAddress) -> U253 {\n        _assert_caller_is_authorized(&mut context, storage);\n        let mut note = U253Note::new(value, owner);\n        storage.channel_balances.at(key).replace(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            owner,\n            owner,\n        ));\n        value\n    }\n\n    #[public]\n    #[view]\n    fn get_channel_threshold(key: AztecAddress) -> U253 {\n        storage.channel_thresholds.at(key).get_current_value()\n    }\n\n    #[private]\n    #[view]\n    fn get_channel_threshold_private(key: AztecAddress) -> U253 {\n        storage.channel_thresholds.at(key).get_current_value()\n    }\n\n    #[public]\n    fn set_channel_threshold(key: AztecAddress, value: U253) -> U253 {\n        assert(context.msg_sender() == storage.authorized_caller.get_current_value(), \"Unauthorized\");\n        storage.channel_thresholds.at(key).schedule_value_change(value);\n        value\n    }\n\n    unconstrained pub fn get_authorized_caller_unconstrained() -> AztecAddress {\n        storage.authorized_caller.get_current_value()\n    }\n\n    unconstrained pub fn get_admin_unconstrained() -> AztecAddress {\n        storage.admin.read()\n    }\n}\n"
    },
    "7": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "83": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            /// for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\n        /// to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "84": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "86": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "88": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use std::hash::{from_field_unsafe as fr_to_fq_unsafe, sha256};\n\nuse dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    },
    "92": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\nuse std::aes128::aes128_encrypt;\n\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48; // contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\n\n/*\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\n * It's because there are a few more optimisations that can be done for notes,\n * and so the stuff that looks like duplicated code currently, won't be\n * the same for long.\n * To modularise now feels premature, because we might get that modularisation wrong.\n * Much better (imo) to have a flattened templates for log assembly, because it\n * makes it much easier for us all to follow, it serves as a nice example for the\n * community to follow (if they wish to roll their own log layouts), and it gives\n * us more time to spot common patterns across all kinds of log layouts.\n */\n\n/*\n * LOG CONFIGURATION CHOICES:\n *\n * deliver_to: INPUT as recipient: AztecAddress\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\n * shared_secret: ephemeral\n * shared_secret_randomness_extraction_hash: sha256\n * tag: true\n * tag_from: INPUT as sender: AztecAddress\n *\n * Note-specific:\n * derive_note_randomness_from_shared_secret: false\n *\n */\n\n/*\n * LOG LAYOUT CHOICE:\n *\n * Short explanation:\n * log = [tag, epk, header_ct=[[contract_address, ct_len], pkcs7_pad], ct=[[pt], pkcs7_pad], some bytes padding, some fields padding]\n *\n * Long explanation:\n * tag: Field\n * epk: [Field, u8]\n * header_ct: [[u8; 32], [u8; 2], [u8; 16]]\n * ct: [[u8; 2], [u8; x], [u8; y]]\n *\n * More precisely (in pseudocode):\n *\n * log = [\n *     tag: Field,\n *     Epk: Field,\n *\n *     le_bytes_31_to_fields(\n *\n *         log_bytes: [\n *             eph_pk_sign: [u8; 1],\n *\n *             header_ciphertext: aes_encrypt(\n *                 contract_address: [u8; 32],\n *                 ct_length: [u8; 2],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 header_pt_aes_padding: [u8; 14], // `16 - (input.len() % 16)`\n\n *             ): [u8; 48],\n *\n *             ciphertext: aes_encrypt(\n *                 final_pt: [\n *                     pt: {\n *                         note_bytes: {\n *                             storage_slot: [u8; 32],\n *                             note_type_id: [u8; 32],\n *                             ...note: [u8; N * 32],\n *                         }: [u8; N * 32 + 64],\n *                     }: [u8; N * 32 + 64],\n\n *                 ]: [u8; N * 32 + 64],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 pt_aes_padding: [u8; 16 - ( (|pt_length| + |pt|) % 16 )]\n *\n *             ): [u8; |pt| + |pt_aes_padding|]\n *                [u8; |ct|]\n *\n *             log_bytes_padding_to_mult_31: [u8; 31 * ceil((1 + 48 + |ct|)/31) - (1 + 48 + |ct|)],\n *                                           [u8; p]\n *\n *         ]: [u8; 1 + 48 + |ct| + p]\n *\n *     ): [Field; (1 + 48 + |ct| + p) / 31]\n *\n *     log_fields_padding: [Field; PRIVATE_LOG_SIZE_IN_FIELDS - 2 - (1 + 48 + |ct| + p) / 31],\n *\n * ]: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\n *\n *\n */\n\n/********************************************************/\n// Disgusting arithmetic on generics\n/********************************************************/\n\n// In this section, instead of initialising arrays with very complicated generic\n// arithmetic, such as:\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] = [0; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))];\n//... we instead do the arithmetic a little bit at a time, so that the computation\n// can be audited and understood. Now, we can't do arithmetic on generics in the body\n// of a function, so we abusing functions in the following way:\n\n// |full_pt| = |pt| = (N * 32) + 64\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\n    [0; PT]\n}\n\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\n    _full_pt: [u8; FULL_PT],\n) -> [u8; 16 - (FULL_PT % 16)] {\n    [0; 16 - (FULL_PT % 16)]\n}\n\n// |ct| = |full_pt| + |pt_aes_padding|\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\n    _full_pt: [u8; FULL_PT],\n    _pt_aes_padding: [u8; PT_AES_PADDING],\n) -> [u8; FULL_PT + PT_AES_PADDING] {\n    [0; FULL_PT + PT_AES_PADDING]\n}\n\n// Ok, so we have the following bytes:\n// eph_pk_sign, header_ciphertext, ciphertext:\n// Let lbwop = 1 + 48 + |ct| // aka log bytes without padding\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(_ct: [u8; CT]) -> [u8; 1 + 48 + CT] {\n    [0; 1 + 48 + CT]\n}\n\n// Recall:\n//   lbwop := 1 + 48 + |ct| // aka log bytes without padding\n// We now want to pad b to the next multiple of 31, so as to \"fill\" fields.\n// Let p be that padding.\n// p = 31 * ceil(lbwop / 31) - lbwop\n//   = 31 * ((lbwop + 30) // 31) - lbwop\n//     (because ceil(x / y) = (x + y - 1) // y ).\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\n    _lbwop: [u8; LBWOP],\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\n}\n\n// |log_bytes| = 1 + 48 + |ct| + p // aka log bytes (with padding)\n// Recall:\n//   lbwop := 1 + 48 + |ct|\n//   p is the padding\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\n    _lbwop: [u8; LBWOP],\n    _p: [u8; P],\n) -> [u8; LBWOP + P] {\n    [0; LBWOP + P]\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\n// PT is the plaintext length.\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    p\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\n    log_bytes\n}\n\n/********************************************************/\n// End of disgusting arithmetic on generics\n/********************************************************/\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The extra `+ 64` bytes is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(note: Note) -> [u8; N * 32 + 64]\nwhere\n    Note: NoteInterface<N>,\n{\n    let packed_note = note.pack_content();\n\n    let note_header = note.get_header();\n    let storage_slot = note_header.storage_slot;\n    let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n\n    // TODO(#10952): The following can be reduced to 7 bits\n    let note_type_id_bytes: [u8; 32] = Note::get_note_type_id().to_be_bytes();\n\n    // We combine all the bytes into plaintext_bytes:\n    let mut plaintext_bytes: [u8; N * 32 + 64] = [0; N * 32 + 64];\n    for i in 0..32 {\n        plaintext_bytes[i] = storage_slot_bytes[i];\n        plaintext_bytes[32 + i] = note_type_id_bytes[i];\n    }\n\n    for i in 0..packed_note.len() {\n        let bytes: [u8; 32] = packed_note[i].to_be_bytes();\n        for j in 0..32 {\n            plaintext_bytes[64 + i * 32 + j] = bytes[j];\n        }\n    }\n\n    plaintext_bytes\n}\n\nfn compute_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Compute the plaintext\n    // *****************************************************************************\n\n    let final_plaintext_bytes = compute_note_plaintext_for_this_strategy(note);\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext_bytes, iv, sym_key);\n\n    // |full_pt| = |pt_length| + |pt|\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    // |ct| = |full_pt| + |pt_aes_padding|\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    //      = 16 + 16 * (|full_pt| // 16)\n    //      = 16 * (1 + |full_pt| // 16)\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 64) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address = context.this_address();\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 =\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 64>();\n    /// Safety: this randomness won't be constrained to be random. It's in the\n    /// interest of the executor of this fn to encrypt with random bytes.\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 64>();\n\n    assert(\n        log_bytes.len() % 31 == 0,\n        \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n    );\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    assert(\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n        \"Something has gone wrong\",\n    );\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        /// Safety: randomness cannot be constrained.\n        final_log[i] = unsafe { random() };\n    }\n\n    final_log\n}\n\nunconstrained fn compute_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_log(context, note, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        let encrypted_log = compute_log(*context, note, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n// Important note: this function -- although called \"unconstrained\" -- the\n// function is not labelled as `unconstrained`, because we pass a reference to the\n// context.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        //   It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let encrypted_log = unsafe { compute_log_unconstrained(*context, note, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use crate::test::{helpers::test_environment::TestEnvironment, mocks::mock_note::MockNote};\n    use dep::protocol_types::address::AztecAddress;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n        let mut context = env.private();\n\n        // I'm not sure how to initialise an `env` or `context` with a consistent contract address for every run of this test; the value kept changing each time. So I'm going to overwrite it now:\n        context.inputs.call_context.contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        ); // This is an address copied to match the typescript one.\n\n        let storage_slot = 42;\n        let note = MockNote::new(1234)\n            .contract_address(context.this_address())\n            .storage_slot(storage_slot)\n            .build();\n        let contract_address = context.this_address();\n\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = super::compute_note_plaintext_for_this_strategy(note);\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = super::compute_log(context, note, recipient, sender);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x0d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701fa7,\n            0x00010577790aeabcc2d81ec8d0c99e7f5d2bf2f1452025dc777a178404f851d9,\n            0x003de81cde78411f27a921e16ebbfba71a5570d3f62f1134c90daced33663ba0,\n            0x00856cb19c7d563da183a40a6f8bd4988d1696ad6bf0c717c8fb8f6294bd0366,\n            0x001ed04e4f77a111c7090fcd34c61cfae744e8589a42defba4d0d927dd4679fe,\n            0x00ec09b49d8d4cf548ea62d44c8839b2fd14664e9d1439b199a8d5166e362348,\n            0x004a69de2d410e01010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n}\n"
    },
    "99": {
      "path": "/home/vscode/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    }
  }
}
