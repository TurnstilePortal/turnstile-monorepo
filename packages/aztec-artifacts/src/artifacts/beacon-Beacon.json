{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "Beacon",
  "functions": [
    {
      "name": "set_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "new_admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9505266597993848748": {
            "error_kind": "string",
            "string": "Only admin can set admin"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_admin"
      ]
    },
    {
      "name": "set_target_override",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "source",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "target",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2670722443823556121": {
            "error_kind": "string",
            "string": "Only admin can set beacon target"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBUJwAABAMnAgUEBCcCBgQAHxgABgAFgFAuCIBQAAEuCIBRAAIuCIBSAAMuCIBTAAQlAAAAVyUAAADZKAIAAQSAVCcCAgQAOw0AAQACKACAQwQABSgAgEQAAAEpAIBFAEfazXMsAIBGADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAKgCARwAAAAABAAAAACgAgEgAAQAoAIBJBAADKACASgEAACgAgEsEAAAoAIBMAAAAKACATQEAASgAgE4EAAEoAIBPBAAEJiUAABC1LQgBBQAAAQIBLgqASgAFLQgBBgAAAQIBLgqATAAGLQgBBwAAAQIBJwIIAAItDggHHgIACQAeAgAKADM4AAkACgALJAIACwAAAS0lAAAQ3h4CAAkBCjgBCQokAgAKAAAHcCMAAAFEHgIACQEtCAEKJwILBAIAEAELAScDCgQBACgKAgsfJIBLgE4ACwEoAAqATgAMLQ0MCxwMCwwEHAwMCgAtCAELJwIMBAUAEAEMAScDCwQBACgLAgwfJIBOgE8ADC0NCwwAKAwCDC0ODAsnAgwALC0IAQ0nAg4EBgAQAQ4BJwMNBAEAKA0CDi0MDg8tDgwPACgPAg8tDgwPACgPAg8tDgwPACgPAg8tDgwPACgPAg8tDgwPLQgBDAAAAQIBLQ4NDC4IgEsABCMAAAINDSgABIBPAA0kAgANAAAHDiMAAAIiLQ0MCy0NCwwAKAwCDC0ODAsrAgAMAAAAAAAAAAAFAAAAAAAAAAAnAhEEEi0IABItDAwTABAAEQAlAAAQ8C0EAAAtDBMNLQwUDi0MFQ8tDBYQLQ0NDAAoDAIMLQ4MDS0NDgwAKAwCDC0ODA4tCAEMAAABAgEtDg0MLQgBDQAAAQIBLQ4ODS0IAQ4AAAECAS0ODw4tCAEPAAABAgEtDhAPLgiASwAEIwAAAswNKAAEgEMAECQCABAAAAbEIwAAAuEnAhAEES0IABEtDAwSLQwNEy0MDhQtDA8VABAAEAAlAAARkC0EAAAtDBILLQgBDCcCDQQEABABDQEnAwwEAQAoDAINLQwNDi0OCQ4AKA4CDi0OCg4AKA4CDi0OCw4nAgkALS0IAQonAgsEBQAQAQsBJwMKBAEAKAoCCy0MCw0tDgkNACgNAg0tDgkNACgNAg0tDgkNACgNAg0tDgkNLQgBCQAAAQIBLQ4KCS4IgEsABCMAAAOWDSgABIBJAAokAgAKAAAGYiMAAAOrLQ0JCi0NCgkAKAkCCS0OCQorAgAJAAAAAAAAAAAEAAAAAAAAAAAnAg8EEC0IABAtDAkRABAADwAlAAAQ8C0EAAAtDBELLQwSDC0MEw0tDBQOLQ0LCQAoCQIJLQ4JCy0NDAkAKAkCCS0OCQwtCAEJAAABAgEtDgsJLQgBCwAAAQIBLQ4MCy0IAQwAAAECAS0ODQwtCAENAAABAgEtDg4NLgiASwAEIwAABFUNKAAEgE8ADiQCAA4AAAYYIwAABGonAgoEDi0IAA4tDAkPLQwLEC0MDBEtDA0SABAACgAlAAARkC0EAAAtDA8EKQIACQAnFrFmJwILBAMnAg0EAwA4Cw0MLQgBCgAQAQwBJwMKBAEAKAoCDC0OCwwAKAwCDC0OCwwnAgwEAwA4CgwLLQwLDC0OCQwAKAwCDC0OAQwAKAwCDC0OBAwtDQoEACgEAgQtDgQKLQgBBCcCCQQDABABCQEnAwQEAQAoBAIJLQwJCy4KgEYACwAoCwILLgqARgALACgEAgkAKAoCDS0NDQwnAg4EAgA4DQ4LOdUACYBEAAsADCACAAQhAgAJLQgBCwAoCwIOLQ0ODScCDwQCADgODwwiNIBLAAkADC0MCQ0nAg8EAwA4DQ8OABABDgEnAwsEAQAoCwIPLQ4NDwAoDwIPLQ4NDy0MDQoGKAoCCi0NCwkAKAkCCS0OCQskAgAEAAAF3SMAAAXBACgLAgwtDQwJJwINBAIAOAwNBDwNBAkjAAAF3QsoAAqATgAEJAIABAAABfIlAAASBAEoAAuASQAJLQ0JBAsoAASARQAJJAIACQAABhMlAAASFiMAAAeKACgKAg8AOA8EEC0NEA4nAg8EEC0IABAtDAkRLQwLEi0MDBMtDA0ULQwOFQAQAA8AJQAAEigtBAAAASgABIBOAA4tDA4EIwAABFUtDQkKASgABIBOAAsAKAwCDgA4DgQPLQ0PDQ0oAAuATwAOJAIADgAABpElAAATUS4EAAqAAygAgAQEAAUlAAATYy4IgAUADgAoDgIPADgPCxAtDg0QLQ4OCS0MCwQjAAADlgAoCwIRADgRBBItDRIQJwIRBBItCAASLQwMEy0MDRQtDA4VLQwPFi0MEBcAEAARACUAABIoLQQAAAEoAASATgAQLQwQBCMAAALMLQ0MDQEoAASATgAOACgLAhAAOBAEES0NEQ8NKAAOgEMAECQCABAAAAc9JQAAE1EuBAANgAMoAIAEBAAGJQAAE2MuCIAFABAAKBACEQA4EQ4SLQ4PEi0OEAwtDA4EIwAAAg0LKAAEgEwACSQCAAkAAAeFJQAAE/EjAAAHiicCCQAGLwwACQAKCjgBCgkkAgAJAAAHpyUAABQDKwIAAQAAAAAAAAAAAgAAAAAAAAAAJwINBA4tCAAOLQwBDwAQAA0AJQAAEPAtBAAALQwPCS0MEAotDBELLQwSDC0NCQ0AKA0CDS0ODQktDQoNACgNAg0tDg0KLQgBDQAAAQIBLQ4JDS0IAQkAAAECAS0OCgktCAEKAAABAgEtDgsKLQgBCwAAAQIBLQ4MCycCDAAFJwIOBA8tCAAPLQwNEC0MCREtDAoSLQwLEy0MDBQAEAAOACUAABIoLQQAACcCDgQPLQgADy0MDRAtDAkRLQwKEi0MCxMtDAIUABAADgAlAAASKC0EAAAnAg8EEC0IABAtDA0RLQwJEi0MChMtDAsUABAADwAlAAARkC0EAAAtDBEOCygADoBMAAkLKAAJgEoACiQCAAoAAAjYJQAAFBUeAgAJBRwMCQsEHAwLCgAcDAoJBCcCDwQQLQgAEC0MBREtDAYSLQwHEy0MDhQAEAAPACUAABQnLQQAAC0MEQotDBILLQwTDQw4CQ0OFgwOCRwMDg0AHAwJDgAEOA0KCQQ4DgsKADgJCgseAgAJBQA4CQwKKQIACQDN/2BfLQgBDScCDgQGABABDgEnAw0EAQAoDQIOLQwODy0OAg8AKA8CDy0OCw8AKA8CDy0OAw8AKA8CDy0OCg8AKA8CDy0OCQ8tCAEJJwIKBAYAEAEKAScDCQQBACgJAgotDAoLLgqATAALACgLAgsuCoBMAAsAKAsCCy4KgEwACwAoCwILLgqATAALACgLAgsuCoBMAAstCAEKAAABAgEtDgkKLgiASwAEIwAACf4NKAAEgEMACSQCAAkAABBoIwAAChMtDQoJJwINBAUGKA0CCicCDwQDADgNDw4tCAELABABDgEnAwsEAQAoCwIOLQ4NDgAoDgIOLQ4NDicCDwQDADgLDw4AKAkCDy4EAA+AAy4EAA6ABC4EAA2ABSUAABXSACgLAg4tDQ4NJwIPBAIAOA4PCTcNAAkADScCDwQQLQgAEC0MAREAEAAPACUAABDwLQQAAC0MEQktDBILLQwTDS0MFA4tDQkBACgBAgEtDgEJLQ0LAQAoAQIBLQ4BCy0IAQEAAAECAS0OCQEtCAEJAAABAgEtDgsJLQgBCwAAAQIBLQ4NCy0IAQ0AAAECAS0ODg0nAg4EDy0IAA8tDAEQLQwJES0MCxItDA0TLQwMFAAQAA4AJQAAEigtBAAAJwIMBA4tCAAOLQwBDy0MCRAtDAsRLQwNEi0MAhMAEAAMACUAABIoLQQAACcCDAQOLQgADi0MAQ8tDAkQLQwLES0MDRIAEAAMACUAABGQLQQAAC0MDwILKAACgEwAAQsoAAGASgAJJAIACQAAC6ElAAAUFScCDAQNLQgADS0MBQ4tDAYPLQwHEC0MAhEAEAAMACUAABQnLQQAAC0MDgEtDA8JLQwQCy0IAQUAAAECAS0OAQUtCAEGAAABAgEtDgkGLQgBBwAAAQIBLQ4LBy8MAAIADBwMDA4EHAwODQACOAwNDgkoAA6ARwAMHAwMDgQcDA4NABwMDQ4EAjgMDQ8JKAAPgEcADBwMDBABHAwQDwAcDA8QAQI4DA8RCSgAEYBIAAwcDAwSBBwMEhEAHAwREgQCOAwREwkoABOARwAMHAwMEwEcDBMRABwMERMBAjgMERQJKAAUgEgADBwMDBUEHAwVFAAcDBQMBBYMExQcDBETBBwMFBUEBDgTDBQWDBAMHAwPEAQcDAwTBAQ4EBIMHgIAEAUcDBAWBBwMFhIAHAwSEAQMOBAOEiQCABIAAA0DIwAADOMcDA8KBAQ4CgwOBSgAE4BDAAoAOA4KEi0MEgQjAAANIxwMEQoEBDgKFA4FKAAVgEMACgA4DgoSLQwSBCMAAA0jADgQBA4OOBAOEiQCABIAAA06JQAAFhgMOBALBBYMBAscDAQQABwMCwQABDgQAQsEOAQJAQA4CwEELQ4EBS0OAwYtDg4HHAwOAQAnAgUAICcCBwQVLQgAFS0MCBYtDAUXABAABwAlAAAWKi0EAAAtDBYGBDgNBgUAOAEFBhwMDwEAJwIFAEAnAgkEFS0IABUtDAgWLQwFFwAQAAkAJQAAFiotBAAALQwWBwQ4AQcFADgGBQEcDAwFACcCBgBIJwIJBBUtCAAVLQwIFi0MBhcAEAAJACUAABYqLQQAAC0MFgcEOAUHBgA4AQYFHAwRAQAnAgYAaCcCCQQVLQgAFS0MCBYtDAYXABAACQAlAAAWKi0EAAAtDBYHBDgBBwYAOAUGARwMFAUAJwIGAHAnAgkECy0IAAstDAgMLQwGDQAQAAkAJQAAFiotBAAALQwMBwQ4BQcGADgBBgUtCAEBJwIGBAQAEAEGAScDAQQBACgBAgYtDAYHLQ4FBwAoBwIHLQ4EBwAoBwIHLQ4DBy0NAQYAKAYCBi0OBgErAgAGAAAAAAAAAAADAAAAAAAAAAAnAgwEDS0IAA0tDAYOABAADAAlAAAQ8C0EAAAtDA4HLQwPCC0MEAktDBELLQ0HBgAoBgIGLQ4GBy0NCAYAKAYCBi0OBggtCAEGAAABAgEtDgcGLQgBBwAAAQIBLQ4IBy0IAQgAAAECAS0OCQgtCAEJAAABAgEtDgsJLgiASwAKIwAAD1MNKAAKgEkACyQCAAsAABAeIwAAD2gnAgsEDC0IAAwtDAYNLQwHDi0MCA8tDAkQABAACwAlAAARkC0EAAAtDA0KLQgBBicCBwQFABABBwEnAwYEAQAoBgIHLQwHCC0OBQgAKAgCCC0OBAgAKAgCCC0OAwgAKAgCCC0OCgguCIBLAAEjAAAP2Q0oAAGATwADJAIAAwAAD+8jAAAP7iYcDAEDAAA4AgMEACgGAgUAOAUBBy0NBwMwDAADAAQBKAABgE4AAy0MAwEjAAAP2QAoAQIMADgMCg0tDQ0LJwIMBA0tCAANLQwGDi0MBw8tDAgQLQwJES0MCxIAEAAMACUAABIoLQQAAAEoAAqATgALLQwLCiMAAA9TACgNAgsAOAsEDi0NDgktDQoLLgQAC4ADKACABAQABiUAABNjLgiABQAOACgOAg8AOA8EEC0OCRAtDg4KASgABIBOAAktDAkEIwAACf4oAIAEBHgADQAAAIAEgAMkAIADAAAQ3SoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJiUAABC1LQgBAicCAwQEABABAwEnAwIEAQAoAgIDLQwDBC4KgEwABAAoBAIELgqATAAEACgEAgQuCoBMAAQtDQIDACgDAgMtDgMCLQgBAycCBAQFABABBAEnAwMEAQAoAwIELQwEBS4KgEwABQAoBQIFLgqATAAFACgFAgUuCoBMAAUAKAUCBS0OAQUuCIBKAAQtDAIBLQwDAi4IgEsAAyYlAAAQtS0NBAULKAAFgEoABiQCAAYAABGyJwIHBAA8CQEHJwIFBAYtCAAGLQwBBy0MAggtDAMJLQwECgAQAAUAJQAAFyotBAAALQ0BBS0NAgYtDQMHLQ4FAS0OBgItDgcDLgqATQAEASgABoBOAAItDQIBJioBAAEFDQou8vbC++88AQECJioBAAEFRI2qKaKhQLc8AQECJiUAABC1LQ0DBi0NBAcLKAAHgEoACCQCAAgAABJOJwIJBAA8CQEJCygABoBJAAckAgAHAAAS3SMAABJjLQ0BBi0NAgctDQMILQ0ECQ0oAAiASQAKJAIACgAAEoglAAATUS4EAAaAAygAgAQEAAQlAAATYy4IgAUACgAoCgILADgLCAwtDgUMASgACIBOAAUOOAgFBiQCAAYAABLIJQAAFhgtDgoBLQ4HAi0OBQMtDgkEIwAAE1AnAgYEBy0IAActDAEILQwCCS0MAwotDAQLABAABgAlAAAXKi0EAAAtDQEGLQ0CBy0NBAguBAAGgAMoAIAEBAAEJQAAE2MuCIAFAAkAKAkCCgEoAAqASwALLQ4FCy0OCQEtDgcCLgqATgADLQ4IBCMAABNQJioBAAEFxWvEWg4QAAI8AQECJi4BgAOABgsAgAYAAoAHJACABwAAE34jAAATiS4AgAOABSMAABPwLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAE9wuAYAKgAguAoAIgAsBAIAKAAKACgEAgAsAAoALIwAAE6soAYAFBAABAwCABgACgAYjAAAT8CYqAQABBYydEbQ59GaQPAEBAiYqAQABBSUQT+mdxCYZPAEBAiYqAQABBQLcbieAdhKdPAEBAiYlAAAQtS0IAQYnAgcEBAAQAQcBJwMGBAEAKAYCBy0MBwguCoBMAAgAKAgCCC4KgEwACAAoCAIILgqATAAILQgBBwAAAQIBLQ4GBy4IgEsABSMAABR8DSgABYBJAAEkAgABAAAVgyMAABSRLQ0HAS0NAQIAKAICAi0OAgEBKAABgE4AAy0NAwInAgMEAgA4AQMFLQ0FBAEoAAGASQAGLQ0GBS0IAQEnAgYEBAAQAQYBJwMBBAEAKAECBi0MBgctDgIHACgHAgctDgQHACgHAgctDgUHLQ0BBAAoBAIELQ4EAScCBQQGLQgABi0MAQcuCIBOAAgAEAAFACUAABg4LQQAAC0MBwQnAgYEBy0IAActDAEILQwDCQAQAAYAJQAAGDgtBAAALQwIBQEoAASATgADLQ0DAQEoAAWATgAELQ0EAxwMAgUEHAwFBAAcDAQCBC0MAgQtDAMCLQwEAyYtDQcBHAwFAgAAOAQCAy8MAAMAAi4EAAGAAygAgAQEAAQlAAATYy4IgAUAAwAoAwIGADgGBQgtDgIILQ4DBwEoAAWATgABLQwBBSMAABR8AQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAABYXLgGACIAGLgKABoAJAQCACAACgAgBAIAJAAKACSMAABXmJioBAAEFRafKcRlB5BU8AQECJiUAABC1LQgBBAAAAQIBLgqARAAEJwIGBAInAgcBAS0IAQUnAggEIQAQAQgBJwMFBAEAKAUCCCcCCQQgQwPwAAIABgAJAAcACCcCCgQgLgQACIADLgQACoAEJQAAGLgnAgIEIScCBgQgLgiATgADIwAAFp0MOAMCByQCAAcAABa0IwAAFq8tDQQBJi0NBAcEOAcHCAI4BgMHDjgDBgkkAgAJAAAW1CUAABk4DDgHBgkkAgAJAAAW5iUAABNRACgFAgoAOAoHCy0NCwkcDAkHAAQ4CAEJBDgHCQoDMIBEAAcACQQ4CQgHADgKBwgtDggEASgAA4BOAActDAcDIwAAFp0lAAAQtS4IgEsABSMAABc6DSgABYBJAAYkAgAGAAAXpSMAABdPLQ0BBS0NAgYtDQMHLQ0ECC0IAQknAgoEBQAQAQoBJwMJBAEAKAYCCicCCwQEACgJAgw/DwAKAAwtDQkGACgGAgYtDgYJLQ4FAS0OCQItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgE4ABiQCAAcAABfDIwAAGC8tDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAABNjLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAAGC8tDAYFIwAAFzolAAAQtQEoAAKATgADDjgCAwQkAgAEAAAYVyUAABYYDTCASQADAAQLKAAEgEoAAyQCAAMAABh0JQAAGUoNKAACgEkAAyQCAAMAABiJJQAAE1EAKAECBAA4BAIFLQ0FAy0IAQEnAgIEAgAQAQIBJwMBBAEAKAECAi0MAgQtDgMEJigAgAYEAAIHAIAEgAaABS4AgASACCgAgAkEAAANAIAJgAWAChcAgAqACiQAgAoAABk3AwCACAACgAgBAIADgAmACy4BgAuABgEAgAOACIALLgGAC4AHAQCAA4AJgAsuAoAHgAsBAIADgAiACy4CgAaACwEAgAkAAoAJIwAAGNQmKgEAAQUohpKwR9z9QzwBAQImKgEAAQX0LuWEu/Qh0TwBAQIm",
      "debug_symbols": "",
      "brillig_names": [
        "set_target_override"
      ]
    },
    {
      "name": "get_target_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "source",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_admin_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "10087665569532205990": {
            "error_kind": "string",
            "string": "Function get_admin_public can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACbHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADEHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA1icCAQAGLwwAAQACLQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAAwyoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFi/6WY4Tn26Y8AQECJg==",
      "debug_symbols": "5ZVBasMwEEXvorUXGmlGI/UqpQQnUYLB2MFxCiXk7pWC5TiuqEsI2XRjPOaN/5e+xJzF1q9P+1XV7NqjeHs/i7rdlH3VNqE6Xwqx7qq6rvar6Wch44Ppyh8PZRPLY192vXgDrUgWwjfb+K4thX/sqtqHSvKl+MlLpRIuUU1ozNBoDAw0GpYjzSoDW5I0wJYUTOGPQlj5HPvOJRzAvdD+k3af7Lj7dmn3gZgTbbT+3b4jl9bqjMaZfaefbR/Uvf0oYl8gAtK8QgUgq6LCyUhtilAvqHA4rwPOgV9IUJl0NZ2yNEsQwPzF0f26Y5+CB/se1NP4YJ/L9RGQHtoI+HYrSeZCBaQx1Ml9B6ZcOGQxhWPkQjisbfLBODkvWRhAsxmNoHTzLBH/yVovofosu6pc136YcLtTs5kMvP7r4Gez79C1G789dT5OwdsAhDhBlCs0Xq9DKDQVmoNG0PkG",
      "brillig_names": [
        "get_admin_public"
      ]
    },
    {
      "name": "set_target",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "new_target",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2670722443823556121": {
            "error_kind": "string",
            "string": "Only admin can set beacon target"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_target"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=",
      "debug_symbols": "rZLfCoMgFIffxesuzP/uVcYIKwtBLKwGI3r3WdgWNdpNN4dz5OPwqb8RlDof6sy4qunA7T4C2xSqN40L0zglIPfGWlNn22MA55Lihe9a5eax65XvwS2FJBUJ0K5ces7DjspYPU+hP/BcsEgLSD4sJz9QimhEKYXftUROjwSk5AobgflqQ+W5DcEyooSJgw29xEaQ1UaKcxsG17dhiB1s2BU2EqFIS0z/2AgYUQ53PzWF8am8UbnVMWLV4IpN4vpXq3fha31T6HLweo7hJoGh3sMdEA5rw+o3",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "get_target_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "source",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10979918148181134863": {
            "error_kind": "string",
            "string": "Function get_target_public can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_target_public"
      ]
    },
    {
      "name": "init",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "target",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "init"
      ]
    },
    {
      "name": "get_target_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "source",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_target_unconstrained"
      ]
    },
    {
      "name": "get_default_target_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/+1YzY7aMBB2Qn5I2HTR9kViSBb2Rrv00EsPe2h76cEkYbtqCypQVeqJR28iecrsZBJAOD3tSMh2bH/zzXhm4mCJg1i6dcRzscQJYrU8+6PbQLc2mu+Vv5kex5eJDIhek/jTOLkNGPsM8h8HGtPqBj8G/I78H/sa593+gI9tAb398neF+te6H7Xs75J7ebZpgDBN45ciXzfwB9squd93oxvw593gjwf6HB80XnW2r3T/sdi9/b7Ovn349WNRbHCVoNEhGM9gqVBvDqj369Vuo7LdmzzfFNstRbAZZNGAGiLUr+pp9T5v4nMm2sdis31aryiacyJaT69x0Xq8B2LWQ89muo0vEwnYvnnscaSx+8Qv2CZcyw3GasJFHD1drD8kXE3npkX0AR/qH4jnKsIGur/drTfqsXgoVI6pYzjONBp2sAa/93EKwdgjY5eMfQanTa5FPVX7hKdNeNJn0B8y+22C5TJY2MVQfjlesDcQ9ZQ0GA4j4Oq3cMX6gauH5nxi97HQmu+fY+H9sPclZf/J2SkLvgsZrkNmjsZtyOgJGT0clmcQC+KCvhoM+/cuEnX/gnC+7JO5AVqPr1RU6CUD21Rhfka4dB3lg/0M3DrOC0V9IRheA6Sb+ukKzeF6RoXzE9h0rp9wzGBuNHcgNvE7h9ZnzLl/ApbfguUxWFzdpdf3HmMXpxvvo3lDa75LnlPdNjPnn6hTNHCm546f2aL5fdjEDWMfuzdwNkbMHOyr4gbiz9kf5k3l1mQax6C3p/HhTKg4aB6v/6THuE5B61zAczlRcjlWS5WqPE8ydUPwBfIh/SyzkJ9AuDsVrpnAtxJP8LEFeC5Z/0W3FYefgsfEfp3v65jcZ3klM93GFwrwgfPDn2ZOi42wfoFs3BEbe8RG6mewN2D0GbRRuoTPEnH+TTjjuzutQUKcdqfGdsD6a1E/R9gbMXqg3/FfViOL6BOCv1uC/lDU61IXd0vuu4c7h6jF50PRHMcDYb42JamaZGoi5V0ii0Smx2qT8dqYjIoinSaLRdmTufzf+rP0dpGVTogLWQ1Hx/T/BWLvM4h8FwAA",
      "debug_symbols": "7ZzRbqMwEEX/hec8eOzxzLi/slpVaZtWkaKkStOVVlX/fSEbDCksqIYFFPulCtXc5OYMgbkW8JE9bR7eX+63++fDW3b34yPbHR7Xp+1hn299fK6yh+N2t9u+3Nf/naniD9C5/u11vS82307r4ym7A4Ugq2yzfzq/Zs7f43m72xRb+etGPQtdqkWhr2VsKbXaXkqtVdXbovv8ucqAx3Ajhks31nW7QeMupUjScCOjuBEs3TjpdkOqZEOaGm7cGG6c1pdqZ2yPG1GXUlaNTmnV5sYSlDwtWfCiotNNKwTl13UklRngNuOA1n9P5AqkVm3eNVBZrUF6dgJwWLrWCri7mL1pru8x1Lp3iacB6qq2IAiJYD9BKPdBa7hBUCeCAwmaRHAgQUwEBxK0ieBAgpQIDiTIieBAgpIIDiToYiWoKoKuh6ABnzSN1tUbG6SCoYk2lYzIMNpcMiLDaJPJdxhqVx4OjQG8YthiQ7Hx6xw1z4baqsWTFoM9teSPymToqrboZLQJ6eY6iamTN9LJaBPjzXUy2uR6c52MNkHfXCejTfI318m0ojB+Jwl8J1l9JY5p/WFq4mm1YmriaW1jauJpDWJq4piIT0w8ZfqpiafsPTXxlJGnJp6y7NTEU+acmLhdeub01Vr3XRyOBOXF0khYWyjRts0ImfJiZiB7XV2AWXo0nA3M0hPcbGCWHrRmA4MJTDuYpceW2cAsPV3MBmbpIWA2MEuf1f8jGClvWAMGaYBZ+kg9FxiKePLtBhPx5NsNJuLJtxtMxJNvNxhMYNrBRDz5doOJd/Jl6zwYwZ7qYknNr66hrmyzaYWuyQ+PtTvXi+oCerxT9YzQ453Y2ZXVIFpNCj3eNDAfdI43aYhRHjrS15Mdx5s0esDEmzR6wIyQNKpTnmOBPjBO+Z+2Q6j5+fvTxoX5iXeunm+S4TSzzwA9zewzQI94Zp8PesQz+2zQpf15ec5Adfat3bhPZ5FTISIIEekQkekVWWmIMERkQ0QUIuIQUethTCuxfv9xtiFyASJQKkgFQSr9DxVUKmqqTJAKg1S2XcXaq1iaKgpScZBKglQuRAUqSAXfVn3mm7/Wx+36Ybe5PNP1+X3/WHvE6+n36+bL015fj4fHzdP7cVM897X2yNfCtOiV8NlMvgFAKwDJPyX/pD8=",
      "brillig_names": [
        "get_default_target_unconstrained"
      ]
    },
    {
      "name": "get_admin_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/7WWTVODMBCGQ0s/ANGZ+ge86DlYanusHxcvHjx4jxBqR4UZwHt/ujCzkXUNTB3CzjCbQPLs5mVDsFhjFnib/TaLHWFWx70r8A74EXo+rq4t9Hk/CxwS1yR/w8OVo1mfwfyXDjCtYfhc8QfSn8+A83Bo+HgtKu68uk5Q24e23zF/yNyrdxs6iGmaX1lw3pJ/bR7ocAH9WptTaO9kefeRRe9PX5+vMse7jKrLNGRsNXXRUO+ztMxFVN7GcS6LghJGGjJrobqI+ib26WPcls8/aS8yL/ZZSmn2kbQxjJmg8XiOo7m3Bc/72Y1iT82zAx/YM6ILXtMc3TdYx9e6iqNvF8d3Sa6m95VF4ql8qD6qnusK86BdlFkudvJZihinTuWjnpad7tzEW0g3D5el6k81nC4b+Lj4kRbnSaXF8c/Y30+Hmuuz9uPAY82vgX0wv5b1hnMVdwz8CdN/JG30HI+/hL6L8lfe7pFnshZBshSJWIk4DiOxIHxGdPoGbz5z2bAJAAA=",
      "debug_symbols": "7ZjBjoIwEIbfpWcOnU470/oqm41BRUNCwCBusjG++1JDBS2RCyeWC+mQn8nP9/fQzk0cst31tM3LY3URm6+bKKp92uRV2Va3eyJ2dV4U+Wk7fC2kf4B+6C/ntPTlpUnrRmxAarCJyMrDY83c9jjmReardh3p2VKntlI/taxHpEaZTmqM7Ntqd/9OBJg53Fjk4Ma4z240uk6qyUZuaBY3Vgc3zn52QzKwIUWRG57DjVOqUzs0E26s7KQs46TsmBvDJqA3zH1/n3RsnTiQAXJ9UOA/jNQKKPynAjsRKzgdclUS+LOYIVDn4R6g0f1iQ18D8kXrmbj/yQTCPjHI70yUXJlETGBlEjFRK5OICa5MIiZ6ZRIxMSuTiAmtTCImvBwmsmfiJpigcgEKIvTXE9Q0ZkMyPs/TA89IY2oLwbNFPaGlZzaE9KL12SzoPL24bBZ0rl9WNve2/EnrPN0VWTfqOF7L/WDy0fyes7chyLmu9tnhWmd+HDKYhPibCqoEuW3btv4D",
      "brillig_names": [
        "get_admin_unconstrained"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2670722443823556121": {
            "error_kind": "string",
            "string": "Only admin can set beacon target"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9505266597993848748": {
            "error_kind": "string",
            "string": "Only admin can set admin"
          },
          "10087665569532205990": {
            "error_kind": "string",
            "string": "Function get_admin_public can only be called statically"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10979918148181134863": {
            "error_kind": "string",
            "string": "Function get_target_public can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Beacon"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "target",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "overrides",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "source",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "old_target",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "new_target",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "effective_block",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::TargetOverrideChangeScheduled"
        },
        {
          "fields": [
            {
              "name": "old_admin",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "new_admin",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::AdminChanged"
        },
        {
          "fields": [
            {
              "name": "old_target",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "new_target",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "effective_block",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::TargetChangeScheduled"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "new_target",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Beacon::set_target_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::set_target_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Beacon::set_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::set_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Beacon::get_admin_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::get_admin_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "source",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Beacon::get_target_private_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::get_target_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "source",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "target",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Beacon::set_target_override_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::set_target_override_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "source",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Beacon::get_target_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::get_target_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "target",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Beacon::init_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Beacon::init_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "101": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/macros/events.nr",
      "source": "use super::utils::{compute_event_selector, get_trait_impl_method};\nuse protocol_types::meta::generate_serialize_to_fields;\n\ncomptime fn generate_event_interface(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let (serialization_fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let content_len = serialization_fields.len();\n\n    let event_type_id = compute_event_selector(s);\n\n    let from_field = get_trait_impl_method(\n        quote { crate::protocol_types::abis::event_selector::EventSelector }.as_type(),\n        quote { crate::protocol_types::traits::FromField },\n        quote { from_field },\n    );\n\n    quote {\n        impl aztec::event::event_interface::EventInterface<$content_len> for $name {\n            fn get_event_type_id() -> aztec::protocol_types::abis::event_selector::EventSelector {\n                $from_field($event_type_id)\n            }\n\n            fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n                _emit(self);\n            }\n        }\n    }\n}\n\npub comptime fn event(s: TypeDefinition) -> Quoted {\n    let event_interface = generate_event_interface(s);\n    s.add_attribute(\"abi(events)\");\n    quote {\n        $event_interface\n    }\n}\n"
    },
    "104": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "107": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "110": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "149": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "150": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "151": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "155": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "164": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "166": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "175": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "177": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable.nr",
      "source": "use dep::protocol_types::{\n    shared_mutable::{\n        ScheduledDelayChange,\n        ScheduledValueChange,\n        shared_mutable_values::{unpack_delay_change, unpack_value_change},\n        SharedMutableValues,\n    },\n    traits::Packable,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\n\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Packable and Eq traits, and allocate `M` storage\n// slots to this state variable.\nimpl<T, let INITIAL_DELAY: u32, Context, let M: u32> Storage<M> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    WithHash<SharedMutableValues<T, INITIAL_DELAY>, _>: Packable<M>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: Eq,\n{\n\n    pub fn schedule_value_change<let N: u32>(self, new_value: T)\n    where\n        T: Packable<N>,\n    {\n        let _value_change = self.schedule_and_return_value_change(new_value);\n    }\n\n    pub fn schedule_and_return_value_change<let N: u32>(\n        self,\n        new_value: T,\n    ) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n\n        value_change\n    }\n\n    pub fn schedule_delay_change<let N: u32>(self, new_delay: u32)\n    where\n        T: Packable<N>,\n    {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay<let N: u32>(self) -> u32\n    where\n        T: Packable<N>,\n    {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value<let N: u32>(self) -> (T, u32)\n    where\n        T: Packable<N>,\n    {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay<let N: u32>(self) -> (u32, u32)\n    where\n        T: Packable<N>,\n    {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change<let N: u32>(self) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        // We don't read ScheduledValueChange directly by having it implement Packable because ScheduledValueChange\n        // and ScheduledDelayChange are packed together (sdc and svc.block_of_change are stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_value_change::<T, N>(packed)\n    }\n\n    fn read_delay_change<let N: u32>(self) -> ScheduledDelayChange<INITIAL_DELAY>\n    where\n        T: Packable<N>,\n    {\n        // Since all ScheduledDelayChange member are packed into a single field, we can read a single storage slot\n        // here and skip the ones that correspond to ScheduledValueChange members. We are abusing the fact that\n        // the field containing the ScheduledDelayChange data is the first one in the storage layout - otherwise we'd\n        // need to offset the storage slot to get the position where it'd land.\n        // We don't read ScheduledDelayChange directly by having it implement Packable because\n        // ScheduledValueChange and ScheduledDelayChange are packed together (sdc and svc.block_of_change are\n        // stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_delay_change::<INITIAL_DELAY>(packed)\n    }\n\n    fn write<let N: u32>(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    )\n    where\n        T: Packable<N>,\n    {\n        // Whenever we write to public storage, we write both the value change and delay change to storage at once.\n        // We do so by wrapping them in a single struct (`SharedMutableValues`). Then we wrap the resulting struct in\n        // `WithHash`.\n        // Wrapping in `WithHash` makes for more costly writes but it also makes private proofs much simpler because\n        // they only need to produce a historical proof for the hash, which results in a single inclusion proof (as\n        // opposed to 4 in the best case scenario in which T is a single field). Private shared mutable reads are\n        // assumed to be much more frequent than public writes, so this tradeoff makes sense.\n        let values = WithHash::new(SharedMutableValues::new(value_change, delay_change));\n\n        self.context.storage_write(self.storage_slot, values);\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: Eq,\n{\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_block_number) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon =\n            value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage<let N: u32>(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32)\n    where\n        T: Packable<N>,\n    {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        let values: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::historical_public_storage_read(header, address, self.storage_slot);\n\n        (values.svc, values.sdc, historical_block_number)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, UtilityContext>\nwhere\n    T: Eq,\n{\n    pub unconstrained fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let smv: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::utility_public_storage_read(self.context, self.storage_slot);\n\n        let block_number = self.context.block_number() as u32;\n        smv.svc.get_current_at(block_number)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "188": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr",
      "source": "use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse protocol_types::traits::ToField;\n\nfn emit<Event, let N: u32>(context: &mut PublicContext, event: Event)\nwhere\n    Event: EventInterface<N>,\n{\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; N + 1];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_public_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32>(\n    context: &mut PublicContext,\n) -> fn[(&mut PublicContext,)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| { emit(context, e); }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "204": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "228": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "230": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "242": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr",
      "source": "use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\npub struct MaxBlockNumber {\n    _opt: Option<u32>,\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt.is_some() as Field, self._opt.unwrap_unchecked() as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: if serialized[0] as bool {\n                Option::some(serialized[1] as u32)\n            } else {\n                Option::none()\n            },\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"
    },
    "273": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "288": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "291": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "301": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "308": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "321": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_delay_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pub(crate) pre: Option<u32>,\n    pub(crate) post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    pub(crate) block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior constraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Empty for ScheduledDelayChange<INITIAL_DELAY> {\n    fn empty() -> Self {\n        Self { pre: Option::none(), post: Option::none(), block_of_change: 0 }\n    }\n}\n"
    },
    "323": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_value_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub struct ScheduledValueChange<T> {\n    pub(crate) pre: T,\n    pub(crate) post: T,\n    // Block at which `post` value is used instead of `pre`\n    pub(crate) block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    // Returns the previous value. This is the value that is current up until the block of change. Note that this value\n    // might not be the current anymore since block of change might have already passed.\n    pub fn get_previous(self) -> (T, u32) {\n        (self.pre, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32,\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n\nimpl<T> Empty for ScheduledValueChange<T>\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        Self { pre: T::empty(), post: T::empty(), block_of_change: 0 }\n    }\n}\n"
    },
    "325": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/shared_mutable_values.nr",
      "source": "use crate::{\n    hash::poseidon2_hash,\n    shared_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    traits::{Hash, Packable},\n    utils::arrays,\n};\nuse std::meta::derive;\n\nmod test;\n\n/// SharedMutableValues is just a wrapper around ScheduledValueChange and ScheduledDelayChange that then allows us\n/// to wrap both of these values in WithHash. WithHash allows for efficient read of values in private.\n///\n/// Note that the WithHash optimization does not work in public (due to there being no unconstrained). But we also want\n/// to be able to read the values efficiently in public and we want to be able to read each value separately. Reading\n/// the values separately is tricky because ScheduledValueChange and ScheduledDelayChange are packed together (sdc and\n/// svc.block_of_change are stored in the same slot). For that reason we expose `unpack_value_change` and\n/// `unpack_delay_change` functions that can be used to extract the values from the packed representation. This\n/// is \"hacky\" but there is no way around it.\n#[derive(Eq)]\npub struct SharedMutableValues<T, let INITIAL_DELAY: u32> {\n    pub svc: ScheduledValueChange<T>,\n    pub sdc: ScheduledDelayChange<INITIAL_DELAY>,\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutableValues<T, INITIAL_DELAY> {\n    pub fn new(svc: ScheduledValueChange<T>, sdc: ScheduledDelayChange<INITIAL_DELAY>) -> Self {\n        SharedMutableValues { svc, sdc }\n    }\n}\n\npub fn unpack_value_change<T, let N: u32>(packed: [Field; 2 * N + 1]) -> ScheduledValueChange<T>\nwhere\n    T: Packable<N>,\n{\n    let svc_pre_packed = arrays::subarray(packed, 1);\n    let svc_post_packed = arrays::subarray(packed, N + 1);\n    ScheduledValueChange::new(\n        T::unpack(svc_pre_packed),\n        T::unpack(svc_post_packed),\n        packed[0] as u32,\n    )\n}\n\npub fn unpack_delay_change<let INITIAL_DELAY: u32>(\n    packed: Field,\n) -> ScheduledDelayChange<INITIAL_DELAY> {\n    // This function expects to be called with just the first field of the packed representation, which contains sdc\n    // and svc block_of_change. We'll discard the svc component.\n    let svc_block_of_change = packed as u32;\n\n    let mut tmp = (packed - svc_block_of_change as Field) / TWO_POW_32;\n    let sdc_block_of_change = tmp as u32;\n\n    tmp = (tmp - sdc_block_of_change as Field) / TWO_POW_32;\n    let sdc_post_is_some = tmp as bool;\n\n    tmp = (tmp - sdc_post_is_some as Field) / TWO_POW_8;\n    let sdc_post_inner = tmp as u32;\n\n    tmp = (tmp - sdc_post_inner as Field) / TWO_POW_32;\n    let sdc_pre_is_some = tmp as bool;\n\n    tmp = (tmp - sdc_pre_is_some as Field) / TWO_POW_8;\n    let sdc_pre_inner = tmp as u32;\n\n    ScheduledDelayChange {\n        pre: if sdc_pre_is_some {\n            Option::some(sdc_pre_inner)\n        } else {\n            Option::none()\n        },\n        post: if sdc_post_is_some {\n            Option::some(sdc_post_inner)\n        } else {\n            Option::none()\n        },\n        block_of_change: sdc_block_of_change,\n    }\n}\n\nglobal TWO_POW_32: Field = 2.pow_32(32);\nglobal TWO_POW_8: Field = 2.pow_32(8);\n\n// We pack to `2 * N + 1` fields because ScheduledValueChange contains T twice (hence `2 * N`) and we need one extra\n// field to store ScheduledDelayChange and the block_of_change of ScheduledValueChange.\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Packable<2 * N + 1> for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; 2 * N + 1] {\n        let mut result = [0; 2 * N + 1];\n\n        // We pack sdc.pre, sdc.post, sdc.block_of_change and svc.block_of_change into a single field as follows:\n        // [ sdc.pre_inner: u32 | sdc.pre_is_some: u8 | sdc.post_inner: u32 | sdc.post_is_some: u8 | sdc.block_of_change: u32 | svc.block_of_change: u32 ]\n        result[0] = self.svc.block_of_change as Field\n            + ((self.sdc.block_of_change as Field) * 2.pow_32(32))\n            + ((self.sdc.post.is_some() as Field) * 2.pow_32(64))\n            + ((self.sdc.post.unwrap_unchecked() as Field) * 2.pow_32(72))\n            + ((self.sdc.pre.is_some() as Field) * 2.pow_32(104))\n            + ((self.sdc.pre.unwrap_unchecked() as Field) * 2.pow_32(112));\n\n        // Pack the pre and post values from ScheduledValueChange\n        let svc_pre_packed = self.svc.pre.pack();\n        let svc_post_packed = self.svc.post.pack();\n        for i in 0..N {\n            result[i + 1] = svc_pre_packed[i];\n            result[i + 1 + N] = svc_post_packed[i];\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; 2 * N + 1]) -> Self {\n        let svc = unpack_value_change::<T, N>(fields);\n        let sdc = unpack_delay_change::<INITIAL_DELAY>(fields[0]);\n        Self::new(svc, sdc)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32, let N: u32> Hash for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn hash(self) -> Field {\n        poseidon2_hash(self.pack())\n    }\n}\n"
    },
    "328": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "346": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "347": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "363": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "364": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "366": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/home/twt/turnstile/turnstile-contracts/aztec/contracts/beacon/src/main.nr",
      "source": "mod test;\n\nuse aztec::macros::aztec;\n\n#[aztec]\npub contract Beacon {\n    use aztec::{\n        context::PublicContext,\n        event::event_interface::EventInterface,\n        macros::{events::event, functions::{initializer, private, public, utility, view}, storage::storage},\n        protocol_types::{address::AztecAddress, traits::{FromField, Serialize, ToField}},\n        state_vars::{Map, PublicMutable, SharedMutable},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n    };\n\n    use authwit::auth::assert_current_call_valid_authwit_public;\n\n    pub global CHANGE_DELAY_BLOCKS: u32 = 5;\n\n    #[storage]\n    struct Storage<Context> {\n        target: SharedMutable<AztecAddress, CHANGE_DELAY_BLOCKS, Context>,\n        overrides: Map<AztecAddress, SharedMutable<AztecAddress, CHANGE_DELAY_BLOCKS, Context>, Context>,\n        admin: PublicMutable<AztecAddress, Context>,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct TargetChangeScheduled {\n        old_target: AztecAddress,\n        new_target: AztecAddress,\n        effective_block: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct TargetOverrideChangeScheduled {\n        source: AztecAddress,\n        old_target: AztecAddress,\n        new_target: AztecAddress,\n        effective_block: Field,\n    }\n\n    #[derive(Serialize)]\n    #[event]\n    struct AdminChanged {\n        old_admin: AztecAddress,\n        new_admin: AztecAddress,\n    }\n\n    #[public]\n    #[initializer]\n    fn init(admin: AztecAddress, target: AztecAddress) {\n        _update_admin(&mut context, storage, admin);\n        _update_target(&mut context, storage, target);\n    }\n\n    #[public]\n    fn set_target(from: AztecAddress, new_target: AztecAddress, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        assert(from == storage.admin.read(), \"Only admin can set beacon target\");\n\n        _update_target(&mut context, storage, new_target);\n    }\n\n    #[public]\n    fn set_target_override(\n        from: AztecAddress,\n        source: AztecAddress,\n        target: AztecAddress,\n        nonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        assert(from == storage.admin.read(), \"Only admin can set beacon target\");\n\n        _update_target_override(&mut context, storage, source, target);\n    }\n\n    #[public]\n    fn set_admin(from: AztecAddress, new_admin: AztecAddress, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        assert(from == storage.admin.read(), \"Only admin can set admin\");\n\n        _update_admin(&mut context, storage, new_admin);\n    }\n\n    #[contract_library_method]\n    fn _update_admin(\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n        new_admin: AztecAddress,\n    ) {\n        AdminChanged { old_admin: storage.admin.read(), new_admin: new_admin }.emit(encode_event(\n            context,\n        ));\n        storage.admin.write(new_admin);\n    }\n\n    #[contract_library_method]\n    fn _update_target(\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n        new_target: AztecAddress,\n    ) {\n        TargetChangeScheduled {\n            old_target: storage.target.get_current_value(),\n            new_target: new_target,\n            effective_block: context.block_number() + CHANGE_DELAY_BLOCKS.to_field(),\n        }\n            .emit(encode_event(context));\n\n        storage.target.schedule_value_change(new_target)\n    }\n\n    #[contract_library_method]\n    fn _update_target_override(\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n        source: AztecAddress,\n        new_target: AztecAddress,\n    ) {\n        TargetOverrideChangeScheduled {\n            source: source,\n            old_target: storage.overrides.at(source).get_current_value(),\n            new_target: new_target,\n            effective_block: context.block_number() + CHANGE_DELAY_BLOCKS.to_field(),\n        }\n            .emit(encode_event(context));\n\n        storage.overrides.at(source).schedule_value_change(new_target);\n    }\n\n    #[public]\n    #[view]\n    fn get_target_public(source: AztecAddress) -> pub AztecAddress {\n        let mut target = storage.overrides.at(source).get_current_value();\n        if (target.is_zero()) {\n            target = storage.target.get_current_value();\n        }\n        target\n    }\n\n    #[private]\n    fn get_target_private(source: AztecAddress) -> pub AztecAddress {\n        let mut target = storage.overrides.at(source).get_current_value();\n        if (target.is_zero()) {\n            target = storage.target.get_current_value();\n        }\n        target\n    }\n\n    #[public]\n    #[view]\n    fn get_admin_public() -> pub AztecAddress {\n        storage.admin.read()\n    }\n\n    #[utility]\n    pub unconstrained fn get_target_unconstrained(source: AztecAddress) -> pub AztecAddress {\n        let mut target = storage.overrides.at(source).get_current_value();\n        if (target.is_zero()) {\n            target = storage.target.get_current_value();\n        }\n        storage.target.get_current_value()\n    }\n\n    #[utility]\n    pub unconstrained fn get_default_target_unconstrained() -> pub AztecAddress {\n        storage.target.get_current_value()\n    }\n\n    #[utility]\n    pub unconstrained fn get_admin_unconstrained() -> pub AztecAddress {\n        storage.admin.read()\n    }\n}\n"
    },
    "55": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "71": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "72": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "74": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "78": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "90": {
      "path": "/home/twt/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.4/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    }
  }
}
