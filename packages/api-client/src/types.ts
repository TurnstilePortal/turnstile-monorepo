/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/tokens': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all tokens
     * @description Get a paginated list of all tokens
     */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of items to return (1-1000) */
          limit?: string;
          /** @description Cursor for pagination */
          cursor?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: {
                id?: number;
                symbol: string | null;
                name: string | null;
                decimals: number | null;
                l1_address?: string;
                l2_address?: string;
                /** @enum {string|null} */
                l1_allow_list_status?: 'PROPOSED' | 'ACCEPTED' | 'REJECTED' | null;
                l1_allow_list_proposal_tx?: string | null;
                l1_allow_list_proposer?: string | null;
                l1_allow_list_approver?: string | null;
                l1_allow_list_resolution_tx?: string | null;
                l1_registration_submitter?: string | null;
                l1_registration_block?: number | null;
                l2_registration_available_block?: number | null;
                l2_registration_block?: number | null;
                l2_registration_submitter?: string | null;
                l2_registration_fee_payer?: string | null;
                l1_registration_tx?: string | null;
                l2_registration_tx?: string | null;
                l2_registration_tx_index?: number | null;
                l2_registration_log_index?: number | null;
              }[];
              pagination: {
                limit: number;
                cursor?: number;
                nextCursor?: number;
                hasMore: boolean;
              };
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tokens/{address}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get token by address
     * @description Get a token by its L1 or L2 address
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          address: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id?: number;
              symbol: string | null;
              name: string | null;
              decimals: number | null;
              l1_address?: string;
              l2_address?: string;
              /** @enum {string|null} */
              l1_allow_list_status?: 'PROPOSED' | 'ACCEPTED' | 'REJECTED' | null;
              l1_allow_list_proposal_tx?: string | null;
              l1_allow_list_proposer?: string | null;
              l1_allow_list_approver?: string | null;
              l1_allow_list_resolution_tx?: string | null;
              l1_registration_submitter?: string | null;
              l1_registration_block?: number | null;
              l2_registration_available_block?: number | null;
              l2_registration_block?: number | null;
              l2_registration_submitter?: string | null;
              l2_registration_fee_payer?: string | null;
              l1_registration_tx?: string | null;
              l2_registration_tx?: string | null;
              l2_registration_tx_index?: number | null;
              l2_registration_log_index?: number | null;
            };
          };
        };
        /** @description Default Response */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
        /** @description Default Response */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tokens/proposed': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List proposed tokens
     * @description Get a paginated list of tokens with PROPOSED status
     */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of items to return (1-1000) */
          limit?: string;
          /** @description Cursor for pagination */
          cursor?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: {
                id?: number;
                symbol: string | null;
                name: string | null;
                decimals: number | null;
                l1_address?: string;
                l2_address?: string;
                /** @enum {string|null} */
                l1_allow_list_status?: 'PROPOSED' | 'ACCEPTED' | 'REJECTED' | null;
                l1_allow_list_proposal_tx?: string | null;
                l1_allow_list_proposer?: string | null;
                l1_allow_list_approver?: string | null;
                l1_allow_list_resolution_tx?: string | null;
                l1_registration_submitter?: string | null;
                l1_registration_block?: number | null;
                l2_registration_available_block?: number | null;
                l2_registration_block?: number | null;
                l2_registration_submitter?: string | null;
                l2_registration_fee_payer?: string | null;
                l1_registration_tx?: string | null;
                l2_registration_tx?: string | null;
                l2_registration_tx_index?: number | null;
                l2_registration_log_index?: number | null;
              }[];
              pagination: {
                limit: number;
                cursor?: number;
                nextCursor?: number;
                hasMore: boolean;
              };
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tokens/rejected': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List rejected tokens
     * @description Get a paginated list of tokens with REJECTED status
     */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of items to return (1-1000) */
          limit?: string;
          /** @description Cursor for pagination */
          cursor?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: {
                id?: number;
                symbol: string | null;
                name: string | null;
                decimals: number | null;
                l1_address?: string;
                l2_address?: string;
                /** @enum {string|null} */
                l1_allow_list_status?: 'PROPOSED' | 'ACCEPTED' | 'REJECTED' | null;
                l1_allow_list_proposal_tx?: string | null;
                l1_allow_list_proposer?: string | null;
                l1_allow_list_approver?: string | null;
                l1_allow_list_resolution_tx?: string | null;
                l1_registration_submitter?: string | null;
                l1_registration_block?: number | null;
                l2_registration_available_block?: number | null;
                l2_registration_block?: number | null;
                l2_registration_submitter?: string | null;
                l2_registration_fee_payer?: string | null;
                l1_registration_tx?: string | null;
                l2_registration_tx?: string | null;
                l2_registration_tx_index?: number | null;
                l2_registration_log_index?: number | null;
              }[];
              pagination: {
                limit: number;
                cursor?: number;
                nextCursor?: number;
                hasMore: boolean;
              };
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tokens/accepted': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List accepted tokens
     * @description Get a paginated list of tokens with ACCEPTED status that are not yet fully bridged
     */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of items to return (1-1000) */
          limit?: string;
          /** @description Cursor for pagination */
          cursor?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: {
                id?: number;
                symbol: string | null;
                name: string | null;
                decimals: number | null;
                l1_address?: string;
                l2_address?: string;
                /** @enum {string|null} */
                l1_allow_list_status?: 'PROPOSED' | 'ACCEPTED' | 'REJECTED' | null;
                l1_allow_list_proposal_tx?: string | null;
                l1_allow_list_proposer?: string | null;
                l1_allow_list_approver?: string | null;
                l1_allow_list_resolution_tx?: string | null;
                l1_registration_submitter?: string | null;
                l1_registration_block?: number | null;
                l2_registration_available_block?: number | null;
                l2_registration_block?: number | null;
                l2_registration_submitter?: string | null;
                l2_registration_fee_payer?: string | null;
                l1_registration_tx?: string | null;
                l2_registration_tx?: string | null;
                l2_registration_tx_index?: number | null;
                l2_registration_log_index?: number | null;
              }[];
              pagination: {
                limit: number;
                cursor?: number;
                nextCursor?: number;
                hasMore: boolean;
              };
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tokens/bridged': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List bridged tokens
     * @description Get a paginated list of fully bridged tokens (with both L1 and L2 addresses)
     */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of items to return (1-1000) */
          limit?: string;
          /** @description Cursor for pagination */
          cursor?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: {
                id?: number;
                symbol: string | null;
                name: string | null;
                decimals: number | null;
                l1_address?: string;
                l2_address?: string;
                /** @enum {string|null} */
                l1_allow_list_status?: 'PROPOSED' | 'ACCEPTED' | 'REJECTED' | null;
                l1_allow_list_proposal_tx?: string | null;
                l1_allow_list_proposer?: string | null;
                l1_allow_list_approver?: string | null;
                l1_allow_list_resolution_tx?: string | null;
                l1_registration_submitter?: string | null;
                l1_registration_block?: number | null;
                l2_registration_available_block?: number | null;
                l2_registration_block?: number | null;
                l2_registration_submitter?: string | null;
                l2_registration_fee_payer?: string | null;
                l1_registration_tx?: string | null;
                l2_registration_tx?: string | null;
                l2_registration_tx_index?: number | null;
                l2_registration_log_index?: number | null;
              }[];
              pagination: {
                limit: number;
                cursor?: number;
                nextCursor?: number;
                hasMore: boolean;
              };
            };
          };
        };
        /** @description Default Response */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/contracts/{address}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get contract instance by address
     * @description Get a contract instance by its address, optionally including artifact data
     */
    get: {
      parameters: {
        query?: {
          /** @description Include artifact data in the response (true/false) */
          includeArtifact?: string;
        };
        header?: never;
        path: {
          address: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id?: number;
              address: string;
              original_contract_class_id: string | null;
              current_contract_class_id: string | null;
              initialization_hash: string | null;
              deployment_params: {
                constructorArtifact?: string | null;
                constructorArgs?: unknown[] | null;
                salt: string;
                publicKeys: string;
                deployer: string;
              } | null;
              version: number;
              artifact_hash?: string;
              artifact?: unknown;
              contract_class_id?: string;
            };
          };
        };
        /** @description Default Response */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
        /** @description Default Response */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/artifacts/{identifier}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get contract artifact by identifier
     * @description Get a contract artifact by contract class ID or artifact hash
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          identifier: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id?: number;
              artifact_hash: string;
              artifact: unknown;
              contract_class_id: string;
            };
          };
        };
        /** @description Default Response */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
        /** @description Default Response */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/contracts/by-class/{contractClassId}/addresses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get contract addresses for a class
     * @description Get all contract instance addresses that match the given contract class ID with configurable match scope
     */
    get: {
      parameters: {
        query?: {
          /** @description Match scope for contract instances: current (default), original, or any */
          match?: 'current' | 'original' | 'any';
        };
        header?: never;
        path: {
          contractClassId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': string[];
          };
        };
        /** @description Default Response */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
        /** @description Default Response */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              error: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
