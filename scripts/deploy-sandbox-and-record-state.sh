#!/bin/bash

# This compose file sets parameters to record the state of the sandbox after deployment
record_sandbox_state_compose_file=~/turnstile-contracts/docker/docker-compose-overrides-record-sandbox-state.yaml
# name of the data volume from the compose file
data_volume="${COMPOSE_PROJECT_NAME}_aztec-sandbox-data"
sandbox_data_tarball=~/turnstile-contracts/docker/turnstile-sandbox/sandbox-data.tar.gz
sandbox_data_json=~/turnstile-contracts/docker/turnstile-sandbox/sandbox-data.json
sandbox_env=~/turnstile-contracts/docker/turnstile-sandbox/turnstile-sandbox.env
sandbox_md=~/turnstile-contracts/docker/turnstile-sandbox/README.md

if [ -z "$TURNSTILE_DEV_CONTAINER" ]; then
  echo "This script should be run in the context of the Turnstile dev container."
  exit 1
fi

docker-compose down

export COMPOSE_FILE="$record_sandbox_state_compose_file"

# ensure any existing data volumes are removed
docker-compose down -v

# deploy sandbox + Turnstile dev contracts
if ! make sandbox ; then
  echo "Failed to deploy sandbox"
  exit 1
fi

# record the allow list address
sandbox_json=sandbox_deployment.json
l1Portal=$(jq -r .l1Portal ${sandbox_json})
allowList=$(cast call --rpc-url http://127.0.0.1:8545 $l1Portal 'allowList()' | xargs cast --parse-bytes32-address)

# shut down the sandbox to ensure state is final
docker-compose down

# tar the data volume to to $sandbox_data_tarball
docker run --rm -v "$data_volume":/data alpine tar czf - /data > "$sandbox_data_tarball"

# copy the current sandbox_deployment.json to same directory as the sandbox data tarball
cp "${sandbox_json}" "${sandbox_data_json}"

echo "Generating env file for docker-compose"
echo "# This file is autogenerated by \`just sandbox-docker\`. Do not update manually." > "${sandbox_env}"
jq -r 'to_entries | map("\(.key)=\(.value)") | .[]' "${sandbox_json}" | grep '_CONTRACT_ADDRESS' >> "${sandbox_env}"

# generate markdown file with addresses
echo "Generating sandbox deployment doc ${sandbox_md}"
cat > "${sandbox_md}" <<EOF
# Sandbox Deployment

THIS FILE IS AUTOGENERATED BY \`just sandbox-docker\`. DO NOT UPDATE MANUALLY.

## How to use

Copy the following files locally:

- [docker-compose.yaml](docker-compose.yaml)
- [turnstile-sandbox.env](turnstile-sandbox.env)

then start up the pre-initialized sandbox with:
\`\`\`bash
docker-compose up
\`\`\`

This will start the sandbox with the pre-seeded initial state. The ethereum node will
be listening on port 8545 and the Aztec PXE service will be on port 8080.

The docker-compose file defines data volumes to persist the state of the environment.
If you want to reset the Turnstile Dev sandbox back to the initial state, you can
delete the data volumes with:
\`\`\`bash
# -v flag removes the volumes
docker-compose down -v
\`\`\`

## Docker Containers

- [ghcr.io/TurnstilePortal/turnstile-sandbox-aztec](https://github.com/TurnstilePortal/turnstile-contracts/pkgs/container/turnstile-sandbox-aztec)
- [ghcr.io/TurnstilePortal/turnstile-sandbox-ethereum](https://github.com/TurnstilePortal/turnstile-contracts/pkgs/container/turnstile-sandbox-ethereum)

## Contracts

- L1 Portal: ${l1Portal}
- L1 Allow List: ${allowList}
- L2 Portal: $(jq -r '.aztecPortal' "${sandbox_json}")
- L2 DevAdvanceBlock: $(jq -r '.aztecDevAdvanceBlock' "${sandbox_json}")

### Tokens

| Symbol | Decimals | L1 Address | L2 Address |
|--------|----------|------------|------------|
EOF

jq -r '.tokens | to_entries[] | "|  \(.value.symbol) | \(.value.decimals) | \(.value.l1Address) | \(.value.l2Address) |"' "${sandbox_json}" >> "${sandbox_md}"
